
MPPT_Solar_Charge_Controller_TestBoard_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e230  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fcc  0800e3d0  0800e3d0  0001e3d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f39c  0800f39c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800f39c  0800f39c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f39c  0800f39c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f39c  0800f39c  0001f39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3a0  0800f3a0  0001f3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f3a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000798  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000097c  2000097c  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ecff  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000571e  00000000  00000000  0004ef56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017f8  00000000  00000000  00054678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000129e  00000000  00000000  00055e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028f48  00000000  00000000  0005710e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022412  00000000  00000000  00080056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e33cb  00000000  00000000  000a2468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000079a8  00000000  00000000  00185834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  0018d1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e3b8 	.word	0x0800e3b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800e3b8 	.word	0x0800e3b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <_ZN4blib6AnalogC1Ev>:

#include "Analog.h"
#include <cmath>
namespace blib
{
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 fade 	bl	8001224 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <_ZN4blib6AnalogC1Ev+0x48>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <_ZN4blib6AnalogC1Ev+0x4c>)
 8000c82:	619a      	str	r2, [r3, #24]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <_ZN4blib6AnalogC1Ev+0x50>)
 8000c88:	61da      	str	r2, [r3, #28]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	645a      	str	r2, [r3, #68]	; 0x44
    {
        sampling();
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f000 f833 	bl	8000cfc <_ZN4blib6Analog8samplingEv>
    }
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	0800ef0c 	.word	0x0800ef0c
 8000ca4:	20000258 	.word	0x20000258
 8000ca8:	200002a8 	.word	0x200002a8

08000cac <_ZN4blib6AnalogD1Ev>:

    Analog::~Analog()
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <_ZN4blib6AnalogD1Ev+0x2c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
    {
        HAL_ADC_Stop_DMA(mHadc);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 fc9e 	bl	8005600 <HAL_ADC_Stop_DMA>
    Analog::~Analog()
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fabc 	bl	8001244 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
    }
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	0800ef0c 	.word	0x0800ef0c

08000cdc <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    }
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ffe1 	bl	8000cac <_ZN4blib6AnalogD1Ev>
 8000cea:	2148      	movs	r1, #72	; 0x48
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f00a fa91 	bl	800b214 <_ZdlPvj>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6998      	ldr	r0, [r3, #24]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	2205      	movs	r2, #5
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f004 fb5a 	bl	80053c8 <HAL_ADC_Start_DMA>
    }
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_ZN4blib6Analog10readAnalogEv>:
    {
        return mTemp;
    }

    void Analog::readAnalog()
    {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	ed2d 8b02 	vpush	{d8}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
        mVin = calSolarVoltage(mAdcValues[2]);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f8b6 	bl	8000ea0 <_ZN4blib6Analog15calSolarVoltageEm>
 8000d34:	eef0 7a40 	vmov.f32	s15, s0
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	edc3 7a08 	vstr	s15, [r3, #32]
        mIin = calSolarCurrent(mAdcValues[2]);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 f8df 	bl	8000f08 <_ZN4blib6Analog15calSolarCurrentEm>
 8000d4a:	eef0 7a40 	vmov.f32	s15, s0
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        mVout = calBatteryVoltage(mAdcValues[4]);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f924 	bl	8000fa8 <_ZN4blib6Analog17calBatteryVoltageEm>
 8000d60:	eef0 7a40 	vmov.f32	s15, s0
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        mIout = calBatteryCurrent(mAdcValues[0]);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f000 f94d 	bl	8001010 <_ZN4blib6Analog17calBatteryCurrentEm>
 8000d76:	eef0 7a40 	vmov.f32	s15, s0
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        mTemp = calTemperature(mAdcValues[1]);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	4619      	mov	r1, r3
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f992 	bl	80010b0 <_ZN4blib6Analog14calTemperatureEm>
 8000d8c:	eef0 7a40 	vmov.f32	s15, s0
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

        // Power Source Detection
        if (mVin <= 3 && mVout < 3)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d9c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da8:	d80d      	bhi.n	8000dc6 <_ZN4blib6Analog10readAnalogEv+0xaa>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000db0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbc:	d503      	bpl.n	8000dc6 <_ZN4blib6Analog10readAnalogEv+0xaa>
        {
            mInputSource = PowerSrc::USB_PORT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	645a      	str	r2, [r3, #68]	; 0x44
 8000dc4:	e01c      	b.n	8000e00 <_ZN4blib6Analog10readAnalogEv+0xe4>
        }
        else if (mVin > mVout)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	ed93 7a08 	vldr	s14, [r3, #32]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	dd03      	ble.n	8000de4 <_ZN4blib6Analog10readAnalogEv+0xc8>
        {
            mInputSource = PowerSrc::SOLAR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2201      	movs	r2, #1
 8000de0:	645a      	str	r2, [r3, #68]	; 0x44
 8000de2:	e00d      	b.n	8000e00 <_ZN4blib6Analog10readAnalogEv+0xe4>
        }
        else if (mVin < mVout)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	ed93 7a08 	vldr	s14, [r3, #32]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df8:	d502      	bpl.n	8000e00 <_ZN4blib6Analog10readAnalogEv+0xe4>
        {
            mInputSource = PowerSrc::BATTERY;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	645a      	str	r2, [r3, #68]	; 0x44
        else
        {

        }

        mPin = mVin * mIin;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	ed93 7a08 	vldr	s14, [r3, #32]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        mPout = mVin * mIout;    // Cong suat ra tinh bang gia tri do duoc cua cam bien
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ed93 7a08 	vldr	s14, [r3, #32]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        mOutputDeviation = (mVout / Constant::getInstance().k_voltage_battery_max) * 100.0f;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 8000e32:	f000 fa53 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8000e36:	4603      	mov	r3, r0
 8000e38:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e3c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000e40:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000e98 <_ZN4blib6Analog10readAnalogEv+0x17c>
 8000e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

        mBatteryPercent = ((mVout - Constant::getInstance().k_voltage_battery_min)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 8000e54:	f000 fa42 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e5e:	ee38 8a67 	vsub.f32	s16, s16, s15
                / (Constant::getInstance().k_voltage_battery_max
 8000e62:	f000 fa3b 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8000e66:	4603      	mov	r3, r0
 8000e68:	edd3 8a01 	vldr	s17, [r3, #4]
                        - Constant::getInstance().k_voltage_battery_min)) * 100;
 8000e6c:	f000 fa36 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8000e70:	4603      	mov	r3, r0
 8000e72:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e76:	ee38 7ae7 	vsub.f32	s14, s17, s15
                / (Constant::getInstance().k_voltage_battery_max
 8000e7a:	eec8 7a07 	vdiv.f32	s15, s16, s14
                        - Constant::getInstance().k_voltage_battery_min)) * 100;
 8000e7e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000e98 <_ZN4blib6Analog10readAnalogEv+0x17c>
 8000e82:	ee67 7a87 	vmul.f32	s15, s15, s14
        mBatteryPercent = ((mVout - Constant::getInstance().k_voltage_battery_min)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    }
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	ecbd 8b02 	vpop	{d8}
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	42c80000 	.word	0x42c80000
 8000e9c:	00000000 	.word	0x00000000

08000ea0 <_ZN4blib6Analog15calSolarVoltageEm>:

    float Analog::calSolarVoltage(uint32_t adcValue)    // Convert adcValue -> Vin
    {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
        return Constant::getInstance().k_voltage_divider_input * ((float) adcValue / 4095) * 3.3;
 8000eaa:	f000 fa17 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	ee07 3a90 	vmov	s15, r3
 8000eb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eb8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000f00 <_ZN4blib6Analog15calSolarVoltageEm+0x60>
 8000ebc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ec0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ec8:	ee17 0a90 	vmov	r0, s15
 8000ecc:	f7ff fb44 	bl	8000558 <__aeabi_f2d>
 8000ed0:	a309      	add	r3, pc, #36	; (adr r3, 8000ef8 <_ZN4blib6Analog15calSolarVoltageEm+0x58>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f7ff fb97 	bl	8000608 <__aeabi_dmul>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f7ff fe69 	bl	8000bb8 <__aeabi_d2f>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	ee07 3a90 	vmov	s15, r3
    }
 8000eec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	66666666 	.word	0x66666666
 8000efc:	400a6666 	.word	0x400a6666
 8000f00:	457ff000 	.word	0x457ff000
 8000f04:	00000000 	.word	0x00000000

08000f08 <_ZN4blib6Analog15calSolarCurrentEm>:

    float Analog::calSolarCurrent(uint32_t adcValue)    // Convert adcValue -> Iin
    {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
        float voltage = Constant::getInstance().k_current_divider_input * ((float) adcValue / 4095)
 8000f12:	f000 f9e3 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f20:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8000fa0 <_ZN4blib6Analog15calSolarCurrentEm+0x98>
 8000f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f2c:	ee17 0a90 	vmov	r0, s15
 8000f30:	f7ff fb12 	bl	8000558 <__aeabi_f2d>
                * 3.3;
 8000f34:	a316      	add	r3, pc, #88	; (adr r3, 8000f90 <_ZN4blib6Analog15calSolarCurrentEm+0x88>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	f7ff fb65 	bl	8000608 <__aeabi_dmul>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4610      	mov	r0, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	f7ff fe37 	bl	8000bb8 <__aeabi_d2f>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	60fb      	str	r3, [r7, #12]
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff fb02 	bl	8000558 <__aeabi_f2d>
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <_ZN4blib6Analog15calSolarCurrentEm+0x9c>)
 8000f5a:	f7ff f99d 	bl	8000298 <__aeabi_dsub>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	a30c      	add	r3, pc, #48	; (adr r3, 8000f98 <_ZN4blib6Analog15calSolarCurrentEm+0x90>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff fc76 	bl	800085c <__aeabi_ddiv>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fe1e 	bl	8000bb8 <__aeabi_d2f>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60bb      	str	r3, [r7, #8]

        return current;
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	ee07 3a90 	vmov	s15, r3
    }
 8000f86:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	66666666 	.word	0x66666666
 8000f94:	400a6666 	.word	0x400a6666
 8000f98:	a0000000 	.word	0xa0000000
 8000f9c:	3fb99999 	.word	0x3fb99999
 8000fa0:	457ff000 	.word	0x457ff000
 8000fa4:	40040000 	.word	0x40040000

08000fa8 <_ZN4blib6Analog17calBatteryVoltageEm>:
    float Analog::calBatteryVoltage(uint32_t adcValue)    // Convert adcValue -> Vout
    {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
        return Constant::getInstance().k_voltage_divider_output * ((float) adcValue / 4095) * 3.3;
 8000fb2:	f000 f993 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fc0:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001008 <_ZN4blib6Analog17calBatteryVoltageEm+0x60>
 8000fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd0:	ee17 0a90 	vmov	r0, s15
 8000fd4:	f7ff fac0 	bl	8000558 <__aeabi_f2d>
 8000fd8:	a309      	add	r3, pc, #36	; (adr r3, 8001000 <_ZN4blib6Analog17calBatteryVoltageEm+0x58>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fb13 	bl	8000608 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fde5 	bl	8000bb8 <__aeabi_d2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	ee07 3a90 	vmov	s15, r3
    }
 8000ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	66666666 	.word	0x66666666
 8001004:	400a6666 	.word	0x400a6666
 8001008:	457ff000 	.word	0x457ff000
 800100c:	00000000 	.word	0x00000000

08001010 <_ZN4blib6Analog17calBatteryCurrentEm>:
    float Analog::calBatteryCurrent(uint32_t adcValue)    // Convert adcValue -> Iout
    {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
        float voltage = Constant::getInstance().k_current_divider_output * ((float) adcValue / 4095)
 800101a:	f000 f95f 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001028:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80010a8 <_ZN4blib6Analog17calBatteryCurrentEm+0x98>
 800102c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001030:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001034:	ee17 0a90 	vmov	r0, s15
 8001038:	f7ff fa8e 	bl	8000558 <__aeabi_f2d>
                * 3.3;
 800103c:	a316      	add	r3, pc, #88	; (adr r3, 8001098 <_ZN4blib6Analog17calBatteryCurrentEm+0x88>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff fae1 	bl	8000608 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fdb3 	bl	8000bb8 <__aeabi_d2f>
 8001052:	4603      	mov	r3, r0
 8001054:	60fb      	str	r3, [r7, #12]
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f7ff fa7e 	bl	8000558 <__aeabi_f2d>
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <_ZN4blib6Analog17calBatteryCurrentEm+0x9c>)
 8001062:	f7ff f919 	bl	8000298 <__aeabi_dsub>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	a30c      	add	r3, pc, #48	; (adr r3, 80010a0 <_ZN4blib6Analog17calBatteryCurrentEm+0x90>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fbf2 	bl	800085c <__aeabi_ddiv>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fd9a 	bl	8000bb8 <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	60bb      	str	r3, [r7, #8]

        return current;
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	ee07 3a90 	vmov	s15, r3
    }
 800108e:	eeb0 0a67 	vmov.f32	s0, s15
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	66666666 	.word	0x66666666
 800109c:	400a6666 	.word	0x400a6666
 80010a0:	a0000000 	.word	0xa0000000
 80010a4:	3fb99999 	.word	0x3fb99999
 80010a8:	457ff000 	.word	0x457ff000
 80010ac:	40040000 	.word	0x40040000

080010b0 <_ZN4blib6Analog14calTemperatureEm>:
    float Analog::calTemperature(uint32_t adcValue)    // Convert adcValue -> Temperature NTC 10k
    {
 80010b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b4:	b08e      	sub	sp, #56	; 0x38
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
        const double A = 0.003354016f;
 80010bc:	a352      	add	r3, pc, #328	; (adr r3, 8001208 <_ZN4blib6Analog14calTemperatureEm+0x158>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        const double B = 0.0002569850f;
 80010c6:	a34e      	add	r3, pc, #312	; (adr r3, 8001200 <_ZN4blib6Analog14calTemperatureEm+0x150>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        const double C = 0.000002620131f;
 80010d0:	a34f      	add	r3, pc, #316	; (adr r3, 8001210 <_ZN4blib6Analog14calTemperatureEm+0x160>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	e9c7 2308 	strd	r2, r3, [r7, #32]

        float voltage = ((float) adcValue / 4095) * 3.3;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001218 <_ZN4blib6Analog14calTemperatureEm+0x168>
 80010e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010ec:	ee16 0a90 	vmov	r0, s13
 80010f0:	f7ff fa32 	bl	8000558 <__aeabi_f2d>
 80010f4:	a340      	add	r3, pc, #256	; (adr r3, 80011f8 <_ZN4blib6Analog14calTemperatureEm+0x148>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff fa85 	bl	8000608 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f7ff fd57 	bl	8000bb8 <__aeabi_d2f>
 800110a:	4603      	mov	r3, r0
 800110c:	61fb      	str	r3, [r7, #28]
        float resistance = (3.3f * 10000.0f / voltage) - 10000.0f;
 800110e:	eddf 6a43 	vldr	s13, [pc, #268]	; 800121c <_ZN4blib6Analog14calTemperatureEm+0x16c>
 8001112:	ed97 7a07 	vldr	s14, [r7, #28]
 8001116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001220 <_ZN4blib6Analog14calTemperatureEm+0x170>
 800111e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001122:	edc7 7a06 	vstr	s15, [r7, #24]

        float logResistance = log(resistance);
 8001126:	69b8      	ldr	r0, [r7, #24]
 8001128:	f7ff fa16 	bl	8000558 <__aeabi_f2d>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	ec43 2b10 	vmov	d0, r2, r3
 8001134:	f00a f89c 	bl	800b270 <log>
 8001138:	ec53 2b10 	vmov	r2, r3, d0
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fd3a 	bl	8000bb8 <__aeabi_d2f>
 8001144:	4603      	mov	r3, r0
 8001146:	617b      	str	r3, [r7, #20]
        float reciprocalTemperature = A + (B * logResistance)
 8001148:	6978      	ldr	r0, [r7, #20]
 800114a:	f7ff fa05 	bl	8000558 <__aeabi_f2d>
 800114e:	a32c      	add	r3, pc, #176	; (adr r3, 8001200 <_ZN4blib6Analog14calTemperatureEm+0x150>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fa58 	bl	8000608 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	a329      	add	r3, pc, #164	; (adr r3, 8001208 <_ZN4blib6Analog14calTemperatureEm+0x158>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff f899 	bl	800029c <__adddf3>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4614      	mov	r4, r2
 8001170:	461d      	mov	r5, r3
                + (C * logResistance * logResistance * logResistance);
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff f9f0 	bl	8000558 <__aeabi_f2d>
 8001178:	a325      	add	r3, pc, #148	; (adr r3, 8001210 <_ZN4blib6Analog14calTemperatureEm+0x160>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff fa43 	bl	8000608 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4690      	mov	r8, r2
 8001188:	4699      	mov	r9, r3
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff f9e4 	bl	8000558 <__aeabi_f2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4640      	mov	r0, r8
 8001196:	4649      	mov	r1, r9
 8001198:	f7ff fa36 	bl	8000608 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4690      	mov	r8, r2
 80011a2:	4699      	mov	r9, r3
 80011a4:	6978      	ldr	r0, [r7, #20]
 80011a6:	f7ff f9d7 	bl	8000558 <__aeabi_f2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4640      	mov	r0, r8
 80011b0:	4649      	mov	r1, r9
 80011b2:	f7ff fa29 	bl	8000608 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4620      	mov	r0, r4
 80011bc:	4629      	mov	r1, r5
 80011be:	f7ff f86d 	bl	800029c <__adddf3>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
        float reciprocalTemperature = A + (B * logResistance)
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fcf5 	bl	8000bb8 <__aeabi_d2f>
 80011ce:	4603      	mov	r3, r0
 80011d0:	613b      	str	r3, [r7, #16]

        float temperature = 1.0f / reciprocalTemperature;
 80011d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80011da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011de:	edc7 7a03 	vstr	s15, [r7, #12]
        return temperature;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	ee07 3a90 	vmov	s15, r3
    }
 80011e8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ec:	3738      	adds	r7, #56	; 0x38
 80011ee:	46bd      	mov	sp, r7
 80011f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011f4:	f3af 8000 	nop.w
 80011f8:	66666666 	.word	0x66666666
 80011fc:	400a6666 	.word	0x400a6666
 8001200:	20000000 	.word	0x20000000
 8001204:	3f30d77e 	.word	0x3f30d77e
 8001208:	a0000000 	.word	0xa0000000
 800120c:	3f6b79e1 	.word	0x3f6b79e1
 8001210:	40000000 	.word	0x40000000
 8001214:	3ec5fab0 	.word	0x3ec5fab0
 8001218:	457ff000 	.word	0x457ff000
 800121c:	4700e800 	.word	0x4700e800
 8001220:	461c4000 	.word	0x461c4000

08001224 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>:
                        mInstance = nullptr;
                    }
                }

            protected:
                Singleton()
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
                {
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev+0x1c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
                }
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	0800ef1c 	.word	0x0800ef1c

08001244 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>:
                virtual ~Singleton()
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
                {
                }
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev+0x1c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	0800ef1c 	.word	0x0800ef1c

08001264 <_ZN4blib2dp9SingletonINS_6AnalogEED0Ev>:
                virtual ~Singleton()
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
                }
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ffe9 	bl	8001244 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
 8001272:	2104      	movs	r1, #4
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f009 ffcd 	bl	800b214 <_ZdlPvj>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_ZN8ConstantC1Ev>:
enum class OutputMode
{
    PSU, CHARGER, INVERTER,
};

class Constant : public blib::dp::Singleton<Constant>
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f842 	bl	8001318 <_ZN4blib2dp9SingletonI8ConstantEC1Ev>
 8001294:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <_ZN8ConstantC1Ev+0x40>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <_ZN8ConstantC1Ev+0x44>)
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <_ZN8ConstantC1Ev+0x48>)
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <_ZN8ConstantC1Ev+0x4c>)
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <_ZN8ConstantC1Ev+0x50>)
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <_ZN8ConstantC1Ev+0x54>)
 80012b6:	615a      	str	r2, [r3, #20]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	0800ef2c 	.word	0x0800ef2c
 80012c8:	41700000 	.word	0x41700000
 80012cc:	41200000 	.word	0x41200000
 80012d0:	41f00000 	.word	0x41f00000
 80012d4:	42a00000 	.word	0x42a00000
 80012d8:	42480000 	.word	0x42480000

080012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>:
                static T& getInstance()
 80012dc:	b598      	push	{r3, r4, r7, lr}
 80012de:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x38>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d111      	bne.n	800130c <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x30>
                        mInstance = new T();
 80012e8:	2018      	movs	r0, #24
 80012ea:	f009 ffa4 	bl	800b236 <_Znwj>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461c      	mov	r4, r3
 80012f2:	4622      	mov	r2, r4
 80012f4:	2300      	movs	r3, #0
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	6053      	str	r3, [r2, #4]
 80012fa:	6093      	str	r3, [r2, #8]
 80012fc:	60d3      	str	r3, [r2, #12]
 80012fe:	6113      	str	r3, [r2, #16]
 8001300:	6153      	str	r3, [r2, #20]
 8001302:	4620      	mov	r0, r4
 8001304:	f7ff ffbe 	bl	8001284 <_ZN8ConstantC1Ev>
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x38>)
 800130a:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x38>)
 800130e:	681b      	ldr	r3, [r3, #0]
                }
 8001310:	4618      	mov	r0, r3
 8001312:	bd98      	pop	{r3, r4, r7, pc}
 8001314:	20000200 	.word	0x20000200

08001318 <_ZN4blib2dp9SingletonI8ConstantEC1Ev>:
                Singleton()
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
                {
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <_ZN4blib2dp9SingletonI8ConstantEC1Ev+0x1c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	601a      	str	r2, [r3, #0]
                }
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	0800ef3c 	.word	0x0800ef3c

08001338 <_ZN4blib2dp9SingletonI8ConstantED1Ev>:
                virtual ~Singleton()
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
                }
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <_ZN4blib2dp9SingletonI8ConstantED1Ev+0x1c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	0800ef3c 	.word	0x0800ef3c

08001358 <_ZN4blib2dp9SingletonI8ConstantED0Ev>:
                virtual ~Singleton()
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
                }
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffe9 	bl	8001338 <_ZN4blib2dp9SingletonI8ConstantED1Ev>
 8001366:	2104      	movs	r1, #4
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f009 ff53 	bl	800b214 <_ZdlPvj>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_ZN8ConstantD1Ev>:
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	4a05      	ldr	r2, [pc, #20]	; (8001398 <_ZN8ConstantD1Ev+0x20>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ffd5 	bl	8001338 <_ZN4blib2dp9SingletonI8ConstantED1Ev>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0800ef2c 	.word	0x0800ef2c

0800139c <_ZN8ConstantD0Ev>:
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ffe7 	bl	8001378 <_ZN8ConstantD1Ev>
 80013aa:	2118      	movs	r1, #24
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f009 ff31 	bl	800b214 <_ZdlPvj>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_ZN4blib6Logger5printEPKc+0x2c>)
 80013c6:	681c      	ldr	r4, [r3, #0]
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7fe ff59 	bl	8000280 <strlen>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4620      	mov	r0, r4
 80013da:	f008 ff29 	bl	800a230 <HAL_UART_Transmit>
            }
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000018 	.word	0x20000018

080013ec <_ZN4blib13ChargeControlC1Ev>:
        {
            return value;    // Nếu giá trị nằm trong khoảng, trả về giá trị ban đầu
        }
    }

    ChargeControl::ChargeControl()
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fa82 	bl	8001900 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <_ZN4blib13ChargeControlC1Ev+0x5c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	725a      	strb	r2, [r3, #9]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	741a      	strb	r2, [r3, #16]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	745a      	strb	r2, [r3, #17]
    {
        mHtim = &htim2;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <_ZN4blib13ChargeControlC1Ev+0x60>)
 8001424:	605a      	str	r2, [r3, #4]
        buckDisable();
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f9a0 	bl	800176c <_ZN4blib13ChargeControl11buckDisableEv>
        mChargeState = false;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	725a      	strb	r2, [r3, #9]
        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f007 fd61 	bl	8008f00 <HAL_TIM_PWM_Start>
    }
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	0800ef4c 	.word	0x0800ef4c
 800144c:	20000340 	.word	0x20000340

08001450 <_ZN4blib13ChargeControlD1Ev>:
    ChargeControl::~ChargeControl()
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	4a05      	ldr	r2, [pc, #20]	; (8001470 <_ZN4blib13ChargeControlD1Ev+0x20>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fa5d 	bl	8001920 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
    {

    }
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	0800ef4c 	.word	0x0800ef4c

08001474 <_ZN4blib13ChargeControlD0Ev>:
    ChargeControl::~ChargeControl()
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    }
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffe7 	bl	8001450 <_ZN4blib13ChargeControlD1Ev>
 8001482:	2124      	movs	r1, #36	; 0x24
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f009 fec5 	bl	800b214 <_ZdlPvj>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_ZN4blib13ChargeControl3runEv>:
    void ChargeControl::run()
    {
 8001494:	b580      	push	{r7, lr}
 8001496:	ed2d 8b02 	vpush	{d8}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
        auto &analog = Analog::getInstance();
 80014a0:	f000 fa5e 	bl	8001960 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 80014a4:	60f8      	str	r0, [r7, #12]
        auto &devProtection = DeviceProtection::getInstance();
 80014a6:	f000 fa71 	bl	800198c <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv>
 80014aa:	60b8      	str	r0, [r7, #8]

        if (devProtection.mERR > 0 || mChargePause == true)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	dc03      	bgt.n	80014bc <_ZN4blib13ChargeControl3runEv+0x28>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7a1b      	ldrb	r3, [r3, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d103      	bne.n	80014c4 <_ZN4blib13ChargeControl3runEv+0x30>
        {
            buckDisable();
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f955 	bl	800176c <_ZN4blib13ChargeControl11buckDisableEv>

                    pwmWrite();
                }
            }
        }
    }
 80014c2:	e110      	b.n	80016e6 <_ZN4blib13ChargeControl3runEv+0x252>
                if (mMpptMode == false)    // CC-CV PSU mode : CC-CV only
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7c1b      	ldrb	r3, [r3, #16]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d14a      	bne.n	8001562 <_ZN4blib13ChargeControl3runEv+0xce>
                    if (analog.mIout > Constant::getInstance().k_current_charging_max)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	ed93 8a0b 	vldr	s16, [r3, #44]	; 0x2c
 80014d2:	f7ff ff03 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80014d6:	4603      	mov	r3, r0
 80014d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80014dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	bfcc      	ite	gt
 80014e6:	2301      	movgt	r3, #1
 80014e8:	2300      	movle	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <_ZN4blib13ChargeControl3runEv+0x68>
                        mPwm--;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	e02e      	b.n	800155a <_ZN4blib13ChargeControl3runEv+0xc6>
                    else if (analog.mVout > Constant::getInstance().k_voltage_battery_max)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 8001502:	f7ff feeb 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8001506:	4603      	mov	r3, r0
 8001508:	edd3 7a01 	vldr	s15, [r3, #4]
 800150c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	bfcc      	ite	gt
 8001516:	2301      	movgt	r3, #1
 8001518:	2300      	movle	r3, #0
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <_ZN4blib13ChargeControl3runEv+0x98>
                        mPwm--;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	1e5a      	subs	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	e016      	b.n	800155a <_ZN4blib13ChargeControl3runEv+0xc6>
                    else if (analog.mVout < Constant::getInstance().k_voltage_battery_max)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 8001532:	f7ff fed3 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8001536:	4603      	mov	r3, r0
 8001538:	edd3 7a01 	vldr	s15, [r3, #4]
 800153c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	bf4c      	ite	mi
 8001546:	2301      	movmi	r3, #1
 8001548:	2300      	movpl	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <_ZN4blib13ChargeControl3runEv+0xc6>
                        mPwm++;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	615a      	str	r2, [r3, #20]
                    pwmWrite();
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f974 	bl	8001848 <_ZN4blib13ChargeControl8pwmWriteEv>
    }
 8001560:	e0c1      	b.n	80016e6 <_ZN4blib13ChargeControl3runEv+0x252>
                    if (analog.mIout > Constant::getInstance().k_current_charging_max)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	ed93 8a0b 	vldr	s16, [r3, #44]	; 0x2c
 8001568:	f7ff feb8 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800156c:	4603      	mov	r3, r0
 800156e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001572:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	bfcc      	ite	gt
 800157c:	2301      	movgt	r3, #1
 800157e:	2300      	movle	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <_ZN4blib13ChargeControl3runEv+0xfe>
                        mPwm--;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	e0a6      	b.n	80016e0 <_ZN4blib13ChargeControl3runEv+0x24c>
                    else if (analog.mVout > Constant::getInstance().k_voltage_battery_max)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 8001598:	f7ff fea0 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800159c:	4603      	mov	r3, r0
 800159e:	edd3 7a01 	vldr	s15, [r3, #4]
 80015a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	bfcc      	ite	gt
 80015ac:	2301      	movgt	r3, #1
 80015ae:	2300      	movle	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <_ZN4blib13ChargeControl3runEv+0x12e>
                        mPwm--;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	1e5a      	subs	r2, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	615a      	str	r2, [r3, #20]
 80015c0:	e08e      	b.n	80016e0 <_ZN4blib13ChargeControl3runEv+0x24c>
                        if (analog.mPout > powerInputPrev && analog.mVin > voltageInputPrev)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80015c8:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <_ZN4blib13ChargeControl3runEv+0x260>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d6:	dd10      	ble.n	80015fa <_ZN4blib13ChargeControl3runEv+0x166>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	ed93 7a08 	vldr	s14, [r3, #32]
 80015de:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <_ZN4blib13ChargeControl3runEv+0x264>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	dd05      	ble.n	80015fa <_ZN4blib13ChargeControl3runEv+0x166>
                            mPwm--;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	615a      	str	r2, [r3, #20]
 80015f8:	e06a      	b.n	80016d0 <_ZN4blib13ChargeControl3runEv+0x23c>
                        else if (analog.mPin > powerInputPrev && analog.mVin < voltageInputPrev)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001600:	4b3c      	ldr	r3, [pc, #240]	; (80016f4 <_ZN4blib13ChargeControl3runEv+0x260>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800160a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160e:	dd10      	ble.n	8001632 <_ZN4blib13ChargeControl3runEv+0x19e>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	ed93 7a08 	vldr	s14, [r3, #32]
 8001616:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <_ZN4blib13ChargeControl3runEv+0x264>)
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	d505      	bpl.n	8001632 <_ZN4blib13ChargeControl3runEv+0x19e>
                            mPwm++;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	615a      	str	r2, [r3, #20]
 8001630:	e04e      	b.n	80016d0 <_ZN4blib13ChargeControl3runEv+0x23c>
                        else if (analog.mPin < powerInputPrev && analog.mVin > voltageInputPrev)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <_ZN4blib13ChargeControl3runEv+0x260>)
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	d510      	bpl.n	800166a <_ZN4blib13ChargeControl3runEv+0x1d6>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	ed93 7a08 	vldr	s14, [r3, #32]
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <_ZN4blib13ChargeControl3runEv+0x264>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	dd05      	ble.n	800166a <_ZN4blib13ChargeControl3runEv+0x1d6>
                            mPwm++;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	615a      	str	r2, [r3, #20]
 8001668:	e032      	b.n	80016d0 <_ZN4blib13ChargeControl3runEv+0x23c>
                        else if (analog.mPin < powerInputPrev && analog.mVin < voltageInputPrev)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <_ZN4blib13ChargeControl3runEv+0x260>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	d510      	bpl.n	80016a2 <_ZN4blib13ChargeControl3runEv+0x20e>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	ed93 7a08 	vldr	s14, [r3, #32]
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <_ZN4blib13ChargeControl3runEv+0x264>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	d505      	bpl.n	80016a2 <_ZN4blib13ChargeControl3runEv+0x20e>
                            mPwm--;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	1e5a      	subs	r2, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	e016      	b.n	80016d0 <_ZN4blib13ChargeControl3runEv+0x23c>
                        else if (analog.mVout < Constant::getInstance().k_voltage_battery_max)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 80016a8:	f7ff fe18 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80016ac:	4603      	mov	r3, r0
 80016ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80016b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	bf4c      	ite	mi
 80016bc:	2301      	movmi	r3, #1
 80016be:	2300      	movpl	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d004      	beq.n	80016d0 <_ZN4blib13ChargeControl3runEv+0x23c>
                            mPwm++;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	615a      	str	r2, [r3, #20]
                        powerInputPrev = analog.mPin;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <_ZN4blib13ChargeControl3runEv+0x260>)
 80016d6:	6013      	str	r3, [r2, #0]
                        voltageInputPrev = analog.mVin;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <_ZN4blib13ChargeControl3runEv+0x264>)
 80016de:	6013      	str	r3, [r2, #0]
                    pwmWrite();
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f8b1 	bl	8001848 <_ZN4blib13ChargeControl8pwmWriteEv>
    }
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	ecbd 8b02 	vpop	{d8}
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000204 	.word	0x20000204
 80016f8:	20000208 	.word	0x20000208

080016fc <_ZN4blib13ChargeControl13setBuckEnableEb>:

    void ChargeControl::setBuckEnable(const bool val)
    {
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
        mBuckEnable = val;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	745a      	strb	r2, [r3, #17]
    }
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <_ZN4blib13ChargeControl10buckEnableEv>:
        return mBuckEnable;
    }

    // Enable Mppt Buck converter
    void ChargeControl::buckEnable()
    {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
        LOGI();
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <_ZN4blib13ChargeControl10buckEnableEv+0x3c>)
 8001726:	2292      	movs	r2, #146	; 0x92
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <_ZN4blib13ChargeControl10buckEnableEv+0x40>)
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <_ZN4blib13ChargeControl10buckEnableEv+0x44>)
 800172c:	f000 f944 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        setBuckEnable(true);
 8001730:	2101      	movs	r1, #1
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffe2 	bl	80016fc <_ZN4blib13ChargeControl13setBuckEnableEb>
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173e:	4809      	ldr	r0, [pc, #36]	; (8001764 <_ZN4blib13ChargeControl10buckEnableEv+0x48>)
 8001740:	f005 fa22 	bl	8006b88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2101      	movs	r1, #1
 8001748:	4807      	ldr	r0, [pc, #28]	; (8001768 <_ZN4blib13ChargeControl10buckEnableEv+0x4c>)
 800174a:	f005 fa1d 	bl	8006b88 <HAL_GPIO_WritePin>
    }
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	0800e3d0 	.word	0x0800e3d0
 800175c:	0800e3dc 	.word	0x0800e3dc
 8001760:	0800e3f0 	.word	0x0800e3f0
 8001764:	48000800 	.word	0x48000800
 8001768:	48000400 	.word	0x48000400

0800176c <_ZN4blib13ChargeControl11buckDisableEv>:

    // Disable Mppt Buck converter
    void ChargeControl::buckDisable()
    {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
        LOGI();
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <_ZN4blib13ChargeControl11buckDisableEv+0x40>)
 8001776:	229b      	movs	r2, #155	; 0x9b
 8001778:	490d      	ldr	r1, [pc, #52]	; (80017b0 <_ZN4blib13ChargeControl11buckDisableEv+0x44>)
 800177a:	480e      	ldr	r0, [pc, #56]	; (80017b4 <_ZN4blib13ChargeControl11buckDisableEv+0x48>)
 800177c:	f000 f91c 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        setBuckEnable(false);
 8001780:	2100      	movs	r1, #0
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ffba 	bl	80016fc <_ZN4blib13ChargeControl13setBuckEnableEb>
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800178e:	480a      	ldr	r0, [pc, #40]	; (80017b8 <_ZN4blib13ChargeControl11buckDisableEv+0x4c>)
 8001790:	f005 f9fa 	bl	8006b88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001794:	2201      	movs	r2, #1
 8001796:	2101      	movs	r1, #1
 8001798:	4808      	ldr	r0, [pc, #32]	; (80017bc <_ZN4blib13ChargeControl11buckDisableEv+0x50>)
 800179a:	f005 f9f5 	bl	8006b88 <HAL_GPIO_WritePin>
        mPwm = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
    }
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	0800e400 	.word	0x0800e400
 80017b0:	0800e3dc 	.word	0x0800e3dc
 80017b4:	0800e3f0 	.word	0x0800e3f0
 80017b8:	48000800 	.word	0x48000800
 80017bc:	48000400 	.word	0x48000400

080017c0 <_ZN4blib13ChargeControl10predictPwmEv>:
    {
        HAL_GPIO_WritePin(INVERTER_CTRL_GPIO_Port, INVERTER_CTRL_Pin, GPIO_PIN_SET);
    }

    uint32_t ChargeControl::predictPwm()
    {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
        auto &analog = Analog::getInstance();
 80017c8:	f000 f8ca 	bl	8001960 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 80017cc:	60b8      	str	r0, [r7, #8]

        uint32_t predictPwm = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]

        if (analog.mVin <= 0.0001f)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80017d8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800183c <_ZN4blib13ChargeControl10predictPwmEv+0x7c>
 80017dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	d802      	bhi.n	80017ec <_ZN4blib13ChargeControl10predictPwmEv+0x2c>
        {
            predictPwm = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e018      	b.n	800181e <_ZN4blib13ChargeControl10predictPwmEv+0x5e>
        }
        else
        {
            // 99.5% * k_pwm_max * (Vout/Vin)
            predictPwm = (Constant::getInstance().k_predict_pwm_margin
 80017ec:	f7ff fd76 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                    * Constant::getInstance().k_pwm_max * analog.mVout) / (100.0f * analog.mVin);
 80017f0:	f7ff fd74 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017fa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001840 <_ZN4blib13ChargeControl10predictPwmEv+0x80>
 80017fe:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	edd3 7a08 	vldr	s15, [r3, #32]
 8001808:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001844 <_ZN4blib13ChargeControl10predictPwmEv+0x84>
 800180c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001810:	eec6 7a87 	vdiv.f32	s15, s13, s14
            predictPwm = (Constant::getInstance().k_predict_pwm_margin
 8001814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001818:	ee17 3a90 	vmov	r3, s15
 800181c:	60fb      	str	r3, [r7, #12]
        }

        predictPwm = constrainValue(predictPwm, (uint32_t) 0,
                Constant::getInstance().k_pwm_max_limited);
 800181e:	f7ff fd5d 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
        predictPwm = constrainValue(predictPwm, (uint32_t) 0,
 8001822:	f240 5273 	movw	r2, #1395	; 0x573
 8001826:	2100      	movs	r1, #0
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 f8eb 	bl	8001a04 <_ZN4blib14constrainValueImEET_S1_S1_S1_>
 800182e:	60f8      	str	r0, [r7, #12]

        return predictPwm;
 8001830:	68fb      	ldr	r3, [r7, #12]
    }
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	38d1b717 	.word	0x38d1b717
 8001840:	480bba40 	.word	0x480bba40
 8001844:	42c80000 	.word	0x42c80000

08001848 <_ZN4blib13ChargeControl8pwmWriteEv>:

        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
    }

    void ChargeControl::pwmWrite()
    {
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
        if (mOutputMode == OutputMode::PSU)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10d      	bne.n	8001874 <_ZN4blib13ChargeControl8pwmWriteEv+0x2c>
        {
            mPwm = constrainValue(mPwm, (uint32_t) 0, Constant::getInstance().k_pwm_max_limited);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695c      	ldr	r4, [r3, #20]
 800185c:	f7ff fd3e 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8001860:	f240 5273 	movw	r2, #1395	; 0x573
 8001864:	2100      	movs	r1, #0
 8001866:	4620      	mov	r0, r4
 8001868:	f000 f8cc 	bl	8001a04 <_ZN4blib14constrainValueImEET_S1_S1_S1_>
 800186c:	4602      	mov	r2, r0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	615a      	str	r2, [r3, #20]
 8001872:	e014      	b.n	800189e <_ZN4blib13ChargeControl8pwmWriteEv+0x56>
        }
        else if (mOutputMode == OutputMode::CHARGER)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d110      	bne.n	800189e <_ZN4blib13ChargeControl8pwmWriteEv+0x56>
        {
            // Xung pwm khong duoc nho hon gia tri floor pwm
            uint32_t pPwm = predictPwm();
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff9f 	bl	80017c0 <_ZN4blib13ChargeControl10predictPwmEv>
 8001882:	60f8      	str	r0, [r7, #12]
            mPwm = constrainValue(mPwm, pPwm, Constant::getInstance().k_pwm_max_limited);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695c      	ldr	r4, [r3, #20]
 8001888:	f7ff fd28 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800188c:	f240 5273 	movw	r2, #1395	; 0x573
 8001890:	68f9      	ldr	r1, [r7, #12]
 8001892:	4620      	mov	r0, r4
 8001894:	f000 f8b6 	bl	8001a04 <_ZN4blib14constrainValueImEET_S1_S1_S1_>
 8001898:	4602      	mov	r2, r0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	615a      	str	r2, [r3, #20]
        else
        {

        }

        buckEnable();
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ff3c 	bl	800171c <_ZN4blib13ChargeControl10buckEnableEv>

        uint32_t channel = TIM_CHANNEL_1;    // xxx: Set as Default
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]

        if (channel == TIM_CHANNEL_1)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <_ZN4blib13ChargeControl8pwmWriteEv+0x74>
        {
            mHtim->Instance->CCR1 = mPwm;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6952      	ldr	r2, [r2, #20]
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34
        }
        else if (channel == TIM_CHANNEL_4)
        {
            mHtim->Instance->CCR4 = mPwm;
        }
    }
 80018ba:	e01c      	b.n	80018f6 <_ZN4blib13ChargeControl8pwmWriteEv+0xae>
        else if (channel == TIM_CHANNEL_2)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d106      	bne.n	80018d0 <_ZN4blib13ChargeControl8pwmWriteEv+0x88>
            mHtim->Instance->CCR2 = mPwm;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6952      	ldr	r2, [r2, #20]
 80018cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80018ce:	e012      	b.n	80018f6 <_ZN4blib13ChargeControl8pwmWriteEv+0xae>
        else if (channel == TIM_CHANNEL_3)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d106      	bne.n	80018e4 <_ZN4blib13ChargeControl8pwmWriteEv+0x9c>
            mHtim->Instance->CCR3 = mPwm;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6952      	ldr	r2, [r2, #20]
 80018e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80018e2:	e008      	b.n	80018f6 <_ZN4blib13ChargeControl8pwmWriteEv+0xae>
        else if (channel == TIM_CHANNEL_4)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d105      	bne.n	80018f6 <_ZN4blib13ChargeControl8pwmWriteEv+0xae>
            mHtim->Instance->CCR4 = mPwm;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6952      	ldr	r2, [r2, #20]
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}
	...

08001900 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>:
                Singleton()
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
                {
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev+0x1c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	601a      	str	r2, [r3, #0]
                }
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	0800ef5c 	.word	0x0800ef5c

08001920 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>:
                virtual ~Singleton()
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
                }
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev+0x1c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	0800ef5c 	.word	0x0800ef5c

08001940 <_ZN4blib2dp9SingletonINS_13ChargeControlEED0Ev>:
                virtual ~Singleton()
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
                }
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ffe9 	bl	8001920 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
 800194e:	2104      	movs	r1, #4
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f009 fc5f 	bl	800b214 <_ZdlPvj>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
                static T& getInstance()
 8001960:	b598      	push	{r3, r4, r7, lr}
 8001962:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x20>
                        mInstance = new T();
 800196c:	2048      	movs	r0, #72	; 0x48
 800196e:	f009 fc62 	bl	800b236 <_Znwj>
 8001972:	4603      	mov	r3, r0
 8001974:	461c      	mov	r4, r3
 8001976:	4620      	mov	r0, r4
 8001978:	f7ff f96e 	bl	8000c58 <_ZN4blib6AnalogC1Ev>
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 800197e:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8001980:	4b01      	ldr	r3, [pc, #4]	; (8001988 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 8001982:	681b      	ldr	r3, [r3, #0]
                }
 8001984:	4618      	mov	r0, r3
 8001986:	bd98      	pop	{r3, r4, r7, pc}
 8001988:	2000020c 	.word	0x2000020c

0800198c <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv>:
                static T& getInstance()
 800198c:	b598      	push	{r3, r4, r7, lr}
 800198e:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv+0x28>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d109      	bne.n	80019ac <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv+0x20>
                        mInstance = new T();
 8001998:	201c      	movs	r0, #28
 800199a:	f009 fc4c 	bl	800b236 <_Znwj>
 800199e:	4603      	mov	r3, r0
 80019a0:	461c      	mov	r4, r3
 80019a2:	4620      	mov	r0, r4
 80019a4:	f000 f848 	bl	8001a38 <_ZN4blib16DeviceProtectionC1Ev>
 80019a8:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv+0x28>)
 80019aa:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 80019ac:	4b01      	ldr	r3, [pc, #4]	; (80019b4 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv+0x28>)
 80019ae:	681b      	ldr	r3, [r3, #0]
                }
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd98      	pop	{r3, r4, r7, pc}
 80019b4:	20000210 	.word	0x20000210

080019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
                print("[>]  ");
 80019c6:	480c      	ldr	r0, [pc, #48]	; (80019f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 80019c8:	f7ff fcf8 	bl	80013bc <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019dc:	4807      	ldr	r0, [pc, #28]	; (80019fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 80019de:	f00a fc35 	bl	800c24c <sniprintf>
                print(mBuffer);
 80019e2:	4806      	ldr	r0, [pc, #24]	; (80019fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 80019e4:	f7ff fcea 	bl	80013bc <_ZN4blib6Logger5printEPKc>
                print("\n");
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x48>)
 80019ea:	f7ff fce7 	bl	80013bc <_ZN4blib6Logger5printEPKc>
            }
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	0800e40c 	.word	0x0800e40c
 80019fc:	2000042c 	.word	0x2000042c
 8001a00:	0800e414 	.word	0x0800e414

08001a04 <_ZN4blib14constrainValueImEET_S1_S1_S1_>:
    T constrainValue(T value, T minVal, T maxVal)
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
        if (value < minVal)
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d201      	bcs.n	8001a1c <_ZN4blib14constrainValueImEET_S1_S1_S1_+0x18>
            return minVal;    // Nếu giá trị nhỏ hơn minVal, trả về minVal
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	e006      	b.n	8001a2a <_ZN4blib14constrainValueImEET_S1_S1_S1_+0x26>
        else if (value > maxVal)
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d901      	bls.n	8001a28 <_ZN4blib14constrainValueImEET_S1_S1_S1_+0x24>
            return maxVal;    // Nếu giá trị lớn hơn maxVal, trả về maxVal
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	e000      	b.n	8001a2a <_ZN4blib14constrainValueImEET_S1_S1_S1_+0x26>
            return value;    // Nếu giá trị nằm trong khoảng, trả về giá trị ban đầu
 8001a28:	68fb      	ldr	r3, [r7, #12]
    }
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <_ZN4blib16DeviceProtectionC1Ev>:
#include "Analog.h"
#include "ChargeControl.h"

namespace blib
{
    DeviceProtection::DeviceProtection()
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f84e 	bl	8001ae4 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEEC1Ev>
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <_ZN4blib16DeviceProtectionC1Ev+0x64>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	741a      	strb	r2, [r3, #16]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	745a      	strb	r2, [r3, #17]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	749a      	strb	r2, [r3, #18]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	74da      	strb	r2, [r3, #19]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	751a      	strb	r2, [r3, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	755a      	strb	r2, [r3, #21]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	759a      	strb	r2, [r3, #22]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	75da      	strb	r2, [r3, #23]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	761a      	strb	r2, [r3, #24]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	765a      	strb	r2, [r3, #25]
    {

    }
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	0800ef6c 	.word	0x0800ef6c

08001aa0 <_ZN4blib16DeviceProtectionD1Ev>:
    DeviceProtection::~DeviceProtection()
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <_ZN4blib16DeviceProtectionD1Ev+0x20>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 f827 	bl	8001b04 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEED1Ev>
    {

    }
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	0800ef6c 	.word	0x0800ef6c

08001ac4 <_ZN4blib16DeviceProtectionD0Ev>:
    DeviceProtection::~DeviceProtection()
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    }
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ffe7 	bl	8001aa0 <_ZN4blib16DeviceProtectionD1Ev>
 8001ad2:	211c      	movs	r1, #28
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f009 fb9d 	bl	800b214 <_ZdlPvj>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEEC1Ev>:
                Singleton()
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
                {
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEEC1Ev+0x1c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	601a      	str	r2, [r3, #0]
                }
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	0800ef7c 	.word	0x0800ef7c

08001b04 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEED1Ev>:
                virtual ~Singleton()
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
                }
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEED1Ev+0x1c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	0800ef7c 	.word	0x0800ef7c

08001b24 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEED0Ev>:
                virtual ~Singleton()
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
                }
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ffe9 	bl	8001b04 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEED1Ev>
 8001b32:	2104      	movs	r1, #4
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f009 fb6d 	bl	800b214 <_ZdlPvj>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>:
                static T& getInstance()
 8001b44:	b598      	push	{r3, r4, r7, lr}
 8001b46:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d109      	bne.n	8001b64 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x20>
                        mInstance = new T();
 8001b50:	2024      	movs	r0, #36	; 0x24
 8001b52:	f009 fb70 	bl	800b236 <_Znwj>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461c      	mov	r4, r3
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f7ff fc46 	bl	80013ec <_ZN4blib13ChargeControlC1Ev>
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8001b62:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8001b64:	4b01      	ldr	r3, [pc, #4]	; (8001b6c <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8001b66:	681b      	ldr	r3, [r3, #0]
                }
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd98      	pop	{r3, r4, r7, pc}
 8001b6c:	20000214 	.word	0x20000214

08001b70 <_ZN4blib13SystemManagerC1Ev>:
namespace blib
{
    class SystemManager : public dp::Singleton<SystemManager>
    {
        public:
            SystemManager()
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
            {
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fe24 	bl	80047c8 <_ZN4blib2dp9SingletonINS_13SystemManagerEEC1Ev>
 8001b80:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <_ZN4blib13SystemManagerC1Ev+0x28>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	711a      	strb	r2, [r3, #4]

            }
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	0800efac 	.word	0x0800efac

08001b9c <_ZN4blib13SystemManagerD1Ev>:
            virtual ~SystemManager()
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
            {
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_ZN4blib13SystemManagerD1Ev+0x20>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 fe1b 	bl	80047e8 <_ZN4blib2dp9SingletonINS_13SystemManagerEED1Ev>

            }
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	0800efac 	.word	0x0800efac

08001bc0 <_ZN4blib13SystemManagerD0Ev>:
            virtual ~SystemManager()
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
            }
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ffe7 	bl	8001b9c <_ZN4blib13SystemManagerD1Ev>
 8001bce:	2108      	movs	r1, #8
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f009 fb1f 	bl	800b214 <_ZdlPvj>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_ZN4blib11LcdSimulateC1Ev>:
    using Callback = void (LcdSimulate::*)();

    class LcdSimulate : public dp::Singleton<LcdSimulate>
    {
        public:
            LcdSimulate() : mLcd(Lcd::LcdType::LCD_TYPE_2004, &hi2c1, 0x27 << 1)
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fe1c 	bl	8004828 <_ZN4blib2dp9SingletonINS_11LcdSimulateEEC1Ev>
 8001bf0:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <_ZN4blib11LcdSimulateC1Ev+0x98>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f103 000c 	add.w	r0, r3, #12
 8001bfc:	234e      	movs	r3, #78	; 0x4e
 8001bfe:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <_ZN4blib11LcdSimulateC1Ev+0x9c>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	f009 f811 	bl	800ac28 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh>
            {
                mLcd.clearDisplay();
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	330c      	adds	r3, #12
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f009 f9e8 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 1, "DO AN TOT NGHIEP");
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f103 000c 	add.w	r0, r3, #12
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <_ZN4blib11LcdSimulateC1Ev+0xa0>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	f009 f8be 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 1, "NAM HOC: 2023-2024");
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f103 000c 	add.w	r0, r3, #12
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <_ZN4blib11LcdSimulateC1Ev+0xa4>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	f009 f8b6 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 1, "LOP: DTD61DH");
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f103 000c 	add.w	r0, r3, #12
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <_ZN4blib11LcdSimulateC1Ev+0xa8>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	f009 f8ae 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 1, "DAI HOC HANG HAI VN");
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f103 000c 	add.w	r0, r3, #12
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <_ZN4blib11LcdSimulateC1Ev+0xac>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2103      	movs	r1, #3
 8001c4c:	f009 f8a6 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.clearDisplay();
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	330c      	adds	r3, #12
 8001c54:	4618      	mov	r0, r3
 8001c56:	f009 f9c3 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                HAL_Delay(2000);
 8001c5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c5e:	f003 f981 	bl	8004f64 <HAL_Delay>
                mCallback = &LcdSimulate::impl_1_HomeScreen;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <_ZN4blib11LcdSimulateC1Ev+0xb0>)
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
            }
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0800ef8c 	.word	0x0800ef8c
 8001c7c:	200002ec 	.word	0x200002ec
 8001c80:	0800e418 	.word	0x0800e418
 8001c84:	0800e42c 	.word	0x0800e42c
 8001c88:	0800e440 	.word	0x0800e440
 8001c8c:	0800e450 	.word	0x0800e450
 8001c90:	08001d2d 	.word	0x08001d2d

08001c94 <_ZN4blib11LcdSimulateD1Ev>:
            virtual ~LcdSimulate()
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
            {
 8001c9c:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <_ZN4blib11LcdSimulateD1Ev+0x2c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	330c      	adds	r3, #12
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f008 ffdc 	bl	800ac64 <_ZN4blib3LcdD1Ev>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fdca 	bl	8004848 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev>

            }
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	0800ef8c 	.word	0x0800ef8c

08001cc4 <_ZN4blib11LcdSimulateD0Ev>:
            virtual ~LcdSimulate()
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
            }
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ffe1 	bl	8001c94 <_ZN4blib11LcdSimulateD1Ev>
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f009 fa9d 	bl	800b214 <_ZdlPvj>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZN4blib11LcdSimulate3runEv>:
            void run()
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
            {
                (LcdSimulate::getInstance().*mCallback)();
 8001cec:	f002 fdcc 	bl	8004888 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6892      	ldr	r2, [r2, #8]
 8001cf6:	1052      	asrs	r2, r2, #1
 8001cf8:	1899      	adds	r1, r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6892      	ldr	r2, [r2, #8]
 8001cfe:	f002 0201 	and.w	r2, r2, #1
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d102      	bne.n	8001d0c <_ZN4blib11LcdSimulate3runEv+0x28>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	e008      	b.n	8001d1e <_ZN4blib11LcdSimulate3runEv+0x3a>
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6892      	ldr	r2, [r2, #8]
 8001d10:	1052      	asrs	r2, r2, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6852      	ldr	r2, [r2, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4608      	mov	r0, r1
 8001d20:	4798      	blx	r3
            }
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv>:
            void impl_1_HomeScreen()
 8001d2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d30:	b0a2      	sub	sp, #136	; 0x88
 8001d32:	af06      	add	r7, sp, #24
 8001d34:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8001d36:	f002 fdbd 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001d3a:	66f8      	str	r0, [r7, #108]	; 0x6c
                auto &analog = Analog::getInstance();
 8001d3c:	f7ff fe10 	bl	8001960 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8001d40:	66b8      	str	r0, [r7, #104]	; 0x68

                char line0[21] = { 0 }, line1[21] = { 0 }, line2[21] = { 0 }, line3[21] = { 0 };
 8001d42:	2300      	movs	r3, #0
 8001d44:	653b      	str	r3, [r7, #80]	; 0x50
 8001d46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	741a      	strb	r2, [r3, #16]
 8001d56:	2300      	movs	r3, #0
 8001d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	741a      	strb	r2, [r3, #16]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	741a      	strb	r2, [r3, #16]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	741a      	strb	r2, [r3, #16]

                snprintf(line0, 21, "I:%2.1fV %2.1fA %2.1fW", analog.mVin, analog.mIin,
 8001d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbde 	bl	8000558 <__aeabi_f2d>
 8001d9c:	4604      	mov	r4, r0
 8001d9e:	460d      	mov	r5, r1
 8001da0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbd7 	bl	8000558 <__aeabi_f2d>
 8001daa:	4680      	mov	r8, r0
 8001dac:	4689      	mov	r9, r1
                        analog.mPin);
 8001dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                snprintf(line0, 21, "I:%2.1fV %2.1fA %2.1fW", analog.mVin, analog.mIin,
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbd0 	bl	8000558 <__aeabi_f2d>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001dc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dc4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001dc8:	e9cd 4500 	strd	r4, r5, [sp]
 8001dcc:	4a54      	ldr	r2, [pc, #336]	; (8001f20 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1f4>)
 8001dce:	2115      	movs	r1, #21
 8001dd0:	f00a fa3c 	bl	800c24c <sniprintf>
                snprintf(line1, 21, "O:%2.1fV %2.1fA %2.1fW", analog.mVout, analog.mIout,
 8001dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fbbd 	bl	8000558 <__aeabi_f2d>
 8001dde:	4604      	mov	r4, r0
 8001de0:	460d      	mov	r5, r1
 8001de2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fbb6 	bl	8000558 <__aeabi_f2d>
 8001dec:	4680      	mov	r8, r0
 8001dee:	4689      	mov	r9, r1
                        analog.mPout);
 8001df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                snprintf(line1, 21, "O:%2.1fV %2.1fA %2.1fW", analog.mVout, analog.mIout,
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fbaf 	bl	8000558 <__aeabi_f2d>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001e02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001e06:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001e0a:	e9cd 4500 	strd	r4, r5, [sp]
 8001e0e:	4a45      	ldr	r2, [pc, #276]	; (8001f24 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1f8>)
 8001e10:	2115      	movs	r1, #21
 8001e12:	f00a fa1b 	bl	800c24c <sniprintf>
                if (analog.mInputSource == PowerSrc::USB_PORT)
 8001e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d107      	bne.n	8001e2e <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x102>
                {
                    snprintf(line2, 21, "Src: USB");
 8001e1e:	f107 0320 	add.w	r3, r7, #32
 8001e22:	4a41      	ldr	r2, [pc, #260]	; (8001f28 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1fc>)
 8001e24:	2115      	movs	r1, #21
 8001e26:	4618      	mov	r0, r3
 8001e28:	f00a fa10 	bl	800c24c <sniprintf>
 8001e2c:	e01e      	b.n	8001e6c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x140>
                }
                else if (analog.mInputSource == PowerSrc::SOLAR)
 8001e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x11a>
                {
                    snprintf(line2, 21, "Src: SOLAR");
 8001e36:	f107 0320 	add.w	r3, r7, #32
 8001e3a:	4a3c      	ldr	r2, [pc, #240]	; (8001f2c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x200>)
 8001e3c:	2115      	movs	r1, #21
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f00a fa04 	bl	800c24c <sniprintf>
 8001e44:	e012      	b.n	8001e6c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x140>
                }
                else if (analog.mInputSource == PowerSrc::BATTERY)
 8001e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d10e      	bne.n	8001e6c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x140>
                {
                    snprintf(line2, 21, "Src: BAT [%.1f%%]", analog.mBatteryPercent);
 8001e4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb80 	bl	8000558 <__aeabi_f2d>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	f107 0020 	add.w	r0, r7, #32
 8001e60:	e9cd 2300 	strd	r2, r3, [sp]
 8001e64:	4a32      	ldr	r2, [pc, #200]	; (8001f30 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x204>)
 8001e66:	2115      	movs	r1, #21
 8001e68:	f00a f9f0 	bl	800c24c <sniprintf>
                }

                mLcd.clearDisplay();
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	330c      	adds	r3, #12
 8001e70:	4618      	mov	r0, r3
 8001e72:	f009 f8b5 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, line0);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f103 000c 	add.w	r0, r3, #12
 8001e7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e80:	2200      	movs	r2, #0
 8001e82:	2100      	movs	r1, #0
 8001e84:	f008 ff8a 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 0, line1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f103 000c 	add.w	r0, r3, #12
 8001e8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e92:	2200      	movs	r2, #0
 8001e94:	2101      	movs	r1, #1
 8001e96:	f008 ff81 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 0, line2);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f103 000c 	add.w	r0, r3, #12
 8001ea0:	f107 0320 	add.w	r3, r7, #32
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	f008 ff78 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 2, "Press any button");
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f103 000c 	add.w	r0, r3, #12
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x208>)
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	2103      	movs	r1, #3
 8001eb8:	f008 ff70 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                // Nhan nut bat ky thi se chuyen sang man hinh menu
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8001ebc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001ebe:	f008 fe6d 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001ec2:	4603      	mov	r3, r0
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN
                        || button.getLatestPressedButton() == Button::ButtonName::SEL
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d011      	beq.n	8001eec <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1c0>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN
 8001ec8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001eca:	f008 fe67 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d00b      	beq.n	8001eec <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1c0>
                        || button.getLatestPressedButton() == Button::ButtonName::SEL
 8001ed4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001ed6:	f008 fe61 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d005      	beq.n	8001eec <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1c0>
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001ee0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001ee2:	f008 fe5b 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d101      	bne.n	8001ef0 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1c4>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1c6>
 8001ef0:	2300      	movs	r3, #0
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00f      	beq.n	8001f16 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1ea>
                {
                    LOGI("Go to menu screen");
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x20c>)
 8001ef8:	225a      	movs	r2, #90	; 0x5a
 8001efa:	4910      	ldr	r1, [pc, #64]	; (8001f3c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x210>)
 8001efc:	4810      	ldr	r0, [pc, #64]	; (8001f40 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x214>)
 8001efe:	f7ff fd5b 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x218>)
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
                    button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001f0e:	2100      	movs	r1, #0
 8001f10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001f12:	f008 fe35 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                }
            }
 8001f16:	bf00      	nop
 8001f18:	3770      	adds	r7, #112	; 0x70
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f20:	0800e464 	.word	0x0800e464
 8001f24:	0800e47c 	.word	0x0800e47c
 8001f28:	0800e494 	.word	0x0800e494
 8001f2c:	0800e4a0 	.word	0x0800e4a0
 8001f30:	0800e4ac 	.word	0x0800e4ac
 8001f34:	0800e4c0 	.word	0x0800e4c0
 8001f38:	0800e4d4 	.word	0x0800e4d4
 8001f3c:	0800e4e8 	.word	0x0800e4e8
 8001f40:	0800e4f4 	.word	0x0800e4f4
 8001f44:	08001f49 	.word	0x08001f49

08001f48 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv>:

            void impl_2_MenuScreen()
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8001f50:	f002 fcb0 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001f54:	60f8      	str	r0, [r7, #12]

                static int arrowLine = 0;

                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f008 fe20 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	bf0c      	ite	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	2300      	movne	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00d      	beq.n	8001f88 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x40>
                {
                    if (arrowLine == 0)
 8001f6c:	4b5a      	ldr	r3, [pc, #360]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d103      	bne.n	8001f7c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x34>
                    {
                        arrowLine = 2;
 8001f74:	4b58      	ldr	r3, [pc, #352]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e076      	b.n	800206a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                    else
                    {
                        arrowLine--;
 8001f7c:	4b56      	ldr	r3, [pc, #344]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	4a55      	ldr	r2, [pc, #340]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e070      	b.n	800206a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f008 fe07 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00d      	beq.n	8001fba <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x72>
                {
                    if (arrowLine == 2)
 8001f9e:	4b4e      	ldr	r3, [pc, #312]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d103      	bne.n	8001fae <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x66>
                    {
                        arrowLine = 0;
 8001fa6:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e05d      	b.n	800206a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                    else
                    {
                        arrowLine++;
 8001fae:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	4a48      	ldr	r2, [pc, #288]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	e057      	b.n	800206a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (homescreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f008 fdee 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	bf0c      	ite	eq
 8001fc6:	2301      	moveq	r3, #1
 8001fc8:	2300      	movne	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00f      	beq.n	8001ff0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xa8>
                {
                    LOGI("Go back to homescreen");
 8001fd0:	4b42      	ldr	r3, [pc, #264]	; (80020dc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x194>)
 8001fd2:	2281      	movs	r2, #129	; 0x81
 8001fd4:	4942      	ldr	r1, [pc, #264]	; (80020e0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x198>)
 8001fd6:	4843      	ldr	r0, [pc, #268]	; (80020e4 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x19c>)
 8001fd8:	f7ff fcee 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_1_HomeScreen;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a42      	ldr	r2, [pc, #264]	; (80020e8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a0>)
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
                    arrowLine = 0;
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e03c      	b.n	800206a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                }
                // Nhan nut SEL ->  ve trang truoc (homescreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f008 fdd3 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d031      	beq.n	800206a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                {
                    // Chon DISPLAY MODE
                    if (arrowLine == 0)
 8002006:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xe0>
                    {
                        LOGI("Go to Display Menu");
 800200e:	4b33      	ldr	r3, [pc, #204]	; (80020dc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x194>)
 8002010:	228b      	movs	r2, #139	; 0x8b
 8002012:	4933      	ldr	r1, [pc, #204]	; (80020e0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x198>)
 8002014:	4835      	ldr	r0, [pc, #212]	; (80020ec <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a4>)
 8002016:	f7ff fccf 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_DisplayScroll;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a34      	ldr	r2, [pc, #208]	; (80020f0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	e020      	b.n	800206a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                    // Chon SETTING MODE
                    else if (arrowLine == 1)
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10c      	bne.n	800204a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x102>
                    {
                        LOGI("Go to Setting Menu");
 8002030:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x194>)
 8002032:	2291      	movs	r2, #145	; 0x91
 8002034:	492a      	ldr	r1, [pc, #168]	; (80020e0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x198>)
 8002036:	482f      	ldr	r0, [pc, #188]	; (80020f4 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1ac>)
 8002038:	f7ff fcbe 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_SettingScroll;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a2e      	ldr	r2, [pc, #184]	; (80020f8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b0>)
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	e00f      	b.n	800206a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                    // Chon ABOUT
                    else if (arrowLine == 2)
 800204a:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d10b      	bne.n	800206a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    {
                        LOGI("Go to About");
 8002052:	4b22      	ldr	r3, [pc, #136]	; (80020dc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x194>)
 8002054:	2297      	movs	r2, #151	; 0x97
 8002056:	4922      	ldr	r1, [pc, #136]	; (80020e0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x198>)
 8002058:	4828      	ldr	r0, [pc, #160]	; (80020fc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b4>)
 800205a:	f7ff fcad 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_AboutScreen;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a27      	ldr	r2, [pc, #156]	; (8002100 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b8>)
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
                else
                {

                }

                mLcd.clearDisplay();
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	330c      	adds	r3, #12
 800206e:	4618      	mov	r0, r3
 8002070:	f008 ffb6 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 1, "1 DISPLAY MODE");
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f103 000c 	add.w	r0, r3, #12
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1bc>)
 800207c:	2201      	movs	r2, #1
 800207e:	2100      	movs	r1, #0
 8002080:	f008 fe8c 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 1, "2 SETTING MODE");
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f103 000c 	add.w	r0, r3, #12
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c0>)
 800208c:	2201      	movs	r2, #1
 800208e:	2101      	movs	r1, #1
 8002090:	f008 fe84 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 1, "3 ABOUT");
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f103 000c 	add.w	r0, r3, #12
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c4>)
 800209c:	2201      	movs	r2, #1
 800209e:	2102      	movs	r1, #2
 80020a0:	f008 fe7c 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f103 000c 	add.w	r0, r3, #12
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	2103      	movs	r1, #3
 80020b0:	f008 fe74 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f103 000c 	add.w	r0, r3, #12
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b2d9      	uxtb	r1, r3
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1cc>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	f008 fe6a 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80020c8:	2100      	movs	r1, #0
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f008 fd58 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000218 	.word	0x20000218
 80020dc:	0800e514 	.word	0x0800e514
 80020e0:	0800e4e8 	.word	0x0800e4e8
 80020e4:	0800e528 	.word	0x0800e528
 80020e8:	08001d2d 	.word	0x08001d2d
 80020ec:	0800e54c 	.word	0x0800e54c
 80020f0:	080021b9 	.word	0x080021b9
 80020f4:	0800e56c 	.word	0x0800e56c
 80020f8:	08002565 	.word	0x08002565
 80020fc:	0800e58c 	.word	0x0800e58c
 8002100:	08002119 	.word	0x08002119
 8002104:	0800e5a8 	.word	0x0800e5a8
 8002108:	0800e5b8 	.word	0x0800e5b8
 800210c:	0800e5c8 	.word	0x0800e5c8
 8002110:	0800e5d0 	.word	0x0800e5d0
 8002114:	0800e5e8 	.word	0x0800e5e8

08002118 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv>:

            void impl_3_AboutScreen()
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002120:	f002 fbc8 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002124:	60f8      	str	r0, [r7, #12]

                mLcd.clearDisplay();
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	330c      	adds	r3, #12
 800212a:	4618      	mov	r0, r3
 800212c:	f008 ff58 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MPPT SOLAR CHARGER");
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f103 000c 	add.w	r0, r3, #12
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x8c>)
 8002138:	2200      	movs	r2, #0
 800213a:	2100      	movs	r1, #0
 800213c:	f008 fe2e 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 0, "FIRMWARE VER: 1.0.0");
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f103 000c 	add.w	r0, r3, #12
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x90>)
 8002148:	2200      	movs	r2, #0
 800214a:	2101      	movs	r1, #1
 800214c:	f008 fe26 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 0, "CONTACT:09123123123");
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f103 000c 	add.w	r0, r3, #12
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x94>)
 8002158:	2200      	movs	r2, #0
 800215a:	2102      	movs	r1, #2
 800215c:	f008 fe1e 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 15, "4BACK");
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f103 000c 	add.w	r0, r3, #12
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x98>)
 8002168:	220f      	movs	r2, #15
 800216a:	2103      	movs	r1, #3
 800216c:	f008 fe16 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f008 fd13 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002176:	4603      	mov	r3, r0
 8002178:	2b04      	cmp	r3, #4
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x7a>
                {
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x9c>)
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002192:	2100      	movs	r1, #0
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f008 fcf3 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	0800e5ec 	.word	0x0800e5ec
 80021a8:	0800e600 	.word	0x0800e600
 80021ac:	0800e614 	.word	0x0800e614
 80021b0:	0800e628 	.word	0x0800e628
 80021b4:	08001f49 	.word	0x08001f49

080021b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv>:

            void impl_3_DisplayScroll()
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b0a0      	sub	sp, #128	; 0x80
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
            {
                const int COL = 21;
 80021c0:	2315      	movs	r3, #21
 80021c2:	67fb      	str	r3, [r7, #124]	; 0x7c
                const int ROW = 5;
 80021c4:	2305      	movs	r3, #5
 80021c6:	67bb      	str	r3, [r7, #120]	; 0x78

                char list[ROW][COL] = { "", "1 DISPLAY VIEW 1", "2 DISPLAY VIEW 2",
 80021c8:	4a8e      	ldr	r2, [pc, #568]	; (8002404 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	4611      	mov	r1, r2
 80021d0:	2269      	movs	r2, #105	; 0x69
 80021d2:	4618      	mov	r0, r3
 80021d4:	f00a f985 	bl	800c4e2 <memcpy>
                        "3 DISPLAY VIEW 3", "4 DISPLAY VIEW 4" };

                static int arrowLine = 0;
                static int mIndexLine = 1;

                auto &button = Button::getInstance();
 80021d8:	f002 fb6c 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80021dc:	6778      	str	r0, [r7, #116]	; 0x74
                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 80021de:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80021e0:	f008 fcdc 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d026      	beq.n	8002242 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x8a>
                {
                    if (mIndexLine == 1)
 80021f4:	4b84      	ldr	r3, [pc, #528]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x52>
                    {
                        mIndexLine = ROW - 1;
 80021fc:	4b82      	ldr	r3, [pc, #520]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 80021fe:	2204      	movs	r2, #4
 8002200:	601a      	str	r2, [r3, #0]
                        arrowLine = 2;
 8002202:	4b82      	ldr	r3, [pc, #520]	; (800240c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 8002204:	2202      	movs	r2, #2
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e004      	b.n	8002214 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x5c>
                    }
                    else
                    {
                        mIndexLine--;
 800220a:	4b7f      	ldr	r3, [pc, #508]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	4a7d      	ldr	r2, [pc, #500]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 8002212:	6013      	str	r3, [r2, #0]
                    }

                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8002214:	4b7c      	ldr	r3, [pc, #496]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d004      	beq.n	8002226 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x6e>
 800221c:	4b7a      	ldr	r3, [pc, #488]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b03      	cmp	r3, #3
 8002222:	f040 80b0 	bne.w	8002386 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    {
                        if (arrowLine == 0)
 8002226:	4b79      	ldr	r3, [pc, #484]	; (800240c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d103      	bne.n	8002236 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x7e>
                        {
                            arrowLine = 2;
 800222e:	4b77      	ldr	r3, [pc, #476]	; (800240c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 8002230:	2202      	movs	r2, #2
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e0a7      	b.n	8002386 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                        }
                        else
                        {
                            arrowLine--;
 8002236:	4b75      	ldr	r3, [pc, #468]	; (800240c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3b01      	subs	r3, #1
 800223c:	4a73      	ldr	r2, [pc, #460]	; (800240c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e0a1      	b.n	8002386 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                        }
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002242:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002244:	f008 fcaa 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002248:	4603      	mov	r3, r0
 800224a:	2b02      	cmp	r3, #2
 800224c:	bf0c      	ite	eq
 800224e:	2301      	moveq	r3, #1
 8002250:	2300      	movne	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d025      	beq.n	80022a4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xec>
                {
                    // Dong bo > voi index
                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8002258:	4b6b      	ldr	r3, [pc, #428]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d003      	beq.n	8002268 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xb0>
 8002260:	4b69      	ldr	r3, [pc, #420]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d10c      	bne.n	8002282 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xca>
                    {
                        if (arrowLine == 2)
 8002268:	4b68      	ldr	r3, [pc, #416]	; (800240c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d103      	bne.n	8002278 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xc0>
                        {
                            arrowLine = 0;
 8002270:	4b66      	ldr	r3, [pc, #408]	; (800240c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e004      	b.n	8002282 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xca>
                        }
                        else
                        {
                            arrowLine++;
 8002278:	4b64      	ldr	r3, [pc, #400]	; (800240c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	4a63      	ldr	r2, [pc, #396]	; (800240c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 8002280:	6013      	str	r3, [r2, #0]
                        }
                    }

                    if (mIndexLine == ROW - 1)
 8002282:	4b61      	ldr	r3, [pc, #388]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d106      	bne.n	8002298 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xe0>
                    {
                        mIndexLine = 1;
 800228a:	4b5f      	ldr	r3, [pc, #380]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]
                        arrowLine = 0;
 8002290:	4b5e      	ldr	r3, [pc, #376]	; (800240c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e076      	b.n	8002386 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    }
                    else
                    {
                        mIndexLine++;
 8002298:	4b5b      	ldr	r3, [pc, #364]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a5a      	ldr	r2, [pc, #360]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e070      	b.n	8002386 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (menuscreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80022a4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80022a6:	f008 fc79 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d013      	beq.n	80022e2 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x12a>
                {
                    LOGI("Go back to Menu screen");
 80022ba:	4b55      	ldr	r3, [pc, #340]	; (8002410 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x258>)
 80022bc:	f44f 7281 	mov.w	r2, #258	; 0x102
 80022c0:	4954      	ldr	r1, [pc, #336]	; (8002414 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x25c>)
 80022c2:	4855      	ldr	r0, [pc, #340]	; (8002418 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x260>)
 80022c4:	f7ff fb78 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;    //
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a54      	ldr	r2, [pc, #336]	; (800241c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x264>)
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
                    arrowLine = 0;
 80022d4:	4b4d      	ldr	r3, [pc, #308]	; (800240c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
                    mIndexLine = 1;
 80022da:	4b4b      	ldr	r3, [pc, #300]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e051      	b.n	8002386 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                }
                // Nhan nut SEL
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80022e2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80022e4:	f008 fc5a 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d046      	beq.n	8002386 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                {
                    // Chon DISPLAY MODE
                    if (mIndexLine == 1)
 80022f8:	4b43      	ldr	r3, [pc, #268]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10d      	bne.n	800231c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x164>
                    {
                        LOGI("Go to Display Config 1");
 8002300:	4b43      	ldr	r3, [pc, #268]	; (8002410 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x258>)
 8002302:	f240 120d 	movw	r2, #269	; 0x10d
 8002306:	4943      	ldr	r1, [pc, #268]	; (8002414 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x25c>)
 8002308:	4845      	ldr	r0, [pc, #276]	; (8002420 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 800230a:	f7ff fb55 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a44      	ldr	r2, [pc, #272]	; (8002424 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	e034      	b.n	8002386 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    }
                    // Chon SETTING MODE
                    else if (mIndexLine == 2)
 800231c:	4b3a      	ldr	r3, [pc, #232]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d10d      	bne.n	8002340 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x188>
                    {
                        LOGI("Go to Display Config 2");
 8002324:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x258>)
 8002326:	f240 1213 	movw	r2, #275	; 0x113
 800232a:	493a      	ldr	r1, [pc, #232]	; (8002414 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x25c>)
 800232c:	483e      	ldr	r0, [pc, #248]	; (8002428 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x270>)
 800232e:	f7ff fb43 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a3d      	ldr	r2, [pc, #244]	; (800242c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x274>)
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	e022      	b.n	8002386 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    }
                    // Chon ABOUT
                    else if (mIndexLine == 3)
 8002340:	4b31      	ldr	r3, [pc, #196]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d10d      	bne.n	8002364 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ac>
                    {
                        LOGI("Go to Display Config 3");
 8002348:	4b31      	ldr	r3, [pc, #196]	; (8002410 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x258>)
 800234a:	f240 1219 	movw	r2, #281	; 0x119
 800234e:	4931      	ldr	r1, [pc, #196]	; (8002414 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x25c>)
 8002350:	4837      	ldr	r0, [pc, #220]	; (8002430 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x278>)
 8002352:	f7ff fb31 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig3;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a36      	ldr	r2, [pc, #216]	; (8002434 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x27c>)
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	e010      	b.n	8002386 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    }
                    else if (mIndexLine == 4)
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b04      	cmp	r3, #4
 800236a:	d10c      	bne.n	8002386 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    {
                        LOGI("Go to Display Config 4");
 800236c:	4b28      	ldr	r3, [pc, #160]	; (8002410 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x258>)
 800236e:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8002372:	4928      	ldr	r1, [pc, #160]	; (8002414 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x25c>)
 8002374:	4830      	ldr	r0, [pc, #192]	; (8002438 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x280>)
 8002376:	f7ff fb1f 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig4;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a2f      	ldr	r2, [pc, #188]	; (800243c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x284>)
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
                else
                {

                }

                mLcd.clearDisplay();
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	330c      	adds	r3, #12
 800238a:	4618      	mov	r0, r3
 800238c:	f008 fe28 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>

                if (mIndexLine == 1)
 8002390:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d153      	bne.n	8002440 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x288>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine]);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f103 000c 	add.w	r0, r3, #12
 800239e:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	f107 0108 	add.w	r1, r7, #8
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	00da      	lsls	r2, r3, #3
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	188b      	adds	r3, r1, r2
 80023b2:	2201      	movs	r2, #1
 80023b4:	2100      	movs	r1, #0
 80023b6:	f008 fcf1 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine + 1]);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f103 000c 	add.w	r0, r3, #12
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	f107 0108 	add.w	r1, r7, #8
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	00da      	lsls	r2, r3, #3
 80023d2:	1ad2      	subs	r2, r2, r3
 80023d4:	188b      	adds	r3, r1, r2
 80023d6:	2201      	movs	r2, #1
 80023d8:	2101      	movs	r1, #1
 80023da:	f008 fcdf 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 2]);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f103 000c 	add.w	r0, r3, #12
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	1c9a      	adds	r2, r3, #2
 80023ea:	f107 0108 	add.w	r1, r7, #8
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	00da      	lsls	r2, r3, #3
 80023f6:	1ad2      	subs	r2, r2, r3
 80023f8:	188b      	adds	r3, r1, r2
 80023fa:	2201      	movs	r2, #1
 80023fc:	2102      	movs	r1, #2
 80023fe:	f008 fccd 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8002402:	e08c      	b.n	800251e <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x366>
 8002404:	0800e6fc 	.word	0x0800e6fc
 8002408:	20000000 	.word	0x20000000
 800240c:	2000021c 	.word	0x2000021c
 8002410:	0800e630 	.word	0x0800e630
 8002414:	0800e4e8 	.word	0x0800e4e8
 8002418:	0800e648 	.word	0x0800e648
 800241c:	08001f49 	.word	0x08001f49
 8002420:	0800e66c 	.word	0x0800e66c
 8002424:	08002ba5 	.word	0x08002ba5
 8002428:	0800e690 	.word	0x0800e690
 800242c:	08002c05 	.word	0x08002c05
 8002430:	0800e6b4 	.word	0x0800e6b4
 8002434:	08002c65 	.word	0x08002c65
 8002438:	0800e6d8 	.word	0x0800e6d8
 800243c:	08002cc5 	.word	0x08002cc5
                }
                else if (mIndexLine == ROW - 1)
 8002440:	4b44      	ldr	r3, [pc, #272]	; (8002554 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x39c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d135      	bne.n	80024b4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2fc>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 2]);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f103 000c 	add.w	r0, r3, #12
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x39c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	1e9a      	subs	r2, r3, #2
 8002454:	f107 0108 	add.w	r1, r7, #8
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	00da      	lsls	r2, r3, #3
 8002460:	1ad2      	subs	r2, r2, r3
 8002462:	188b      	adds	r3, r1, r2
 8002464:	2201      	movs	r2, #1
 8002466:	2100      	movs	r1, #0
 8002468:	f008 fc98 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine - 1]);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f103 000c 	add.w	r0, r3, #12
 8002472:	4b38      	ldr	r3, [pc, #224]	; (8002554 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x39c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1e5a      	subs	r2, r3, #1
 8002478:	f107 0108 	add.w	r1, r7, #8
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	00da      	lsls	r2, r3, #3
 8002484:	1ad2      	subs	r2, r2, r3
 8002486:	188b      	adds	r3, r1, r2
 8002488:	2201      	movs	r2, #1
 800248a:	2101      	movs	r1, #1
 800248c:	f008 fc86 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine]);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f103 000c 	add.w	r0, r3, #12
 8002496:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x39c>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	f107 0108 	add.w	r1, r7, #8
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	00da      	lsls	r2, r3, #3
 80024a6:	1ad2      	subs	r2, r2, r3
 80024a8:	188b      	adds	r3, r1, r2
 80024aa:	2201      	movs	r2, #1
 80024ac:	2102      	movs	r1, #2
 80024ae:	f008 fc75 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 80024b2:	e034      	b.n	800251e <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x366>
                }
                else
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f103 000c 	add.w	r0, r3, #12
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x39c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	1e5a      	subs	r2, r3, #1
 80024c0:	f107 0108 	add.w	r1, r7, #8
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	00da      	lsls	r2, r3, #3
 80024cc:	1ad2      	subs	r2, r2, r3
 80024ce:	188b      	adds	r3, r1, r2
 80024d0:	2201      	movs	r2, #1
 80024d2:	2100      	movs	r1, #0
 80024d4:	f008 fc62 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine]);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f103 000c 	add.w	r0, r3, #12
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x39c>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	f107 0108 	add.w	r1, r7, #8
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	00da      	lsls	r2, r3, #3
 80024ee:	1ad2      	subs	r2, r2, r3
 80024f0:	188b      	adds	r3, r1, r2
 80024f2:	2201      	movs	r2, #1
 80024f4:	2101      	movs	r1, #1
 80024f6:	f008 fc51 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f103 000c 	add.w	r0, r3, #12
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x39c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	f107 0108 	add.w	r1, r7, #8
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	00da      	lsls	r2, r3, #3
 8002512:	1ad2      	subs	r2, r2, r3
 8002514:	188b      	adds	r3, r1, r2
 8002516:	2201      	movs	r2, #1
 8002518:	2102      	movs	r1, #2
 800251a:	f008 fc3f 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f103 000c 	add.w	r0, r3, #12
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3a0>)
 8002526:	2200      	movs	r2, #0
 8002528:	2103      	movs	r1, #3
 800252a:	f008 fc37 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f103 000c 	add.w	r0, r3, #12
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3a4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b2d9      	uxtb	r1, r3
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3a8>)
 800253c:	2200      	movs	r2, #0
 800253e:	f008 fc2d 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002542:	2100      	movs	r1, #0
 8002544:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002546:	f008 fb1b 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 800254a:	bf00      	nop
 800254c:	3780      	adds	r7, #128	; 0x80
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000000 	.word	0x20000000
 8002558:	0800e5d0 	.word	0x0800e5d0
 800255c:	2000021c 	.word	0x2000021c
 8002560:	0800e5e8 	.word	0x0800e5e8

08002564 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv>:

            void impl_3_SettingScroll()
 8002564:	b580      	push	{r7, lr}
 8002566:	b0c4      	sub	sp, #272	; 0x110
 8002568:	af00      	add	r7, sp, #0
 800256a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800256e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002572:	6018      	str	r0, [r3, #0]
            {
                // Trong che do setting thi dung sac
                ChargeControl::getInstance().mChargePause = true;
 8002574:	f7ff fae6 	bl	8001b44 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 8002578:	4603      	mov	r3, r0
 800257a:	2201      	movs	r2, #1
 800257c:	721a      	strb	r2, [r3, #8]

                const int COL = 21;
 800257e:	2315      	movs	r3, #21
 8002580:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                const int ROW = 12;
 8002584:	230c      	movs	r3, #12
 8002586:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

                char list[ROW][COL] = { "", "1 SUPPLY ALGORITHM", "2 MODE", "3 MAX BATTERY VOLT",
 800258a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800258e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002592:	4aa3      	ldr	r2, [pc, #652]	; (8002820 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2bc>)
 8002594:	4618      	mov	r0, r3
 8002596:	4611      	mov	r1, r2
 8002598:	23fc      	movs	r3, #252	; 0xfc
 800259a:	461a      	mov	r2, r3
 800259c:	f009 ffa1 	bl	800c4e2 <memcpy>
                        "7 FAN TRIGGER TEMP", "8 SHUTDOWN TEMP", "9 AUTOLOAD", "10BACKLIGHT SLEEP",
                        "11FACTORY RESET" };
                static int arrowLine = 0;
                static int mIndexLine = 1;

                auto &button = Button::getInstance();
 80025a0:	f002 f988 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80025a4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 80025a8:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80025ac:	f008 faf6 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d026      	beq.n	800260e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xaa>
                    /*
                     Feature: Dong bo giua index va mui ten '>'
                     - Mui ten phu thuoc vao index.
                     - Moi lan, chi hien thi 3 tuy chon, nen index va mui ten phai dong bo voi nhau
                     */
                    if (mIndexLine == 1)
 80025c0:	4b98      	ldr	r3, [pc, #608]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d106      	bne.n	80025d6 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x72>
                    {
                        mIndexLine = ROW - 1;
 80025c8:	4b96      	ldr	r3, [pc, #600]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80025ca:	220b      	movs	r2, #11
 80025cc:	601a      	str	r2, [r3, #0]
                        arrowLine = 2;
 80025ce:	4b96      	ldr	r3, [pc, #600]	; (8002828 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 80025d0:	2202      	movs	r2, #2
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e004      	b.n	80025e0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7c>
                    }
                    else
                    {
                        mIndexLine--;
 80025d6:	4b93      	ldr	r3, [pc, #588]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3b01      	subs	r3, #1
 80025dc:	4a91      	ldr	r2, [pc, #580]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80025de:	6013      	str	r3, [r2, #0]
                    }

                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 80025e0:	4b90      	ldr	r3, [pc, #576]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d004      	beq.n	80025f2 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x8e>
 80025e8:	4b8e      	ldr	r3, [pc, #568]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b0a      	cmp	r3, #10
 80025ee:	f040 81be 	bne.w	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    {
                        if (arrowLine == 0)
 80025f2:	4b8d      	ldr	r3, [pc, #564]	; (8002828 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d103      	bne.n	8002602 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x9e>
                        {
                            arrowLine = 2;
 80025fa:	4b8b      	ldr	r3, [pc, #556]	; (8002828 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 80025fc:	2202      	movs	r2, #2
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e1b5      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                        }
                        else
                        {
                            arrowLine--;
 8002602:	4b89      	ldr	r3, [pc, #548]	; (8002828 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3b01      	subs	r3, #1
 8002608:	4a87      	ldr	r2, [pc, #540]	; (8002828 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	e1af      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                        }
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 800260e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002612:	f008 fac3 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002616:	4603      	mov	r3, r0
 8002618:	2b02      	cmp	r3, #2
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d025      	beq.n	8002672 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x10e>
                {
                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8002626:	4b7f      	ldr	r3, [pc, #508]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d003      	beq.n	8002636 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xd2>
 800262e:	4b7d      	ldr	r3, [pc, #500]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b0a      	cmp	r3, #10
 8002634:	d10c      	bne.n	8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xec>
                    {
                        if (arrowLine == 2)
 8002636:	4b7c      	ldr	r3, [pc, #496]	; (8002828 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d103      	bne.n	8002646 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xe2>
                        {
                            arrowLine = 0;
 800263e:	4b7a      	ldr	r3, [pc, #488]	; (8002828 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e004      	b.n	8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xec>
                        }
                        else
                        {
                            arrowLine++;
 8002646:	4b78      	ldr	r3, [pc, #480]	; (8002828 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	4a76      	ldr	r2, [pc, #472]	; (8002828 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 800264e:	6013      	str	r3, [r2, #0]
                        }
                    }

                    if (mIndexLine == ROW - 1)
 8002650:	4b74      	ldr	r3, [pc, #464]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b0b      	cmp	r3, #11
 8002656:	d106      	bne.n	8002666 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x102>
                    {
                        mIndexLine = 1;
 8002658:	4b72      	ldr	r3, [pc, #456]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]
                        arrowLine = 0;
 800265e:	4b72      	ldr	r3, [pc, #456]	; (8002828 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e183      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else
                    {
                        mIndexLine++;
 8002666:	4b6f      	ldr	r3, [pc, #444]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	4a6d      	ldr	r2, [pc, #436]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	e17d      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (menuscreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002672:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002676:	f008 fa91 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 800267a:	4603      	mov	r3, r0
 800267c:	2b04      	cmp	r3, #4
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d020      	beq.n	80026cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x168>
                {
                    LOGI("Go back to Menu screen");
 800268a:	4b68      	ldr	r3, [pc, #416]	; (800282c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 800268c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002690:	4967      	ldr	r1, [pc, #412]	; (8002830 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 8002692:	4868      	ldr	r0, [pc, #416]	; (8002834 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2d0>)
 8002694:	f7ff f990 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;    //
 8002698:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800269c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a65      	ldr	r2, [pc, #404]	; (8002838 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2d4>)
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
                    arrowLine = 0;
 80026b4:	4b5c      	ldr	r3, [pc, #368]	; (8002828 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
                    mIndexLine = 1;
 80026ba:	4b5a      	ldr	r3, [pc, #360]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

                    // Thoat che do setting thi tiep tuc sac
                    ChargeControl::getInstance().mChargePause = false;
 80026c0:	f7ff fa40 	bl	8001b44 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2200      	movs	r2, #0
 80026c8:	721a      	strb	r2, [r3, #8]
 80026ca:	e150      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                }
                // Nhan nut SEL
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80026cc:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80026d0:	f008 fa64 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8144 	beq.w	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                {
                    // Chon DISPLAY MODE
                    if (mIndexLine == 1)
 80026e6:	4b4f      	ldr	r3, [pc, #316]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d115      	bne.n	800271a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x1b6>
                    {
                        LOGI("Go to Supply Algorithm");
 80026ee:	4b4f      	ldr	r3, [pc, #316]	; (800282c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 80026f0:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80026f4:	494e      	ldr	r1, [pc, #312]	; (8002830 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 80026f6:	4851      	ldr	r0, [pc, #324]	; (800283c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2d8>)
 80026f8:	f7ff f95e 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_SupplyAlgorithm;
 80026fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002700:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a4e      	ldr	r2, [pc, #312]	; (8002840 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2dc>)
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800270e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	e129      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    // Chon SETTING MODE
                    else if (mIndexLine == 2)
 800271a:	4b42      	ldr	r3, [pc, #264]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d115      	bne.n	800274e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x1ea>
                    {
                        LOGI("Go to Charge mode");
 8002722:	4b42      	ldr	r3, [pc, #264]	; (800282c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 8002724:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8002728:	4941      	ldr	r1, [pc, #260]	; (8002830 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 800272a:	4846      	ldr	r0, [pc, #280]	; (8002844 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2e0>)
 800272c:	f7ff f944 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ChargeMode;
 8002730:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002734:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a43      	ldr	r2, [pc, #268]	; (8002848 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2e4>)
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002742:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	e10f      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    // Chon ABOUT
                    else if (mIndexLine == 3)
 800274e:	4b35      	ldr	r3, [pc, #212]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d115      	bne.n	8002782 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x21e>
                    {
                        LOGI("Go to Max battery voltage");
 8002756:	4b35      	ldr	r3, [pc, #212]	; (800282c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 8002758:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800275c:	4934      	ldr	r1, [pc, #208]	; (8002830 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 800275e:	483b      	ldr	r0, [pc, #236]	; (800284c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2e8>)
 8002760:	f7ff f92a 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_MaxBatteryVolt;
 8002764:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002768:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a38      	ldr	r2, [pc, #224]	; (8002850 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ec>)
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002776:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	e0f5      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 4)
 8002782:	4b28      	ldr	r3, [pc, #160]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b04      	cmp	r3, #4
 8002788:	d115      	bne.n	80027b6 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x252>
                    {
                        LOGI("Go to Min battery voltage");
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 800278c:	f240 12af 	movw	r2, #431	; 0x1af
 8002790:	4927      	ldr	r1, [pc, #156]	; (8002830 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 8002792:	4830      	ldr	r0, [pc, #192]	; (8002854 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2f0>)
 8002794:	f7ff f910 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_MinBatteryVolt;
 8002798:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800279c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a2d      	ldr	r2, [pc, #180]	; (8002858 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2f4>)
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	e0db      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 5)
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d115      	bne.n	80027ea <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x286>
                    {
                        LOGI("Go to Charging current");
 80027be:	4b1b      	ldr	r3, [pc, #108]	; (800282c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 80027c0:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80027c4:	491a      	ldr	r1, [pc, #104]	; (8002830 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 80027c6:	4825      	ldr	r0, [pc, #148]	; (800285c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2f8>)
 80027c8:	f7ff f8f6 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ChargingCurrent;
 80027cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a22      	ldr	r2, [pc, #136]	; (8002860 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2fc>)
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	e0c1      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 6)
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b06      	cmp	r3, #6
 80027f0:	d13c      	bne.n	800286c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x308>
                    {
                        LOGI("Go to Cooling fan");
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 80027f4:	f240 12b9 	movw	r2, #441	; 0x1b9
 80027f8:	490d      	ldr	r1, [pc, #52]	; (8002830 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 80027fa:	481a      	ldr	r0, [pc, #104]	; (8002864 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x300>)
 80027fc:	f7ff f8dc 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_CoolingFan;
 8002800:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002804:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a17      	ldr	r2, [pc, #92]	; (8002868 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x304>)
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002812:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	e0a7      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
 800281e:	bf00      	nop
 8002820:	0800e908 	.word	0x0800e908
 8002824:	20000004 	.word	0x20000004
 8002828:	20000220 	.word	0x20000220
 800282c:	0800e768 	.word	0x0800e768
 8002830:	0800e4e8 	.word	0x0800e4e8
 8002834:	0800e648 	.word	0x0800e648
 8002838:	08001f49 	.word	0x08001f49
 800283c:	0800e780 	.word	0x0800e780
 8002840:	08002d25 	.word	0x08002d25
 8002844:	0800e7a4 	.word	0x0800e7a4
 8002848:	08002ef9 	.word	0x08002ef9
 800284c:	0800e7c4 	.word	0x0800e7c4
 8002850:	08003145 	.word	0x08003145
 8002854:	0800e7ec 	.word	0x0800e7ec
 8002858:	0800336d 	.word	0x0800336d
 800285c:	0800e814 	.word	0x0800e814
 8002860:	08003595 	.word	0x08003595
 8002864:	0800e838 	.word	0x0800e838
 8002868:	080037bd 	.word	0x080037bd
                    }
                    else if (mIndexLine == 7)
 800286c:	4bbd      	ldr	r3, [pc, #756]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b07      	cmp	r3, #7
 8002872:	d115      	bne.n	80028a0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>
                    {
                        LOGI("Go to Fan trigger temp");
 8002874:	4bbc      	ldr	r3, [pc, #752]	; (8002b68 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x604>)
 8002876:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800287a:	49bc      	ldr	r1, [pc, #752]	; (8002b6c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x608>)
 800287c:	48bc      	ldr	r0, [pc, #752]	; (8002b70 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x60c>)
 800287e:	f7ff f89b 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_FanTriggerTemp;
 8002882:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002886:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4ab9      	ldr	r2, [pc, #740]	; (8002b74 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x610>)
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002894:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	e066      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 8)
 80028a0:	4bb0      	ldr	r3, [pc, #704]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d115      	bne.n	80028d4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x370>
                    {
                        LOGI("Go to Shutdown temp");
 80028a8:	4baf      	ldr	r3, [pc, #700]	; (8002b68 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x604>)
 80028aa:	f240 12c3 	movw	r2, #451	; 0x1c3
 80028ae:	49af      	ldr	r1, [pc, #700]	; (8002b6c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x608>)
 80028b0:	48b1      	ldr	r0, [pc, #708]	; (8002b78 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x614>)
 80028b2:	f7ff f881 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ShutdownTemp;
 80028b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4aae      	ldr	r2, [pc, #696]	; (8002b7c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	e04c      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 9)
 80028d4:	4ba3      	ldr	r3, [pc, #652]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b09      	cmp	r3, #9
 80028da:	d115      	bne.n	8002908 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x3a4>
                    {
                        LOGI("Go to Autoload config");
 80028dc:	4ba2      	ldr	r3, [pc, #648]	; (8002b68 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x604>)
 80028de:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 80028e2:	49a2      	ldr	r1, [pc, #648]	; (8002b6c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x608>)
 80028e4:	48a6      	ldr	r0, [pc, #664]	; (8002b80 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x61c>)
 80028e6:	f7ff f867 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_AutoloadCfg;
 80028ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4aa3      	ldr	r2, [pc, #652]	; (8002b84 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x620>)
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	e032      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 10)
 8002908:	4b96      	ldr	r3, [pc, #600]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b0a      	cmp	r3, #10
 800290e:	d115      	bne.n	800293c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x3d8>
                    {
                        LOGI("Go to Backlight");
 8002910:	4b95      	ldr	r3, [pc, #596]	; (8002b68 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x604>)
 8002912:	f240 12cd 	movw	r2, #461	; 0x1cd
 8002916:	4995      	ldr	r1, [pc, #596]	; (8002b6c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x608>)
 8002918:	489b      	ldr	r0, [pc, #620]	; (8002b88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x624>)
 800291a:	f7ff f84d 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_Backlight;
 800291e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002922:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a98      	ldr	r2, [pc, #608]	; (8002b8c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x628>)
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002930:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	e018      	b.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 11)
 800293c:	4b89      	ldr	r3, [pc, #548]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b0b      	cmp	r3, #11
 8002942:	d114      	bne.n	800296e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    {
                        LOGI("Go to Factory reset");
 8002944:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x604>)
 8002946:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 800294a:	4988      	ldr	r1, [pc, #544]	; (8002b6c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x608>)
 800294c:	4890      	ldr	r0, [pc, #576]	; (8002b90 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x62c>)
 800294e:	f7ff f833 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_FactoryReset;
 8002952:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002956:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a8d      	ldr	r2, [pc, #564]	; (8002b94 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x630>)
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002964:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
                else
                {

                }

                mLcd.clearDisplay();
 800296e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002972:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	330c      	adds	r3, #12
 800297a:	4618      	mov	r0, r3
 800297c:	f008 fb30 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                if (mIndexLine == 1)
 8002980:	4b78      	ldr	r3, [pc, #480]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d141      	bne.n	8002a0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x4a8>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine]);
 8002988:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800298c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f103 000c 	add.w	r0, r3, #12
 8002996:	4b73      	ldr	r3, [pc, #460]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	f107 0108 	add.w	r1, r7, #8
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	00da      	lsls	r2, r3, #3
 80029a6:	1ad2      	subs	r2, r2, r3
 80029a8:	188b      	adds	r3, r1, r2
 80029aa:	2201      	movs	r2, #1
 80029ac:	2100      	movs	r1, #0
 80029ae:	f008 f9f5 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine + 1]);
 80029b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f103 000c 	add.w	r0, r3, #12
 80029c0:	4b68      	ldr	r3, [pc, #416]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	f107 0108 	add.w	r1, r7, #8
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	00da      	lsls	r2, r3, #3
 80029d2:	1ad2      	subs	r2, r2, r3
 80029d4:	188b      	adds	r3, r1, r2
 80029d6:	2201      	movs	r2, #1
 80029d8:	2101      	movs	r1, #1
 80029da:	f008 f9df 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 2]);
 80029de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f103 000c 	add.w	r0, r3, #12
 80029ec:	4b5d      	ldr	r3, [pc, #372]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	1c9a      	adds	r2, r3, #2
 80029f2:	f107 0108 	add.w	r1, r7, #8
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	00da      	lsls	r2, r3, #3
 80029fe:	1ad2      	subs	r2, r2, r3
 8002a00:	188b      	adds	r3, r1, r2
 8002a02:	2201      	movs	r2, #1
 8002a04:	2102      	movs	r1, #2
 8002a06:	f008 f9c9 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8002a0a:	e086      	b.n	8002b1a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5b6>
                }
                else if (mIndexLine == ROW - 1)
 8002a0c:	4b55      	ldr	r3, [pc, #340]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b0b      	cmp	r3, #11
 8002a12:	d141      	bne.n	8002a98 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x534>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 2]);
 8002a14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f103 000c 	add.w	r0, r3, #12
 8002a22:	4b50      	ldr	r3, [pc, #320]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	1e9a      	subs	r2, r3, #2
 8002a28:	f107 0108 	add.w	r1, r7, #8
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	00da      	lsls	r2, r3, #3
 8002a34:	1ad2      	subs	r2, r2, r3
 8002a36:	188b      	adds	r3, r1, r2
 8002a38:	2201      	movs	r2, #1
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	f008 f9ae 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine - 1]);
 8002a40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f103 000c 	add.w	r0, r3, #12
 8002a4e:	4b45      	ldr	r3, [pc, #276]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	1e5a      	subs	r2, r3, #1
 8002a54:	f107 0108 	add.w	r1, r7, #8
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00da      	lsls	r2, r3, #3
 8002a60:	1ad2      	subs	r2, r2, r3
 8002a62:	188b      	adds	r3, r1, r2
 8002a64:	2201      	movs	r2, #1
 8002a66:	2101      	movs	r1, #1
 8002a68:	f008 f998 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine]);
 8002a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f103 000c 	add.w	r0, r3, #12
 8002a7a:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	f107 0108 	add.w	r1, r7, #8
 8002a82:	4613      	mov	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4413      	add	r3, r2
 8002a88:	00da      	lsls	r2, r3, #3
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	188b      	adds	r3, r1, r2
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2102      	movs	r1, #2
 8002a92:	f008 f983 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8002a96:	e040      	b.n	8002b1a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5b6>
                }
                else
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
 8002a98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f103 000c 	add.w	r0, r3, #12
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	1e5a      	subs	r2, r3, #1
 8002aac:	f107 0108 	add.w	r1, r7, #8
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00da      	lsls	r2, r3, #3
 8002ab8:	1ad2      	subs	r2, r2, r3
 8002aba:	188b      	adds	r3, r1, r2
 8002abc:	2201      	movs	r2, #1
 8002abe:	2100      	movs	r1, #0
 8002ac0:	f008 f96c 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine]);
 8002ac4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ac8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f103 000c 	add.w	r0, r3, #12
 8002ad2:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f107 0108 	add.w	r1, r7, #8
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	00da      	lsls	r2, r3, #3
 8002ae2:	1ad2      	subs	r2, r2, r3
 8002ae4:	188b      	adds	r3, r1, r2
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2101      	movs	r1, #1
 8002aea:	f008 f957 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 8002aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002af2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f103 000c 	add.w	r0, r3, #12
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	f107 0108 	add.w	r1, r7, #8
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	00da      	lsls	r2, r3, #3
 8002b0e:	1ad2      	subs	r2, r2, r3
 8002b10:	188b      	adds	r3, r1, r2
 8002b12:	2201      	movs	r2, #1
 8002b14:	2102      	movs	r1, #2
 8002b16:	f008 f941 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 8002b1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f103 000c 	add.w	r0, r3, #12
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x634>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2103      	movs	r1, #3
 8002b2e:	f008 f935 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 8002b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f103 000c 	add.w	r0, r3, #12
 8002b40:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x638>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b2d9      	uxtb	r1, r3
 8002b46:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x63c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f008 f927 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002b4e:	2100      	movs	r1, #0
 8002b50:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002b54:	f008 f814 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002b58:	bf00      	nop
 8002b5a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000004 	.word	0x20000004
 8002b68:	0800e768 	.word	0x0800e768
 8002b6c:	0800e4e8 	.word	0x0800e4e8
 8002b70:	0800e858 	.word	0x0800e858
 8002b74:	08003981 	.word	0x08003981
 8002b78:	0800e87c 	.word	0x0800e87c
 8002b7c:	08003ba1 	.word	0x08003ba1
 8002b80:	0800e8a0 	.word	0x0800e8a0
 8002b84:	08003dc1 	.word	0x08003dc1
 8002b88:	0800e8c4 	.word	0x0800e8c4
 8002b8c:	08003e21 	.word	0x08003e21
 8002b90:	0800e8e4 	.word	0x0800e8e4
 8002b94:	08003f6d 	.word	0x08003f6d
 8002b98:	0800e5d0 	.word	0x0800e5d0
 8002b9c:	20000220 	.word	0x20000220
 8002ba0:	0800e5e8 	.word	0x0800e5e8

08002ba4 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev>:

            void impl_3_1_DisplayConfig1()
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
//                //mLcd.clearDisplay();
//                mLcd.displayLine(0, 0, line0);
//                mLcd.displayLine(1, 0, line1);
//                mLcd.displayLine(2, 0, line2);
//                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
                auto &button = Button::getInstance();
 8002bac:	f001 fe82 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002bb0:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f007 fff2 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf0c      	ite	eq
 8002bbe:	2301      	moveq	r3, #1
 8002bc0:	2300      	movne	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00c      	beq.n	8002be2 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x50>)
 8002bca:	f240 2213 	movw	r2, #531	; 0x213
 8002bce:	490a      	ldr	r1, [pc, #40]	; (8002bf8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x54>)
 8002bd0:	480a      	ldr	r0, [pc, #40]	; (8002bfc <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x58>)
 8002bd2:	f7fe fef1 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a09      	ldr	r2, [pc, #36]	; (8002c00 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x5c>)
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002be2:	2100      	movs	r1, #0
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f007 ffcb 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	0800ea04 	.word	0x0800ea04
 8002bf8:	0800e4e8 	.word	0x0800e4e8
 8002bfc:	0800ea1c 	.word	0x0800ea1c
 8002c00:	080021b9 	.word	0x080021b9

08002c04 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev>:

            void impl_3_1_DisplayConfig2()
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
//                //mLcd.clearDisplay();
//                mLcd.displayLine(0, 0, line0);
//                mLcd.displayLine(1, 0, line1);
//                mLcd.displayLine(2, 0, line2);
//                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
                auto &button = Button::getInstance();
 8002c0c:	f001 fe52 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002c10:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f007 ffc2 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00c      	beq.n	8002c42 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x50>)
 8002c2a:	f44f 720a 	mov.w	r2, #552	; 0x228
 8002c2e:	490a      	ldr	r1, [pc, #40]	; (8002c58 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x54>)
 8002c30:	480a      	ldr	r0, [pc, #40]	; (8002c5c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x58>)
 8002c32:	f7fe fec1 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x5c>)
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002c42:	2100      	movs	r1, #0
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f007 ff9b 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	0800ea44 	.word	0x0800ea44
 8002c58:	0800e4e8 	.word	0x0800e4e8
 8002c5c:	0800ea1c 	.word	0x0800ea1c
 8002c60:	080021b9 	.word	0x080021b9

08002c64 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev>:

            void impl_3_1_DisplayConfig3()
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002c6c:	f001 fe22 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002c70:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f007 ff92 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	bf0c      	ite	eq
 8002c7e:	2301      	moveq	r3, #1
 8002c80:	2300      	movne	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x50>)
 8002c8a:	f240 2233 	movw	r2, #563	; 0x233
 8002c8e:	490a      	ldr	r1, [pc, #40]	; (8002cb8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x54>)
 8002c90:	480a      	ldr	r0, [pc, #40]	; (8002cbc <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x58>)
 8002c92:	f7fe fe91 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x5c>)
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f007 ff6b 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	0800ea5c 	.word	0x0800ea5c
 8002cb8:	0800e4e8 	.word	0x0800e4e8
 8002cbc:	0800ea1c 	.word	0x0800ea1c
 8002cc0:	080021b9 	.word	0x080021b9

08002cc4 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev>:

            void impl_3_1_DisplayConfig4()
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
//                //mLcd.clearDisplay();
//                mLcd.displayLine(0, 0, line0);
//                mLcd.displayLine(1, 0, line1);
//                mLcd.displayLine(2, 0, line2);
//                mLcd.displayLine(3, 15, "4BACK");
                auto &button = Button::getInstance();
 8002ccc:	f001 fdf2 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002cd0:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f007 ff62 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00c      	beq.n	8002d02 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x50>)
 8002cea:	f240 2249 	movw	r2, #585	; 0x249
 8002cee:	490a      	ldr	r1, [pc, #40]	; (8002d18 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x54>)
 8002cf0:	480a      	ldr	r0, [pc, #40]	; (8002d1c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x58>)
 8002cf2:	f7fe fe61 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a09      	ldr	r2, [pc, #36]	; (8002d20 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x5c>)
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002d02:	2100      	movs	r1, #0
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f007 ff3b 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	0800ea74 	.word	0x0800ea74
 8002d18:	0800e4e8 	.word	0x0800e4e8
 8002d1c:	0800ea1c 	.word	0x0800ea1c
 8002d20:	080021b9 	.word	0x080021b9

08002d24 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv>:

            void impl_3_2_SupplyAlgorithm()
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002d2c:	f001 fdc2 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002d30:	60f8      	str	r0, [r7, #12]
                auto &chargeCtrl = ChargeControl::getInstance();
 8002d32:	f7fe ff07 	bl	8001b44 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 8002d36:	60b8      	str	r0, [r7, #8]

                static bool supplyAlgorithm = 0;    // MPPT+CC-CV va CC-CV Only

                mLcd.clearDisplay();
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f008 f94f 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "SUPPLY ALGORITHM");
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f103 000c 	add.w	r0, r3, #12
 8002d48:	4b5e      	ldr	r3, [pc, #376]	; (8002ec4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1a0>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	f008 f825 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f007 ff22 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002d58:	4603      	mov	r3, r0
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d005      	beq.n	8002d6a <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x46>
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f007 ff1c 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d101      	bne.n	8002d6e <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x4a>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x4c>
 8002d6e:	2300      	movs	r3, #0
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d006      	beq.n	8002d82 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x5e>
                {
                    supplyAlgorithm = !supplyAlgorithm;
 8002d74:	4b54      	ldr	r3, [pc, #336]	; (8002ec8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1a4>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	f083 0301 	eor.w	r3, r3, #1
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b52      	ldr	r3, [pc, #328]	; (8002ec8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1a4>)
 8002d80:	701a      	strb	r2, [r3, #0]
                }

                if (supplyAlgorithm == 0)
 8002d82:	4b51      	ldr	r3, [pc, #324]	; (8002ec8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1a4>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d108      	bne.n	8002d9c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x78>
                {
                    mLcd.displayLine(2, 0, "MPPT+CC-CV");
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f103 000c 	add.w	r0, r3, #12
 8002d90:	4b4e      	ldr	r3, [pc, #312]	; (8002ecc <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1a8>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	2102      	movs	r1, #2
 8002d96:	f008 f801 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8002d9a:	e014      	b.n	8002dc6 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xa2>
                }
                else if (supplyAlgorithm == 1)
 8002d9c:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1a4>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d108      	bne.n	8002db6 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x92>
                {
                    mLcd.displayLine(2, 0, "CC-CV Only");
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f103 000c 	add.w	r0, r3, #12
 8002daa:	4b49      	ldr	r3, [pc, #292]	; (8002ed0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1ac>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	2102      	movs	r1, #2
 8002db0:	f007 fff4 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8002db4:	e007      	b.n	8002dc6 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xa2>
                }
                else
                {
                    mLcd.displayLine(2, 0, "Error");
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f103 000c 	add.w	r0, r3, #12
 8002dbc:	4b45      	ldr	r3, [pc, #276]	; (8002ed4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1b0>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	f007 ffeb 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f007 fee8 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d029      	beq.n	8002e30 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x10c>
                {
                    if (supplyAlgorithm == 0)
 8002ddc:	4b3a      	ldr	r3, [pc, #232]	; (8002ec8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1a4>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10c      	bne.n	8002dfe <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xda>
                    {
                        chargeCtrl.mMpptMode = supplyAlgorithm;
 8002de4:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1a4>)
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	741a      	strb	r2, [r3, #16]
                        mLcd.displayLine(1, 0, ">> MPPT+CC-CV");
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f103 000c 	add.w	r0, r3, #12
 8002df2:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1b4>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	2101      	movs	r1, #1
 8002df8:	f007 ffd0 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8002dfc:	e018      	b.n	8002e30 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x10c>
                    }
                    else if (supplyAlgorithm == 1)
 8002dfe:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1a4>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d10c      	bne.n	8002e20 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xfc>
                    {
                        chargeCtrl.mMpptMode = supplyAlgorithm;
 8002e06:	4b30      	ldr	r3, [pc, #192]	; (8002ec8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1a4>)
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	741a      	strb	r2, [r3, #16]
                        mLcd.displayLine(1, 0, ">> CC-CV Only");
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f103 000c 	add.w	r0, r3, #12
 8002e14:	4b31      	ldr	r3, [pc, #196]	; (8002edc <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1b8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	2101      	movs	r1, #1
 8002e1a:	f007 ffbf 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8002e1e:	e007      	b.n	8002e30 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x10c>
                    }
                    else
                    {
                        mLcd.displayLine(1, 0, "Error alogrithm");
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f103 000c 	add.w	r0, r3, #12
 8002e26:	4b2e      	ldr	r3, [pc, #184]	; (8002ee0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1bc>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	f007 ffb6 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    }

                    // TODO: phai set va luu lai vao flash
                }

                if (chargeCtrl.mMpptMode == 0)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	7c1b      	ldrb	r3, [r3, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d108      	bne.n	8002e4a <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x126>
                {
                    mLcd.displayLine(1, 0, "MPPT+CC-CV");
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f103 000c 	add.w	r0, r3, #12
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1a8>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	2101      	movs	r1, #1
 8002e44:	f007 ffaa 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8002e48:	e014      	b.n	8002e74 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>
                }
                else if (chargeCtrl.mMpptMode == 1)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	7c1b      	ldrb	r3, [r3, #16]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d108      	bne.n	8002e64 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x140>
                {
                    mLcd.displayLine(1, 0, "CC-CV Only");
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f103 000c 	add.w	r0, r3, #12
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1ac>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	f007 ff9d 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8002e62:	e007      	b.n	8002e74 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>
                }
                else
                {
                    mLcd.displayLine(1, 0, "Error");
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f103 000c 	add.w	r0, r3, #12
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1b0>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2101      	movs	r1, #1
 8002e70:	f007 ff94 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f103 000c 	add.w	r0, r3, #12
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1c0>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2103      	movs	r1, #3
 8002e80:	f007 ff8c 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f007 fe89 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x190>
                {
                    LOGI("Go back to Setting screen");
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1c4>)
 8002e9c:	f240 2291 	movw	r2, #657	; 0x291
 8002ea0:	4912      	ldr	r1, [pc, #72]	; (8002eec <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1c8>)
 8002ea2:	4813      	ldr	r0, [pc, #76]	; (8002ef0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1cc>)
 8002ea4:	f7fe fd88 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x1d0>)
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f007 fe62 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	0800ea8c 	.word	0x0800ea8c
 8002ec8:	20000224 	.word	0x20000224
 8002ecc:	0800eaa0 	.word	0x0800eaa0
 8002ed0:	0800eaac 	.word	0x0800eaac
 8002ed4:	0800eab8 	.word	0x0800eab8
 8002ed8:	0800eac0 	.word	0x0800eac0
 8002edc:	0800ead0 	.word	0x0800ead0
 8002ee0:	0800eae0 	.word	0x0800eae0
 8002ee4:	0800eaf0 	.word	0x0800eaf0
 8002ee8:	0800eb08 	.word	0x0800eb08
 8002eec:	0800e4e8 	.word	0x0800e4e8
 8002ef0:	0800eb24 	.word	0x0800eb24
 8002ef4:	08002565 	.word	0x08002565

08002ef8 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv>:

            void impl_3_2_ChargeMode()
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002f00:	f001 fcd8 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002f04:	6178      	str	r0, [r7, #20]
                auto &chargeCtrl = ChargeControl::getInstance();
 8002f06:	f7fe fe1d 	bl	8001b44 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 8002f0a:	6138      	str	r0, [r7, #16]

                static OutputMode ouputMode = OutputMode::PSU;

                mLcd.clearDisplay();
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	330c      	adds	r3, #12
 8002f10:	4618      	mov	r0, r3
 8002f12:	f008 f865 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MODE");
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f103 000c 	add.w	r0, r3, #12
 8002f1c:	4b7b      	ldr	r3, [pc, #492]	; (800310c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x214>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2100      	movs	r1, #0
 8002f22:	f007 ff3b 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8002f26:	6978      	ldr	r0, [r7, #20]
 8002f28:	f007 fe38 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	bf0c      	ite	eq
 8002f32:	2301      	moveq	r3, #1
 8002f34:	2300      	movne	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d011      	beq.n	8002f60 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x68>
                {
                    if (ouputMode == OutputMode::PSU)
 8002f3c:	4b74      	ldr	r3, [pc, #464]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d103      	bne.n	8002f4c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x54>
                    {
                        ouputMode = OutputMode::INVERTER;
 8002f44:	4b72      	ldr	r3, [pc, #456]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8002f46:	2202      	movs	r2, #2
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e025      	b.n	8002f98 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xa0>
                    }
                    else
                    {
                        uint8_t u8 = (uint8_t) ouputMode;
 8002f4c:	4b70      	ldr	r3, [pc, #448]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	73bb      	strb	r3, [r7, #14]
                        u8--;
 8002f52:	7bbb      	ldrb	r3, [r7, #14]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	73bb      	strb	r3, [r7, #14]
                        ouputMode = (OutputMode) u8;
 8002f58:	7bbb      	ldrb	r3, [r7, #14]
 8002f5a:	4a6d      	ldr	r2, [pc, #436]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e01b      	b.n	8002f98 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xa0>
                    }
                }
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002f60:	6978      	ldr	r0, [r7, #20]
 8002f62:	f007 fe1b 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d010      	beq.n	8002f98 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xa0>
                {
                    if (ouputMode == OutputMode::INVERTER)
 8002f76:	4b66      	ldr	r3, [pc, #408]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d103      	bne.n	8002f86 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x8e>
                    {
                        ouputMode = OutputMode::PSU;
 8002f7e:	4b64      	ldr	r3, [pc, #400]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e008      	b.n	8002f98 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xa0>
                    }
                    else
                    {
                        uint8_t u8 = (uint8_t) ouputMode;
 8002f86:	4b62      	ldr	r3, [pc, #392]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	73fb      	strb	r3, [r7, #15]
                        u8++;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
                        ouputMode = (OutputMode) u8;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	4a5e      	ldr	r2, [pc, #376]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8002f96:	6013      	str	r3, [r2, #0]
                    }
                }

                if (ouputMode == OutputMode::PSU)
 8002f98:	4b5d      	ldr	r3, [pc, #372]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d108      	bne.n	8002fb2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xba>
                {
                    mLcd.displayLine(2, 0, "PSU");
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f103 000c 	add.w	r0, r3, #12
 8002fa6:	4b5b      	ldr	r3, [pc, #364]	; (8003114 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x21c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2102      	movs	r1, #2
 8002fac:	f007 fef6 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8002fb0:	e018      	b.n	8002fe4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xec>
                }
                else if (ouputMode == OutputMode::CHARGER)
 8002fb2:	4b57      	ldr	r3, [pc, #348]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d108      	bne.n	8002fcc <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xd4>
                {
                    mLcd.displayLine(2, 0, "Charger");
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f103 000c 	add.w	r0, r3, #12
 8002fc0:	4b55      	ldr	r3, [pc, #340]	; (8003118 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x220>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2102      	movs	r1, #2
 8002fc6:	f007 fee9 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8002fca:	e00b      	b.n	8002fe4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xec>
                }
                else if (ouputMode == OutputMode::INVERTER)
 8002fcc:	4b50      	ldr	r3, [pc, #320]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d107      	bne.n	8002fe4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xec>
                {
                    mLcd.displayLine(2, 0, "Inverter");
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f103 000c 	add.w	r0, r3, #12
 8002fda:	4b50      	ldr	r3, [pc, #320]	; (800311c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x224>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2102      	movs	r1, #2
 8002fe0:	f007 fedc 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002fe4:	6978      	ldr	r0, [r7, #20]
 8002fe6:	f007 fdd9 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d03a      	beq.n	8003070 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x178>
                {
                    if (ouputMode == OutputMode::PSU)
 8002ffa:	4b45      	ldr	r3, [pc, #276]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10c      	bne.n	800301c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x124>
                    {
                        chargeCtrl.mOutputMode = ouputMode;
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	60da      	str	r2, [r3, #12]
                        mLcd.displayLine(1, 0, ">>PSU");
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f103 000c 	add.w	r0, r3, #12
 8003010:	4b43      	ldr	r3, [pc, #268]	; (8003120 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x228>)
 8003012:	2200      	movs	r2, #0
 8003014:	2101      	movs	r1, #1
 8003016:	f007 fec1 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 800301a:	e029      	b.n	8003070 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x178>
                    }
                    else if (ouputMode == OutputMode::CHARGER)
 800301c:	4b3c      	ldr	r3, [pc, #240]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10c      	bne.n	800303e <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x146>
                    {
                        chargeCtrl.mOutputMode = ouputMode;
 8003024:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	60da      	str	r2, [r3, #12]
                        mLcd.displayLine(1, 0, ">>Charger");
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f103 000c 	add.w	r0, r3, #12
 8003032:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x22c>)
 8003034:	2200      	movs	r2, #0
 8003036:	2101      	movs	r1, #1
 8003038:	f007 feb0 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 800303c:	e018      	b.n	8003070 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x178>
                    }
                    else if (ouputMode == OutputMode::INVERTER)
 800303e:	4b34      	ldr	r3, [pc, #208]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d10c      	bne.n	8003060 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x168>
                    {
                        chargeCtrl.mOutputMode = ouputMode;
 8003046:	4b32      	ldr	r3, [pc, #200]	; (8003110 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x218>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	60da      	str	r2, [r3, #12]
                        mLcd.displayLine(1, 0, ">>Inverter");
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f103 000c 	add.w	r0, r3, #12
 8003054:	4b34      	ldr	r3, [pc, #208]	; (8003128 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x230>)
 8003056:	2200      	movs	r2, #0
 8003058:	2101      	movs	r1, #1
 800305a:	f007 fe9f 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 800305e:	e007      	b.n	8003070 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x178>
                    }
                    else
                    {
                        mLcd.displayLine(1, 0, "Error mode");
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f103 000c 	add.w	r0, r3, #12
 8003066:	4b31      	ldr	r3, [pc, #196]	; (800312c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x234>)
 8003068:	2200      	movs	r2, #0
 800306a:	2101      	movs	r1, #1
 800306c:	f007 fe96 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    }

                    // TODO: phai set va luu lai vao flash
                }

                if (chargeCtrl.mOutputMode == OutputMode::PSU)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d108      	bne.n	800308a <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x192>
                {
                    mLcd.displayLine(1, 0, "PSU");
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f103 000c 	add.w	r0, r3, #12
 800307e:	4b25      	ldr	r3, [pc, #148]	; (8003114 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x21c>)
 8003080:	2200      	movs	r2, #0
 8003082:	2101      	movs	r1, #1
 8003084:	f007 fe8a 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8003088:	e018      	b.n	80030bc <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1c4>
                }
                else if (chargeCtrl.mOutputMode == OutputMode::CHARGER)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d108      	bne.n	80030a4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1ac>
                {
                    mLcd.displayLine(1, 0, "Charger");
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f103 000c 	add.w	r0, r3, #12
 8003098:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x220>)
 800309a:	2200      	movs	r2, #0
 800309c:	2101      	movs	r1, #1
 800309e:	f007 fe7d 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 80030a2:	e00b      	b.n	80030bc <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1c4>
                }
                else if (chargeCtrl.mOutputMode == OutputMode::INVERTER)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d107      	bne.n	80030bc <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1c4>
                {
                    mLcd.displayLine(1, 0, "Inverter");
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f103 000c 	add.w	r0, r3, #12
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x224>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	2101      	movs	r1, #1
 80030b8:	f007 fe70 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f103 000c 	add.w	r0, r3, #12
 80030c2:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x238>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	2103      	movs	r1, #3
 80030c8:	f007 fe68 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80030cc:	6978      	ldr	r0, [r7, #20]
 80030ce:	f007 fd65 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x204>
                {
                    LOGI("Go back to Setting screen");
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x23c>)
 80030e4:	f240 22f3 	movw	r2, #755	; 0x2f3
 80030e8:	4913      	ldr	r1, [pc, #76]	; (8003138 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x240>)
 80030ea:	4814      	ldr	r0, [pc, #80]	; (800313c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x244>)
 80030ec:	f7fe fc64 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a13      	ldr	r2, [pc, #76]	; (8003140 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x248>)
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80030fc:	2100      	movs	r1, #0
 80030fe:	6978      	ldr	r0, [r7, #20]
 8003100:	f007 fd3e 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003104:	bf00      	nop
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	0800eb4c 	.word	0x0800eb4c
 8003110:	20000228 	.word	0x20000228
 8003114:	0800eb54 	.word	0x0800eb54
 8003118:	0800eb58 	.word	0x0800eb58
 800311c:	0800eb60 	.word	0x0800eb60
 8003120:	0800eb6c 	.word	0x0800eb6c
 8003124:	0800eb74 	.word	0x0800eb74
 8003128:	0800eb80 	.word	0x0800eb80
 800312c:	0800eb8c 	.word	0x0800eb8c
 8003130:	0800eaf0 	.word	0x0800eaf0
 8003134:	0800eb98 	.word	0x0800eb98
 8003138:	0800e4e8 	.word	0x0800e4e8
 800313c:	0800eb24 	.word	0x0800eb24
 8003140:	08002565 	.word	0x08002565

08003144 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv>:

            void impl_3_2_MaxBatteryVolt()
 8003144:	b580      	push	{r7, lr}
 8003146:	b092      	sub	sp, #72	; 0x48
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 800314c:	f001 fbb2 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8003150:	63f8      	str	r0, [r7, #60]	; 0x3c

                mLcd.clearDisplay();
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	330c      	adds	r3, #12
 8003156:	4618      	mov	r0, r3
 8003158:	f007 ff42 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MAX BATTERY VOLT");
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f103 000c 	add.w	r0, r3, #12
 8003162:	4b76      	ldr	r3, [pc, #472]	; (800333c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x1f8>)
 8003164:	2200      	movs	r2, #0
 8003166:	2100      	movs	r1, #0
 8003168:	f007 fe18 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                char line1[21] = { 0 };
 800316c:	2300      	movs	r3, #0
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	741a      	strb	r2, [r3, #16]
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_voltage_battery_max);
 8003180:	f7fe f8ac 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8003184:	4603      	mov	r3, r0
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4618      	mov	r0, r3
 800318a:	f7fd f9e5 	bl	8000558 <__aeabi_f2d>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	f107 0020 	add.w	r0, r7, #32
 8003196:	e9cd 2300 	strd	r2, r3, [sp]
 800319a:	4a69      	ldr	r2, [pc, #420]	; (8003340 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x1fc>)
 800319c:	2115      	movs	r1, #21
 800319e:	f009 f855 	bl	800c24c <sniprintf>
                mLcd.displayLine(1, 0, line1);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f103 000c 	add.w	r0, r3, #12
 80031a8:	f107 0320 	add.w	r3, r7, #32
 80031ac:	2200      	movs	r2, #0
 80031ae:	2101      	movs	r1, #1
 80031b0:	f007 fdf4 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                const float delta = 0.2;
 80031b4:	4b63      	ldr	r3, [pc, #396]	; (8003344 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x200>)
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38
                static float setValue = Constant::getInstance().k_voltage_battery_max;
 80031b8:	4b63      	ldr	r3, [pc, #396]	; (8003348 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x204>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3bf 8f5b 	dmb	ish
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d013      	beq.n	80031fa <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0xb6>
 80031d2:	485d      	ldr	r0, [pc, #372]	; (8003348 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x204>)
 80031d4:	f008 f820 	bl	800b218 <__cxa_guard_acquire>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bf14      	ite	ne
 80031de:	2301      	movne	r3, #1
 80031e0:	2300      	moveq	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0xb6>
 80031e8:	f7fe f878 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80031ec:	4603      	mov	r3, r0
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4a56      	ldr	r2, [pc, #344]	; (800334c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x208>)
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4854      	ldr	r0, [pc, #336]	; (8003348 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x204>)
 80031f6:	f008 f81b 	bl	800b230 <__cxa_guard_release>

                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 80031fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031fc:	f007 fcce 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003200:	4603      	mov	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0xe2>
                {
                    setValue += delta;
 8003210:	4b4e      	ldr	r3, [pc, #312]	; (800334c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x208>)
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003350 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x20c>
 800321a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800321e:	4b4b      	ldr	r3, [pc, #300]	; (800334c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x208>)
 8003220:	edc3 7a00 	vstr	s15, [r3]
 8003224:	e014      	b.n	8003250 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x10c>
                }
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8003226:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003228:	f007 fcb8 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 800322c:	4603      	mov	r3, r0
 800322e:	2b02      	cmp	r3, #2
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x10c>
                {
                    setValue -= delta;
 800323c:	4b43      	ldr	r3, [pc, #268]	; (800334c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x208>)
 800323e:	edd3 7a00 	vldr	s15, [r3]
 8003242:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003350 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x20c>
 8003246:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800324a:	4b40      	ldr	r3, [pc, #256]	; (800334c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x208>)
 800324c:	edc3 7a00 	vstr	s15, [r3]
                }

                char line2[21] = { 0 };
 8003250:	2300      	movs	r3, #0
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	741a      	strb	r2, [r3, #16]
                snprintf(line2, 21, "%.2f", setValue);
 8003264:	4b39      	ldr	r3, [pc, #228]	; (800334c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x208>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd f975 	bl	8000558 <__aeabi_f2d>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	f107 0008 	add.w	r0, r7, #8
 8003276:	e9cd 2300 	strd	r2, r3, [sp]
 800327a:	4a31      	ldr	r2, [pc, #196]	; (8003340 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x1fc>)
 800327c:	2115      	movs	r1, #21
 800327e:	f008 ffe5 	bl	800c24c <sniprintf>
                mLcd.displayLine(2, 0, line2);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f103 000c 	add.w	r0, r3, #12
 8003288:	f107 0308 	add.w	r3, r7, #8
 800328c:	2200      	movs	r2, #0
 800328e:	2102      	movs	r1, #2
 8003290:	f007 fd84 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8003294:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003296:	f007 fc81 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 800329a:	4603      	mov	r3, r0
 800329c:	2b03      	cmp	r3, #3
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01f      	beq.n	80032ea <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x1a6>
                {
                    Constant::getInstance().k_voltage_battery_max = setValue;
 80032aa:	f7fe f817 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80032ae:	4602      	mov	r2, r0
 80032b0:	4b26      	ldr	r3, [pc, #152]	; (800334c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x208>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6053      	str	r3, [r2, #4]
                    snprintf(line1, 21, ">> %.2f", Constant::getInstance().k_voltage_battery_max);
 80032b6:	f7fe f811 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80032ba:	4603      	mov	r3, r0
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd f94a 	bl	8000558 <__aeabi_f2d>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	f107 0020 	add.w	r0, r7, #32
 80032cc:	e9cd 2300 	strd	r2, r3, [sp]
 80032d0:	4a20      	ldr	r2, [pc, #128]	; (8003354 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x210>)
 80032d2:	2115      	movs	r1, #21
 80032d4:	f008 ffba 	bl	800c24c <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f103 000c 	add.w	r0, r3, #12
 80032de:	f107 0320 	add.w	r3, r7, #32
 80032e2:	2200      	movs	r2, #0
 80032e4:	2101      	movs	r1, #1
 80032e6:	f007 fd59 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80032ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80032ec:	f007 fc56 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	bf0c      	ite	eq
 80032f6:	2301      	moveq	r3, #1
 80032f8:	2300      	movne	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00c      	beq.n	800331a <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x1d6>
                {
                    LOGI("Go back to Setting screen");
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x214>)
 8003302:	f240 321d 	movw	r2, #797	; 0x31d
 8003306:	4915      	ldr	r1, [pc, #84]	; (800335c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x218>)
 8003308:	4815      	ldr	r0, [pc, #84]	; (8003360 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x21c>)
 800330a:	f7fe fb55 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a14      	ldr	r2, [pc, #80]	; (8003364 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x220>)
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f103 000c 	add.w	r0, r3, #12
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x224>)
 8003322:	2200      	movs	r2, #0
 8003324:	2103      	movs	r1, #3
 8003326:	f007 fd39 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800332a:	2100      	movs	r1, #0
 800332c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800332e:	f007 fc27 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003332:	bf00      	nop
 8003334:	3740      	adds	r7, #64	; 0x40
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	0800ebac 	.word	0x0800ebac
 8003340:	0800ebc0 	.word	0x0800ebc0
 8003344:	3e4ccccd 	.word	0x3e4ccccd
 8003348:	20000230 	.word	0x20000230
 800334c:	2000022c 	.word	0x2000022c
 8003350:	3e4ccccd 	.word	0x3e4ccccd
 8003354:	0800ebc8 	.word	0x0800ebc8
 8003358:	0800ebd0 	.word	0x0800ebd0
 800335c:	0800e4e8 	.word	0x0800e4e8
 8003360:	0800eb24 	.word	0x0800eb24
 8003364:	08002565 	.word	0x08002565
 8003368:	0800eaf0 	.word	0x0800eaf0

0800336c <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv>:

            void impl_3_2_MinBatteryVolt()
 800336c:	b580      	push	{r7, lr}
 800336e:	b092      	sub	sp, #72	; 0x48
 8003370:	af02      	add	r7, sp, #8
 8003372:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8003374:	f001 fa9e 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8003378:	63f8      	str	r0, [r7, #60]	; 0x3c

                mLcd.clearDisplay();
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	330c      	adds	r3, #12
 800337e:	4618      	mov	r0, r3
 8003380:	f007 fe2e 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MIN BATTERY VOLT");
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f103 000c 	add.w	r0, r3, #12
 800338a:	4b76      	ldr	r3, [pc, #472]	; (8003564 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x1f8>)
 800338c:	2200      	movs	r2, #0
 800338e:	2100      	movs	r1, #0
 8003390:	f007 fd04 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                char line1[21] = { 0 };
 8003394:	2300      	movs	r3, #0
 8003396:	623b      	str	r3, [r7, #32]
 8003398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	741a      	strb	r2, [r3, #16]
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_voltage_battery_min);
 80033a8:	f7fd ff98 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80033ac:	4603      	mov	r3, r0
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd f8d1 	bl	8000558 <__aeabi_f2d>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	f107 0020 	add.w	r0, r7, #32
 80033be:	e9cd 2300 	strd	r2, r3, [sp]
 80033c2:	4a69      	ldr	r2, [pc, #420]	; (8003568 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x1fc>)
 80033c4:	2115      	movs	r1, #21
 80033c6:	f008 ff41 	bl	800c24c <sniprintf>
                mLcd.displayLine(1, 0, line1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f103 000c 	add.w	r0, r3, #12
 80033d0:	f107 0320 	add.w	r3, r7, #32
 80033d4:	2200      	movs	r2, #0
 80033d6:	2101      	movs	r1, #1
 80033d8:	f007 fce0 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                const float delta = 0.2;
 80033dc:	4b63      	ldr	r3, [pc, #396]	; (800356c <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x200>)
 80033de:	63bb      	str	r3, [r7, #56]	; 0x38
                static float setValue = Constant::getInstance().k_voltage_battery_min;
 80033e0:	4b63      	ldr	r3, [pc, #396]	; (8003570 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x204>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3bf 8f5b 	dmb	ish
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d013      	beq.n	8003422 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0xb6>
 80033fa:	485d      	ldr	r0, [pc, #372]	; (8003570 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x204>)
 80033fc:	f007 ff0c 	bl	800b218 <__cxa_guard_acquire>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf14      	ite	ne
 8003406:	2301      	movne	r3, #1
 8003408:	2300      	moveq	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0xb6>
 8003410:	f7fd ff64 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8003414:	4603      	mov	r3, r0
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a56      	ldr	r2, [pc, #344]	; (8003574 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x208>)
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4854      	ldr	r0, [pc, #336]	; (8003570 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x204>)
 800341e:	f007 ff07 	bl	800b230 <__cxa_guard_release>

                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8003422:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003424:	f007 fbba 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003428:	4603      	mov	r3, r0
 800342a:	2b01      	cmp	r3, #1
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0xe2>
                {
                    setValue += delta;
 8003438:	4b4e      	ldr	r3, [pc, #312]	; (8003574 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x208>)
 800343a:	edd3 7a00 	vldr	s15, [r3]
 800343e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003578 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x20c>
 8003442:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003446:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x208>)
 8003448:	edc3 7a00 	vstr	s15, [r3]
 800344c:	e014      	b.n	8003478 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x10c>
                }
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 800344e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003450:	f007 fba4 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003454:	4603      	mov	r3, r0
 8003456:	2b02      	cmp	r3, #2
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d009      	beq.n	8003478 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x10c>
                {
                    setValue -= delta;
 8003464:	4b43      	ldr	r3, [pc, #268]	; (8003574 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x208>)
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003578 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x20c>
 800346e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003472:	4b40      	ldr	r3, [pc, #256]	; (8003574 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x208>)
 8003474:	edc3 7a00 	vstr	s15, [r3]
                }

                char line2[21] = { 0 };
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	f107 030c 	add.w	r3, r7, #12
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	741a      	strb	r2, [r3, #16]
                snprintf(line2, 21, "%.2f", setValue);
 800348c:	4b39      	ldr	r3, [pc, #228]	; (8003574 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x208>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f861 	bl	8000558 <__aeabi_f2d>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	f107 0008 	add.w	r0, r7, #8
 800349e:	e9cd 2300 	strd	r2, r3, [sp]
 80034a2:	4a31      	ldr	r2, [pc, #196]	; (8003568 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x1fc>)
 80034a4:	2115      	movs	r1, #21
 80034a6:	f008 fed1 	bl	800c24c <sniprintf>
                mLcd.displayLine(2, 0, line2);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f103 000c 	add.w	r0, r3, #12
 80034b0:	f107 0308 	add.w	r3, r7, #8
 80034b4:	2200      	movs	r2, #0
 80034b6:	2102      	movs	r1, #2
 80034b8:	f007 fc70 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80034bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80034be:	f007 fb6d 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01f      	beq.n	8003512 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x1a6>
                {
                    Constant::getInstance().k_voltage_battery_min = setValue;
 80034d2:	f7fd ff03 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80034d6:	4602      	mov	r2, r0
 80034d8:	4b26      	ldr	r3, [pc, #152]	; (8003574 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x208>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6093      	str	r3, [r2, #8]
                    snprintf(line1, 21, ">> %.2f", Constant::getInstance().k_voltage_battery_min);
 80034de:	f7fd fefd 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80034e2:	4603      	mov	r3, r0
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd f836 	bl	8000558 <__aeabi_f2d>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	f107 0020 	add.w	r0, r7, #32
 80034f4:	e9cd 2300 	strd	r2, r3, [sp]
 80034f8:	4a20      	ldr	r2, [pc, #128]	; (800357c <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x210>)
 80034fa:	2115      	movs	r1, #21
 80034fc:	f008 fea6 	bl	800c24c <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f103 000c 	add.w	r0, r3, #12
 8003506:	f107 0320 	add.w	r3, r7, #32
 800350a:	2200      	movs	r2, #0
 800350c:	2101      	movs	r1, #1
 800350e:	f007 fc45 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8003512:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003514:	f007 fb42 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003518:	4603      	mov	r3, r0
 800351a:	2b04      	cmp	r3, #4
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00c      	beq.n	8003542 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x1d6>
                {
                    LOGI("Go back to Setting screen");
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x214>)
 800352a:	f240 324a 	movw	r2, #842	; 0x34a
 800352e:	4915      	ldr	r1, [pc, #84]	; (8003584 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x218>)
 8003530:	4815      	ldr	r0, [pc, #84]	; (8003588 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x21c>)
 8003532:	f7fe fa41 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x220>)
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f103 000c 	add.w	r0, r3, #12
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x224>)
 800354a:	2200      	movs	r2, #0
 800354c:	2103      	movs	r1, #3
 800354e:	f007 fc25 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8003552:	2100      	movs	r1, #0
 8003554:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003556:	f007 fb13 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 800355a:	bf00      	nop
 800355c:	3740      	adds	r7, #64	; 0x40
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	0800ebe8 	.word	0x0800ebe8
 8003568:	0800ebc0 	.word	0x0800ebc0
 800356c:	3e4ccccd 	.word	0x3e4ccccd
 8003570:	20000238 	.word	0x20000238
 8003574:	20000234 	.word	0x20000234
 8003578:	3e4ccccd 	.word	0x3e4ccccd
 800357c:	0800ebc8 	.word	0x0800ebc8
 8003580:	0800ebfc 	.word	0x0800ebfc
 8003584:	0800e4e8 	.word	0x0800e4e8
 8003588:	0800eb24 	.word	0x0800eb24
 800358c:	08002565 	.word	0x08002565
 8003590:	0800eaf0 	.word	0x0800eaf0

08003594 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv>:

            void impl_3_2_ChargingCurrent()
 8003594:	b580      	push	{r7, lr}
 8003596:	b092      	sub	sp, #72	; 0x48
 8003598:	af02      	add	r7, sp, #8
 800359a:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 800359c:	f001 f98a 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80035a0:	63f8      	str	r0, [r7, #60]	; 0x3c

                mLcd.clearDisplay();
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	330c      	adds	r3, #12
 80035a6:	4618      	mov	r0, r3
 80035a8:	f007 fd1a 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "CHARGING CURRENT");
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f103 000c 	add.w	r0, r3, #12
 80035b2:	4b76      	ldr	r3, [pc, #472]	; (800378c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x1f8>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	2100      	movs	r1, #0
 80035b8:	f007 fbf0 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                char line1[21] = { 0 };
 80035bc:	2300      	movs	r3, #0
 80035be:	623b      	str	r3, [r7, #32]
 80035c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	741a      	strb	r2, [r3, #16]
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_current_charging_max);
 80035d0:	f7fd fe84 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80035d4:	4603      	mov	r3, r0
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fc ffbd 	bl	8000558 <__aeabi_f2d>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	f107 0020 	add.w	r0, r7, #32
 80035e6:	e9cd 2300 	strd	r2, r3, [sp]
 80035ea:	4a69      	ldr	r2, [pc, #420]	; (8003790 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x1fc>)
 80035ec:	2115      	movs	r1, #21
 80035ee:	f008 fe2d 	bl	800c24c <sniprintf>
                mLcd.displayLine(1, 0, line1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f103 000c 	add.w	r0, r3, #12
 80035f8:	f107 0320 	add.w	r3, r7, #32
 80035fc:	2200      	movs	r2, #0
 80035fe:	2101      	movs	r1, #1
 8003600:	f007 fbcc 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                const float delta = 0.1;
 8003604:	4b63      	ldr	r3, [pc, #396]	; (8003794 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x200>)
 8003606:	63bb      	str	r3, [r7, #56]	; 0x38
                static float setValue = Constant::getInstance().k_current_charging_max;
 8003608:	4b63      	ldr	r3, [pc, #396]	; (8003798 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x204>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f3bf 8f5b 	dmb	ish
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d013      	beq.n	800364a <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0xb6>
 8003622:	485d      	ldr	r0, [pc, #372]	; (8003798 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x204>)
 8003624:	f007 fdf8 	bl	800b218 <__cxa_guard_acquire>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf14      	ite	ne
 800362e:	2301      	movne	r3, #1
 8003630:	2300      	moveq	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0xb6>
 8003638:	f7fd fe50 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800363c:	4603      	mov	r3, r0
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a56      	ldr	r2, [pc, #344]	; (800379c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x208>)
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4854      	ldr	r0, [pc, #336]	; (8003798 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x204>)
 8003646:	f007 fdf3 	bl	800b230 <__cxa_guard_release>

                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 800364a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800364c:	f007 faa6 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003650:	4603      	mov	r3, r0
 8003652:	2b01      	cmp	r3, #1
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0xe2>
                {
                    setValue += delta;
 8003660:	4b4e      	ldr	r3, [pc, #312]	; (800379c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x208>)
 8003662:	edd3 7a00 	vldr	s15, [r3]
 8003666:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80037a0 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x20c>
 800366a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800366e:	4b4b      	ldr	r3, [pc, #300]	; (800379c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x208>)
 8003670:	edc3 7a00 	vstr	s15, [r3]
 8003674:	e014      	b.n	80036a0 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x10c>
                }
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8003676:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003678:	f007 fa90 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 800367c:	4603      	mov	r3, r0
 800367e:	2b02      	cmp	r3, #2
 8003680:	bf0c      	ite	eq
 8003682:	2301      	moveq	r3, #1
 8003684:	2300      	movne	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d009      	beq.n	80036a0 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x10c>
                {
                    setValue -= delta;
 800368c:	4b43      	ldr	r3, [pc, #268]	; (800379c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x208>)
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80037a0 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x20c>
 8003696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800369a:	4b40      	ldr	r3, [pc, #256]	; (800379c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x208>)
 800369c:	edc3 7a00 	vstr	s15, [r3]
                }

                char line2[21] = { 0 };
 80036a0:	2300      	movs	r3, #0
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	f107 030c 	add.w	r3, r7, #12
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	741a      	strb	r2, [r3, #16]
                snprintf(line2, 21, "%.2f", setValue);
 80036b4:	4b39      	ldr	r3, [pc, #228]	; (800379c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x208>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fc ff4d 	bl	8000558 <__aeabi_f2d>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	f107 0008 	add.w	r0, r7, #8
 80036c6:	e9cd 2300 	strd	r2, r3, [sp]
 80036ca:	4a31      	ldr	r2, [pc, #196]	; (8003790 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x1fc>)
 80036cc:	2115      	movs	r1, #21
 80036ce:	f008 fdbd 	bl	800c24c <sniprintf>
                mLcd.displayLine(2, 0, line2);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f103 000c 	add.w	r0, r3, #12
 80036d8:	f107 0308 	add.w	r3, r7, #8
 80036dc:	2200      	movs	r2, #0
 80036de:	2102      	movs	r1, #2
 80036e0:	f007 fb5c 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80036e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036e6:	f007 fa59 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01f      	beq.n	800373a <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x1a6>
                {
                    Constant::getInstance().k_current_charging_max = setValue;
 80036fa:	f7fd fdef 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80036fe:	4602      	mov	r2, r0
 8003700:	4b26      	ldr	r3, [pc, #152]	; (800379c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x208>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60d3      	str	r3, [r2, #12]
                    snprintf(line1, 21, ">> %.2f", Constant::getInstance().k_current_charging_max);
 8003706:	f7fd fde9 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800370a:	4603      	mov	r3, r0
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fc ff22 	bl	8000558 <__aeabi_f2d>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	f107 0020 	add.w	r0, r7, #32
 800371c:	e9cd 2300 	strd	r2, r3, [sp]
 8003720:	4a20      	ldr	r2, [pc, #128]	; (80037a4 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x210>)
 8003722:	2115      	movs	r1, #21
 8003724:	f008 fd92 	bl	800c24c <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f103 000c 	add.w	r0, r3, #12
 800372e:	f107 0320 	add.w	r3, r7, #32
 8003732:	2200      	movs	r2, #0
 8003734:	2101      	movs	r1, #1
 8003736:	f007 fb31 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800373a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800373c:	f007 fa2e 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003740:	4603      	mov	r3, r0
 8003742:	2b04      	cmp	r3, #4
 8003744:	bf0c      	ite	eq
 8003746:	2301      	moveq	r3, #1
 8003748:	2300      	movne	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00c      	beq.n	800376a <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x1d6>
                {
                    LOGI("Go back to Setting screen");
 8003750:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x214>)
 8003752:	f240 3277 	movw	r2, #887	; 0x377
 8003756:	4915      	ldr	r1, [pc, #84]	; (80037ac <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x218>)
 8003758:	4815      	ldr	r0, [pc, #84]	; (80037b0 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x21c>)
 800375a:	f7fe f92d 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x220>)
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f103 000c 	add.w	r0, r3, #12
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x224>)
 8003772:	2200      	movs	r2, #0
 8003774:	2103      	movs	r1, #3
 8003776:	f007 fb11 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800377a:	2100      	movs	r1, #0
 800377c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800377e:	f007 f9ff 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003782:	bf00      	nop
 8003784:	3740      	adds	r7, #64	; 0x40
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	0800ec14 	.word	0x0800ec14
 8003790:	0800ebc0 	.word	0x0800ebc0
 8003794:	3dcccccd 	.word	0x3dcccccd
 8003798:	20000240 	.word	0x20000240
 800379c:	2000023c 	.word	0x2000023c
 80037a0:	3dcccccd 	.word	0x3dcccccd
 80037a4:	0800ebc8 	.word	0x0800ebc8
 80037a8:	0800ec28 	.word	0x0800ec28
 80037ac:	0800e4e8 	.word	0x0800e4e8
 80037b0:	0800eb24 	.word	0x0800eb24
 80037b4:	08002565 	.word	0x08002565
 80037b8:	0800eaf0 	.word	0x0800eaf0

080037bc <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv>:

            void impl_3_2_CoolingFan()
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 80037c4:	f001 f876 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80037c8:	60f8      	str	r0, [r7, #12]
                auto &sysMgr = SystemManager::getInstance();
 80037ca:	f001 f889 	bl	80048e0 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv>
 80037ce:	60b8      	str	r0, [r7, #8]

                static bool fanEnable = 0;    // MPPT+CC-CV va CC-CV Only

                mLcd.clearDisplay();
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	330c      	adds	r3, #12
 80037d4:	4618      	mov	r0, r3
 80037d6:	f007 fc03 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "COOLING FAN");
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f103 000c 	add.w	r0, r3, #12
 80037e0:	4b5a      	ldr	r3, [pc, #360]	; (800394c <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x190>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	2100      	movs	r1, #0
 80037e6:	f007 fad9 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::UP
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f007 f9d6 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 80037f0:	4603      	mov	r3, r0
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d005      	beq.n	8003802 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x46>
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f007 f9d0 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d101      	bne.n	8003806 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x4a>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x4c>
 8003806:	2300      	movs	r3, #0
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8003808:	2b00      	cmp	r3, #0
 800380a:	d006      	beq.n	800381a <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x5e>
                {
                    fanEnable = !fanEnable;
 800380c:	4b50      	ldr	r3, [pc, #320]	; (8003950 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x194>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	f083 0301 	eor.w	r3, r3, #1
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4b4e      	ldr	r3, [pc, #312]	; (8003950 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x194>)
 8003818:	701a      	strb	r2, [r3, #0]
                }

                if (fanEnable == 0)
 800381a:	4b4d      	ldr	r3, [pc, #308]	; (8003950 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x194>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x78>
                {
                    mLcd.displayLine(2, 0, "OFF");
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f103 000c 	add.w	r0, r3, #12
 8003828:	4b4a      	ldr	r3, [pc, #296]	; (8003954 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x198>)
 800382a:	2200      	movs	r2, #0
 800382c:	2102      	movs	r1, #2
 800382e:	f007 fab5 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8003832:	e014      	b.n	800385e <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xa2>
                }
                else if (fanEnable == 1)
 8003834:	4b46      	ldr	r3, [pc, #280]	; (8003950 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x194>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d108      	bne.n	800384e <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x92>
                {
                    mLcd.displayLine(2, 0, "ON ");
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f103 000c 	add.w	r0, r3, #12
 8003842:	4b45      	ldr	r3, [pc, #276]	; (8003958 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x19c>)
 8003844:	2200      	movs	r2, #0
 8003846:	2102      	movs	r1, #2
 8003848:	f007 faa8 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 800384c:	e007      	b.n	800385e <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xa2>
                }
                else
                {
                    mLcd.displayLine(2, 0, "Error");
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f103 000c 	add.w	r0, r3, #12
 8003854:	4b41      	ldr	r3, [pc, #260]	; (800395c <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x1a0>)
 8003856:	2200      	movs	r2, #0
 8003858:	2102      	movs	r1, #2
 800385a:	f007 fa9f 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f007 f99c 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003864:	4603      	mov	r3, r0
 8003866:	2b03      	cmp	r3, #3
 8003868:	bf0c      	ite	eq
 800386a:	2301      	moveq	r3, #1
 800386c:	2300      	movne	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d029      	beq.n	80038c8 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x10c>
                {
                    if (fanEnable == 0)
 8003874:	4b36      	ldr	r3, [pc, #216]	; (8003950 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x194>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10c      	bne.n	8003896 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xda>
                    {
                        sysMgr.enableFan = fanEnable;
 800387c:	4b34      	ldr	r3, [pc, #208]	; (8003950 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x194>)
 800387e:	781a      	ldrb	r2, [r3, #0]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	711a      	strb	r2, [r3, #4]
                        mLcd.displayLine(1, 0, ">> OFF");
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f103 000c 	add.w	r0, r3, #12
 800388a:	4b35      	ldr	r3, [pc, #212]	; (8003960 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x1a4>)
 800388c:	2200      	movs	r2, #0
 800388e:	2101      	movs	r1, #1
 8003890:	f007 fa84 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8003894:	e018      	b.n	80038c8 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x10c>
                    }
                    else if (fanEnable == 1)
 8003896:	4b2e      	ldr	r3, [pc, #184]	; (8003950 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x194>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d10c      	bne.n	80038b8 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xfc>
                    {
                        sysMgr.enableFan = fanEnable;
 800389e:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x194>)
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	711a      	strb	r2, [r3, #4]
                        mLcd.displayLine(1, 0, ">> ON ");
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f103 000c 	add.w	r0, r3, #12
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x1a8>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	2101      	movs	r1, #1
 80038b2:	f007 fa73 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 80038b6:	e007      	b.n	80038c8 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x10c>
                    }
                    else
                    {
                        mLcd.displayLine(1, 0, "Error state");
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f103 000c 	add.w	r0, r3, #12
 80038be:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x1ac>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	2101      	movs	r1, #1
 80038c4:	f007 fa6a 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    }

                    // TODO: phai set va luu lai vao flash
                }

                if (sysMgr.enableFan == 0)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	791b      	ldrb	r3, [r3, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d108      	bne.n	80038e2 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x126>
                {
                    mLcd.displayLine(1, 0, "OFF");
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f103 000c 	add.w	r0, r3, #12
 80038d6:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x198>)
 80038d8:	2200      	movs	r2, #0
 80038da:	2101      	movs	r1, #1
 80038dc:	f007 fa5e 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 80038e0:	e00b      	b.n	80038fa <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x13e>
                }
                else if (sysMgr.enableFan == 1)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	791b      	ldrb	r3, [r3, #4]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d107      	bne.n	80038fa <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x13e>
                {
                    mLcd.displayLine(1, 0, "ON ");
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f103 000c 	add.w	r0, r3, #12
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x19c>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	2101      	movs	r1, #1
 80038f6:	f007 fa51 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f103 000c 	add.w	r0, r3, #12
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x1b0>)
 8003902:	2200      	movs	r2, #0
 8003904:	2103      	movs	r1, #3
 8003906:	f007 fa49 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f007 f946 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003910:	4603      	mov	r3, r0
 8003912:	2b04      	cmp	r3, #4
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00c      	beq.n	800393a <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x17e>
                {
                    LOGI("Go back to Setting screen");
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x1b4>)
 8003922:	f240 32be 	movw	r2, #958	; 0x3be
 8003926:	4913      	ldr	r1, [pc, #76]	; (8003974 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x1b8>)
 8003928:	4813      	ldr	r0, [pc, #76]	; (8003978 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x1bc>)
 800392a:	f7fe f845 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a12      	ldr	r2, [pc, #72]	; (800397c <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x1c0>)
 8003932:	605a      	str	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800393a:	2100      	movs	r1, #0
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f007 f91f 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	0800ec44 	.word	0x0800ec44
 8003950:	20000244 	.word	0x20000244
 8003954:	0800ec50 	.word	0x0800ec50
 8003958:	0800ec54 	.word	0x0800ec54
 800395c:	0800eab8 	.word	0x0800eab8
 8003960:	0800ec58 	.word	0x0800ec58
 8003964:	0800ec60 	.word	0x0800ec60
 8003968:	0800ec68 	.word	0x0800ec68
 800396c:	0800eaf0 	.word	0x0800eaf0
 8003970:	0800ec74 	.word	0x0800ec74
 8003974:	0800e4e8 	.word	0x0800e4e8
 8003978:	0800eb24 	.word	0x0800eb24
 800397c:	08002565 	.word	0x08002565

08003980 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv>:

            void impl_3_2_FanTriggerTemp()
 8003980:	b580      	push	{r7, lr}
 8003982:	b092      	sub	sp, #72	; 0x48
 8003984:	af02      	add	r7, sp, #8
 8003986:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8003988:	f000 ff94 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800398c:	63f8      	str	r0, [r7, #60]	; 0x3c

                mLcd.clearDisplay();
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	330c      	adds	r3, #12
 8003992:	4618      	mov	r0, r3
 8003994:	f007 fb24 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "FAN TRIGGER TEMP");
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f103 000c 	add.w	r0, r3, #12
 800399e:	4b76      	ldr	r3, [pc, #472]	; (8003b78 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x1f8>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	2100      	movs	r1, #0
 80039a4:	f007 f9fa 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                char line1[21] = { 0 };
 80039a8:	2300      	movs	r3, #0
 80039aa:	623b      	str	r3, [r7, #32]
 80039ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	60da      	str	r2, [r3, #12]
 80039ba:	741a      	strb	r2, [r3, #16]
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_temperature_turn_on_fan);
 80039bc:	f7fd fc8e 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80039c0:	4603      	mov	r3, r0
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fc fdc7 	bl	8000558 <__aeabi_f2d>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	f107 0020 	add.w	r0, r7, #32
 80039d2:	e9cd 2300 	strd	r2, r3, [sp]
 80039d6:	4a69      	ldr	r2, [pc, #420]	; (8003b7c <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x1fc>)
 80039d8:	2115      	movs	r1, #21
 80039da:	f008 fc37 	bl	800c24c <sniprintf>
                mLcd.displayLine(1, 0, line1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f103 000c 	add.w	r0, r3, #12
 80039e4:	f107 0320 	add.w	r3, r7, #32
 80039e8:	2200      	movs	r2, #0
 80039ea:	2101      	movs	r1, #1
 80039ec:	f007 f9d6 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                const float delta = 1;
 80039f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80039f4:	63bb      	str	r3, [r7, #56]	; 0x38
                static float setValue = Constant::getInstance().k_temperature_turn_on_fan;
 80039f6:	4b62      	ldr	r3, [pc, #392]	; (8003b80 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x200>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f3bf 8f5b 	dmb	ish
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d013      	beq.n	8003a38 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0xb8>
 8003a10:	485b      	ldr	r0, [pc, #364]	; (8003b80 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x200>)
 8003a12:	f007 fc01 	bl	800b218 <__cxa_guard_acquire>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf14      	ite	ne
 8003a1c:	2301      	movne	r3, #1
 8003a1e:	2300      	moveq	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0xb8>
 8003a26:	f7fd fc59 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4a55      	ldr	r2, [pc, #340]	; (8003b84 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x204>)
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4853      	ldr	r0, [pc, #332]	; (8003b80 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x200>)
 8003a34:	f007 fbfc 	bl	800b230 <__cxa_guard_release>

                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8003a38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003a3a:	f007 f8af 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0xe4>
                {
                    setValue += delta;
 8003a4e:	4b4d      	ldr	r3, [pc, #308]	; (8003b84 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x204>)
 8003a50:	edd3 7a00 	vldr	s15, [r3]
 8003a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a5c:	4b49      	ldr	r3, [pc, #292]	; (8003b84 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x204>)
 8003a5e:	edc3 7a00 	vstr	s15, [r3]
 8003a62:	e014      	b.n	8003a8e <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x10e>
                }
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8003a64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003a66:	f007 f899 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x10e>
                {
                    setValue -= delta;
 8003a7a:	4b42      	ldr	r3, [pc, #264]	; (8003b84 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x204>)
 8003a7c:	edd3 7a00 	vldr	s15, [r3]
 8003a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a88:	4b3e      	ldr	r3, [pc, #248]	; (8003b84 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x204>)
 8003a8a:	edc3 7a00 	vstr	s15, [r3]
                }

                char line2[21] = { 0 };
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	f107 030c 	add.w	r3, r7, #12
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
 8003a9c:	609a      	str	r2, [r3, #8]
 8003a9e:	60da      	str	r2, [r3, #12]
 8003aa0:	741a      	strb	r2, [r3, #16]
                snprintf(line2, 21, "%.2f", setValue);
 8003aa2:	4b38      	ldr	r3, [pc, #224]	; (8003b84 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x204>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fc fd56 	bl	8000558 <__aeabi_f2d>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	f107 0008 	add.w	r0, r7, #8
 8003ab4:	e9cd 2300 	strd	r2, r3, [sp]
 8003ab8:	4a30      	ldr	r2, [pc, #192]	; (8003b7c <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x1fc>)
 8003aba:	2115      	movs	r1, #21
 8003abc:	f008 fbc6 	bl	800c24c <sniprintf>
                mLcd.displayLine(2, 0, line2);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f103 000c 	add.w	r0, r3, #12
 8003ac6:	f107 0308 	add.w	r3, r7, #8
 8003aca:	2200      	movs	r2, #0
 8003acc:	2102      	movs	r1, #2
 8003ace:	f007 f965 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8003ad2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ad4:	f007 f862 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	bf0c      	ite	eq
 8003ade:	2301      	moveq	r3, #1
 8003ae0:	2300      	movne	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01f      	beq.n	8003b28 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x1a8>
                {
                    Constant::getInstance().k_temperature_turn_on_fan = setValue;
 8003ae8:	f7fd fbf8 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b25      	ldr	r3, [pc, #148]	; (8003b84 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x204>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6153      	str	r3, [r2, #20]
                    snprintf(line1, 21, ">> %.2f",
                            Constant::getInstance().k_temperature_turn_on_fan);
 8003af4:	f7fd fbf2 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8003af8:	4603      	mov	r3, r0
 8003afa:	695b      	ldr	r3, [r3, #20]
                    snprintf(line1, 21, ">> %.2f",
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fc fd2b 	bl	8000558 <__aeabi_f2d>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	f107 0020 	add.w	r0, r7, #32
 8003b0a:	e9cd 2300 	strd	r2, r3, [sp]
 8003b0e:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x208>)
 8003b10:	2115      	movs	r1, #21
 8003b12:	f008 fb9b 	bl	800c24c <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f103 000c 	add.w	r0, r3, #12
 8003b1c:	f107 0320 	add.w	r3, r7, #32
 8003b20:	2200      	movs	r2, #0
 8003b22:	2101      	movs	r1, #1
 8003b24:	f007 f93a 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8003b28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003b2a:	f007 f837 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00c      	beq.n	8003b58 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x1d8>
                {
                    LOGI("Go back to Setting screen");
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x20c>)
 8003b40:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8003b44:	4912      	ldr	r1, [pc, #72]	; (8003b90 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x210>)
 8003b46:	4813      	ldr	r0, [pc, #76]	; (8003b94 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x214>)
 8003b48:	f7fd ff36 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x218>)
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f103 000c 	add.w	r0, r3, #12
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x21c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	2103      	movs	r1, #3
 8003b64:	f007 f91a 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8003b68:	2100      	movs	r1, #0
 8003b6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003b6c:	f007 f808 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003b70:	bf00      	nop
 8003b72:	3740      	adds	r7, #64	; 0x40
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	0800ec88 	.word	0x0800ec88
 8003b7c:	0800ebc0 	.word	0x0800ebc0
 8003b80:	2000024c 	.word	0x2000024c
 8003b84:	20000248 	.word	0x20000248
 8003b88:	0800ebc8 	.word	0x0800ebc8
 8003b8c:	0800ec9c 	.word	0x0800ec9c
 8003b90:	0800e4e8 	.word	0x0800e4e8
 8003b94:	0800eb24 	.word	0x0800eb24
 8003b98:	08002565 	.word	0x08002565
 8003b9c:	0800eaf0 	.word	0x0800eaf0

08003ba0 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv>:

            void impl_3_2_ShutdownTemp()
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b092      	sub	sp, #72	; 0x48
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8003ba8:	f000 fe84 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8003bac:	63f8      	str	r0, [r7, #60]	; 0x3c

                mLcd.clearDisplay();
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f007 fa14 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "SHUTDOWN TEMP");
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f103 000c 	add.w	r0, r3, #12
 8003bbe:	4b76      	ldr	r3, [pc, #472]	; (8003d98 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x1f8>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	f007 f8ea 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                char line1[21] = { 0 };
 8003bc8:	2300      	movs	r3, #0
 8003bca:	623b      	str	r3, [r7, #32]
 8003bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	741a      	strb	r2, [r3, #16]
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_temperature_max);
 8003bdc:	f7fd fb7e 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8003be0:	4603      	mov	r3, r0
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fc fcb7 	bl	8000558 <__aeabi_f2d>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	f107 0020 	add.w	r0, r7, #32
 8003bf2:	e9cd 2300 	strd	r2, r3, [sp]
 8003bf6:	4a69      	ldr	r2, [pc, #420]	; (8003d9c <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x1fc>)
 8003bf8:	2115      	movs	r1, #21
 8003bfa:	f008 fb27 	bl	800c24c <sniprintf>
                mLcd.displayLine(1, 0, line1);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f103 000c 	add.w	r0, r3, #12
 8003c04:	f107 0320 	add.w	r3, r7, #32
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	f007 f8c6 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                const float delta = 1;
 8003c10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003c14:	63bb      	str	r3, [r7, #56]	; 0x38
                static float setValue = Constant::getInstance().k_temperature_max;
 8003c16:	4b62      	ldr	r3, [pc, #392]	; (8003da0 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x200>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f3bf 8f5b 	dmb	ish
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bf0c      	ite	eq
 8003c26:	2301      	moveq	r3, #1
 8003c28:	2300      	movne	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d013      	beq.n	8003c58 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0xb8>
 8003c30:	485b      	ldr	r0, [pc, #364]	; (8003da0 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x200>)
 8003c32:	f007 faf1 	bl	800b218 <__cxa_guard_acquire>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0xb8>
 8003c46:	f7fd fb49 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	4a55      	ldr	r2, [pc, #340]	; (8003da4 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x204>)
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4853      	ldr	r0, [pc, #332]	; (8003da0 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x200>)
 8003c54:	f007 faec 	bl	800b230 <__cxa_guard_release>

                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8003c58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c5a:	f006 ff9f 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0xe4>
                {
                    setValue += delta;
 8003c6e:	4b4d      	ldr	r3, [pc, #308]	; (8003da4 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x204>)
 8003c70:	edd3 7a00 	vldr	s15, [r3]
 8003c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c7c:	4b49      	ldr	r3, [pc, #292]	; (8003da4 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x204>)
 8003c7e:	edc3 7a00 	vstr	s15, [r3]
 8003c82:	e014      	b.n	8003cae <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x10e>
                }
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8003c84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c86:	f006 ff89 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x10e>
                {
                    setValue -= delta;
 8003c9a:	4b42      	ldr	r3, [pc, #264]	; (8003da4 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x204>)
 8003c9c:	edd3 7a00 	vldr	s15, [r3]
 8003ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ca4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ca8:	4b3e      	ldr	r3, [pc, #248]	; (8003da4 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x204>)
 8003caa:	edc3 7a00 	vstr	s15, [r3]
                }

                char line2[21] = { 0 };
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	f107 030c 	add.w	r3, r7, #12
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	60da      	str	r2, [r3, #12]
 8003cc0:	741a      	strb	r2, [r3, #16]
                snprintf(line2, 21, "%.2f", setValue);
 8003cc2:	4b38      	ldr	r3, [pc, #224]	; (8003da4 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x204>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fc fc46 	bl	8000558 <__aeabi_f2d>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	f107 0008 	add.w	r0, r7, #8
 8003cd4:	e9cd 2300 	strd	r2, r3, [sp]
 8003cd8:	4a30      	ldr	r2, [pc, #192]	; (8003d9c <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x1fc>)
 8003cda:	2115      	movs	r1, #21
 8003cdc:	f008 fab6 	bl	800c24c <sniprintf>
                mLcd.displayLine(2, 0, line2);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f103 000c 	add.w	r0, r3, #12
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	2200      	movs	r2, #0
 8003cec:	2102      	movs	r1, #2
 8003cee:	f007 f855 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8003cf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003cf4:	f006 ff52 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	bf0c      	ite	eq
 8003cfe:	2301      	moveq	r3, #1
 8003d00:	2300      	movne	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01f      	beq.n	8003d48 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x1a8>
                {
                    Constant::getInstance().k_temperature_max = setValue;
 8003d08:	f7fd fae8 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x204>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6113      	str	r3, [r2, #16]
                    snprintf(line1, 21, ">> %.2f", Constant::getInstance().k_temperature_max);
 8003d14:	f7fd fae2 	bl	80012dc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fc fc1b 	bl	8000558 <__aeabi_f2d>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	f107 0020 	add.w	r0, r7, #32
 8003d2a:	e9cd 2300 	strd	r2, r3, [sp]
 8003d2e:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x208>)
 8003d30:	2115      	movs	r1, #21
 8003d32:	f008 fa8b 	bl	800c24c <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f103 000c 	add.w	r0, r3, #12
 8003d3c:	f107 0320 	add.w	r3, r7, #32
 8003d40:	2200      	movs	r2, #0
 8003d42:	2101      	movs	r1, #1
 8003d44:	f007 f82a 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8003d48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d4a:	f006 ff27 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00c      	beq.n	8003d78 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x1d8>
                {
                    LOGI("Go back to Setting screen");
 8003d5e:	4b13      	ldr	r3, [pc, #76]	; (8003dac <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x20c>)
 8003d60:	f240 4216 	movw	r2, #1046	; 0x416
 8003d64:	4912      	ldr	r1, [pc, #72]	; (8003db0 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x210>)
 8003d66:	4813      	ldr	r0, [pc, #76]	; (8003db4 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x214>)
 8003d68:	f7fd fe26 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x218>)
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	609a      	str	r2, [r3, #8]
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f103 000c 	add.w	r0, r3, #12
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x21c>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	2103      	movs	r1, #3
 8003d84:	f007 f80a 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8003d88:	2100      	movs	r1, #0
 8003d8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d8c:	f006 fef8 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003d90:	bf00      	nop
 8003d92:	3740      	adds	r7, #64	; 0x40
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	0800ecb4 	.word	0x0800ecb4
 8003d9c:	0800ebc0 	.word	0x0800ebc0
 8003da0:	20000254 	.word	0x20000254
 8003da4:	20000250 	.word	0x20000250
 8003da8:	0800ebc8 	.word	0x0800ebc8
 8003dac:	0800ecc4 	.word	0x0800ecc4
 8003db0:	0800e4e8 	.word	0x0800e4e8
 8003db4:	0800eb24 	.word	0x0800eb24
 8003db8:	08002565 	.word	0x08002565
 8003dbc:	0800eaf0 	.word	0x0800eaf0

08003dc0 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv>:

            void impl_3_2_AutoloadCfg()
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8003dc8:	f000 fd74 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8003dcc:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f006 fee4 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00c      	beq.n	8003dfe <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x50>)
 8003de6:	f240 4224 	movw	r2, #1060	; 0x424
 8003dea:	490a      	ldr	r1, [pc, #40]	; (8003e14 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x54>)
 8003dec:	480a      	ldr	r0, [pc, #40]	; (8003e18 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x58>)
 8003dee:	f7fd fde3 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x5c>)
 8003df6:	605a      	str	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f006 febd 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003e06:	bf00      	nop
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	0800ecdc 	.word	0x0800ecdc
 8003e14:	0800e4e8 	.word	0x0800e4e8
 8003e18:	0800eb24 	.word	0x0800eb24
 8003e1c:	08002565 	.word	0x08002565

08003e20 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv>:

            void impl_3_2_Backlight()
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8003e28:	f000 fd44 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8003e2c:	60f8      	str	r0, [r7, #12]

                static bool isBacklight = true;

                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f006 feb4 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003e34:	4603      	mov	r3, r0
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d005      	beq.n	8003e46 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x26>
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f006 feae 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d101      	bne.n	8003e4a <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x2a>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x2c>
 8003e4a:	2300      	movs	r3, #0
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x40>
                {
                    isBacklight = !isBacklight;
 8003e50:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x120>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	f083 0301 	eor.w	r3, r3, #1
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x120>)
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	e017      	b.n	8003e90 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x70>
                }

                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f006 fe9b 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00c      	beq.n	8003e90 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x70>
                {
                    LOGI("Go back to Setting screen");
 8003e76:	4b33      	ldr	r3, [pc, #204]	; (8003f44 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x124>)
 8003e78:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8003e7c:	4932      	ldr	r1, [pc, #200]	; (8003f48 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x128>)
 8003e7e:	4833      	ldr	r0, [pc, #204]	; (8003f4c <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x12c>)
 8003e80:	f7fd fd9a 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a32      	ldr	r2, [pc, #200]	; (8003f50 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x130>)
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	609a      	str	r2, [r3, #8]
                }

                mLcd.clearDisplay();
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	330c      	adds	r3, #12
 8003e94:	4618      	mov	r0, r3
 8003e96:	f007 f8a3 	bl	800afe0 <_ZN4blib3Lcd12clearDisplayEv>

                mLcd.displayLine(0, 0, "LCD BACKLIGHT");
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f103 000c 	add.w	r0, r3, #12
 8003ea0:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x134>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	f006 ff79 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (isBacklight)
 8003eaa:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x120>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xa4>
                {
                    mLcd.displayLine(1, 0, "YES");
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f103 000c 	add.w	r0, r3, #12
 8003eb8:	4b27      	ldr	r3, [pc, #156]	; (8003f58 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x138>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	f006 ff6d 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8003ec2:	e007      	b.n	8003ed4 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xb4>
                }
                else
                {
                    mLcd.displayLine(1, 0, "NO ");
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f103 000c 	add.w	r0, r3, #12
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x13c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2101      	movs	r1, #1
 8003ed0:	f006 ff64 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f006 fe61 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01a      	beq.n	8003f20 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x100>
                {
                    if (isBacklight == true)
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x120>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d10b      	bne.n	8003f0a <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xea>
                    {
                        impl_backLight();
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f877 	bl	8003fe6 <_ZN4blib11LcdSimulate14impl_backLightEv>
                        mLcd.displayLine(2, 0, "> Backlight on");
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f103 000c 	add.w	r0, r3, #12
 8003efe:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x140>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	2102      	movs	r1, #2
 8003f04:	f006 ff4a 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
 8003f08:	e00a      	b.n	8003f20 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x100>
                    }
                    else
                    {
                        impl_Nobacklight();
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f85e 	bl	8003fcc <_ZN4blib11LcdSimulate16impl_NobacklightEv>
                        mLcd.displayLine(2, 0, "> Backlight off");
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f103 000c 	add.w	r0, r3, #12
 8003f16:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x144>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	f006 ff3e 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>
                    }
                }

                mLcd.displayLine(3, 15, "4BACK");
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f103 000c 	add.w	r0, r3, #12
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x148>)
 8003f28:	220f      	movs	r2, #15
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	f006 ff36 	bl	800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8003f30:	2100      	movs	r1, #0
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f006 fe24 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000008 	.word	0x20000008
 8003f44:	0800ecf4 	.word	0x0800ecf4
 8003f48:	0800e4e8 	.word	0x0800e4e8
 8003f4c:	0800eb24 	.word	0x0800eb24
 8003f50:	08002565 	.word	0x08002565
 8003f54:	0800ed08 	.word	0x0800ed08
 8003f58:	0800ed18 	.word	0x0800ed18
 8003f5c:	0800ed1c 	.word	0x0800ed1c
 8003f60:	0800ed20 	.word	0x0800ed20
 8003f64:	0800ed30 	.word	0x0800ed30
 8003f68:	0800e628 	.word	0x0800e628

08003f6c <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv>:

            void impl_3_2_FactoryReset()
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8003f74:	f000 fc9e 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8003f78:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f006 fe0e 	bl	800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	bf0c      	ite	eq
 8003f86:	2301      	moveq	r3, #1
 8003f88:	2300      	movne	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00c      	beq.n	8003faa <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x50>)
 8003f92:	f240 4261 	movw	r2, #1121	; 0x461
 8003f96:	490a      	ldr	r1, [pc, #40]	; (8003fc0 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x54>)
 8003f98:	480a      	ldr	r0, [pc, #40]	; (8003fc4 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x58>)
 8003f9a:	f7fd fd0d 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x5c>)
 8003fa2:	605a      	str	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8003faa:	2100      	movs	r1, #0
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f006 fde7 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	0800ed40 	.word	0x0800ed40
 8003fc0:	0800e4e8 	.word	0x0800e4e8
 8003fc4:	0800eb24 	.word	0x0800eb24
 8003fc8:	08002565 	.word	0x08002565

08003fcc <_ZN4blib11LcdSimulate16impl_NobacklightEv>:

            void impl_Nobacklight()
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
            {
                mLcd.noBackligth();
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	330c      	adds	r3, #12
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f007 f877 	bl	800b0cc <_ZN4blib3Lcd11noBackligthEv>
            }
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <_ZN4blib11LcdSimulate14impl_backLightEv>:

            void impl_backLight()
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
            {
                mLcd.backlight();
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f007 f87b 	bl	800b0ee <_ZN4blib3Lcd9backlightEv>
            }
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_GPIO_EXTI_Callback>:
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	80fb      	strh	r3, [r7, #6]
    GPIO_TypeDef *pGPIOx = nullptr;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
    static blib::Button::ButtonName lastedPressButton = blib::Button::ButtonName::UNDEFINED;
    uint32_t timedelay = 2600000U;
 800400e:	4b49      	ldr	r3, [pc, #292]	; (8004134 <HAL_GPIO_EXTI_Callback+0x134>)
 8004010:	61bb      	str	r3, [r7, #24]

    for (volatile uint32_t i = 0; i < timedelay; i++);
 8004012:	2300      	movs	r3, #0
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	e002      	b.n	800401e <HAL_GPIO_EXTI_Callback+0x1e>
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	3301      	adds	r3, #1
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	429a      	cmp	r2, r3
 8004024:	bf8c      	ite	hi
 8004026:	2301      	movhi	r3, #1
 8004028:	2300      	movls	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f3      	bne.n	8004018 <HAL_GPIO_EXTI_Callback+0x18>

    volatile uint32_t i = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]

    if (GPIO_pin == BUT_UP_Pin)
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d10b      	bne.n	8004052 <HAL_GPIO_EXTI_Callback+0x52>
    {
        LOGI("Button Up pin");
 800403a:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <HAL_GPIO_EXTI_Callback+0x138>)
 800403c:	2253      	movs	r2, #83	; 0x53
 800403e:	493f      	ldr	r1, [pc, #252]	; (800413c <HAL_GPIO_EXTI_Callback+0x13c>)
 8004040:	483f      	ldr	r0, [pc, #252]	; (8004140 <HAL_GPIO_EXTI_Callback+0x140>)
 8004042:	f7fd fcb9 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::UP;
 8004046:	4b3f      	ldr	r3, [pc, #252]	; (8004144 <HAL_GPIO_EXTI_Callback+0x144>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_UP_GPIO_Port;
 800404c:	4b3e      	ldr	r3, [pc, #248]	; (8004148 <HAL_GPIO_EXTI_Callback+0x148>)
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	e032      	b.n	80040b8 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_DOWN_Pin)
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d10b      	bne.n	8004070 <HAL_GPIO_EXTI_Callback+0x70>
    {
        LOGI("Button Down pin");
 8004058:	4b37      	ldr	r3, [pc, #220]	; (8004138 <HAL_GPIO_EXTI_Callback+0x138>)
 800405a:	2259      	movs	r2, #89	; 0x59
 800405c:	4937      	ldr	r1, [pc, #220]	; (800413c <HAL_GPIO_EXTI_Callback+0x13c>)
 800405e:	483b      	ldr	r0, [pc, #236]	; (800414c <HAL_GPIO_EXTI_Callback+0x14c>)
 8004060:	f7fd fcaa 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::DOWN;
 8004064:	4b37      	ldr	r3, [pc, #220]	; (8004144 <HAL_GPIO_EXTI_Callback+0x144>)
 8004066:	2202      	movs	r2, #2
 8004068:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_DOWN_GPIO_Port;
 800406a:	4b37      	ldr	r3, [pc, #220]	; (8004148 <HAL_GPIO_EXTI_Callback+0x148>)
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	e023      	b.n	80040b8 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_BACK_Pin)
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	2b04      	cmp	r3, #4
 8004074:	d10b      	bne.n	800408e <HAL_GPIO_EXTI_Callback+0x8e>
    {
        LOGI("Button Back pin");
 8004076:	4b30      	ldr	r3, [pc, #192]	; (8004138 <HAL_GPIO_EXTI_Callback+0x138>)
 8004078:	225f      	movs	r2, #95	; 0x5f
 800407a:	4930      	ldr	r1, [pc, #192]	; (800413c <HAL_GPIO_EXTI_Callback+0x13c>)
 800407c:	4834      	ldr	r0, [pc, #208]	; (8004150 <HAL_GPIO_EXTI_Callback+0x150>)
 800407e:	f7fd fc9b 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::BACK;
 8004082:	4b30      	ldr	r3, [pc, #192]	; (8004144 <HAL_GPIO_EXTI_Callback+0x144>)
 8004084:	2204      	movs	r2, #4
 8004086:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_BACK_GPIO_Port;
 8004088:	4b2f      	ldr	r3, [pc, #188]	; (8004148 <HAL_GPIO_EXTI_Callback+0x148>)
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	e014      	b.n	80040b8 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_SEL_Pin)
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	2b08      	cmp	r3, #8
 8004092:	d10b      	bne.n	80040ac <HAL_GPIO_EXTI_Callback+0xac>
    {
        LOGI("Button Select pin");
 8004094:	4b28      	ldr	r3, [pc, #160]	; (8004138 <HAL_GPIO_EXTI_Callback+0x138>)
 8004096:	2265      	movs	r2, #101	; 0x65
 8004098:	4928      	ldr	r1, [pc, #160]	; (800413c <HAL_GPIO_EXTI_Callback+0x13c>)
 800409a:	482e      	ldr	r0, [pc, #184]	; (8004154 <HAL_GPIO_EXTI_Callback+0x154>)
 800409c:	f7fd fc8c 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::SEL;
 80040a0:	4b28      	ldr	r3, [pc, #160]	; (8004144 <HAL_GPIO_EXTI_Callback+0x144>)
 80040a2:	2203      	movs	r2, #3
 80040a4:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_SEL_GPIO_Port;
 80040a6:	4b28      	ldr	r3, [pc, #160]	; (8004148 <HAL_GPIO_EXTI_Callback+0x148>)
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	e005      	b.n	80040b8 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else
    {
        LOGI("Undefined Exti Signal");
 80040ac:	4b22      	ldr	r3, [pc, #136]	; (8004138 <HAL_GPIO_EXTI_Callback+0x138>)
 80040ae:	226b      	movs	r2, #107	; 0x6b
 80040b0:	4922      	ldr	r1, [pc, #136]	; (800413c <HAL_GPIO_EXTI_Callback+0x13c>)
 80040b2:	4829      	ldr	r0, [pc, #164]	; (8004158 <HAL_GPIO_EXTI_Callback+0x158>)
 80040b4:	f7fd fc80 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }

    blib::Button::getInstance().setLatestPressedButton(lastedPressButton);
 80040b8:	f000 fbfc 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80040bc:	4602      	mov	r2, r0
 80040be:	4b21      	ldr	r3, [pc, #132]	; (8004144 <HAL_GPIO_EXTI_Callback+0x144>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f006 fd5b 	bl	800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
    blib::Button::getInstance().handleSignal();
 80040ca:	f000 fbf3 	bl	80048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80040ce:	4603      	mov	r3, r0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f006 fd6f 	bl	800abb4 <_ZN4blib6Button12handleSignalEv>

    if (pGPIOx != nullptr)
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d014      	beq.n	8004106 <HAL_GPIO_EXTI_Callback+0x106>
    {
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) && (i < (timedelay)))
 80040dc:	e002      	b.n	80040e4 <HAL_GPIO_EXTI_Callback+0xe4>
        {
            i++;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	3301      	adds	r3, #1
 80040e2:	617b      	str	r3, [r7, #20]
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) && (i < (timedelay)))
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	4619      	mov	r1, r3
 80040e8:	69f8      	ldr	r0, [r7, #28]
 80040ea:	f002 fd35 	bl	8006b58 <HAL_GPIO_ReadPin>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <HAL_GPIO_EXTI_Callback+0x100>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d901      	bls.n	8004100 <HAL_GPIO_EXTI_Callback+0x100>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <HAL_GPIO_EXTI_Callback+0x102>
 8004100:	2300      	movs	r3, #0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1eb      	bne.n	80040de <HAL_GPIO_EXTI_Callback+0xde>
        }
    }

    for (volatile uint32_t i = 0; i < timedelay; i++);
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	e002      	b.n	8004112 <HAL_GPIO_EXTI_Callback+0x112>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3301      	adds	r3, #1
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	429a      	cmp	r2, r3
 8004118:	bf8c      	ite	hi
 800411a:	2301      	movhi	r3, #1
 800411c:	2300      	movls	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f3      	bne.n	800410c <HAL_GPIO_EXTI_Callback+0x10c>

    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_pin);
 8004124:	4a0d      	ldr	r2, [pc, #52]	; (800415c <HAL_GPIO_EXTI_Callback+0x15c>)
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	6153      	str	r3, [r2, #20]
}
 800412a:	bf00      	nop
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	0027ac40 	.word	0x0027ac40
 8004138:	0800ed58 	.word	0x0800ed58
 800413c:	0800ed70 	.word	0x0800ed70
 8004140:	0800ed7c 	.word	0x0800ed7c
 8004144:	20000414 	.word	0x20000414
 8004148:	48000800 	.word	0x48000800
 800414c:	0800ed98 	.word	0x0800ed98
 8004150:	0800edb8 	.word	0x0800edb8
 8004154:	0800edd8 	.word	0x0800edd8
 8004158:	0800edf8 	.word	0x0800edf8
 800415c:	40010400 	.word	0x40010400

08004160 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
    blib::Analog::getInstance().sampling();
 8004168:	f7fd fbfa 	bl	8001960 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 800416c:	4603      	mov	r3, r0
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc fdc4 	bl	8000cfc <_ZN4blib6Analog8samplingEv>
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8004182:	f000 fe89 	bl	8004e98 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8004186:	f000 f83f 	bl	8004208 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800418a:	f000 fa71 	bl	8004670 <_ZL12MX_GPIO_Initv>
    MX_DMA_Init();
 800418e:	f000 fa51 	bl	8004634 <_ZL11MX_DMA_Initv>
    MX_ADC1_Init();
 8004192:	f000 f8ad 	bl	80042f0 <_ZL12MX_ADC1_Initv>
    MX_I2C1_Init();
 8004196:	f000 f93b 	bl	8004410 <_ZL12MX_I2C1_Initv>
    MX_USART2_UART_Init();
 800419a:	f000 fa17 	bl	80045cc <_ZL19MX_USART2_UART_Initv>
    MX_TIM2_Init();
 800419e:	f000 f985 	bl	80044ac <_ZL12MX_TIM2_Initv>
    /* USER CODE BEGIN 2 */
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 80041a2:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <main+0x78>)
 80041a4:	22ac      	movs	r2, #172	; 0xac
 80041a6:	4914      	ldr	r1, [pc, #80]	; (80041f8 <main+0x7c>)
 80041a8:	4814      	ldr	r0, [pc, #80]	; (80041fc <main+0x80>)
 80041aa:	f7fd fc05 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 80041ae:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <main+0x78>)
 80041b0:	22ad      	movs	r2, #173	; 0xad
 80041b2:	4911      	ldr	r1, [pc, #68]	; (80041f8 <main+0x7c>)
 80041b4:	4812      	ldr	r0, [pc, #72]	; (8004200 <main+0x84>)
 80041b6:	f7fd fbff 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 80041ba:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <main+0x78>)
 80041bc:	22ae      	movs	r2, #174	; 0xae
 80041be:	490e      	ldr	r1, [pc, #56]	; (80041f8 <main+0x7c>)
 80041c0:	4810      	ldr	r0, [pc, #64]	; (8004204 <main+0x88>)
 80041c2:	f7fd fbf9 	bl	80019b8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>

    auto &analog = blib::Analog::getInstance();
 80041c6:	f7fd fbcb 	bl	8001960 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 80041ca:	60f8      	str	r0, [r7, #12]
    auto &chargeCtrl = blib::ChargeControl::getInstance();
 80041cc:	f7fd fcba 	bl	8001b44 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 80041d0:	60b8      	str	r0, [r7, #8]
    auto &lcdSimulate = blib::LcdSimulate::getInstance();
 80041d2:	f000 fb59 	bl	8004888 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>
 80041d6:	6078      	str	r0, [r7, #4]
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        analog.readAnalog();
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7fc fd9f 	bl	8000d1c <_ZN4blib6Analog10readAnalogEv>
        chargeCtrl.run();
 80041de:	68b8      	ldr	r0, [r7, #8]
 80041e0:	f7fd f958 	bl	8001494 <_ZN4blib13ChargeControl3runEv>
//        serialMnt.show();
//        monitor.showMenu();
        lcdSimulate.run();
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7fd fd7d 	bl	8001ce4 <_ZN4blib11LcdSimulate3runEv>
        HAL_Delay(500);
 80041ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041ee:	f000 feb9 	bl	8004f64 <HAL_Delay>
        analog.readAnalog();
 80041f2:	e7f1      	b.n	80041d8 <main+0x5c>
 80041f4:	0800ee1c 	.word	0x0800ee1c
 80041f8:	0800ed70 	.word	0x0800ed70
 80041fc:	0800ee24 	.word	0x0800ee24
 8004200:	0800ee50 	.word	0x0800ee50
 8004204:	0800ee6c 	.word	0x0800ee6c

08004208 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b0a6      	sub	sp, #152	; 0x98
 800420c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800420e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004212:	2228      	movs	r2, #40	; 0x28
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f008 f88f 	bl	800c33a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800421c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	609a      	str	r2, [r3, #8]
 8004228:	60da      	str	r2, [r3, #12]
 800422a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800422c:	1d3b      	adds	r3, r7, #4
 800422e:	2258      	movs	r2, #88	; 0x58
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f008 f881 	bl	800c33a <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004238:	2302      	movs	r3, #2
 800423a:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800423c:	2301      	movs	r3, #1
 800423e:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004240:	2310      	movs	r3, #16
 8004242:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004246:	2302      	movs	r3, #2
 8004248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800424c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004254:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004258:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800425c:	2300      	movs	r3, #0
 800425e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004262:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004266:	4618      	mov	r0, r3
 8004268:	f003 f8ea 	bl	8007440 <HAL_RCC_OscConfig>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <_Z18SystemClock_Configv+0x78>
    {
        Error_Handler();
 800427c:	f000 fa9e 	bl	80047bc <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8004280:	230f      	movs	r3, #15
 8004282:	65fb      	str	r3, [r7, #92]	; 0x5c
            | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004284:	2302      	movs	r3, #2
 8004286:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004288:	2300      	movs	r3, #0
 800428a:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800428c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004290:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004292:	2300      	movs	r3, #0
 8004294:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004296:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800429a:	2102      	movs	r1, #2
 800429c:	4618      	mov	r0, r3
 800429e:	f004 f923 	bl	80084e8 <HAL_RCC_ClockConfig>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <_Z18SystemClock_Configv+0xae>
    {
        Error_Handler();
 80042b2:	f000 fa83 	bl	80047bc <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1
 80042b6:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <_Z18SystemClock_Configv+0xe4>)
 80042b8:	607b      	str	r3, [r7, #4]
            | RCC_PERIPHCLK_TIM2;
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80042ba:	2300      	movs	r3, #0
 80042bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80042be:	2300      	movs	r3, #0
 80042c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042c6:	1d3b      	adds	r3, r7, #4
 80042c8:	4618      	mov	r0, r3
 80042ca:	f004 fb43 	bl	8008954 <HAL_RCCEx_PeriphCLKConfig>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <_Z18SystemClock_Configv+0xda>
    {
        Error_Handler();
 80042de:	f000 fa6d 	bl	80047bc <Error_Handler>
    }
}
 80042e2:	bf00      	nop
 80042e4:	3798      	adds	r7, #152	; 0x98
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	00100022 	.word	0x00100022

080042f0 <_ZL12MX_ADC1_Initv>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_MultiModeTypeDef multimode = { 0 };
 80042f6:	f107 031c 	add.w	r3, r7, #28
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	605a      	str	r2, [r3, #4]
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	60da      	str	r2, [r3, #12]
 800430e:	611a      	str	r2, [r3, #16]
 8004310:	615a      	str	r2, [r3, #20]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8004312:	4b3e      	ldr	r3, [pc, #248]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 8004314:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004318:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800431a:	4b3c      	ldr	r3, [pc, #240]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 800431c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004320:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004322:	4b3a      	ldr	r3, [pc, #232]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 8004324:	2200      	movs	r2, #0
 8004326:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004328:	4b38      	ldr	r3, [pc, #224]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 800432a:	2201      	movs	r2, #1
 800432c:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 800432e:	4b37      	ldr	r3, [pc, #220]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 8004330:	2201      	movs	r2, #1
 8004332:	765a      	strb	r2, [r3, #25]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004334:	4b35      	ldr	r3, [pc, #212]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800433c:	4b33      	ldr	r3, [pc, #204]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 800433e:	2200      	movs	r2, #0
 8004340:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004342:	4b32      	ldr	r3, [pc, #200]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 8004344:	2201      	movs	r2, #1
 8004346:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004348:	4b30      	ldr	r3, [pc, #192]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 800434a:	2200      	movs	r2, #0
 800434c:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 2;
 800434e:	4b2f      	ldr	r3, [pc, #188]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 8004350:	2202      	movs	r2, #2
 8004352:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8004354:	4b2d      	ldr	r3, [pc, #180]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 800435e:	2208      	movs	r2, #8
 8004360:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8004362:	4b2a      	ldr	r3, [pc, #168]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 8004364:	2200      	movs	r2, #0
 8004366:	761a      	strb	r2, [r3, #24]
    hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004368:	4b28      	ldr	r3, [pc, #160]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 800436a:	2200      	movs	r2, #0
 800436c:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800436e:	4827      	ldr	r0, [pc, #156]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 8004370:	f000 fe30 	bl	8004fd4 <HAL_ADC_Init>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf14      	ite	ne
 800437a:	2301      	movne	r3, #1
 800437c:	2300      	moveq	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <_ZL12MX_ADC1_Initv+0x98>
    {
        Error_Handler();
 8004384:	f000 fa1a 	bl	80047bc <Error_Handler>
    }

    /** Configure the ADC multi-mode
     */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800438c:	f107 031c 	add.w	r3, r7, #28
 8004390:	4619      	mov	r1, r3
 8004392:	481e      	ldr	r0, [pc, #120]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 8004394:	f001 fc80 	bl	8005c98 <HAL_ADCEx_MultiModeConfigChannel>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	bf14      	ite	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	2300      	moveq	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <_ZL12MX_ADC1_Initv+0xbc>
    {
        Error_Handler();
 80043a8:	f000 fa08 	bl	80047bc <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_1;
 80043ac:	2301      	movs	r3, #1
 80043ae:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80043b0:	2301      	movs	r3, #1
 80043b2:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80043b4:	2301      	movs	r3, #1
 80043b6:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80043b8:	2307      	movs	r3, #7
 80043ba:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	4619      	mov	r1, r3
 80043c8:	4810      	ldr	r0, [pc, #64]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 80043ca:	f001 f97b 	bl	80056c4 <HAL_ADC_ConfigChannel>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf14      	ite	ne
 80043d4:	2301      	movne	r3, #1
 80043d6:	2300      	moveq	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <_ZL12MX_ADC1_Initv+0xf2>
    {
        Error_Handler();
 80043de:	f000 f9ed 	bl	80047bc <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Rank = ADC_REGULAR_RANK_2;
 80043e2:	2302      	movs	r3, #2
 80043e4:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043e6:	1d3b      	adds	r3, r7, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4808      	ldr	r0, [pc, #32]	; (800440c <_ZL12MX_ADC1_Initv+0x11c>)
 80043ec:	f001 f96a 	bl	80056c4 <HAL_ADC_ConfigChannel>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <_ZL12MX_ADC1_Initv+0x114>
    {
        Error_Handler();
 8004400:	f000 f9dc 	bl	80047bc <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8004404:	bf00      	nop
 8004406:	3728      	adds	r7, #40	; 0x28
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000258 	.word	0x20000258

08004410 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8004414:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <_ZL12MX_I2C1_Initv+0x90>)
 8004416:	4a23      	ldr	r2, [pc, #140]	; (80044a4 <_ZL12MX_I2C1_Initv+0x94>)
 8004418:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x2000090E;
 800441a:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <_ZL12MX_I2C1_Initv+0x90>)
 800441c:	4a22      	ldr	r2, [pc, #136]	; (80044a8 <_ZL12MX_I2C1_Initv+0x98>)
 800441e:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8004420:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <_ZL12MX_I2C1_Initv+0x90>)
 8004422:	2200      	movs	r2, #0
 8004424:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004426:	4b1e      	ldr	r3, [pc, #120]	; (80044a0 <_ZL12MX_I2C1_Initv+0x90>)
 8004428:	2201      	movs	r2, #1
 800442a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <_ZL12MX_I2C1_Initv+0x90>)
 800442e:	2200      	movs	r2, #0
 8004430:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8004432:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <_ZL12MX_I2C1_Initv+0x90>)
 8004434:	2200      	movs	r2, #0
 8004436:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004438:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <_ZL12MX_I2C1_Initv+0x90>)
 800443a:	2200      	movs	r2, #0
 800443c:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800443e:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <_ZL12MX_I2C1_Initv+0x90>)
 8004440:	2200      	movs	r2, #0
 8004442:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004444:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <_ZL12MX_I2C1_Initv+0x90>)
 8004446:	2200      	movs	r2, #0
 8004448:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800444a:	4815      	ldr	r0, [pc, #84]	; (80044a0 <_ZL12MX_I2C1_Initv+0x90>)
 800444c:	f002 fbcc 	bl	8006be8 <HAL_I2C_Init>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	bf14      	ite	ne
 8004456:	2301      	movne	r3, #1
 8004458:	2300      	moveq	r3, #0
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <_ZL12MX_I2C1_Initv+0x54>
    {
        Error_Handler();
 8004460:	f000 f9ac 	bl	80047bc <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004464:	2100      	movs	r1, #0
 8004466:	480e      	ldr	r0, [pc, #56]	; (80044a0 <_ZL12MX_I2C1_Initv+0x90>)
 8004468:	f002 ff52 	bl	8007310 <HAL_I2CEx_ConfigAnalogFilter>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	bf14      	ite	ne
 8004472:	2301      	movne	r3, #1
 8004474:	2300      	moveq	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <_ZL12MX_I2C1_Initv+0x70>
    {
        Error_Handler();
 800447c:	f000 f99e 	bl	80047bc <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004480:	2100      	movs	r1, #0
 8004482:	4807      	ldr	r0, [pc, #28]	; (80044a0 <_ZL12MX_I2C1_Initv+0x90>)
 8004484:	f002 ff8f 	bl	80073a6 <HAL_I2CEx_ConfigDigitalFilter>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	bf14      	ite	ne
 800448e:	2301      	movne	r3, #1
 8004490:	2300      	moveq	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <_ZL12MX_I2C1_Initv+0x8c>
    {
        Error_Handler();
 8004498:	f000 f990 	bl	80047bc <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	200002ec 	.word	0x200002ec
 80044a4:	40005400 	.word	0x40005400
 80044a8:	2000090e 	.word	0x2000090e

080044ac <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08e      	sub	sp, #56	; 0x38
 80044b0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80044b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	605a      	str	r2, [r3, #4]
 80044bc:	609a      	str	r2, [r3, #8]
 80044be:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80044c0:	f107 031c 	add.w	r3, r7, #28
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	605a      	str	r2, [r3, #4]
 80044ca:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 80044cc:	463b      	mov	r3, r7
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	605a      	str	r2, [r3, #4]
 80044d4:	609a      	str	r2, [r3, #8]
 80044d6:	60da      	str	r2, [r3, #12]
 80044d8:	611a      	str	r2, [r3, #16]
 80044da:	615a      	str	r2, [r3, #20]
 80044dc:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 80044de:	4b3a      	ldr	r3, [pc, #232]	; (80045c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80044e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044e4:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 80044e6:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ec:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 1440;
 80044f2:	4b35      	ldr	r3, [pc, #212]	; (80045c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80044f4:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80044f8:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044fa:	4b33      	ldr	r3, [pc, #204]	; (80045c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004500:	4b31      	ldr	r3, [pc, #196]	; (80045c8 <_ZL12MX_TIM2_Initv+0x11c>)
 8004502:	2280      	movs	r2, #128	; 0x80
 8004504:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004506:	4830      	ldr	r0, [pc, #192]	; (80045c8 <_ZL12MX_TIM2_Initv+0x11c>)
 8004508:	f004 fc42 	bl	8008d90 <HAL_TIM_Base_Init>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf14      	ite	ne
 8004512:	2301      	movne	r3, #1
 8004514:	2300      	moveq	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <_ZL12MX_TIM2_Initv+0x74>
    {
        Error_Handler();
 800451c:	f000 f94e 	bl	80047bc <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004524:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800452a:	4619      	mov	r1, r3
 800452c:	4826      	ldr	r0, [pc, #152]	; (80045c8 <_ZL12MX_TIM2_Initv+0x11c>)
 800452e:	f005 f827 	bl	8009580 <HAL_TIM_ConfigClockSource>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <_ZL12MX_TIM2_Initv+0x9a>
    {
        Error_Handler();
 8004542:	f000 f93b 	bl	80047bc <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004546:	4820      	ldr	r0, [pc, #128]	; (80045c8 <_ZL12MX_TIM2_Initv+0x11c>)
 8004548:	f004 fc79 	bl	8008e3e <HAL_TIM_PWM_Init>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <_ZL12MX_TIM2_Initv+0xb4>
    {
        Error_Handler();
 800455c:	f000 f92e 	bl	80047bc <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004568:	f107 031c 	add.w	r3, r7, #28
 800456c:	4619      	mov	r1, r3
 800456e:	4816      	ldr	r0, [pc, #88]	; (80045c8 <_ZL12MX_TIM2_Initv+0x11c>)
 8004570:	f005 fd66 	bl	800a040 <HAL_TIMEx_MasterConfigSynchronization>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	bf14      	ite	ne
 800457a:	2301      	movne	r3, #1
 800457c:	2300      	moveq	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <_ZL12MX_TIM2_Initv+0xdc>
    {
        Error_Handler();
 8004584:	f000 f91a 	bl	80047bc <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004588:	2360      	movs	r3, #96	; 0x60
 800458a:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 8;
 800458c:	2308      	movs	r3, #8
 800458e:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004590:	2300      	movs	r3, #0
 8004592:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004598:	463b      	mov	r3, r7
 800459a:	2200      	movs	r2, #0
 800459c:	4619      	mov	r1, r3
 800459e:	480a      	ldr	r0, [pc, #40]	; (80045c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80045a0:	f004 feda 	bl	8009358 <HAL_TIM_PWM_ConfigChannel>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bf14      	ite	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	2300      	moveq	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <_ZL12MX_TIM2_Initv+0x10c>
    {
        Error_Handler();
 80045b4:	f000 f902 	bl	80047bc <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 80045b8:	4803      	ldr	r0, [pc, #12]	; (80045c8 <_ZL12MX_TIM2_Initv+0x11c>)
 80045ba:	f000 fa9b 	bl	8004af4 <HAL_TIM_MspPostInit>

}
 80045be:	bf00      	nop
 80045c0:	3738      	adds	r7, #56	; 0x38
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000340 	.word	0x20000340

080045cc <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80045d0:	4b16      	ldr	r3, [pc, #88]	; (800462c <_ZL19MX_USART2_UART_Initv+0x60>)
 80045d2:	4a17      	ldr	r2, [pc, #92]	; (8004630 <_ZL19MX_USART2_UART_Initv+0x64>)
 80045d4:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <_ZL19MX_USART2_UART_Initv+0x60>)
 80045d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045dc:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045de:	4b13      	ldr	r3, [pc, #76]	; (800462c <_ZL19MX_USART2_UART_Initv+0x60>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <_ZL19MX_USART2_UART_Initv+0x60>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80045ea:	4b10      	ldr	r3, [pc, #64]	; (800462c <_ZL19MX_USART2_UART_Initv+0x60>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80045f0:	4b0e      	ldr	r3, [pc, #56]	; (800462c <_ZL19MX_USART2_UART_Initv+0x60>)
 80045f2:	220c      	movs	r2, #12
 80045f4:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <_ZL19MX_USART2_UART_Initv+0x60>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <_ZL19MX_USART2_UART_Initv+0x60>)
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <_ZL19MX_USART2_UART_Initv+0x60>)
 8004604:	2200      	movs	r2, #0
 8004606:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <_ZL19MX_USART2_UART_Initv+0x60>)
 800460a:	2200      	movs	r2, #0
 800460c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800460e:	4807      	ldr	r0, [pc, #28]	; (800462c <_ZL19MX_USART2_UART_Initv+0x60>)
 8004610:	f005 fdc0 	bl	800a194 <HAL_UART_Init>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	bf14      	ite	ne
 800461a:	2301      	movne	r3, #1
 800461c:	2300      	moveq	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <_ZL19MX_USART2_UART_Initv+0x5c>
    {
        Error_Handler();
 8004624:	f000 f8ca 	bl	80047bc <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8004628:	bf00      	nop
 800462a:	bd80      	pop	{r7, pc}
 800462c:	2000038c 	.word	0x2000038c
 8004630:	40004400 	.word	0x40004400

08004634 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800463a:	4b0c      	ldr	r3, [pc, #48]	; (800466c <_ZL11MX_DMA_Initv+0x38>)
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	4a0b      	ldr	r2, [pc, #44]	; (800466c <_ZL11MX_DMA_Initv+0x38>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6153      	str	r3, [r2, #20]
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <_ZL11MX_DMA_Initv+0x38>)
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004652:	2200      	movs	r2, #0
 8004654:	2100      	movs	r1, #0
 8004656:	200b      	movs	r0, #11
 8004658:	f001 fed1 	bl	80063fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800465c:	200b      	movs	r0, #11
 800465e:	f001 feea 	bl	8006436 <HAL_NVIC_EnableIRQ>

}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000

08004670 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004676:	f107 030c 	add.w	r3, r7, #12
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	605a      	str	r2, [r3, #4]
 8004680:	609a      	str	r2, [r3, #8]
 8004682:	60da      	str	r2, [r3, #12]
 8004684:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004686:	4b4a      	ldr	r3, [pc, #296]	; (80047b0 <_ZL12MX_GPIO_Initv+0x140>)
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	4a49      	ldr	r2, [pc, #292]	; (80047b0 <_ZL12MX_GPIO_Initv+0x140>)
 800468c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004690:	6153      	str	r3, [r2, #20]
 8004692:	4b47      	ldr	r3, [pc, #284]	; (80047b0 <_ZL12MX_GPIO_Initv+0x140>)
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800469e:	4b44      	ldr	r3, [pc, #272]	; (80047b0 <_ZL12MX_GPIO_Initv+0x140>)
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4a43      	ldr	r2, [pc, #268]	; (80047b0 <_ZL12MX_GPIO_Initv+0x140>)
 80046a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a8:	6153      	str	r3, [r2, #20]
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <_ZL12MX_GPIO_Initv+0x140>)
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b6:	4b3e      	ldr	r3, [pc, #248]	; (80047b0 <_ZL12MX_GPIO_Initv+0x140>)
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	4a3d      	ldr	r2, [pc, #244]	; (80047b0 <_ZL12MX_GPIO_Initv+0x140>)
 80046bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c0:	6153      	str	r3, [r2, #20]
 80046c2:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <_ZL12MX_GPIO_Initv+0x140>)
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_RED_Pin | LED_YEL_Pin | LED_GRE_Pin, GPIO_PIN_SET);
 80046ce:	2201      	movs	r2, #1
 80046d0:	2107      	movs	r1, #7
 80046d2:	4838      	ldr	r0, [pc, #224]	; (80047b4 <_ZL12MX_GPIO_Initv+0x144>)
 80046d4:	f002 fa58 	bl	8006b88 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, INVERTER_CTRL_Pin | BUCK_EN_Pin, GPIO_PIN_SET);
 80046d8:	2201      	movs	r2, #1
 80046da:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80046de:	4836      	ldr	r0, [pc, #216]	; (80047b8 <_ZL12MX_GPIO_Initv+0x148>)
 80046e0:	f002 fa52 	bl	8006b88 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, BFC_Pin | FAN_Pin, GPIO_PIN_SET);
 80046e4:	2201      	movs	r2, #1
 80046e6:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80046ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046ee:	f002 fa4b 	bl	8006b88 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : BUT_UP_Pin BUT_DOWN_Pin BUT_BACK_Pin BUT_SEL_Pin */
    GPIO_InitStruct.Pin = BUT_UP_Pin | BUT_DOWN_Pin | BUT_BACK_Pin | BUT_SEL_Pin;
 80046f2:	230f      	movs	r3, #15
 80046f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80046f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80046fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046fc:	2301      	movs	r3, #1
 80046fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004700:	f107 030c 	add.w	r3, r7, #12
 8004704:	4619      	mov	r1, r3
 8004706:	482c      	ldr	r0, [pc, #176]	; (80047b8 <_ZL12MX_GPIO_Initv+0x148>)
 8004708:	f002 f89c 	bl	8006844 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_RED_Pin LED_YEL_Pin LED_GRE_Pin */
    GPIO_InitStruct.Pin = LED_RED_Pin | LED_YEL_Pin | LED_GRE_Pin;
 800470c:	2307      	movs	r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004710:	2301      	movs	r3, #1
 8004712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800471c:	f107 030c 	add.w	r3, r7, #12
 8004720:	4619      	mov	r1, r3
 8004722:	4824      	ldr	r0, [pc, #144]	; (80047b4 <_ZL12MX_GPIO_Initv+0x144>)
 8004724:	f002 f88e 	bl	8006844 <HAL_GPIO_Init>

    /*Configure GPIO pins : INVERTER_CTRL_Pin BUCK_EN_Pin */
    GPIO_InitStruct.Pin = INVERTER_CTRL_Pin | BUCK_EN_Pin;
 8004728:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800472c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800472e:	2301      	movs	r3, #1
 8004730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004736:	2300      	movs	r3, #0
 8004738:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800473a:	f107 030c 	add.w	r3, r7, #12
 800473e:	4619      	mov	r1, r3
 8004740:	481d      	ldr	r0, [pc, #116]	; (80047b8 <_ZL12MX_GPIO_Initv+0x148>)
 8004742:	f002 f87f 	bl	8006844 <HAL_GPIO_Init>

    /*Configure GPIO pins : BFC_Pin FAN_Pin */
    GPIO_InitStruct.Pin = BFC_Pin | FAN_Pin;
 8004746:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800474a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800474c:	2301      	movs	r3, #1
 800474e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004754:	2300      	movs	r3, #0
 8004756:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004758:	f107 030c 	add.w	r3, r7, #12
 800475c:	4619      	mov	r1, r3
 800475e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004762:	f002 f86f 	bl	8006844 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004766:	2200      	movs	r2, #0
 8004768:	2100      	movs	r1, #0
 800476a:	2006      	movs	r0, #6
 800476c:	f001 fe47 	bl	80063fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004770:	2006      	movs	r0, #6
 8004772:	f001 fe60 	bl	8006436 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004776:	2200      	movs	r2, #0
 8004778:	2100      	movs	r1, #0
 800477a:	2007      	movs	r0, #7
 800477c:	f001 fe3f 	bl	80063fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004780:	2007      	movs	r0, #7
 8004782:	f001 fe58 	bl	8006436 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8004786:	2200      	movs	r2, #0
 8004788:	2100      	movs	r1, #0
 800478a:	2008      	movs	r0, #8
 800478c:	f001 fe37 	bl	80063fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8004790:	2008      	movs	r0, #8
 8004792:	f001 fe50 	bl	8006436 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8004796:	2200      	movs	r2, #0
 8004798:	2100      	movs	r1, #0
 800479a:	2009      	movs	r0, #9
 800479c:	f001 fe2f 	bl	80063fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80047a0:	2009      	movs	r0, #9
 80047a2:	f001 fe48 	bl	8006436 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80047a6:	bf00      	nop
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	48000400 	.word	0x48000400
 80047b8:	48000800 	.word	0x48000800

080047bc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047c0:	b672      	cpsid	i
}
 80047c2:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80047c4:	e7fe      	b.n	80047c4 <Error_Handler+0x8>
	...

080047c8 <_ZN4blib2dp9SingletonINS_13SystemManagerEEC1Ev>:
                Singleton()
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
                {
 80047d0:	4a04      	ldr	r2, [pc, #16]	; (80047e4 <_ZN4blib2dp9SingletonINS_13SystemManagerEEC1Ev+0x1c>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]
                }
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	0800efbc 	.word	0x0800efbc

080047e8 <_ZN4blib2dp9SingletonINS_13SystemManagerEED1Ev>:
                virtual ~Singleton()
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
                }
 80047f0:	4a04      	ldr	r2, [pc, #16]	; (8004804 <_ZN4blib2dp9SingletonINS_13SystemManagerEED1Ev+0x1c>)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	0800efbc 	.word	0x0800efbc

08004808 <_ZN4blib2dp9SingletonINS_13SystemManagerEED0Ev>:
                virtual ~Singleton()
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
                }
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ffe9 	bl	80047e8 <_ZN4blib2dp9SingletonINS_13SystemManagerEED1Ev>
 8004816:	2104      	movs	r1, #4
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f006 fcfb 	bl	800b214 <_ZdlPvj>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <_ZN4blib2dp9SingletonINS_11LcdSimulateEEC1Ev>:
                Singleton()
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
                {
 8004830:	4a04      	ldr	r2, [pc, #16]	; (8004844 <_ZN4blib2dp9SingletonINS_11LcdSimulateEEC1Ev+0x1c>)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
                }
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	0800ef9c 	.word	0x0800ef9c

08004848 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev>:
                virtual ~Singleton()
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
                }
 8004850:	4a04      	ldr	r2, [pc, #16]	; (8004864 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev+0x1c>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	0800ef9c 	.word	0x0800ef9c

08004868 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED0Ev>:
                virtual ~Singleton()
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
                }
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff ffe9 	bl	8004848 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev>
 8004876:	2104      	movs	r1, #4
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f006 fccb 	bl	800b214 <_ZdlPvj>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>:
                static T& getInstance()
 8004888:	b598      	push	{r3, r4, r7, lr}
 800488a:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x28>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x20>
                        mInstance = new T();
 8004894:	2020      	movs	r0, #32
 8004896:	f006 fcce 	bl	800b236 <_Znwj>
 800489a:	4603      	mov	r3, r0
 800489c:	461c      	mov	r4, r3
 800489e:	4620      	mov	r0, r4
 80048a0:	f7fd f99e 	bl	8001be0 <_ZN4blib11LcdSimulateC1Ev>
 80048a4:	4b02      	ldr	r3, [pc, #8]	; (80048b0 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x28>)
 80048a6:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 80048a8:	4b01      	ldr	r3, [pc, #4]	; (80048b0 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x28>)
 80048aa:	681b      	ldr	r3, [r3, #0]
                }
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd98      	pop	{r3, r4, r7, pc}
 80048b0:	20000420 	.word	0x20000420

080048b4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>:
                static T& getInstance()
 80048b4:	b598      	push	{r3, r4, r7, lr}
 80048b6:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 80048b8:	4b08      	ldr	r3, [pc, #32]	; (80048dc <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x20>
                        mInstance = new T();
 80048c0:	2008      	movs	r0, #8
 80048c2:	f006 fcb8 	bl	800b236 <_Znwj>
 80048c6:	4603      	mov	r3, r0
 80048c8:	461c      	mov	r4, r3
 80048ca:	4620      	mov	r0, r4
 80048cc:	f006 f924 	bl	800ab18 <_ZN4blib6ButtonC1Ev>
 80048d0:	4b02      	ldr	r3, [pc, #8]	; (80048dc <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 80048d2:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 80048d4:	4b01      	ldr	r3, [pc, #4]	; (80048dc <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 80048d6:	681b      	ldr	r3, [r3, #0]
                }
 80048d8:	4618      	mov	r0, r3
 80048da:	bd98      	pop	{r3, r4, r7, pc}
 80048dc:	20000418 	.word	0x20000418

080048e0 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv>:
                static T& getInstance()
 80048e0:	b598      	push	{r3, r4, r7, lr}
 80048e2:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv+0x28>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d109      	bne.n	8004900 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv+0x20>
                        mInstance = new T();
 80048ec:	2008      	movs	r0, #8
 80048ee:	f006 fca2 	bl	800b236 <_Znwj>
 80048f2:	4603      	mov	r3, r0
 80048f4:	461c      	mov	r4, r3
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7fd f93a 	bl	8001b70 <_ZN4blib13SystemManagerC1Ev>
 80048fc:	4b02      	ldr	r3, [pc, #8]	; (8004908 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv+0x28>)
 80048fe:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8004900:	4b01      	ldr	r3, [pc, #4]	; (8004908 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv+0x28>)
 8004902:	681b      	ldr	r3, [r3, #0]
                }
 8004904:	4618      	mov	r0, r3
 8004906:	bd98      	pop	{r3, r4, r7, pc}
 8004908:	2000041c 	.word	0x2000041c

0800490c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004912:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <HAL_MspInit+0x44>)
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	4a0e      	ldr	r2, [pc, #56]	; (8004950 <HAL_MspInit+0x44>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	6193      	str	r3, [r2, #24]
 800491e:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <HAL_MspInit+0x44>)
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	607b      	str	r3, [r7, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800492a:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_MspInit+0x44>)
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	4a08      	ldr	r2, [pc, #32]	; (8004950 <HAL_MspInit+0x44>)
 8004930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004934:	61d3      	str	r3, [r2, #28]
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_MspInit+0x44>)
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000

08004954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	f107 0314 	add.w	r3, r7, #20
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004974:	d14c      	bne.n	8004a10 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004976:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <HAL_ADC_MspInit+0xc4>)
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	4a27      	ldr	r2, [pc, #156]	; (8004a18 <HAL_ADC_MspInit+0xc4>)
 800497c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004980:	6153      	str	r3, [r2, #20]
 8004982:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <HAL_ADC_MspInit+0xc4>)
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498e:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <HAL_ADC_MspInit+0xc4>)
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	4a21      	ldr	r2, [pc, #132]	; (8004a18 <HAL_ADC_MspInit+0xc4>)
 8004994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004998:	6153      	str	r3, [r2, #20]
 800499a:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <HAL_ADC_MspInit+0xc4>)
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80049a6:	2303      	movs	r3, #3
 80049a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049aa:	2303      	movs	r3, #3
 80049ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b2:	f107 0314 	add.w	r3, r7, #20
 80049b6:	4619      	mov	r1, r3
 80049b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049bc:	f001 ff42 	bl	8006844 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80049c0:	4b16      	ldr	r3, [pc, #88]	; (8004a1c <HAL_ADC_MspInit+0xc8>)
 80049c2:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <HAL_ADC_MspInit+0xcc>)
 80049c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <HAL_ADC_MspInit+0xc8>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049cc:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <HAL_ADC_MspInit+0xc8>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80049d2:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <HAL_ADC_MspInit+0xc8>)
 80049d4:	2280      	movs	r2, #128	; 0x80
 80049d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80049d8:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_ADC_MspInit+0xc8>)
 80049da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80049e0:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <HAL_ADC_MspInit+0xc8>)
 80049e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <HAL_ADC_MspInit+0xc8>)
 80049ea:	2220      	movs	r2, #32
 80049ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_ADC_MspInit+0xc8>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80049f4:	4809      	ldr	r0, [pc, #36]	; (8004a1c <HAL_ADC_MspInit+0xc8>)
 80049f6:	f001 fd38 	bl	800646a <HAL_DMA_Init>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8004a00:	f7ff fedc 	bl	80047bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a05      	ldr	r2, [pc, #20]	; (8004a1c <HAL_ADC_MspInit+0xc8>)
 8004a08:	639a      	str	r2, [r3, #56]	; 0x38
 8004a0a:	4a04      	ldr	r2, [pc, #16]	; (8004a1c <HAL_ADC_MspInit+0xc8>)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a10:	bf00      	nop
 8004a12:	3728      	adds	r7, #40	; 0x28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	200002a8 	.word	0x200002a8
 8004a20:	40020008 	.word	0x40020008

08004a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	; 0x28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2c:	f107 0314 	add.w	r3, r7, #20
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <HAL_I2C_MspInit+0x7c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d127      	bne.n	8004a96 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a46:	4b17      	ldr	r3, [pc, #92]	; (8004aa4 <HAL_I2C_MspInit+0x80>)
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	4a16      	ldr	r2, [pc, #88]	; (8004aa4 <HAL_I2C_MspInit+0x80>)
 8004a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a50:	6153      	str	r3, [r2, #20]
 8004a52:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <HAL_I2C_MspInit+0x80>)
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a5e:	23c0      	movs	r3, #192	; 0xc0
 8004a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a62:	2312      	movs	r3, #18
 8004a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a6e:	2304      	movs	r3, #4
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a72:	f107 0314 	add.w	r3, r7, #20
 8004a76:	4619      	mov	r1, r3
 8004a78:	480b      	ldr	r0, [pc, #44]	; (8004aa8 <HAL_I2C_MspInit+0x84>)
 8004a7a:	f001 fee3 	bl	8006844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_I2C_MspInit+0x80>)
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <HAL_I2C_MspInit+0x80>)
 8004a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a88:	61d3      	str	r3, [r2, #28]
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <HAL_I2C_MspInit+0x80>)
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004a96:	bf00      	nop
 8004a98:	3728      	adds	r7, #40	; 0x28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40005400 	.word	0x40005400
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	48000400 	.word	0x48000400

08004aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abc:	d113      	bne.n	8004ae6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004abe:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <HAL_TIM_Base_MspInit+0x44>)
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	4a0b      	ldr	r2, [pc, #44]	; (8004af0 <HAL_TIM_Base_MspInit+0x44>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	61d3      	str	r3, [r2, #28]
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_TIM_Base_MspInit+0x44>)
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2100      	movs	r1, #0
 8004ada:	201c      	movs	r0, #28
 8004adc:	f001 fc8f 	bl	80063fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ae0:	201c      	movs	r0, #28
 8004ae2:	f001 fca8 	bl	8006436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000

08004af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004afc:	f107 030c 	add.w	r3, r7, #12
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	609a      	str	r2, [r3, #8]
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b14:	d11c      	bne.n	8004b50 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b16:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <HAL_TIM_MspPostInit+0x64>)
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	4a0f      	ldr	r2, [pc, #60]	; (8004b58 <HAL_TIM_MspPostInit+0x64>)
 8004b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b20:	6153      	str	r3, [r2, #20]
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <HAL_TIM_MspPostInit+0x64>)
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004b2e:	2320      	movs	r3, #32
 8004b30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b32:	2302      	movs	r3, #2
 8004b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b42:	f107 030c 	add.w	r3, r7, #12
 8004b46:	4619      	mov	r1, r3
 8004b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b4c:	f001 fe7a 	bl	8006844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004b50:	bf00      	nop
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40021000 	.word	0x40021000

08004b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	; 0x28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b64:	f107 0314 	add.w	r3, r7, #20
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	60da      	str	r2, [r3, #12]
 8004b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <HAL_UART_MspInit+0x7c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d128      	bne.n	8004bd0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b7e:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <HAL_UART_MspInit+0x80>)
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <HAL_UART_MspInit+0x80>)
 8004b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b88:	61d3      	str	r3, [r2, #28]
 8004b8a:	4b14      	ldr	r3, [pc, #80]	; (8004bdc <HAL_UART_MspInit+0x80>)
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b96:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <HAL_UART_MspInit+0x80>)
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	4a10      	ldr	r2, [pc, #64]	; (8004bdc <HAL_UART_MspInit+0x80>)
 8004b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba0:	6153      	str	r3, [r2, #20]
 8004ba2:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <HAL_UART_MspInit+0x80>)
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004bae:	230c      	movs	r3, #12
 8004bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bbe:	2307      	movs	r3, #7
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc2:	f107 0314 	add.w	r3, r7, #20
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bcc:	f001 fe3a 	bl	8006844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004bd0:	bf00      	nop
 8004bd2:	3728      	adds	r7, #40	; 0x28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40004400 	.word	0x40004400
 8004bdc:	40021000 	.word	0x40021000

08004be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004be4:	e7fe      	b.n	8004be4 <NMI_Handler+0x4>

08004be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004be6:	b480      	push	{r7}
 8004be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bea:	e7fe      	b.n	8004bea <HardFault_Handler+0x4>

08004bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bf0:	e7fe      	b.n	8004bf0 <MemManage_Handler+0x4>

08004bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bf6:	e7fe      	b.n	8004bf6 <BusFault_Handler+0x4>

08004bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bfc:	e7fe      	b.n	8004bfc <UsageFault_Handler+0x4>

08004bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c02:	bf00      	nop
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c1e:	bf00      	nop
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c2c:	f000 f97a 	bl	8004f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c30:	bf00      	nop
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_UP_Pin);
 8004c38:	2001      	movs	r0, #1
 8004c3a:	f001 ffbd 	bl	8006bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_DOWN_Pin);
 8004c46:	2002      	movs	r0, #2
 8004c48:	f001 ffb6 	bl	8006bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004c4c:	bf00      	nop
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_BACK_Pin);
 8004c54:	2004      	movs	r0, #4
 8004c56:	f001 ffaf 	bl	8006bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8004c5a:	bf00      	nop
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_SEL_Pin);
 8004c62:	2008      	movs	r0, #8
 8004c64:	f001 ffa8 	bl	8006bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c70:	4802      	ldr	r0, [pc, #8]	; (8004c7c <DMA1_Channel1_IRQHandler+0x10>)
 8004c72:	f001 fcd9 	bl	8006628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200002a8 	.word	0x200002a8

08004c80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c84:	4802      	ldr	r0, [pc, #8]	; (8004c90 <TIM2_IRQHandler+0x10>)
 8004c86:	f004 fa47 	bl	8009118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000340 	.word	0x20000340

08004c94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  return 1;
 8004c98:	2301      	movs	r3, #1
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <_kill>:

int _kill(int pid, int sig)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004cae:	f007 fbeb 	bl	800c488 <__errno>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2216      	movs	r2, #22
 8004cb6:	601a      	str	r2, [r3, #0]
  return -1;
 8004cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <_exit>:

void _exit (int status)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ffe7 	bl	8004ca4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004cd6:	e7fe      	b.n	8004cd6 <_exit+0x12>

08004cd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e00a      	b.n	8004d00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004cea:	f3af 8000 	nop.w
 8004cee:	4601      	mov	r1, r0
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	60ba      	str	r2, [r7, #8]
 8004cf6:	b2ca      	uxtb	r2, r1
 8004cf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	dbf0      	blt.n	8004cea <_read+0x12>
  }

  return len;
 8004d08:	687b      	ldr	r3, [r7, #4]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b086      	sub	sp, #24
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	e009      	b.n	8004d38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	60ba      	str	r2, [r7, #8]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	3301      	adds	r3, #1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	dbf1      	blt.n	8004d24 <_write+0x12>
  }
  return len;
 8004d40:	687b      	ldr	r3, [r7, #4]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <_close>:

int _close(int file)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d72:	605a      	str	r2, [r3, #4]
  return 0;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <_isatty>:

int _isatty(int file)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d8a:	2301      	movs	r3, #1
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
	...

08004db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004dbc:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <_sbrk+0x5c>)
 8004dbe:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <_sbrk+0x60>)
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004dc8:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <_sbrk+0x64>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004dd0:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <_sbrk+0x64>)
 8004dd2:	4a12      	ldr	r2, [pc, #72]	; (8004e1c <_sbrk+0x68>)
 8004dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <_sbrk+0x64>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d207      	bcs.n	8004df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004de4:	f007 fb50 	bl	800c488 <__errno>
 8004de8:	4603      	mov	r3, r0
 8004dea:	220c      	movs	r2, #12
 8004dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dee:	f04f 33ff 	mov.w	r3, #4294967295
 8004df2:	e009      	b.n	8004e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004df4:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <_sbrk+0x64>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <_sbrk+0x64>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	4a05      	ldr	r2, [pc, #20]	; (8004e18 <_sbrk+0x64>)
 8004e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e06:	68fb      	ldr	r3, [r7, #12]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20010000 	.word	0x20010000
 8004e14:	00000400 	.word	0x00000400
 8004e18:	20000424 	.word	0x20000424
 8004e1c:	20000980 	.word	0x20000980

08004e20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e24:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <SystemInit+0x20>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	4a05      	ldr	r2, [pc, #20]	; (8004e40 <SystemInit+0x20>)
 8004e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e34:	bf00      	nop
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000ed00 	.word	0xe000ed00

08004e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e7c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004e48:	f7ff ffea 	bl	8004e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e4c:	480c      	ldr	r0, [pc, #48]	; (8004e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8004e4e:	490d      	ldr	r1, [pc, #52]	; (8004e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e50:	4a0d      	ldr	r2, [pc, #52]	; (8004e88 <LoopForever+0xe>)
  movs r3, #0
 8004e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e54:	e002      	b.n	8004e5c <LoopCopyDataInit>

08004e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e5a:	3304      	adds	r3, #4

08004e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e60:	d3f9      	bcc.n	8004e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e62:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e64:	4c0a      	ldr	r4, [pc, #40]	; (8004e90 <LoopForever+0x16>)
  movs r3, #0
 8004e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e68:	e001      	b.n	8004e6e <LoopFillZerobss>

08004e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e6c:	3204      	adds	r2, #4

08004e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e70:	d3fb      	bcc.n	8004e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e72:	f007 fb0f 	bl	800c494 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e76:	f7ff f981 	bl	800417c <main>

08004e7a <LoopForever>:

LoopForever:
    b LoopForever
 8004e7a:	e7fe      	b.n	8004e7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e84:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004e88:	0800f3a4 	.word	0x0800f3a4
  ldr r2, =_sbss
 8004e8c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8004e90:	2000097c 	.word	0x2000097c

08004e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004e94:	e7fe      	b.n	8004e94 <ADC1_2_IRQHandler>
	...

08004e98 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e9c:	4b08      	ldr	r3, [pc, #32]	; (8004ec0 <HAL_Init+0x28>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a07      	ldr	r2, [pc, #28]	; (8004ec0 <HAL_Init+0x28>)
 8004ea2:	f043 0310 	orr.w	r3, r3, #16
 8004ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ea8:	2003      	movs	r0, #3
 8004eaa:	f001 fa9d 	bl	80063e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eae:	200f      	movs	r0, #15
 8004eb0:	f000 f808 	bl	8004ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004eb4:	f7ff fd2a 	bl	800490c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40022000 	.word	0x40022000

08004ec4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ecc:	4b12      	ldr	r3, [pc, #72]	; (8004f18 <HAL_InitTick+0x54>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <HAL_InitTick+0x58>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 fab5 	bl	8006452 <HAL_SYSTICK_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e00e      	b.n	8004f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b0f      	cmp	r3, #15
 8004ef6:	d80a      	bhi.n	8004f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ef8:	2200      	movs	r2, #0
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295
 8004f00:	f001 fa7d 	bl	80063fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f04:	4a06      	ldr	r2, [pc, #24]	; (8004f20 <HAL_InitTick+0x5c>)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e000      	b.n	8004f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	2000000c 	.word	0x2000000c
 8004f1c:	20000014 	.word	0x20000014
 8004f20:	20000010 	.word	0x20000010

08004f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <HAL_IncTick+0x20>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_IncTick+0x24>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4413      	add	r3, r2
 8004f34:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <HAL_IncTick+0x24>)
 8004f36:	6013      	str	r3, [r2, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20000014 	.word	0x20000014
 8004f48:	20000428 	.word	0x20000428

08004f4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8004f50:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <HAL_GetTick+0x14>)
 8004f52:	681b      	ldr	r3, [r3, #0]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000428 	.word	0x20000428

08004f64 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f6c:	f7ff ffee 	bl	8004f4c <HAL_GetTick>
 8004f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7c:	d005      	beq.n	8004f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f7e:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <HAL_Delay+0x44>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004f8a:	bf00      	nop
 8004f8c:	f7ff ffde 	bl	8004f4c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d8f7      	bhi.n	8004f8c <HAL_Delay+0x28>
  {
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000014 	.word	0x20000014

08004fac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b09a      	sub	sp, #104	; 0x68
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e1e3      	b.n	80053bc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b00      	cmp	r3, #0
 8005004:	d176      	bne.n	80050f4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d152      	bne.n	80050b4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff fc93 	bl	8004954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d13b      	bne.n	80050b4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 ffe7 	bl	8006010 <ADC_Disable>
 8005042:	4603      	mov	r3, r0
 8005044:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b00      	cmp	r3, #0
 8005052:	d12f      	bne.n	80050b4 <HAL_ADC_Init+0xe0>
 8005054:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005058:	2b00      	cmp	r3, #0
 800505a:	d12b      	bne.n	80050b4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005064:	f023 0302 	bic.w	r3, r3, #2
 8005068:	f043 0202 	orr.w	r2, r3, #2
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800507e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800508e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005090:	4b92      	ldr	r3, [pc, #584]	; (80052dc <HAL_ADC_Init+0x308>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a92      	ldr	r2, [pc, #584]	; (80052e0 <HAL_ADC_Init+0x30c>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	0c9a      	lsrs	r2, r3, #18
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80050a6:	e002      	b.n	80050ae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f9      	bne.n	80050a8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80050cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d0:	d110      	bne.n	80050f4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f023 0312 	bic.w	r3, r3, #18
 80050da:	f043 0210 	orr.w	r2, r3, #16
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e6:	f043 0201 	orr.w	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 8150 	bne.w	80053a2 <HAL_ADC_Init+0x3ce>
 8005102:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005106:	2b00      	cmp	r3, #0
 8005108:	f040 814b 	bne.w	80053a2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8005116:	2b00      	cmp	r3, #0
 8005118:	f040 8143 	bne.w	80053a2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005124:	f043 0202 	orr.w	r2, r3, #2
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005134:	d004      	beq.n	8005140 <HAL_ADC_Init+0x16c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a6a      	ldr	r2, [pc, #424]	; (80052e4 <HAL_ADC_Init+0x310>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d101      	bne.n	8005144 <HAL_ADC_Init+0x170>
 8005140:	4b69      	ldr	r3, [pc, #420]	; (80052e8 <HAL_ADC_Init+0x314>)
 8005142:	e000      	b.n	8005146 <HAL_ADC_Init+0x172>
 8005144:	4b69      	ldr	r3, [pc, #420]	; (80052ec <HAL_ADC_Init+0x318>)
 8005146:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005150:	d102      	bne.n	8005158 <HAL_ADC_Init+0x184>
 8005152:	4b64      	ldr	r3, [pc, #400]	; (80052e4 <HAL_ADC_Init+0x310>)
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	e01a      	b.n	800518e <HAL_ADC_Init+0x1ba>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a61      	ldr	r2, [pc, #388]	; (80052e4 <HAL_ADC_Init+0x310>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d103      	bne.n	800516a <HAL_ADC_Init+0x196>
 8005162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	e011      	b.n	800518e <HAL_ADC_Init+0x1ba>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a60      	ldr	r2, [pc, #384]	; (80052f0 <HAL_ADC_Init+0x31c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d102      	bne.n	800517a <HAL_ADC_Init+0x1a6>
 8005174:	4b5f      	ldr	r3, [pc, #380]	; (80052f4 <HAL_ADC_Init+0x320>)
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e009      	b.n	800518e <HAL_ADC_Init+0x1ba>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5d      	ldr	r2, [pc, #372]	; (80052f4 <HAL_ADC_Init+0x320>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d102      	bne.n	800518a <HAL_ADC_Init+0x1b6>
 8005184:	4b5a      	ldr	r3, [pc, #360]	; (80052f0 <HAL_ADC_Init+0x31c>)
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	e001      	b.n	800518e <HAL_ADC_Init+0x1ba>
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d108      	bne.n	80051ae <HAL_ADC_Init+0x1da>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_ADC_Init+0x1da>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <HAL_ADC_Init+0x1dc>
 80051ae:	2300      	movs	r3, #0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d11c      	bne.n	80051ee <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80051b4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d010      	beq.n	80051dc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d107      	bne.n	80051d6 <HAL_ADC_Init+0x202>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_ADC_Init+0x202>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <HAL_ADC_Init+0x204>
 80051d6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80051dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	431a      	orrs	r2, r3
 80051ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ec:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	7e5b      	ldrb	r3, [r3, #25]
 80051f2:	035b      	lsls	r3, r3, #13
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051f8:	2a01      	cmp	r2, #1
 80051fa:	d002      	beq.n	8005202 <HAL_ADC_Init+0x22e>
 80051fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005200:	e000      	b.n	8005204 <HAL_ADC_Init+0x230>
 8005202:	2200      	movs	r2, #0
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	4313      	orrs	r3, r2
 8005212:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005214:	4313      	orrs	r3, r2
 8005216:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d11b      	bne.n	800525a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	7e5b      	ldrb	r3, [r3, #25]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	3b01      	subs	r3, #1
 8005230:	045a      	lsls	r2, r3, #17
 8005232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005234:	4313      	orrs	r3, r2
 8005236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523a:	663b      	str	r3, [r7, #96]	; 0x60
 800523c:	e00d      	b.n	800525a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005246:	f043 0220 	orr.w	r2, r3, #32
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	f043 0201 	orr.w	r2, r3, #1
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	2b01      	cmp	r3, #1
 8005260:	d054      	beq.n	800530c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a22      	ldr	r2, [pc, #136]	; (80052f0 <HAL_ADC_Init+0x31c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_ADC_Init+0x2a2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a20      	ldr	r2, [pc, #128]	; (80052f4 <HAL_ADC_Init+0x320>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d140      	bne.n	80052f8 <HAL_ADC_Init+0x324>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800527e:	d02a      	beq.n	80052d6 <HAL_ADC_Init+0x302>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005288:	d022      	beq.n	80052d0 <HAL_ADC_Init+0x2fc>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005292:	d01a      	beq.n	80052ca <HAL_ADC_Init+0x2f6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800529c:	d012      	beq.n	80052c4 <HAL_ADC_Init+0x2f0>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80052a6:	d00a      	beq.n	80052be <HAL_ADC_Init+0x2ea>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80052b0:	d002      	beq.n	80052b8 <HAL_ADC_Init+0x2e4>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	e023      	b.n	8005300 <HAL_ADC_Init+0x32c>
 80052b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80052bc:	e020      	b.n	8005300 <HAL_ADC_Init+0x32c>
 80052be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80052c2:	e01d      	b.n	8005300 <HAL_ADC_Init+0x32c>
 80052c4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80052c8:	e01a      	b.n	8005300 <HAL_ADC_Init+0x32c>
 80052ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052ce:	e017      	b.n	8005300 <HAL_ADC_Init+0x32c>
 80052d0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80052d4:	e014      	b.n	8005300 <HAL_ADC_Init+0x32c>
 80052d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80052da:	e011      	b.n	8005300 <HAL_ADC_Init+0x32c>
 80052dc:	2000000c 	.word	0x2000000c
 80052e0:	431bde83 	.word	0x431bde83
 80052e4:	50000100 	.word	0x50000100
 80052e8:	50000300 	.word	0x50000300
 80052ec:	50000700 	.word	0x50000700
 80052f0:	50000400 	.word	0x50000400
 80052f4:	50000500 	.word	0x50000500
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005304:	4313      	orrs	r3, r2
 8005306:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005308:	4313      	orrs	r3, r2
 800530a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b00      	cmp	r3, #0
 8005318:	d114      	bne.n	8005344 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005328:	f023 0302 	bic.w	r3, r3, #2
 800532c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	7e1b      	ldrb	r3, [r3, #24]
 8005332:	039a      	lsls	r2, r3, #14
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	4313      	orrs	r3, r2
 800533e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005340:	4313      	orrs	r3, r2
 8005342:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	4b1e      	ldr	r3, [pc, #120]	; (80053c4 <HAL_ADC_Init+0x3f0>)
 800534c:	4013      	ands	r3, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005354:	430b      	orrs	r3, r1
 8005356:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d10c      	bne.n	800537a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	f023 010f 	bic.w	r1, r3, #15
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	1e5a      	subs	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
 8005378:	e007      	b.n	800538a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 020f 	bic.w	r2, r2, #15
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f023 0303 	bic.w	r3, r3, #3
 8005398:	f043 0201 	orr.w	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
 80053a0:	e00a      	b.n	80053b8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f023 0312 	bic.w	r3, r3, #18
 80053aa:	f043 0210 	orr.w	r2, r3, #16
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80053b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3768      	adds	r7, #104	; 0x68
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	fff0c007 	.word	0xfff0c007

080053c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f040 80f7 	bne.w	80055d6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_ADC_Start_DMA+0x2e>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e0f2      	b.n	80055dc <HAL_ADC_Start_DMA+0x214>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005406:	d004      	beq.n	8005412 <HAL_ADC_Start_DMA+0x4a>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a75      	ldr	r2, [pc, #468]	; (80055e4 <HAL_ADC_Start_DMA+0x21c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d109      	bne.n	8005426 <HAL_ADC_Start_DMA+0x5e>
 8005412:	4b75      	ldr	r3, [pc, #468]	; (80055e8 <HAL_ADC_Start_DMA+0x220>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	2b00      	cmp	r3, #0
 800541c:	bf0c      	ite	eq
 800541e:	2301      	moveq	r3, #1
 8005420:	2300      	movne	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	e008      	b.n	8005438 <HAL_ADC_Start_DMA+0x70>
 8005426:	4b71      	ldr	r3, [pc, #452]	; (80055ec <HAL_ADC_Start_DMA+0x224>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	2b00      	cmp	r3, #0
 8005430:	bf0c      	ite	eq
 8005432:	2301      	moveq	r3, #1
 8005434:	2300      	movne	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80c5 	beq.w	80055c8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fd82 	bl	8005f48 <ADC_Enable>
 8005444:	4603      	mov	r3, r0
 8005446:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f040 80b7 	bne.w	80055be <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800546c:	d004      	beq.n	8005478 <HAL_ADC_Start_DMA+0xb0>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a5c      	ldr	r2, [pc, #368]	; (80055e4 <HAL_ADC_Start_DMA+0x21c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d106      	bne.n	8005486 <HAL_ADC_Start_DMA+0xbe>
 8005478:	4b5b      	ldr	r3, [pc, #364]	; (80055e8 <HAL_ADC_Start_DMA+0x220>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	2b00      	cmp	r3, #0
 8005482:	d010      	beq.n	80054a6 <HAL_ADC_Start_DMA+0xde>
 8005484:	e005      	b.n	8005492 <HAL_ADC_Start_DMA+0xca>
 8005486:	4b59      	ldr	r3, [pc, #356]	; (80055ec <HAL_ADC_Start_DMA+0x224>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_ADC_Start_DMA+0xde>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800549a:	d004      	beq.n	80054a6 <HAL_ADC_Start_DMA+0xde>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a53      	ldr	r2, [pc, #332]	; (80055f0 <HAL_ADC_Start_DMA+0x228>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d115      	bne.n	80054d2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d036      	beq.n	800552e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80054d0:	e02d      	b.n	800552e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054e6:	d004      	beq.n	80054f2 <HAL_ADC_Start_DMA+0x12a>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a3d      	ldr	r2, [pc, #244]	; (80055e4 <HAL_ADC_Start_DMA+0x21c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d10a      	bne.n	8005508 <HAL_ADC_Start_DMA+0x140>
 80054f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e008      	b.n	800551a <HAL_ADC_Start_DMA+0x152>
 8005508:	4b39      	ldr	r3, [pc, #228]	; (80055f0 <HAL_ADC_Start_DMA+0x228>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005526:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553a:	d106      	bne.n	800554a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005540:	f023 0206 	bic.w	r2, r3, #6
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	645a      	str	r2, [r3, #68]	; 0x44
 8005548:	e002      	b.n	8005550 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	4a25      	ldr	r2, [pc, #148]	; (80055f4 <HAL_ADC_Start_DMA+0x22c>)
 800555e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	4a24      	ldr	r2, [pc, #144]	; (80055f8 <HAL_ADC_Start_DMA+0x230>)
 8005566:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	4a23      	ldr	r2, [pc, #140]	; (80055fc <HAL_ADC_Start_DMA+0x234>)
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	221c      	movs	r2, #28
 8005576:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0210 	orr.w	r2, r2, #16
 8005586:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3340      	adds	r3, #64	; 0x40
 80055a2:	4619      	mov	r1, r3
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f000 ffa6 	bl	80064f8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0204 	orr.w	r2, r2, #4
 80055ba:	609a      	str	r2, [r3, #8]
 80055bc:	e00d      	b.n	80055da <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055c6:	e008      	b.n	80055da <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055d4:	e001      	b.n	80055da <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80055d6:	2302      	movs	r3, #2
 80055d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	50000100 	.word	0x50000100
 80055e8:	50000300 	.word	0x50000300
 80055ec:	50000700 	.word	0x50000700
 80055f0:	50000400 	.word	0x50000400
 80055f4:	08005e7d 	.word	0x08005e7d
 80055f8:	08005ef7 	.word	0x08005ef7
 80055fc:	08005f13 	.word	0x08005f13

08005600 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_ADC_Stop_DMA+0x1a>
 8005616:	2302      	movs	r3, #2
 8005618:	e050      	b.n	80056bc <HAL_ADC_Stop_DMA+0xbc>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005622:	216c      	movs	r1, #108	; 0x6c
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fd59 	bl	80060dc <ADC_ConversionStop>
 800562a:	4603      	mov	r3, r0
 800562c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d13e      	bne.n	80056b2 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800564c:	2b02      	cmp	r3, #2
 800564e:	d10f      	bne.n	8005670 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	4618      	mov	r0, r3
 8005656:	f000 ffae 	bl	80065b6 <HAL_DMA_Abort>
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0210 	bic.w	r2, r2, #16
 800567e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d105      	bne.n	8005692 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fcc2 	bl	8006010 <ADC_Disable>
 800568c:	4603      	mov	r3, r0
 800568e:	73fb      	strb	r3, [r7, #15]
 8005690:	e002      	b.n	8005698 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fcbc 	bl	8006010 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	f043 0201 	orr.w	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b09b      	sub	sp, #108	; 0x6c
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_ADC_ConfigChannel+0x22>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e2c8      	b.n	8005c78 <HAL_ADC_ConfigChannel+0x5b4>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f040 82ac 	bne.w	8005c56 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b04      	cmp	r3, #4
 8005704:	d81c      	bhi.n	8005740 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	4413      	add	r3, r2
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	461a      	mov	r2, r3
 800571a:	231f      	movs	r3, #31
 800571c:	4093      	lsls	r3, r2
 800571e:	43db      	mvns	r3, r3
 8005720:	4019      	ands	r1, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4413      	add	r3, r2
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	fa00 f203 	lsl.w	r2, r0, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
 800573e:	e063      	b.n	8005808 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b09      	cmp	r3, #9
 8005746:	d81e      	bhi.n	8005786 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	4413      	add	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	3b1e      	subs	r3, #30
 800575c:	221f      	movs	r2, #31
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	43db      	mvns	r3, r3
 8005764:	4019      	ands	r1, r3
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	4413      	add	r3, r2
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	3b1e      	subs	r3, #30
 8005778:	fa00 f203 	lsl.w	r2, r0, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	635a      	str	r2, [r3, #52]	; 0x34
 8005784:	e040      	b.n	8005808 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b0e      	cmp	r3, #14
 800578c:	d81e      	bhi.n	80057cc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	4413      	add	r3, r2
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	3b3c      	subs	r3, #60	; 0x3c
 80057a2:	221f      	movs	r2, #31
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	4019      	ands	r1, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	4413      	add	r3, r2
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	3b3c      	subs	r3, #60	; 0x3c
 80057be:	fa00 f203 	lsl.w	r2, r0, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
 80057ca:	e01d      	b.n	8005808 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	4413      	add	r3, r2
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	3b5a      	subs	r3, #90	; 0x5a
 80057e0:	221f      	movs	r2, #31
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43db      	mvns	r3, r3
 80057e8:	4019      	ands	r1, r3
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	4413      	add	r3, r2
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	3b5a      	subs	r3, #90	; 0x5a
 80057fc:	fa00 f203 	lsl.w	r2, r0, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b00      	cmp	r3, #0
 8005814:	f040 80e5 	bne.w	80059e2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b09      	cmp	r3, #9
 800581e:	d91c      	bls.n	800585a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6999      	ldr	r1, [r3, #24]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4613      	mov	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	4413      	add	r3, r2
 8005830:	3b1e      	subs	r3, #30
 8005832:	2207      	movs	r2, #7
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	43db      	mvns	r3, r3
 800583a:	4019      	ands	r1, r3
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	6898      	ldr	r0, [r3, #8]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4613      	mov	r3, r2
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4413      	add	r3, r2
 800584a:	3b1e      	subs	r3, #30
 800584c:	fa00 f203 	lsl.w	r2, r0, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	619a      	str	r2, [r3, #24]
 8005858:	e019      	b.n	800588e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6959      	ldr	r1, [r3, #20]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	4413      	add	r3, r2
 800586a:	2207      	movs	r2, #7
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	4019      	ands	r1, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	6898      	ldr	r0, [r3, #8]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	4413      	add	r3, r2
 8005882:	fa00 f203 	lsl.w	r2, r0, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695a      	ldr	r2, [r3, #20]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	08db      	lsrs	r3, r3, #3
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d84f      	bhi.n	8005950 <HAL_ADC_ConfigChannel+0x28c>
 80058b0:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <HAL_ADC_ConfigChannel+0x1f4>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	080058c9 	.word	0x080058c9
 80058bc:	080058eb 	.word	0x080058eb
 80058c0:	0800590d 	.word	0x0800590d
 80058c4:	0800592f 	.word	0x0800592f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80058ce:	4b99      	ldr	r3, [pc, #612]	; (8005b34 <HAL_ADC_ConfigChannel+0x470>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	0691      	lsls	r1, r2, #26
 80058d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058da:	430a      	orrs	r2, r1
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80058e6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80058e8:	e07b      	b.n	80059e2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80058f0:	4b90      	ldr	r3, [pc, #576]	; (8005b34 <HAL_ADC_ConfigChannel+0x470>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	0691      	lsls	r1, r2, #26
 80058fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058fc:	430a      	orrs	r2, r1
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005908:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800590a:	e06a      	b.n	80059e2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005912:	4b88      	ldr	r3, [pc, #544]	; (8005b34 <HAL_ADC_ConfigChannel+0x470>)
 8005914:	4013      	ands	r3, r2
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	0691      	lsls	r1, r2, #26
 800591c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800591e:	430a      	orrs	r2, r1
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800592a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800592c:	e059      	b.n	80059e2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005934:	4b7f      	ldr	r3, [pc, #508]	; (8005b34 <HAL_ADC_ConfigChannel+0x470>)
 8005936:	4013      	ands	r3, r2
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	0691      	lsls	r1, r2, #26
 800593e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005940:	430a      	orrs	r2, r1
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800594c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800594e:	e048      	b.n	80059e2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005956:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	069b      	lsls	r3, r3, #26
 8005960:	429a      	cmp	r2, r3
 8005962:	d107      	bne.n	8005974 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005972:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800597a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	069b      	lsls	r3, r3, #26
 8005984:	429a      	cmp	r2, r3
 8005986:	d107      	bne.n	8005998 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005996:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800599e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	069b      	lsls	r3, r3, #26
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d107      	bne.n	80059bc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80059ba:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	069b      	lsls	r3, r3, #26
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d107      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80059de:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80059e0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d108      	bne.n	8005a02 <HAL_ADC_ConfigChannel+0x33e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_ADC_ConfigChannel+0x33e>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <HAL_ADC_ConfigChannel+0x340>
 8005a02:	2300      	movs	r3, #0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f040 8131 	bne.w	8005c6c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d00f      	beq.n	8005a32 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43da      	mvns	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	400a      	ands	r2, r1
 8005a2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005a30:	e049      	b.n	8005ac6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	409a      	lsls	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b09      	cmp	r3, #9
 8005a52:	d91c      	bls.n	8005a8e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6999      	ldr	r1, [r3, #24]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4413      	add	r3, r2
 8005a64:	3b1b      	subs	r3, #27
 8005a66:	2207      	movs	r2, #7
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	4019      	ands	r1, r3
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	6898      	ldr	r0, [r3, #8]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	4413      	add	r3, r2
 8005a7e:	3b1b      	subs	r3, #27
 8005a80:	fa00 f203 	lsl.w	r2, r0, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	619a      	str	r2, [r3, #24]
 8005a8c:	e01b      	b.n	8005ac6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6959      	ldr	r1, [r3, #20]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	4413      	add	r3, r2
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	4019      	ands	r1, r3
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6898      	ldr	r0, [r3, #8]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	4413      	add	r3, r2
 8005aba:	fa00 f203 	lsl.w	r2, r0, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ace:	d004      	beq.n	8005ada <HAL_ADC_ConfigChannel+0x416>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a18      	ldr	r2, [pc, #96]	; (8005b38 <HAL_ADC_ConfigChannel+0x474>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d101      	bne.n	8005ade <HAL_ADC_ConfigChannel+0x41a>
 8005ada:	4b18      	ldr	r3, [pc, #96]	; (8005b3c <HAL_ADC_ConfigChannel+0x478>)
 8005adc:	e000      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0x41c>
 8005ade:	4b18      	ldr	r3, [pc, #96]	; (8005b40 <HAL_ADC_ConfigChannel+0x47c>)
 8005ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d105      	bne.n	8005af6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d015      	beq.n	8005b22 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005afa:	2b11      	cmp	r3, #17
 8005afc:	d105      	bne.n	8005b0a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00b      	beq.n	8005b22 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005b0e:	2b12      	cmp	r3, #18
 8005b10:	f040 80ac 	bne.w	8005c6c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f040 80a5 	bne.w	8005c6c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b2a:	d10b      	bne.n	8005b44 <HAL_ADC_ConfigChannel+0x480>
 8005b2c:	4b02      	ldr	r3, [pc, #8]	; (8005b38 <HAL_ADC_ConfigChannel+0x474>)
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e023      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x4b6>
 8005b32:	bf00      	nop
 8005b34:	83fff000 	.word	0x83fff000
 8005b38:	50000100 	.word	0x50000100
 8005b3c:	50000300 	.word	0x50000300
 8005b40:	50000700 	.word	0x50000700
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a4e      	ldr	r2, [pc, #312]	; (8005c84 <HAL_ADC_ConfigChannel+0x5c0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d103      	bne.n	8005b56 <HAL_ADC_ConfigChannel+0x492>
 8005b4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	e011      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x4b6>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a4b      	ldr	r2, [pc, #300]	; (8005c88 <HAL_ADC_ConfigChannel+0x5c4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d102      	bne.n	8005b66 <HAL_ADC_ConfigChannel+0x4a2>
 8005b60:	4b4a      	ldr	r3, [pc, #296]	; (8005c8c <HAL_ADC_ConfigChannel+0x5c8>)
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e009      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x4b6>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a48      	ldr	r2, [pc, #288]	; (8005c8c <HAL_ADC_ConfigChannel+0x5c8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d102      	bne.n	8005b76 <HAL_ADC_ConfigChannel+0x4b2>
 8005b70:	4b45      	ldr	r3, [pc, #276]	; (8005c88 <HAL_ADC_ConfigChannel+0x5c4>)
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	e001      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x4b6>
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d108      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x4d6>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x4d6>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_ADC_ConfigChannel+0x4d8>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d150      	bne.n	8005c42 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005ba0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d010      	beq.n	8005bc8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d107      	bne.n	8005bc2 <HAL_ADC_ConfigChannel+0x4fe>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_ADC_ConfigChannel+0x4fe>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <HAL_ADC_ConfigChannel+0x500>
 8005bc2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d13c      	bne.n	8005c42 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b10      	cmp	r3, #16
 8005bce:	d11d      	bne.n	8005c0c <HAL_ADC_ConfigChannel+0x548>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bd8:	d118      	bne.n	8005c0c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005be4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005be6:	4b2a      	ldr	r3, [pc, #168]	; (8005c90 <HAL_ADC_ConfigChannel+0x5cc>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a2a      	ldr	r2, [pc, #168]	; (8005c94 <HAL_ADC_ConfigChannel+0x5d0>)
 8005bec:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf0:	0c9a      	lsrs	r2, r3, #18
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005bfc:	e002      	b.n	8005c04 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f9      	bne.n	8005bfe <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005c0a:	e02e      	b.n	8005c6a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b11      	cmp	r3, #17
 8005c12:	d10b      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x568>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c1c:	d106      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c28:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005c2a:	e01e      	b.n	8005c6a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b12      	cmp	r3, #18
 8005c32:	d11a      	bne.n	8005c6a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005c3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c3e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005c40:	e013      	b.n	8005c6a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f043 0220 	orr.w	r2, r3, #32
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005c54:	e00a      	b.n	8005c6c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f043 0220 	orr.w	r2, r3, #32
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005c68:	e000      	b.n	8005c6c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005c6a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005c74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	376c      	adds	r7, #108	; 0x6c
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	50000100 	.word	0x50000100
 8005c88:	50000400 	.word	0x50000400
 8005c8c:	50000500 	.word	0x50000500
 8005c90:	2000000c 	.word	0x2000000c
 8005c94:	431bde83 	.word	0x431bde83

08005c98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b099      	sub	sp, #100	; 0x64
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cb0:	d102      	bne.n	8005cb8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005cb2:	4b6d      	ldr	r3, [pc, #436]	; (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	e01a      	b.n	8005cee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a6a      	ldr	r2, [pc, #424]	; (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d103      	bne.n	8005cca <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8005cc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005cc6:	60bb      	str	r3, [r7, #8]
 8005cc8:	e011      	b.n	8005cee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a67      	ldr	r2, [pc, #412]	; (8005e6c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d102      	bne.n	8005cda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005cd4:	4b66      	ldr	r3, [pc, #408]	; (8005e70 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	e009      	b.n	8005cee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a64      	ldr	r2, [pc, #400]	; (8005e70 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d102      	bne.n	8005cea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005ce4:	4b61      	ldr	r3, [pc, #388]	; (8005e6c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005ce6:	60bb      	str	r3, [r7, #8]
 8005ce8:	e001      	b.n	8005cee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005cea:	2300      	movs	r3, #0
 8005cec:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0b0      	b.n	8005e5a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e0a9      	b.n	8005e5a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f040 808d 	bne.w	8005e38 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f040 8086 	bne.w	8005e38 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d34:	d004      	beq.n	8005d40 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a4b      	ldr	r2, [pc, #300]	; (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d101      	bne.n	8005d44 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005d40:	4b4c      	ldr	r3, [pc, #304]	; (8005e74 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8005d42:	e000      	b.n	8005d46 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005d44:	4b4c      	ldr	r3, [pc, #304]	; (8005e78 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8005d46:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d040      	beq.n	8005dd2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d62:	035b      	lsls	r3, r3, #13
 8005d64:	430b      	orrs	r3, r1
 8005d66:	431a      	orrs	r2, r3
 8005d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d6a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d108      	bne.n	8005d8c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d15c      	bne.n	8005e4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d107      	bne.n	8005dae <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8005dae:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d14b      	bne.n	8005e4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005dbc:	f023 030f 	bic.w	r3, r3, #15
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	6811      	ldr	r1, [r2, #0]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	6892      	ldr	r2, [r2, #8]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dce:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005dd0:	e03c      	b.n	8005e4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005dd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ddc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 0303 	and.w	r3, r3, #3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d108      	bne.n	8005dfe <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d123      	bne.n	8005e4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d107      	bne.n	8005e20 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e000      	b.n	8005e22 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005e20:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d112      	bne.n	8005e4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005e2e:	f023 030f 	bic.w	r3, r3, #15
 8005e32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e34:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e36:	e009      	b.n	8005e4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	f043 0220 	orr.w	r2, r3, #32
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005e4a:	e000      	b.n	8005e4e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e4c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005e56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3764      	adds	r7, #100	; 0x64
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	50000100 	.word	0x50000100
 8005e6c:	50000400 	.word	0x50000400
 8005e70:	50000500 	.word	0x50000500
 8005e74:	50000300 	.word	0x50000300
 8005e78:	50000700 	.word	0x50000700

08005e7c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d126      	bne.n	8005ee4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d115      	bne.n	8005edc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d111      	bne.n	8005edc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d105      	bne.n	8005edc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	f043 0201 	orr.w	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7fe f93f 	bl	8004160 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005ee2:	e004      	b.n	8005eee <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7ff f851 	bl	8004fac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f30:	f043 0204 	orr.w	r2, r3, #4
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f7ff f841 	bl	8004fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d108      	bne.n	8005f74 <ADC_Enable+0x2c>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <ADC_Enable+0x2c>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e000      	b.n	8005f76 <ADC_Enable+0x2e>
 8005f74:	2300      	movs	r3, #0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d143      	bne.n	8006002 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	4b22      	ldr	r3, [pc, #136]	; (800600c <ADC_Enable+0xc4>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00d      	beq.n	8005fa4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8c:	f043 0210 	orr.w	r2, r3, #16
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f98:	f043 0201 	orr.w	r2, r3, #1
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e02f      	b.n	8006004 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005fb4:	f7fe ffca 	bl	8004f4c <HAL_GetTick>
 8005fb8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005fba:	e01b      	b.n	8005ff4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005fbc:	f7fe ffc6 	bl	8004f4c <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d914      	bls.n	8005ff4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d00d      	beq.n	8005ff4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	f043 0210 	orr.w	r2, r3, #16
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe8:	f043 0201 	orr.w	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e007      	b.n	8006004 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d1dc      	bne.n	8005fbc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	8000003f 	.word	0x8000003f

08006010 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b01      	cmp	r3, #1
 8006028:	d108      	bne.n	800603c <ADC_Disable+0x2c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <ADC_Disable+0x2c>
 8006038:	2301      	movs	r3, #1
 800603a:	e000      	b.n	800603e <ADC_Disable+0x2e>
 800603c:	2300      	movs	r3, #0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d047      	beq.n	80060d2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 030d 	and.w	r3, r3, #13
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10f      	bne.n	8006070 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0202 	orr.w	r2, r2, #2
 800605e:	609a      	str	r2, [r3, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2203      	movs	r2, #3
 8006066:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8006068:	f7fe ff70 	bl	8004f4c <HAL_GetTick>
 800606c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800606e:	e029      	b.n	80060c4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006074:	f043 0210 	orr.w	r2, r3, #16
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006080:	f043 0201 	orr.w	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e023      	b.n	80060d4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800608c:	f7fe ff5e 	bl	8004f4c <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d914      	bls.n	80060c4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d10d      	bne.n	80060c4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	f043 0210 	orr.w	r2, r3, #16
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b8:	f043 0201 	orr.w	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e007      	b.n	80060d4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d0dc      	beq.n	800608c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 030c 	and.w	r3, r3, #12
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 809b 	beq.w	8006238 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006110:	d12a      	bne.n	8006168 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8006116:	2b01      	cmp	r3, #1
 8006118:	d126      	bne.n	8006168 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800611e:	2b01      	cmp	r3, #1
 8006120:	d122      	bne.n	8006168 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8006122:	230c      	movs	r3, #12
 8006124:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8006126:	e014      	b.n	8006152 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4a46      	ldr	r2, [pc, #280]	; (8006244 <ADC_ConversionStop+0x168>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d90d      	bls.n	800614c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	f043 0210 	orr.w	r2, r3, #16
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006140:	f043 0201 	orr.w	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e076      	b.n	800623a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	3301      	adds	r3, #1
 8006150:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d1e3      	bne.n	8006128 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2240      	movs	r2, #64	; 0x40
 8006166:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b60      	cmp	r3, #96	; 0x60
 800616c:	d015      	beq.n	800619a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b04      	cmp	r3, #4
 800617a:	d10e      	bne.n	800619a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006186:	2b00      	cmp	r3, #0
 8006188:	d107      	bne.n	800619a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f042 0210 	orr.w	r2, r2, #16
 8006198:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b0c      	cmp	r3, #12
 800619e:	d015      	beq.n	80061cc <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d10e      	bne.n	80061cc <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d107      	bne.n	80061cc <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0220 	orr.w	r2, r2, #32
 80061ca:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b60      	cmp	r3, #96	; 0x60
 80061d0:	d005      	beq.n	80061de <ADC_ConversionStop+0x102>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b6c      	cmp	r3, #108	; 0x6c
 80061d6:	d105      	bne.n	80061e4 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80061d8:	230c      	movs	r3, #12
 80061da:	617b      	str	r3, [r7, #20]
        break;
 80061dc:	e005      	b.n	80061ea <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80061de:	2308      	movs	r3, #8
 80061e0:	617b      	str	r3, [r7, #20]
        break;
 80061e2:	e002      	b.n	80061ea <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80061e4:	2304      	movs	r3, #4
 80061e6:	617b      	str	r3, [r7, #20]
        break;
 80061e8:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80061ea:	f7fe feaf 	bl	8004f4c <HAL_GetTick>
 80061ee:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80061f0:	e01b      	b.n	800622a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80061f2:	f7fe feab 	bl	8004f4c <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b0b      	cmp	r3, #11
 80061fe:	d914      	bls.n	800622a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	4013      	ands	r3, r2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00d      	beq.n	800622a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f043 0210 	orr.w	r2, r3, #16
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621e:	f043 0201 	orr.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e007      	b.n	800623a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4013      	ands	r3, r2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1dc      	bne.n	80061f2 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	000993ff 	.word	0x000993ff

08006248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006258:	4b0c      	ldr	r3, [pc, #48]	; (800628c <__NVIC_SetPriorityGrouping+0x44>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006264:	4013      	ands	r3, r2
 8006266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800627a:	4a04      	ldr	r2, [pc, #16]	; (800628c <__NVIC_SetPriorityGrouping+0x44>)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	60d3      	str	r3, [r2, #12]
}
 8006280:	bf00      	nop
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	e000ed00 	.word	0xe000ed00

08006290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006294:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <__NVIC_GetPriorityGrouping+0x18>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	0a1b      	lsrs	r3, r3, #8
 800629a:	f003 0307 	and.w	r3, r3, #7
}
 800629e:	4618      	mov	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	e000ed00 	.word	0xe000ed00

080062ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	4603      	mov	r3, r0
 80062b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	db0b      	blt.n	80062d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	f003 021f 	and.w	r2, r3, #31
 80062c4:	4907      	ldr	r1, [pc, #28]	; (80062e4 <__NVIC_EnableIRQ+0x38>)
 80062c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	2001      	movs	r0, #1
 80062ce:	fa00 f202 	lsl.w	r2, r0, r2
 80062d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	e000e100 	.word	0xe000e100

080062e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	6039      	str	r1, [r7, #0]
 80062f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	db0a      	blt.n	8006312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	490c      	ldr	r1, [pc, #48]	; (8006334 <__NVIC_SetPriority+0x4c>)
 8006302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006306:	0112      	lsls	r2, r2, #4
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	440b      	add	r3, r1
 800630c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006310:	e00a      	b.n	8006328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	b2da      	uxtb	r2, r3
 8006316:	4908      	ldr	r1, [pc, #32]	; (8006338 <__NVIC_SetPriority+0x50>)
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	3b04      	subs	r3, #4
 8006320:	0112      	lsls	r2, r2, #4
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	440b      	add	r3, r1
 8006326:	761a      	strb	r2, [r3, #24]
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	e000e100 	.word	0xe000e100
 8006338:	e000ed00 	.word	0xe000ed00

0800633c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800633c:	b480      	push	{r7}
 800633e:	b089      	sub	sp, #36	; 0x24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f1c3 0307 	rsb	r3, r3, #7
 8006356:	2b04      	cmp	r3, #4
 8006358:	bf28      	it	cs
 800635a:	2304      	movcs	r3, #4
 800635c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	3304      	adds	r3, #4
 8006362:	2b06      	cmp	r3, #6
 8006364:	d902      	bls.n	800636c <NVIC_EncodePriority+0x30>
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	3b03      	subs	r3, #3
 800636a:	e000      	b.n	800636e <NVIC_EncodePriority+0x32>
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006370:	f04f 32ff 	mov.w	r2, #4294967295
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	43da      	mvns	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	401a      	ands	r2, r3
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006384:	f04f 31ff 	mov.w	r1, #4294967295
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	fa01 f303 	lsl.w	r3, r1, r3
 800638e:	43d9      	mvns	r1, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006394:	4313      	orrs	r3, r2
         );
}
 8006396:	4618      	mov	r0, r3
 8006398:	3724      	adds	r7, #36	; 0x24
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
	...

080063a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063b4:	d301      	bcc.n	80063ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063b6:	2301      	movs	r3, #1
 80063b8:	e00f      	b.n	80063da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063ba:	4a0a      	ldr	r2, [pc, #40]	; (80063e4 <SysTick_Config+0x40>)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3b01      	subs	r3, #1
 80063c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063c2:	210f      	movs	r1, #15
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	f7ff ff8e 	bl	80062e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <SysTick_Config+0x40>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063d2:	4b04      	ldr	r3, [pc, #16]	; (80063e4 <SysTick_Config+0x40>)
 80063d4:	2207      	movs	r2, #7
 80063d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	e000e010 	.word	0xe000e010

080063e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff ff29 	bl	8006248 <__NVIC_SetPriorityGrouping>
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b086      	sub	sp, #24
 8006402:	af00      	add	r7, sp, #0
 8006404:	4603      	mov	r3, r0
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	607a      	str	r2, [r7, #4]
 800640a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006410:	f7ff ff3e 	bl	8006290 <__NVIC_GetPriorityGrouping>
 8006414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	6978      	ldr	r0, [r7, #20]
 800641c:	f7ff ff8e 	bl	800633c <NVIC_EncodePriority>
 8006420:	4602      	mov	r2, r0
 8006422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006426:	4611      	mov	r1, r2
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff ff5d 	bl	80062e8 <__NVIC_SetPriority>
}
 800642e:	bf00      	nop
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	4603      	mov	r3, r0
 800643e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff ff31 	bl	80062ac <__NVIC_EnableIRQ>
}
 800644a:	bf00      	nop
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b082      	sub	sp, #8
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7ff ffa2 	bl	80063a4 <SysTick_Config>
 8006460:	4603      	mov	r3, r0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e037      	b.n	80064f0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006496:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800649a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80064a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f97a 	bl	80067cc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}  
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_DMA_Start_IT+0x20>
 8006514:	2302      	movs	r3, #2
 8006516:	e04a      	b.n	80065ae <HAL_DMA_Start_IT+0xb6>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006526:	2b01      	cmp	r3, #1
 8006528:	d13a      	bne.n	80065a0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2202      	movs	r2, #2
 800652e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0201 	bic.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f90d 	bl	800676e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d008      	beq.n	800656e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 020e 	orr.w	r2, r2, #14
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	e00f      	b.n	800658e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 020a 	orr.w	r2, r2, #10
 800657c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0204 	bic.w	r2, r2, #4
 800658c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e005      	b.n	80065ac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80065a8:	2302      	movs	r3, #2
 80065aa:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
} 
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d008      	beq.n	80065da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2204      	movs	r2, #4
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e020      	b.n	800661c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 020e 	bic.w	r2, r2, #14
 80065e8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0201 	bic.w	r2, r2, #1
 80065f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006602:	2101      	movs	r1, #1
 8006604:	fa01 f202 	lsl.w	r2, r1, r2
 8006608:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	2204      	movs	r2, #4
 8006646:	409a      	lsls	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d024      	beq.n	800669a <HAL_DMA_IRQHandler+0x72>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01f      	beq.n	800669a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d107      	bne.n	8006678 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0204 	bic.w	r2, r2, #4
 8006676:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006680:	2104      	movs	r1, #4
 8006682:	fa01 f202 	lsl.w	r2, r1, r2
 8006686:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d06a      	beq.n	8006766 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006698:	e065      	b.n	8006766 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	2202      	movs	r2, #2
 80066a0:	409a      	lsls	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4013      	ands	r3, r2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d02c      	beq.n	8006704 <HAL_DMA_IRQHandler+0xdc>
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d027      	beq.n	8006704 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10b      	bne.n	80066da <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 020a 	bic.w	r2, r2, #10
 80066d0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	2102      	movs	r1, #2
 80066e4:	fa01 f202 	lsl.w	r2, r1, r2
 80066e8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d035      	beq.n	8006766 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006702:	e030      	b.n	8006766 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	2208      	movs	r2, #8
 800670a:	409a      	lsls	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d028      	beq.n	8006766 <HAL_DMA_IRQHandler+0x13e>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f003 0308 	and.w	r3, r3, #8
 800671a:	2b00      	cmp	r3, #0
 800671c:	d023      	beq.n	8006766 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 020e 	bic.w	r2, r2, #14
 800672c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006736:	2101      	movs	r1, #1
 8006738:	fa01 f202 	lsl.w	r2, r1, r2
 800673c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
    }
  }
}  
 8006764:	e7ff      	b.n	8006766 <HAL_DMA_IRQHandler+0x13e>
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
 800677a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006784:	2101      	movs	r1, #1
 8006786:	fa01 f202 	lsl.w	r2, r1, r2
 800678a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	2b10      	cmp	r3, #16
 800679a:	d108      	bne.n	80067ae <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80067ac:	e007      	b.n	80067be <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	60da      	str	r2, [r3, #12]
}
 80067be:	bf00      	nop
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	4b14      	ldr	r3, [pc, #80]	; (800682c <DMA_CalcBaseAndBitshift+0x60>)
 80067dc:	429a      	cmp	r2, r3
 80067de:	d80f      	bhi.n	8006800 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	4b12      	ldr	r3, [pc, #72]	; (8006830 <DMA_CalcBaseAndBitshift+0x64>)
 80067e8:	4413      	add	r3, r2
 80067ea:	4a12      	ldr	r2, [pc, #72]	; (8006834 <DMA_CalcBaseAndBitshift+0x68>)
 80067ec:	fba2 2303 	umull	r2, r3, r2, r3
 80067f0:	091b      	lsrs	r3, r3, #4
 80067f2:	009a      	lsls	r2, r3, #2
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <DMA_CalcBaseAndBitshift+0x6c>)
 80067fc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80067fe:	e00e      	b.n	800681e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	4b0d      	ldr	r3, [pc, #52]	; (800683c <DMA_CalcBaseAndBitshift+0x70>)
 8006808:	4413      	add	r3, r2
 800680a:	4a0a      	ldr	r2, [pc, #40]	; (8006834 <DMA_CalcBaseAndBitshift+0x68>)
 800680c:	fba2 2303 	umull	r2, r3, r2, r3
 8006810:	091b      	lsrs	r3, r3, #4
 8006812:	009a      	lsls	r2, r3, #2
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a09      	ldr	r2, [pc, #36]	; (8006840 <DMA_CalcBaseAndBitshift+0x74>)
 800681c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40020407 	.word	0x40020407
 8006830:	bffdfff8 	.word	0xbffdfff8
 8006834:	cccccccd 	.word	0xcccccccd
 8006838:	40020000 	.word	0x40020000
 800683c:	bffdfbf8 	.word	0xbffdfbf8
 8006840:	40020400 	.word	0x40020400

08006844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800684e:	2300      	movs	r3, #0
 8006850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006852:	e160      	b.n	8006b16 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	2101      	movs	r1, #1
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	fa01 f303 	lsl.w	r3, r1, r3
 8006860:	4013      	ands	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 8152 	beq.w	8006b10 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f003 0303 	and.w	r3, r3, #3
 8006874:	2b01      	cmp	r3, #1
 8006876:	d005      	beq.n	8006884 <HAL_GPIO_Init+0x40>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f003 0303 	and.w	r3, r3, #3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d130      	bne.n	80068e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	2203      	movs	r2, #3
 8006890:	fa02 f303 	lsl.w	r3, r2, r3
 8006894:	43db      	mvns	r3, r3
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4013      	ands	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	fa02 f303 	lsl.w	r3, r2, r3
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068ba:	2201      	movs	r2, #1
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	fa02 f303 	lsl.w	r3, r2, r3
 80068c2:	43db      	mvns	r3, r3
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4013      	ands	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	f003 0201 	and.w	r2, r3, #1
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	fa02 f303 	lsl.w	r3, r2, r3
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d017      	beq.n	8006922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	2203      	movs	r2, #3
 80068fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006902:	43db      	mvns	r3, r3
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4013      	ands	r3, r2
 8006908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	fa02 f303 	lsl.w	r3, r2, r3
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d123      	bne.n	8006976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	08da      	lsrs	r2, r3, #3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3208      	adds	r2, #8
 8006936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f003 0307 	and.w	r3, r3, #7
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	220f      	movs	r2, #15
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	43db      	mvns	r3, r3
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4013      	ands	r3, r2
 8006950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	691a      	ldr	r2, [r3, #16]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	08da      	lsrs	r2, r3, #3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3208      	adds	r2, #8
 8006970:	6939      	ldr	r1, [r7, #16]
 8006972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	2203      	movs	r2, #3
 8006982:	fa02 f303 	lsl.w	r3, r2, r3
 8006986:	43db      	mvns	r3, r3
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4013      	ands	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f003 0203 	and.w	r2, r3, #3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 80ac 	beq.w	8006b10 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069b8:	4b5e      	ldr	r3, [pc, #376]	; (8006b34 <HAL_GPIO_Init+0x2f0>)
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	4a5d      	ldr	r2, [pc, #372]	; (8006b34 <HAL_GPIO_Init+0x2f0>)
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	6193      	str	r3, [r2, #24]
 80069c4:	4b5b      	ldr	r3, [pc, #364]	; (8006b34 <HAL_GPIO_Init+0x2f0>)
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80069d0:	4a59      	ldr	r2, [pc, #356]	; (8006b38 <HAL_GPIO_Init+0x2f4>)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	089b      	lsrs	r3, r3, #2
 80069d6:	3302      	adds	r3, #2
 80069d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f003 0303 	and.w	r3, r3, #3
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	220f      	movs	r2, #15
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	43db      	mvns	r3, r3
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4013      	ands	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80069fa:	d025      	beq.n	8006a48 <HAL_GPIO_Init+0x204>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a4f      	ldr	r2, [pc, #316]	; (8006b3c <HAL_GPIO_Init+0x2f8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d01f      	beq.n	8006a44 <HAL_GPIO_Init+0x200>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a4e      	ldr	r2, [pc, #312]	; (8006b40 <HAL_GPIO_Init+0x2fc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d019      	beq.n	8006a40 <HAL_GPIO_Init+0x1fc>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a4d      	ldr	r2, [pc, #308]	; (8006b44 <HAL_GPIO_Init+0x300>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d013      	beq.n	8006a3c <HAL_GPIO_Init+0x1f8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a4c      	ldr	r2, [pc, #304]	; (8006b48 <HAL_GPIO_Init+0x304>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00d      	beq.n	8006a38 <HAL_GPIO_Init+0x1f4>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a4b      	ldr	r2, [pc, #300]	; (8006b4c <HAL_GPIO_Init+0x308>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d007      	beq.n	8006a34 <HAL_GPIO_Init+0x1f0>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a4a      	ldr	r2, [pc, #296]	; (8006b50 <HAL_GPIO_Init+0x30c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d101      	bne.n	8006a30 <HAL_GPIO_Init+0x1ec>
 8006a2c:	2306      	movs	r3, #6
 8006a2e:	e00c      	b.n	8006a4a <HAL_GPIO_Init+0x206>
 8006a30:	2307      	movs	r3, #7
 8006a32:	e00a      	b.n	8006a4a <HAL_GPIO_Init+0x206>
 8006a34:	2305      	movs	r3, #5
 8006a36:	e008      	b.n	8006a4a <HAL_GPIO_Init+0x206>
 8006a38:	2304      	movs	r3, #4
 8006a3a:	e006      	b.n	8006a4a <HAL_GPIO_Init+0x206>
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e004      	b.n	8006a4a <HAL_GPIO_Init+0x206>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e002      	b.n	8006a4a <HAL_GPIO_Init+0x206>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <HAL_GPIO_Init+0x206>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	f002 0203 	and.w	r2, r2, #3
 8006a50:	0092      	lsls	r2, r2, #2
 8006a52:	4093      	lsls	r3, r2
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006a5a:	4937      	ldr	r1, [pc, #220]	; (8006b38 <HAL_GPIO_Init+0x2f4>)
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	089b      	lsrs	r3, r3, #2
 8006a60:	3302      	adds	r3, #2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a68:	4b3a      	ldr	r3, [pc, #232]	; (8006b54 <HAL_GPIO_Init+0x310>)
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	43db      	mvns	r3, r3
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4013      	ands	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006a8c:	4a31      	ldr	r2, [pc, #196]	; (8006b54 <HAL_GPIO_Init+0x310>)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a92:	4b30      	ldr	r3, [pc, #192]	; (8006b54 <HAL_GPIO_Init+0x310>)
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006ab6:	4a27      	ldr	r2, [pc, #156]	; (8006b54 <HAL_GPIO_Init+0x310>)
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006abc:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <HAL_GPIO_Init+0x310>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006ae0:	4a1c      	ldr	r2, [pc, #112]	; (8006b54 <HAL_GPIO_Init+0x310>)
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ae6:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <HAL_GPIO_Init+0x310>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	43db      	mvns	r3, r3
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4013      	ands	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006b0a:	4a12      	ldr	r2, [pc, #72]	; (8006b54 <HAL_GPIO_Init+0x310>)
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	3301      	adds	r3, #1
 8006b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f47f ae97 	bne.w	8006854 <HAL_GPIO_Init+0x10>
  }
}
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	371c      	adds	r7, #28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	40021000 	.word	0x40021000
 8006b38:	40010000 	.word	0x40010000
 8006b3c:	48000400 	.word	0x48000400
 8006b40:	48000800 	.word	0x48000800
 8006b44:	48000c00 	.word	0x48000c00
 8006b48:	48001000 	.word	0x48001000
 8006b4c:	48001400 	.word	0x48001400
 8006b50:	48001800 	.word	0x48001800
 8006b54:	40010400 	.word	0x40010400

08006b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	887b      	ldrh	r3, [r7, #2]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b70:	2301      	movs	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
 8006b74:	e001      	b.n	8006b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b76:	2300      	movs	r3, #0
 8006b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	807b      	strh	r3, [r7, #2]
 8006b94:	4613      	mov	r3, r2
 8006b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b98:	787b      	ldrb	r3, [r7, #1]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b9e:	887a      	ldrh	r2, [r7, #2]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ba4:	e002      	b.n	8006bac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ba6:	887a      	ldrh	r2, [r7, #2]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006bc2:	4b08      	ldr	r3, [pc, #32]	; (8006be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bc4:	695a      	ldr	r2, [r3, #20]
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d006      	beq.n	8006bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006bce:	4a05      	ldr	r2, [pc, #20]	; (8006be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bd0:	88fb      	ldrh	r3, [r7, #6]
 8006bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fd fa12 	bl	8004000 <HAL_GPIO_EXTI_Callback>
  }
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40010400 	.word	0x40010400

08006be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e081      	b.n	8006cfe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fd ff08 	bl	8004a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2224      	movs	r2, #36	; 0x24
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0201 	bic.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d107      	bne.n	8006c62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c5e:	609a      	str	r2, [r3, #8]
 8006c60:	e006      	b.n	8006c70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006c6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d104      	bne.n	8006c82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68da      	ldr	r2, [r3, #12]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ca4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	69d9      	ldr	r1, [r3, #28]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	461a      	mov	r2, r3
 8006d14:	460b      	mov	r3, r1
 8006d16:	817b      	strh	r3, [r7, #10]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	f040 80da 	bne.w	8006ede <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_I2C_Master_Transmit+0x30>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e0d3      	b.n	8006ee0 <HAL_I2C_Master_Transmit+0x1d8>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d40:	f7fe f904 	bl	8004f4c <HAL_GetTick>
 8006d44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	2319      	movs	r3, #25
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 f8f0 	bl	8006f38 <I2C_WaitOnFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e0be      	b.n	8006ee0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2221      	movs	r2, #33	; 0x21
 8006d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2210      	movs	r2, #16
 8006d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	893a      	ldrh	r2, [r7, #8]
 8006d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	2bff      	cmp	r3, #255	; 0xff
 8006d92:	d90e      	bls.n	8006db2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	22ff      	movs	r2, #255	; 0xff
 8006d98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	8979      	ldrh	r1, [r7, #10]
 8006da2:	4b51      	ldr	r3, [pc, #324]	; (8006ee8 <HAL_I2C_Master_Transmit+0x1e0>)
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 fa7e 	bl	80072ac <I2C_TransferConfig>
 8006db0:	e06c      	b.n	8006e8c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	8979      	ldrh	r1, [r7, #10]
 8006dc4:	4b48      	ldr	r3, [pc, #288]	; (8006ee8 <HAL_I2C_Master_Transmit+0x1e0>)
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 fa6d 	bl	80072ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006dd2:	e05b      	b.n	8006e8c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	6a39      	ldr	r1, [r7, #32]
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 f8fc 	bl	8006fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e07b      	b.n	8006ee0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	781a      	ldrb	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d034      	beq.n	8006e8c <HAL_I2C_Master_Transmit+0x184>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d130      	bne.n	8006e8c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	2200      	movs	r2, #0
 8006e32:	2180      	movs	r1, #128	; 0x80
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f87f 	bl	8006f38 <I2C_WaitOnFlagUntilTimeout>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e04d      	b.n	8006ee0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2bff      	cmp	r3, #255	; 0xff
 8006e4c:	d90e      	bls.n	8006e6c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	22ff      	movs	r2, #255	; 0xff
 8006e52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	8979      	ldrh	r1, [r7, #10]
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 fa21 	bl	80072ac <I2C_TransferConfig>
 8006e6a:	e00f      	b.n	8006e8c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	8979      	ldrh	r1, [r7, #10]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 fa10 	bl	80072ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d19e      	bne.n	8006dd4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	6a39      	ldr	r1, [r7, #32]
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f8e2 	bl	8007064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e01a      	b.n	8006ee0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6859      	ldr	r1, [r3, #4]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <HAL_I2C_Master_Transmit+0x1e4>)
 8006ebe:	400b      	ands	r3, r1
 8006ec0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	e000      	b.n	8006ee0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006ede:	2302      	movs	r3, #2
  }
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	80002000 	.word	0x80002000
 8006eec:	fe00e800 	.word	0xfe00e800

08006ef0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d103      	bne.n	8006f0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d007      	beq.n	8006f2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699a      	ldr	r2, [r3, #24]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	619a      	str	r2, [r3, #24]
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	4613      	mov	r3, r2
 8006f46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f48:	e031      	b.n	8006fae <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d02d      	beq.n	8006fae <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f52:	f7fd fffb 	bl	8004f4c <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d302      	bcc.n	8006f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d122      	bne.n	8006fae <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	4013      	ands	r3, r2
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	bf0c      	ite	eq
 8006f78:	2301      	moveq	r3, #1
 8006f7a:	2300      	movne	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	461a      	mov	r2, r3
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d113      	bne.n	8006fae <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8a:	f043 0220 	orr.w	r2, r3, #32
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e00f      	b.n	8006fce <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	699a      	ldr	r2, [r3, #24]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d0be      	beq.n	8006f4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006fe2:	e033      	b.n	800704c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f87f 	bl	80070ec <I2C_IsErrorOccurred>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e031      	b.n	800705c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffe:	d025      	beq.n	800704c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007000:	f7fd ffa4 	bl	8004f4c <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	429a      	cmp	r2, r3
 800700e:	d302      	bcc.n	8007016 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d11a      	bne.n	800704c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b02      	cmp	r3, #2
 8007022:	d013      	beq.n	800704c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007028:	f043 0220 	orr.w	r2, r3, #32
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e007      	b.n	800705c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b02      	cmp	r3, #2
 8007058:	d1c4      	bne.n	8006fe4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007070:	e02f      	b.n	80070d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	68b9      	ldr	r1, [r7, #8]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 f838 	bl	80070ec <I2C_IsErrorOccurred>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e02d      	b.n	80070e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007086:	f7fd ff61 	bl	8004f4c <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	429a      	cmp	r2, r3
 8007094:	d302      	bcc.n	800709c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d11a      	bne.n	80070d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d013      	beq.n	80070d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e007      	b.n	80070e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	f003 0320 	and.w	r3, r3, #32
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d1c8      	bne.n	8007072 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08a      	sub	sp, #40	; 0x28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	f003 0310 	and.w	r3, r3, #16
 8007114:	2b00      	cmp	r3, #0
 8007116:	d068      	beq.n	80071ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2210      	movs	r2, #16
 800711e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007120:	e049      	b.n	80071b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d045      	beq.n	80071b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800712a:	f7fd ff0f 	bl	8004f4c <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	429a      	cmp	r2, r3
 8007138:	d302      	bcc.n	8007140 <I2C_IsErrorOccurred+0x54>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d13a      	bne.n	80071b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800714a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007152:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800715e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007162:	d121      	bne.n	80071a8 <I2C_IsErrorOccurred+0xbc>
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800716a:	d01d      	beq.n	80071a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800716c:	7cfb      	ldrb	r3, [r7, #19]
 800716e:	2b20      	cmp	r3, #32
 8007170:	d01a      	beq.n	80071a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007180:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007182:	f7fd fee3 	bl	8004f4c <HAL_GetTick>
 8007186:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007188:	e00e      	b.n	80071a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800718a:	f7fd fedf 	bl	8004f4c <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b19      	cmp	r3, #25
 8007196:	d907      	bls.n	80071a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	f043 0320 	orr.w	r3, r3, #32
 800719e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80071a6:	e006      	b.n	80071b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	d1e9      	bne.n	800718a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	f003 0320 	and.w	r3, r3, #32
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d003      	beq.n	80071cc <I2C_IsErrorOccurred+0xe0>
 80071c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0aa      	beq.n	8007122 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80071cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d103      	bne.n	80071dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2220      	movs	r2, #32
 80071da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	f043 0304 	orr.w	r3, r3, #4
 80071e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	f043 0301 	orr.w	r3, r3, #1
 8007202:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800720c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00b      	beq.n	8007236 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	f043 0308 	orr.w	r3, r3, #8
 8007224:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800722e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	f043 0302 	orr.w	r3, r3, #2
 8007246:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007250:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01c      	beq.n	800729a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f7ff fe45 	bl	8006ef0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6859      	ldr	r1, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <I2C_IsErrorOccurred+0x1bc>)
 8007272:	400b      	ands	r3, r1
 8007274:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	431a      	orrs	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2220      	movs	r2, #32
 8007286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800729a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3728      	adds	r7, #40	; 0x28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	fe00e800 	.word	0xfe00e800

080072ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	460b      	mov	r3, r1
 80072b8:	817b      	strh	r3, [r7, #10]
 80072ba:	4613      	mov	r3, r2
 80072bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072be:	897b      	ldrh	r3, [r7, #10]
 80072c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072c4:	7a7b      	ldrb	r3, [r7, #9]
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	0d5b      	lsrs	r3, r3, #21
 80072e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80072ea:	4b08      	ldr	r3, [pc, #32]	; (800730c <I2C_TransferConfig+0x60>)
 80072ec:	430b      	orrs	r3, r1
 80072ee:	43db      	mvns	r3, r3
 80072f0:	ea02 0103 	and.w	r1, r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	03ff63ff 	.word	0x03ff63ff

08007310 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b20      	cmp	r3, #32
 8007324:	d138      	bne.n	8007398 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007330:	2302      	movs	r3, #2
 8007332:	e032      	b.n	800739a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2224      	movs	r2, #36	; 0x24
 8007340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0201 	bic.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007362:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6819      	ldr	r1, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	e000      	b.n	800739a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007398:	2302      	movs	r3, #2
  }
}
 800739a:	4618      	mov	r0, r3
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d139      	bne.n	8007430 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e033      	b.n	8007432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2224      	movs	r2, #36	; 0x24
 80073d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0201 	bic.w	r2, r2, #1
 80073e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80073f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	4313      	orrs	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e000      	b.n	8007432 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007430:	2302      	movs	r3, #2
  }
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
	...

08007440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8007446:	af00      	add	r7, sp, #0
 8007448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800744c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007450:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007456:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	f001 b83a 	b.w	80084da <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800746a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 816f 	beq.w	800775a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800747c:	4bb5      	ldr	r3, [pc, #724]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f003 030c 	and.w	r3, r3, #12
 8007484:	2b04      	cmp	r3, #4
 8007486:	d00c      	beq.n	80074a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007488:	4bb2      	ldr	r3, [pc, #712]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f003 030c 	and.w	r3, r3, #12
 8007490:	2b08      	cmp	r3, #8
 8007492:	d15c      	bne.n	800754e <HAL_RCC_OscConfig+0x10e>
 8007494:	4baf      	ldr	r3, [pc, #700]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800749c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a0:	d155      	bne.n	800754e <HAL_RCC_OscConfig+0x10e>
 80074a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074a6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80074ae:	fa93 f3a3 	rbit	r3, r3
 80074b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80074b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074ba:	fab3 f383 	clz	r3, r3
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	095b      	lsrs	r3, r3, #5
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f043 0301 	orr.w	r3, r3, #1
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d102      	bne.n	80074d4 <HAL_RCC_OscConfig+0x94>
 80074ce:	4ba1      	ldr	r3, [pc, #644]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	e015      	b.n	8007500 <HAL_RCC_OscConfig+0xc0>
 80074d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074d8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80074e0:	fa93 f3a3 	rbit	r3, r3
 80074e4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80074e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074ec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80074f0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80074f4:	fa93 f3a3 	rbit	r3, r3
 80074f8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80074fc:	4b95      	ldr	r3, [pc, #596]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007504:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8007508:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800750c:	fa92 f2a2 	rbit	r2, r2
 8007510:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8007514:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007518:	fab2 f282 	clz	r2, r2
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	f042 0220 	orr.w	r2, r2, #32
 8007522:	b2d2      	uxtb	r2, r2
 8007524:	f002 021f 	and.w	r2, r2, #31
 8007528:	2101      	movs	r1, #1
 800752a:	fa01 f202 	lsl.w	r2, r1, r2
 800752e:	4013      	ands	r3, r2
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 8111 	beq.w	8007758 <HAL_RCC_OscConfig+0x318>
 8007536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800753a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	f040 8108 	bne.w	8007758 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	f000 bfc6 	b.w	80084da <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800754e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007552:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800755e:	d106      	bne.n	800756e <HAL_RCC_OscConfig+0x12e>
 8007560:	4b7c      	ldr	r3, [pc, #496]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a7b      	ldr	r2, [pc, #492]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 8007566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	e036      	b.n	80075dc <HAL_RCC_OscConfig+0x19c>
 800756e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007572:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10c      	bne.n	8007598 <HAL_RCC_OscConfig+0x158>
 800757e:	4b75      	ldr	r3, [pc, #468]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a74      	ldr	r2, [pc, #464]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 8007584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	4b72      	ldr	r3, [pc, #456]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a71      	ldr	r2, [pc, #452]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 8007590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007594:	6013      	str	r3, [r2, #0]
 8007596:	e021      	b.n	80075dc <HAL_RCC_OscConfig+0x19c>
 8007598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800759c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075a8:	d10c      	bne.n	80075c4 <HAL_RCC_OscConfig+0x184>
 80075aa:	4b6a      	ldr	r3, [pc, #424]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a69      	ldr	r2, [pc, #420]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 80075b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	4b67      	ldr	r3, [pc, #412]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a66      	ldr	r2, [pc, #408]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 80075bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	e00b      	b.n	80075dc <HAL_RCC_OscConfig+0x19c>
 80075c4:	4b63      	ldr	r3, [pc, #396]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a62      	ldr	r2, [pc, #392]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 80075ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	4b60      	ldr	r3, [pc, #384]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a5f      	ldr	r2, [pc, #380]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 80075d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075da:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d059      	beq.n	80076a0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ec:	f7fd fcae 	bl	8004f4c <HAL_GetTick>
 80075f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f4:	e00a      	b.n	800760c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075f6:	f7fd fca9 	bl	8004f4c <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b64      	cmp	r3, #100	; 0x64
 8007604:	d902      	bls.n	800760c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	f000 bf67 	b.w	80084da <HAL_RCC_OscConfig+0x109a>
 800760c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007610:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007614:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8007618:	fa93 f3a3 	rbit	r3, r3
 800761c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8007620:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007624:	fab3 f383 	clz	r3, r3
 8007628:	b2db      	uxtb	r3, r3
 800762a:	095b      	lsrs	r3, r3, #5
 800762c:	b2db      	uxtb	r3, r3
 800762e:	f043 0301 	orr.w	r3, r3, #1
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b01      	cmp	r3, #1
 8007636:	d102      	bne.n	800763e <HAL_RCC_OscConfig+0x1fe>
 8007638:	4b46      	ldr	r3, [pc, #280]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	e015      	b.n	800766a <HAL_RCC_OscConfig+0x22a>
 800763e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007642:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007646:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800764a:	fa93 f3a3 	rbit	r3, r3
 800764e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8007652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007656:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800765a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800765e:	fa93 f3a3 	rbit	r3, r3
 8007662:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007666:	4b3b      	ldr	r3, [pc, #236]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800766e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8007672:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8007676:	fa92 f2a2 	rbit	r2, r2
 800767a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800767e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007682:	fab2 f282 	clz	r2, r2
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	f042 0220 	orr.w	r2, r2, #32
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	f002 021f 	and.w	r2, r2, #31
 8007692:	2101      	movs	r1, #1
 8007694:	fa01 f202 	lsl.w	r2, r1, r2
 8007698:	4013      	ands	r3, r2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0ab      	beq.n	80075f6 <HAL_RCC_OscConfig+0x1b6>
 800769e:	e05c      	b.n	800775a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a0:	f7fd fc54 	bl	8004f4c <HAL_GetTick>
 80076a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076a8:	e00a      	b.n	80076c0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076aa:	f7fd fc4f 	bl	8004f4c <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b64      	cmp	r3, #100	; 0x64
 80076b8:	d902      	bls.n	80076c0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	f000 bf0d 	b.w	80084da <HAL_RCC_OscConfig+0x109a>
 80076c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80076cc:	fa93 f3a3 	rbit	r3, r3
 80076d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80076d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076d8:	fab3 f383 	clz	r3, r3
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	095b      	lsrs	r3, r3, #5
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	f043 0301 	orr.w	r3, r3, #1
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d102      	bne.n	80076f2 <HAL_RCC_OscConfig+0x2b2>
 80076ec:	4b19      	ldr	r3, [pc, #100]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	e015      	b.n	800771e <HAL_RCC_OscConfig+0x2de>
 80076f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80076fe:	fa93 f3a3 	rbit	r3, r3
 8007702:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8007706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800770a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800770e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007712:	fa93 f3a3 	rbit	r3, r3
 8007716:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800771a:	4b0e      	ldr	r3, [pc, #56]	; (8007754 <HAL_RCC_OscConfig+0x314>)
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007722:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8007726:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800772a:	fa92 f2a2 	rbit	r2, r2
 800772e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8007732:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007736:	fab2 f282 	clz	r2, r2
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	f042 0220 	orr.w	r2, r2, #32
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	f002 021f 	and.w	r2, r2, #31
 8007746:	2101      	movs	r1, #1
 8007748:	fa01 f202 	lsl.w	r2, r1, r2
 800774c:	4013      	ands	r3, r2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1ab      	bne.n	80076aa <HAL_RCC_OscConfig+0x26a>
 8007752:	e002      	b.n	800775a <HAL_RCC_OscConfig+0x31a>
 8007754:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800775a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800775e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 817f 	beq.w	8007a6e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007770:	4ba7      	ldr	r3, [pc, #668]	; (8007a10 <HAL_RCC_OscConfig+0x5d0>)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f003 030c 	and.w	r3, r3, #12
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00c      	beq.n	8007796 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800777c:	4ba4      	ldr	r3, [pc, #656]	; (8007a10 <HAL_RCC_OscConfig+0x5d0>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f003 030c 	and.w	r3, r3, #12
 8007784:	2b08      	cmp	r3, #8
 8007786:	d173      	bne.n	8007870 <HAL_RCC_OscConfig+0x430>
 8007788:	4ba1      	ldr	r3, [pc, #644]	; (8007a10 <HAL_RCC_OscConfig+0x5d0>)
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8007790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007794:	d16c      	bne.n	8007870 <HAL_RCC_OscConfig+0x430>
 8007796:	2302      	movs	r3, #2
 8007798:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800779c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80077a0:	fa93 f3a3 	rbit	r3, r3
 80077a4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80077a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ac:	fab3 f383 	clz	r3, r3
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	095b      	lsrs	r3, r3, #5
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d102      	bne.n	80077c6 <HAL_RCC_OscConfig+0x386>
 80077c0:	4b93      	ldr	r3, [pc, #588]	; (8007a10 <HAL_RCC_OscConfig+0x5d0>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	e013      	b.n	80077ee <HAL_RCC_OscConfig+0x3ae>
 80077c6:	2302      	movs	r3, #2
 80077c8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80077d0:	fa93 f3a3 	rbit	r3, r3
 80077d4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80077d8:	2302      	movs	r3, #2
 80077da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80077de:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80077e2:	fa93 f3a3 	rbit	r3, r3
 80077e6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80077ea:	4b89      	ldr	r3, [pc, #548]	; (8007a10 <HAL_RCC_OscConfig+0x5d0>)
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	2202      	movs	r2, #2
 80077f0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80077f4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80077f8:	fa92 f2a2 	rbit	r2, r2
 80077fc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8007800:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007804:	fab2 f282 	clz	r2, r2
 8007808:	b2d2      	uxtb	r2, r2
 800780a:	f042 0220 	orr.w	r2, r2, #32
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	f002 021f 	and.w	r2, r2, #31
 8007814:	2101      	movs	r1, #1
 8007816:	fa01 f202 	lsl.w	r2, r1, r2
 800781a:	4013      	ands	r3, r2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00a      	beq.n	8007836 <HAL_RCC_OscConfig+0x3f6>
 8007820:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007824:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d002      	beq.n	8007836 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	f000 be52 	b.w	80084da <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007836:	4b76      	ldr	r3, [pc, #472]	; (8007a10 <HAL_RCC_OscConfig+0x5d0>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800783e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007842:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	21f8      	movs	r1, #248	; 0xf8
 800784c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007850:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8007854:	fa91 f1a1 	rbit	r1, r1
 8007858:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800785c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007860:	fab1 f181 	clz	r1, r1
 8007864:	b2c9      	uxtb	r1, r1
 8007866:	408b      	lsls	r3, r1
 8007868:	4969      	ldr	r1, [pc, #420]	; (8007a10 <HAL_RCC_OscConfig+0x5d0>)
 800786a:	4313      	orrs	r3, r2
 800786c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800786e:	e0fe      	b.n	8007a6e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007874:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 8088 	beq.w	8007992 <HAL_RCC_OscConfig+0x552>
 8007882:	2301      	movs	r3, #1
 8007884:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007888:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800788c:	fa93 f3a3 	rbit	r3, r3
 8007890:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8007894:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007898:	fab3 f383 	clz	r3, r3
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80078a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	461a      	mov	r2, r3
 80078aa:	2301      	movs	r3, #1
 80078ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ae:	f7fd fb4d 	bl	8004f4c <HAL_GetTick>
 80078b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078b6:	e00a      	b.n	80078ce <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078b8:	f7fd fb48 	bl	8004f4c <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d902      	bls.n	80078ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	f000 be06 	b.w	80084da <HAL_RCC_OscConfig+0x109a>
 80078ce:	2302      	movs	r3, #2
 80078d0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80078d8:	fa93 f3a3 	rbit	r3, r3
 80078dc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80078e0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e4:	fab3 f383 	clz	r3, r3
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	095b      	lsrs	r3, r3, #5
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	f043 0301 	orr.w	r3, r3, #1
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d102      	bne.n	80078fe <HAL_RCC_OscConfig+0x4be>
 80078f8:	4b45      	ldr	r3, [pc, #276]	; (8007a10 <HAL_RCC_OscConfig+0x5d0>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	e013      	b.n	8007926 <HAL_RCC_OscConfig+0x4e6>
 80078fe:	2302      	movs	r3, #2
 8007900:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007904:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8007908:	fa93 f3a3 	rbit	r3, r3
 800790c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8007910:	2302      	movs	r3, #2
 8007912:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007916:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800791a:	fa93 f3a3 	rbit	r3, r3
 800791e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007922:	4b3b      	ldr	r3, [pc, #236]	; (8007a10 <HAL_RCC_OscConfig+0x5d0>)
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	2202      	movs	r2, #2
 8007928:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800792c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007930:	fa92 f2a2 	rbit	r2, r2
 8007934:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8007938:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800793c:	fab2 f282 	clz	r2, r2
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	f042 0220 	orr.w	r2, r2, #32
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	f002 021f 	and.w	r2, r2, #31
 800794c:	2101      	movs	r1, #1
 800794e:	fa01 f202 	lsl.w	r2, r1, r2
 8007952:	4013      	ands	r3, r2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0af      	beq.n	80078b8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007958:	4b2d      	ldr	r3, [pc, #180]	; (8007a10 <HAL_RCC_OscConfig+0x5d0>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007964:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	21f8      	movs	r1, #248	; 0xf8
 800796e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007972:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8007976:	fa91 f1a1 	rbit	r1, r1
 800797a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800797e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007982:	fab1 f181 	clz	r1, r1
 8007986:	b2c9      	uxtb	r1, r1
 8007988:	408b      	lsls	r3, r1
 800798a:	4921      	ldr	r1, [pc, #132]	; (8007a10 <HAL_RCC_OscConfig+0x5d0>)
 800798c:	4313      	orrs	r3, r2
 800798e:	600b      	str	r3, [r1, #0]
 8007990:	e06d      	b.n	8007a6e <HAL_RCC_OscConfig+0x62e>
 8007992:	2301      	movs	r3, #1
 8007994:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007998:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800799c:	fa93 f3a3 	rbit	r3, r3
 80079a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80079a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079a8:	fab3 f383 	clz	r3, r3
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80079b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	461a      	mov	r2, r3
 80079ba:	2300      	movs	r3, #0
 80079bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079be:	f7fd fac5 	bl	8004f4c <HAL_GetTick>
 80079c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079c6:	e00a      	b.n	80079de <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079c8:	f7fd fac0 	bl	8004f4c <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d902      	bls.n	80079de <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	f000 bd7e 	b.w	80084da <HAL_RCC_OscConfig+0x109a>
 80079de:	2302      	movs	r3, #2
 80079e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079e8:	fa93 f3a3 	rbit	r3, r3
 80079ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80079f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079f4:	fab3 f383 	clz	r3, r3
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	f043 0301 	orr.w	r3, r3, #1
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d105      	bne.n	8007a14 <HAL_RCC_OscConfig+0x5d4>
 8007a08:	4b01      	ldr	r3, [pc, #4]	; (8007a10 <HAL_RCC_OscConfig+0x5d0>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	e016      	b.n	8007a3c <HAL_RCC_OscConfig+0x5fc>
 8007a0e:	bf00      	nop
 8007a10:	40021000 	.word	0x40021000
 8007a14:	2302      	movs	r3, #2
 8007a16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a1e:	fa93 f3a3 	rbit	r3, r3
 8007a22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007a26:	2302      	movs	r3, #2
 8007a28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007a2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007a30:	fa93 f3a3 	rbit	r3, r3
 8007a34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a38:	4bbf      	ldr	r3, [pc, #764]	; (8007d38 <HAL_RCC_OscConfig+0x8f8>)
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8007a42:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007a46:	fa92 f2a2 	rbit	r2, r2
 8007a4a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8007a4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007a52:	fab2 f282 	clz	r2, r2
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	f042 0220 	orr.w	r2, r2, #32
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	f002 021f 	and.w	r2, r2, #31
 8007a62:	2101      	movs	r1, #1
 8007a64:	fa01 f202 	lsl.w	r2, r1, r2
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1ac      	bne.n	80079c8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007a72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0308 	and.w	r3, r3, #8
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 8113 	beq.w	8007caa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007a88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d07c      	beq.n	8007b8e <HAL_RCC_OscConfig+0x74e>
 8007a94:	2301      	movs	r3, #1
 8007a96:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a9e:	fa93 f3a3 	rbit	r3, r3
 8007aa2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8007aa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007aaa:	fab3 f383 	clz	r3, r3
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	4ba2      	ldr	r3, [pc, #648]	; (8007d3c <HAL_RCC_OscConfig+0x8fc>)
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	461a      	mov	r2, r3
 8007aba:	2301      	movs	r3, #1
 8007abc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007abe:	f7fd fa45 	bl	8004f4c <HAL_GetTick>
 8007ac2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ac6:	e00a      	b.n	8007ade <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ac8:	f7fd fa40 	bl	8004f4c <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d902      	bls.n	8007ade <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	f000 bcfe 	b.w	80084da <HAL_RCC_OscConfig+0x109a>
 8007ade:	2302      	movs	r3, #2
 8007ae0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ae8:	fa93 f2a3 	rbit	r2, r3
 8007aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007af0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007afe:	2202      	movs	r2, #2
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	fa93 f2a3 	rbit	r2, r3
 8007b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b22:	2202      	movs	r2, #2
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	fa93 f2a3 	rbit	r2, r3
 8007b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007b3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b3e:	4b7e      	ldr	r3, [pc, #504]	; (8007d38 <HAL_RCC_OscConfig+0x8f8>)
 8007b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007b4a:	2102      	movs	r1, #2
 8007b4c:	6019      	str	r1, [r3, #0]
 8007b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	fa93 f1a3 	rbit	r1, r3
 8007b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007b64:	6019      	str	r1, [r3, #0]
  return result;
 8007b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b6a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	fab3 f383 	clz	r3, r3
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	f003 031f 	and.w	r3, r3, #31
 8007b80:	2101      	movs	r1, #1
 8007b82:	fa01 f303 	lsl.w	r3, r1, r3
 8007b86:	4013      	ands	r3, r2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d09d      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x688>
 8007b8c:	e08d      	b.n	8007caa <HAL_RCC_OscConfig+0x86a>
 8007b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007b96:	2201      	movs	r2, #1
 8007b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007b9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	fa93 f2a3 	rbit	r2, r3
 8007ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007bac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007bb0:	601a      	str	r2, [r3, #0]
  return result;
 8007bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007bb6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007bba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bbc:	fab3 f383 	clz	r3, r3
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	4b5d      	ldr	r3, [pc, #372]	; (8007d3c <HAL_RCC_OscConfig+0x8fc>)
 8007bc6:	4413      	add	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	461a      	mov	r2, r3
 8007bcc:	2300      	movs	r3, #0
 8007bce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bd0:	f7fd f9bc 	bl	8004f4c <HAL_GetTick>
 8007bd4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bd8:	e00a      	b.n	8007bf0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bda:	f7fd f9b7 	bl	8004f4c <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d902      	bls.n	8007bf0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	f000 bc75 	b.w	80084da <HAL_RCC_OscConfig+0x109a>
 8007bf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007bf4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	fa93 f2a3 	rbit	r2, r3
 8007c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	fa93 f2a3 	rbit	r2, r3
 8007c2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c3c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007c40:	2202      	movs	r2, #2
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	fa93 f2a3 	rbit	r2, r3
 8007c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c56:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007c5a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c5c:	4b36      	ldr	r3, [pc, #216]	; (8007d38 <HAL_RCC_OscConfig+0x8f8>)
 8007c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c64:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007c68:	2102      	movs	r1, #2
 8007c6a:	6019      	str	r1, [r3, #0]
 8007c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c70:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	fa93 f1a3 	rbit	r1, r3
 8007c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c7e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007c82:	6019      	str	r1, [r3, #0]
  return result;
 8007c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007c88:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	fab3 f383 	clz	r3, r3
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	f003 031f 	and.w	r3, r3, #31
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d197      	bne.n	8007bda <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007cae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0304 	and.w	r3, r3, #4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 81a5 	beq.w	800800a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cc6:	4b1c      	ldr	r3, [pc, #112]	; (8007d38 <HAL_RCC_OscConfig+0x8f8>)
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d116      	bne.n	8007d00 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cd2:	4b19      	ldr	r3, [pc, #100]	; (8007d38 <HAL_RCC_OscConfig+0x8f8>)
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	4a18      	ldr	r2, [pc, #96]	; (8007d38 <HAL_RCC_OscConfig+0x8f8>)
 8007cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cdc:	61d3      	str	r3, [r2, #28]
 8007cde:	4b16      	ldr	r3, [pc, #88]	; (8007d38 <HAL_RCC_OscConfig+0x8f8>)
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007cf4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007cf8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d00:	4b0f      	ldr	r3, [pc, #60]	; (8007d40 <HAL_RCC_OscConfig+0x900>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d121      	bne.n	8007d50 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d0c:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <HAL_RCC_OscConfig+0x900>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a0b      	ldr	r2, [pc, #44]	; (8007d40 <HAL_RCC_OscConfig+0x900>)
 8007d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d16:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d18:	f7fd f918 	bl	8004f4c <HAL_GetTick>
 8007d1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d20:	e010      	b.n	8007d44 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d22:	f7fd f913 	bl	8004f4c <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b64      	cmp	r3, #100	; 0x64
 8007d30:	d908      	bls.n	8007d44 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e3d1      	b.n	80084da <HAL_RCC_OscConfig+0x109a>
 8007d36:	bf00      	nop
 8007d38:	40021000 	.word	0x40021000
 8007d3c:	10908120 	.word	0x10908120
 8007d40:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d44:	4b8d      	ldr	r3, [pc, #564]	; (8007f7c <HAL_RCC_OscConfig+0xb3c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0e8      	beq.n	8007d22 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d106      	bne.n	8007d6e <HAL_RCC_OscConfig+0x92e>
 8007d60:	4b87      	ldr	r3, [pc, #540]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	4a86      	ldr	r2, [pc, #536]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007d66:	f043 0301 	orr.w	r3, r3, #1
 8007d6a:	6213      	str	r3, [r2, #32]
 8007d6c:	e035      	b.n	8007dda <HAL_RCC_OscConfig+0x99a>
 8007d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10c      	bne.n	8007d98 <HAL_RCC_OscConfig+0x958>
 8007d7e:	4b80      	ldr	r3, [pc, #512]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	4a7f      	ldr	r2, [pc, #508]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007d84:	f023 0301 	bic.w	r3, r3, #1
 8007d88:	6213      	str	r3, [r2, #32]
 8007d8a:	4b7d      	ldr	r3, [pc, #500]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	4a7c      	ldr	r2, [pc, #496]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007d90:	f023 0304 	bic.w	r3, r3, #4
 8007d94:	6213      	str	r3, [r2, #32]
 8007d96:	e020      	b.n	8007dda <HAL_RCC_OscConfig+0x99a>
 8007d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	2b05      	cmp	r3, #5
 8007da6:	d10c      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x982>
 8007da8:	4b75      	ldr	r3, [pc, #468]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	4a74      	ldr	r2, [pc, #464]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007dae:	f043 0304 	orr.w	r3, r3, #4
 8007db2:	6213      	str	r3, [r2, #32]
 8007db4:	4b72      	ldr	r3, [pc, #456]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	4a71      	ldr	r2, [pc, #452]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007dba:	f043 0301 	orr.w	r3, r3, #1
 8007dbe:	6213      	str	r3, [r2, #32]
 8007dc0:	e00b      	b.n	8007dda <HAL_RCC_OscConfig+0x99a>
 8007dc2:	4b6f      	ldr	r3, [pc, #444]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	4a6e      	ldr	r2, [pc, #440]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007dc8:	f023 0301 	bic.w	r3, r3, #1
 8007dcc:	6213      	str	r3, [r2, #32]
 8007dce:	4b6c      	ldr	r3, [pc, #432]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	4a6b      	ldr	r2, [pc, #428]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007dd4:	f023 0304 	bic.w	r3, r3, #4
 8007dd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007dde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 8081 	beq.w	8007eee <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dec:	f7fd f8ae 	bl	8004f4c <HAL_GetTick>
 8007df0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007df4:	e00b      	b.n	8007e0e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007df6:	f7fd f8a9 	bl	8004f4c <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e365      	b.n	80084da <HAL_RCC_OscConfig+0x109a>
 8007e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e12:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007e16:	2202      	movs	r2, #2
 8007e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	fa93 f2a3 	rbit	r2, r3
 8007e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e2c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e36:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e42:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	fa93 f2a3 	rbit	r2, r3
 8007e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007e54:	601a      	str	r2, [r3, #0]
  return result;
 8007e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e5a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007e5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e60:	fab3 f383 	clz	r3, r3
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	095b      	lsrs	r3, r3, #5
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	f043 0302 	orr.w	r3, r3, #2
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d102      	bne.n	8007e7a <HAL_RCC_OscConfig+0xa3a>
 8007e74:	4b42      	ldr	r3, [pc, #264]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	e013      	b.n	8007ea2 <HAL_RCC_OscConfig+0xa62>
 8007e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e7e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007e82:	2202      	movs	r2, #2
 8007e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	fa93 f2a3 	rbit	r2, r3
 8007e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e98:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	4b38      	ldr	r3, [pc, #224]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007ea6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007eaa:	2102      	movs	r1, #2
 8007eac:	6011      	str	r1, [r2, #0]
 8007eae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007eb2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007eb6:	6812      	ldr	r2, [r2, #0]
 8007eb8:	fa92 f1a2 	rbit	r1, r2
 8007ebc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007ec0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8007ec4:	6011      	str	r1, [r2, #0]
  return result;
 8007ec6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007eca:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	fab2 f282 	clz	r2, r2
 8007ed4:	b2d2      	uxtb	r2, r2
 8007ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	f002 021f 	and.w	r2, r2, #31
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d084      	beq.n	8007df6 <HAL_RCC_OscConfig+0x9b6>
 8007eec:	e083      	b.n	8007ff6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eee:	f7fd f82d 	bl	8004f4c <HAL_GetTick>
 8007ef2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ef6:	e00b      	b.n	8007f10 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ef8:	f7fd f828 	bl	8004f4c <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d901      	bls.n	8007f10 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e2e4      	b.n	80084da <HAL_RCC_OscConfig+0x109a>
 8007f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f14:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007f18:	2202      	movs	r2, #2
 8007f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f20:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	fa93 f2a3 	rbit	r2, r3
 8007f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f2e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f38:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f44:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	fa93 f2a3 	rbit	r2, r3
 8007f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007f56:	601a      	str	r2, [r3, #0]
  return result;
 8007f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f5c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007f60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f62:	fab3 f383 	clz	r3, r3
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	095b      	lsrs	r3, r3, #5
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f043 0302 	orr.w	r3, r3, #2
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d106      	bne.n	8007f84 <HAL_RCC_OscConfig+0xb44>
 8007f76:	4b02      	ldr	r3, [pc, #8]	; (8007f80 <HAL_RCC_OscConfig+0xb40>)
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	e017      	b.n	8007fac <HAL_RCC_OscConfig+0xb6c>
 8007f7c:	40007000 	.word	0x40007000
 8007f80:	40021000 	.word	0x40021000
 8007f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f88:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f94:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	fa93 f2a3 	rbit	r2, r3
 8007f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fa2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	4bb3      	ldr	r3, [pc, #716]	; (8008278 <HAL_RCC_OscConfig+0xe38>)
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007fb0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	6011      	str	r1, [r2, #0]
 8007fb8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007fbc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007fc0:	6812      	ldr	r2, [r2, #0]
 8007fc2:	fa92 f1a2 	rbit	r1, r2
 8007fc6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007fca:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8007fce:	6011      	str	r1, [r2, #0]
  return result;
 8007fd0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007fd4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8007fd8:	6812      	ldr	r2, [r2, #0]
 8007fda:	fab2 f282 	clz	r2, r2
 8007fde:	b2d2      	uxtb	r2, r2
 8007fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	f002 021f 	and.w	r2, r2, #31
 8007fea:	2101      	movs	r1, #1
 8007fec:	fa01 f202 	lsl.w	r2, r1, r2
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d180      	bne.n	8007ef8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007ff6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d105      	bne.n	800800a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ffe:	4b9e      	ldr	r3, [pc, #632]	; (8008278 <HAL_RCC_OscConfig+0xe38>)
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	4a9d      	ldr	r2, [pc, #628]	; (8008278 <HAL_RCC_OscConfig+0xe38>)
 8008004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008008:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800800a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800800e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 825e 	beq.w	80084d8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800801c:	4b96      	ldr	r3, [pc, #600]	; (8008278 <HAL_RCC_OscConfig+0xe38>)
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f003 030c 	and.w	r3, r3, #12
 8008024:	2b08      	cmp	r3, #8
 8008026:	f000 821f 	beq.w	8008468 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800802a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800802e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	2b02      	cmp	r3, #2
 8008038:	f040 8170 	bne.w	800831c <HAL_RCC_OscConfig+0xedc>
 800803c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008040:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800804a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800804e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	fa93 f2a3 	rbit	r2, r3
 8008058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800805c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008060:	601a      	str	r2, [r3, #0]
  return result;
 8008062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008066:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800806a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800806c:	fab3 f383 	clz	r3, r3
 8008070:	b2db      	uxtb	r3, r3
 8008072:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008076:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	461a      	mov	r2, r3
 800807e:	2300      	movs	r3, #0
 8008080:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008082:	f7fc ff63 	bl	8004f4c <HAL_GetTick>
 8008086:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800808a:	e009      	b.n	80080a0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800808c:	f7fc ff5e 	bl	8004f4c <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	2b02      	cmp	r3, #2
 800809a:	d901      	bls.n	80080a0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e21c      	b.n	80084da <HAL_RCC_OscConfig+0x109a>
 80080a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080a4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80080a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	fa93 f2a3 	rbit	r2, r3
 80080bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80080c4:	601a      	str	r2, [r3, #0]
  return result;
 80080c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080ca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80080ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080d0:	fab3 f383 	clz	r3, r3
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	095b      	lsrs	r3, r3, #5
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	f043 0301 	orr.w	r3, r3, #1
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d102      	bne.n	80080ea <HAL_RCC_OscConfig+0xcaa>
 80080e4:	4b64      	ldr	r3, [pc, #400]	; (8008278 <HAL_RCC_OscConfig+0xe38>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	e027      	b.n	800813a <HAL_RCC_OscConfig+0xcfa>
 80080ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80080f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080fc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	fa93 f2a3 	rbit	r2, r3
 8008106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800810a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008114:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008122:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	fa93 f2a3 	rbit	r2, r3
 800812c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008130:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	4b50      	ldr	r3, [pc, #320]	; (8008278 <HAL_RCC_OscConfig+0xe38>)
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800813e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008142:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008146:	6011      	str	r1, [r2, #0]
 8008148:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800814c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008150:	6812      	ldr	r2, [r2, #0]
 8008152:	fa92 f1a2 	rbit	r1, r2
 8008156:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800815a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800815e:	6011      	str	r1, [r2, #0]
  return result;
 8008160:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008164:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8008168:	6812      	ldr	r2, [r2, #0]
 800816a:	fab2 f282 	clz	r2, r2
 800816e:	b2d2      	uxtb	r2, r2
 8008170:	f042 0220 	orr.w	r2, r2, #32
 8008174:	b2d2      	uxtb	r2, r2
 8008176:	f002 021f 	and.w	r2, r2, #31
 800817a:	2101      	movs	r1, #1
 800817c:	fa01 f202 	lsl.w	r2, r1, r2
 8008180:	4013      	ands	r3, r2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d182      	bne.n	800808c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008186:	4b3c      	ldr	r3, [pc, #240]	; (8008278 <HAL_RCC_OscConfig+0xe38>)
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	f023 020f 	bic.w	r2, r3, #15
 800818e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008192:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	4937      	ldr	r1, [pc, #220]	; (8008278 <HAL_RCC_OscConfig+0xe38>)
 800819c:	4313      	orrs	r3, r2
 800819e:	62cb      	str	r3, [r1, #44]	; 0x2c
 80081a0:	4b35      	ldr	r3, [pc, #212]	; (8008278 <HAL_RCC_OscConfig+0xe38>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80081a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6a19      	ldr	r1, [r3, #32]
 80081b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	430b      	orrs	r3, r1
 80081c2:	492d      	ldr	r1, [pc, #180]	; (8008278 <HAL_RCC_OscConfig+0xe38>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	604b      	str	r3, [r1, #4]
 80081c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081cc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80081d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081da:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	fa93 f2a3 	rbit	r2, r3
 80081e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80081ec:	601a      	str	r2, [r3, #0]
  return result;
 80081ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081f2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80081f6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081f8:	fab3 f383 	clz	r3, r3
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008202:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	461a      	mov	r2, r3
 800820a:	2301      	movs	r3, #1
 800820c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800820e:	f7fc fe9d 	bl	8004f4c <HAL_GetTick>
 8008212:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008216:	e009      	b.n	800822c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008218:	f7fc fe98 	bl	8004f4c <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e156      	b.n	80084da <HAL_RCC_OscConfig+0x109a>
 800822c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008230:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800823a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800823e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	fa93 f2a3 	rbit	r2, r3
 8008248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800824c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008250:	601a      	str	r2, [r3, #0]
  return result;
 8008252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008256:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800825a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800825c:	fab3 f383 	clz	r3, r3
 8008260:	b2db      	uxtb	r3, r3
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	b2db      	uxtb	r3, r3
 8008266:	f043 0301 	orr.w	r3, r3, #1
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b01      	cmp	r3, #1
 800826e:	d105      	bne.n	800827c <HAL_RCC_OscConfig+0xe3c>
 8008270:	4b01      	ldr	r3, [pc, #4]	; (8008278 <HAL_RCC_OscConfig+0xe38>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	e02a      	b.n	80082cc <HAL_RCC_OscConfig+0xe8c>
 8008276:	bf00      	nop
 8008278:	40021000 	.word	0x40021000
 800827c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008280:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800828a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800828e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	fa93 f2a3 	rbit	r2, r3
 8008298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800829c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082a6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80082aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082b4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	fa93 f2a3 	rbit	r2, r3
 80082be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082c2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	4b86      	ldr	r3, [pc, #536]	; (80084e4 <HAL_RCC_OscConfig+0x10a4>)
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80082d0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80082d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80082d8:	6011      	str	r1, [r2, #0]
 80082da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80082de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	fa92 f1a2 	rbit	r1, r2
 80082e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80082ec:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80082f0:	6011      	str	r1, [r2, #0]
  return result;
 80082f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80082f6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80082fa:	6812      	ldr	r2, [r2, #0]
 80082fc:	fab2 f282 	clz	r2, r2
 8008300:	b2d2      	uxtb	r2, r2
 8008302:	f042 0220 	orr.w	r2, r2, #32
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	f002 021f 	and.w	r2, r2, #31
 800830c:	2101      	movs	r1, #1
 800830e:	fa01 f202 	lsl.w	r2, r1, r2
 8008312:	4013      	ands	r3, r2
 8008314:	2b00      	cmp	r3, #0
 8008316:	f43f af7f 	beq.w	8008218 <HAL_RCC_OscConfig+0xdd8>
 800831a:	e0dd      	b.n	80084d8 <HAL_RCC_OscConfig+0x1098>
 800831c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008320:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800832a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800832e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	fa93 f2a3 	rbit	r2, r3
 8008338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800833c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008340:	601a      	str	r2, [r3, #0]
  return result;
 8008342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008346:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800834a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800834c:	fab3 f383 	clz	r3, r3
 8008350:	b2db      	uxtb	r3, r3
 8008352:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008356:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	461a      	mov	r2, r3
 800835e:	2300      	movs	r3, #0
 8008360:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008362:	f7fc fdf3 	bl	8004f4c <HAL_GetTick>
 8008366:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800836a:	e009      	b.n	8008380 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800836c:	f7fc fdee 	bl	8004f4c <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	2b02      	cmp	r3, #2
 800837a:	d901      	bls.n	8008380 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e0ac      	b.n	80084da <HAL_RCC_OscConfig+0x109a>
 8008380:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008384:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800838c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800838e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008392:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	fa93 f2a3 	rbit	r2, r3
 800839c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80083a4:	601a      	str	r2, [r3, #0]
  return result;
 80083a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80083ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083b0:	fab3 f383 	clz	r3, r3
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	095b      	lsrs	r3, r3, #5
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d102      	bne.n	80083ca <HAL_RCC_OscConfig+0xf8a>
 80083c4:	4b47      	ldr	r3, [pc, #284]	; (80084e4 <HAL_RCC_OscConfig+0x10a4>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	e027      	b.n	800841a <HAL_RCC_OscConfig+0xfda>
 80083ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083ce:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80083d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083dc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	fa93 f2a3 	rbit	r2, r3
 80083e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80083f4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80083f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008402:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	fa93 f2a3 	rbit	r2, r3
 800840c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008410:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	4b33      	ldr	r3, [pc, #204]	; (80084e4 <HAL_RCC_OscConfig+0x10a4>)
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800841e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008422:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008426:	6011      	str	r1, [r2, #0]
 8008428:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800842c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	fa92 f1a2 	rbit	r1, r2
 8008436:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800843a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800843e:	6011      	str	r1, [r2, #0]
  return result;
 8008440:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008444:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8008448:	6812      	ldr	r2, [r2, #0]
 800844a:	fab2 f282 	clz	r2, r2
 800844e:	b2d2      	uxtb	r2, r2
 8008450:	f042 0220 	orr.w	r2, r2, #32
 8008454:	b2d2      	uxtb	r2, r2
 8008456:	f002 021f 	and.w	r2, r2, #31
 800845a:	2101      	movs	r1, #1
 800845c:	fa01 f202 	lsl.w	r2, r1, r2
 8008460:	4013      	ands	r3, r2
 8008462:	2b00      	cmp	r3, #0
 8008464:	d182      	bne.n	800836c <HAL_RCC_OscConfig+0xf2c>
 8008466:	e037      	b.n	80084d8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800846c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e02e      	b.n	80084da <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800847c:	4b19      	ldr	r3, [pc, #100]	; (80084e4 <HAL_RCC_OscConfig+0x10a4>)
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8008484:	4b17      	ldr	r3, [pc, #92]	; (80084e4 <HAL_RCC_OscConfig+0x10a4>)
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800848c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008490:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8008494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008498:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d117      	bne.n	80084d4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80084a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80084a8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80084ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d10b      	bne.n	80084d4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80084bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80084c0:	f003 020f 	and.w	r2, r3, #15
 80084c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80084c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d001      	beq.n	80084d8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e000      	b.n	80084da <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	40021000 	.word	0x40021000

080084e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b09e      	sub	sp, #120	; 0x78
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e162      	b.n	80087c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008500:	4b90      	ldr	r3, [pc, #576]	; (8008744 <HAL_RCC_ClockConfig+0x25c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0307 	and.w	r3, r3, #7
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	d910      	bls.n	8008530 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800850e:	4b8d      	ldr	r3, [pc, #564]	; (8008744 <HAL_RCC_ClockConfig+0x25c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f023 0207 	bic.w	r2, r3, #7
 8008516:	498b      	ldr	r1, [pc, #556]	; (8008744 <HAL_RCC_ClockConfig+0x25c>)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	4313      	orrs	r3, r2
 800851c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800851e:	4b89      	ldr	r3, [pc, #548]	; (8008744 <HAL_RCC_ClockConfig+0x25c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	429a      	cmp	r2, r3
 800852a:	d001      	beq.n	8008530 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e14a      	b.n	80087c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0302 	and.w	r3, r3, #2
 8008538:	2b00      	cmp	r3, #0
 800853a:	d008      	beq.n	800854e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800853c:	4b82      	ldr	r3, [pc, #520]	; (8008748 <HAL_RCC_ClockConfig+0x260>)
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	497f      	ldr	r1, [pc, #508]	; (8008748 <HAL_RCC_ClockConfig+0x260>)
 800854a:	4313      	orrs	r3, r2
 800854c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 80dc 	beq.w	8008714 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d13c      	bne.n	80085de <HAL_RCC_ClockConfig+0xf6>
 8008564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008568:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800856a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800856c:	fa93 f3a3 	rbit	r3, r3
 8008570:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008574:	fab3 f383 	clz	r3, r3
 8008578:	b2db      	uxtb	r3, r3
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f043 0301 	orr.w	r3, r3, #1
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b01      	cmp	r3, #1
 8008586:	d102      	bne.n	800858e <HAL_RCC_ClockConfig+0xa6>
 8008588:	4b6f      	ldr	r3, [pc, #444]	; (8008748 <HAL_RCC_ClockConfig+0x260>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	e00f      	b.n	80085ae <HAL_RCC_ClockConfig+0xc6>
 800858e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008592:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008594:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008596:	fa93 f3a3 	rbit	r3, r3
 800859a:	667b      	str	r3, [r7, #100]	; 0x64
 800859c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085a0:	663b      	str	r3, [r7, #96]	; 0x60
 80085a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085a4:	fa93 f3a3 	rbit	r3, r3
 80085a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085aa:	4b67      	ldr	r3, [pc, #412]	; (8008748 <HAL_RCC_ClockConfig+0x260>)
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80085b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80085b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085b6:	fa92 f2a2 	rbit	r2, r2
 80085ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80085bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085be:	fab2 f282 	clz	r2, r2
 80085c2:	b2d2      	uxtb	r2, r2
 80085c4:	f042 0220 	orr.w	r2, r2, #32
 80085c8:	b2d2      	uxtb	r2, r2
 80085ca:	f002 021f 	and.w	r2, r2, #31
 80085ce:	2101      	movs	r1, #1
 80085d0:	fa01 f202 	lsl.w	r2, r1, r2
 80085d4:	4013      	ands	r3, r2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d17b      	bne.n	80086d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e0f3      	b.n	80087c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d13c      	bne.n	8008660 <HAL_RCC_ClockConfig+0x178>
 80085e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ee:	fa93 f3a3 	rbit	r3, r3
 80085f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80085f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085f6:	fab3 f383 	clz	r3, r3
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	095b      	lsrs	r3, r3, #5
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	f043 0301 	orr.w	r3, r3, #1
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b01      	cmp	r3, #1
 8008608:	d102      	bne.n	8008610 <HAL_RCC_ClockConfig+0x128>
 800860a:	4b4f      	ldr	r3, [pc, #316]	; (8008748 <HAL_RCC_ClockConfig+0x260>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	e00f      	b.n	8008630 <HAL_RCC_ClockConfig+0x148>
 8008610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008614:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008618:	fa93 f3a3 	rbit	r3, r3
 800861c:	647b      	str	r3, [r7, #68]	; 0x44
 800861e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008622:	643b      	str	r3, [r7, #64]	; 0x40
 8008624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008626:	fa93 f3a3 	rbit	r3, r3
 800862a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800862c:	4b46      	ldr	r3, [pc, #280]	; (8008748 <HAL_RCC_ClockConfig+0x260>)
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008634:	63ba      	str	r2, [r7, #56]	; 0x38
 8008636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008638:	fa92 f2a2 	rbit	r2, r2
 800863c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800863e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008640:	fab2 f282 	clz	r2, r2
 8008644:	b2d2      	uxtb	r2, r2
 8008646:	f042 0220 	orr.w	r2, r2, #32
 800864a:	b2d2      	uxtb	r2, r2
 800864c:	f002 021f 	and.w	r2, r2, #31
 8008650:	2101      	movs	r1, #1
 8008652:	fa01 f202 	lsl.w	r2, r1, r2
 8008656:	4013      	ands	r3, r2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d13a      	bne.n	80086d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e0b2      	b.n	80087c6 <HAL_RCC_ClockConfig+0x2de>
 8008660:	2302      	movs	r3, #2
 8008662:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	fa93 f3a3 	rbit	r3, r3
 800866a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800866e:	fab3 f383 	clz	r3, r3
 8008672:	b2db      	uxtb	r3, r3
 8008674:	095b      	lsrs	r3, r3, #5
 8008676:	b2db      	uxtb	r3, r3
 8008678:	f043 0301 	orr.w	r3, r3, #1
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b01      	cmp	r3, #1
 8008680:	d102      	bne.n	8008688 <HAL_RCC_ClockConfig+0x1a0>
 8008682:	4b31      	ldr	r3, [pc, #196]	; (8008748 <HAL_RCC_ClockConfig+0x260>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	e00d      	b.n	80086a4 <HAL_RCC_ClockConfig+0x1bc>
 8008688:	2302      	movs	r3, #2
 800868a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	fa93 f3a3 	rbit	r3, r3
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
 8008694:	2302      	movs	r3, #2
 8008696:	623b      	str	r3, [r7, #32]
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	fa93 f3a3 	rbit	r3, r3
 800869e:	61fb      	str	r3, [r7, #28]
 80086a0:	4b29      	ldr	r3, [pc, #164]	; (8008748 <HAL_RCC_ClockConfig+0x260>)
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	2202      	movs	r2, #2
 80086a6:	61ba      	str	r2, [r7, #24]
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	fa92 f2a2 	rbit	r2, r2
 80086ae:	617a      	str	r2, [r7, #20]
  return result;
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	fab2 f282 	clz	r2, r2
 80086b6:	b2d2      	uxtb	r2, r2
 80086b8:	f042 0220 	orr.w	r2, r2, #32
 80086bc:	b2d2      	uxtb	r2, r2
 80086be:	f002 021f 	and.w	r2, r2, #31
 80086c2:	2101      	movs	r1, #1
 80086c4:	fa01 f202 	lsl.w	r2, r1, r2
 80086c8:	4013      	ands	r3, r2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e079      	b.n	80087c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80086d2:	4b1d      	ldr	r3, [pc, #116]	; (8008748 <HAL_RCC_ClockConfig+0x260>)
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f023 0203 	bic.w	r2, r3, #3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	491a      	ldr	r1, [pc, #104]	; (8008748 <HAL_RCC_ClockConfig+0x260>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80086e4:	f7fc fc32 	bl	8004f4c <HAL_GetTick>
 80086e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ea:	e00a      	b.n	8008702 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086ec:	f7fc fc2e 	bl	8004f4c <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e061      	b.n	80087c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008702:	4b11      	ldr	r3, [pc, #68]	; (8008748 <HAL_RCC_ClockConfig+0x260>)
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f003 020c 	and.w	r2, r3, #12
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	429a      	cmp	r2, r3
 8008712:	d1eb      	bne.n	80086ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008714:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <HAL_RCC_ClockConfig+0x25c>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d214      	bcs.n	800874c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008722:	4b08      	ldr	r3, [pc, #32]	; (8008744 <HAL_RCC_ClockConfig+0x25c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f023 0207 	bic.w	r2, r3, #7
 800872a:	4906      	ldr	r1, [pc, #24]	; (8008744 <HAL_RCC_ClockConfig+0x25c>)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	4313      	orrs	r3, r2
 8008730:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008732:	4b04      	ldr	r3, [pc, #16]	; (8008744 <HAL_RCC_ClockConfig+0x25c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0307 	and.w	r3, r3, #7
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d005      	beq.n	800874c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e040      	b.n	80087c6 <HAL_RCC_ClockConfig+0x2de>
 8008744:	40022000 	.word	0x40022000
 8008748:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b00      	cmp	r3, #0
 8008756:	d008      	beq.n	800876a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008758:	4b1d      	ldr	r3, [pc, #116]	; (80087d0 <HAL_RCC_ClockConfig+0x2e8>)
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	491a      	ldr	r1, [pc, #104]	; (80087d0 <HAL_RCC_ClockConfig+0x2e8>)
 8008766:	4313      	orrs	r3, r2
 8008768:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0308 	and.w	r3, r3, #8
 8008772:	2b00      	cmp	r3, #0
 8008774:	d009      	beq.n	800878a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008776:	4b16      	ldr	r3, [pc, #88]	; (80087d0 <HAL_RCC_ClockConfig+0x2e8>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	4912      	ldr	r1, [pc, #72]	; (80087d0 <HAL_RCC_ClockConfig+0x2e8>)
 8008786:	4313      	orrs	r3, r2
 8008788:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800878a:	f000 f829 	bl	80087e0 <HAL_RCC_GetSysClockFreq>
 800878e:	4601      	mov	r1, r0
 8008790:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <HAL_RCC_ClockConfig+0x2e8>)
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008798:	22f0      	movs	r2, #240	; 0xf0
 800879a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	fa92 f2a2 	rbit	r2, r2
 80087a2:	60fa      	str	r2, [r7, #12]
  return result;
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	fab2 f282 	clz	r2, r2
 80087aa:	b2d2      	uxtb	r2, r2
 80087ac:	40d3      	lsrs	r3, r2
 80087ae:	4a09      	ldr	r2, [pc, #36]	; (80087d4 <HAL_RCC_ClockConfig+0x2ec>)
 80087b0:	5cd3      	ldrb	r3, [r2, r3]
 80087b2:	fa21 f303 	lsr.w	r3, r1, r3
 80087b6:	4a08      	ldr	r2, [pc, #32]	; (80087d8 <HAL_RCC_ClockConfig+0x2f0>)
 80087b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80087ba:	4b08      	ldr	r3, [pc, #32]	; (80087dc <HAL_RCC_ClockConfig+0x2f4>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fc fb80 	bl	8004ec4 <HAL_InitTick>
  
  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3778      	adds	r7, #120	; 0x78
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	40021000 	.word	0x40021000
 80087d4:	0800efc4 	.word	0x0800efc4
 80087d8:	2000000c 	.word	0x2000000c
 80087dc:	20000010 	.word	0x20000010

080087e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b08b      	sub	sp, #44	; 0x2c
 80087e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61fb      	str	r3, [r7, #28]
 80087ea:	2300      	movs	r3, #0
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	2300      	movs	r3, #0
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80087fa:	4b2a      	ldr	r3, [pc, #168]	; (80088a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	f003 030c 	and.w	r3, r3, #12
 8008806:	2b04      	cmp	r3, #4
 8008808:	d002      	beq.n	8008810 <HAL_RCC_GetSysClockFreq+0x30>
 800880a:	2b08      	cmp	r3, #8
 800880c:	d003      	beq.n	8008816 <HAL_RCC_GetSysClockFreq+0x36>
 800880e:	e03f      	b.n	8008890 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008810:	4b25      	ldr	r3, [pc, #148]	; (80088a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008812:	623b      	str	r3, [r7, #32]
      break;
 8008814:	e03f      	b.n	8008896 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800881c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008820:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	fa92 f2a2 	rbit	r2, r2
 8008828:	607a      	str	r2, [r7, #4]
  return result;
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	fab2 f282 	clz	r2, r2
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	40d3      	lsrs	r3, r2
 8008834:	4a1d      	ldr	r2, [pc, #116]	; (80088ac <HAL_RCC_GetSysClockFreq+0xcc>)
 8008836:	5cd3      	ldrb	r3, [r2, r3]
 8008838:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800883a:	4b1a      	ldr	r3, [pc, #104]	; (80088a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800883c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883e:	f003 030f 	and.w	r3, r3, #15
 8008842:	220f      	movs	r2, #15
 8008844:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	fa92 f2a2 	rbit	r2, r2
 800884c:	60fa      	str	r2, [r7, #12]
  return result;
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	fab2 f282 	clz	r2, r2
 8008854:	b2d2      	uxtb	r2, r2
 8008856:	40d3      	lsrs	r3, r2
 8008858:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800885a:	5cd3      	ldrb	r3, [r2, r3]
 800885c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d008      	beq.n	800887a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008868:	4a0f      	ldr	r2, [pc, #60]	; (80088a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	fb02 f303 	mul.w	r3, r2, r3
 8008876:	627b      	str	r3, [r7, #36]	; 0x24
 8008878:	e007      	b.n	800888a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800887a:	4a0b      	ldr	r2, [pc, #44]	; (80088a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	fb02 f303 	mul.w	r3, r2, r3
 8008888:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	623b      	str	r3, [r7, #32]
      break;
 800888e:	e002      	b.n	8008896 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008890:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008892:	623b      	str	r3, [r7, #32]
      break;
 8008894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008896:	6a3b      	ldr	r3, [r7, #32]
}
 8008898:	4618      	mov	r0, r3
 800889a:	372c      	adds	r7, #44	; 0x2c
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	40021000 	.word	0x40021000
 80088a8:	007a1200 	.word	0x007a1200
 80088ac:	0800efdc 	.word	0x0800efdc
 80088b0:	0800efec 	.word	0x0800efec

080088b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088b8:	4b03      	ldr	r3, [pc, #12]	; (80088c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80088ba:	681b      	ldr	r3, [r3, #0]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	2000000c 	.word	0x2000000c

080088cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80088d2:	f7ff ffef 	bl	80088b4 <HAL_RCC_GetHCLKFreq>
 80088d6:	4601      	mov	r1, r0
 80088d8:	4b0b      	ldr	r3, [pc, #44]	; (8008908 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80088e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	fa92 f2a2 	rbit	r2, r2
 80088ec:	603a      	str	r2, [r7, #0]
  return result;
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	fab2 f282 	clz	r2, r2
 80088f4:	b2d2      	uxtb	r2, r2
 80088f6:	40d3      	lsrs	r3, r2
 80088f8:	4a04      	ldr	r2, [pc, #16]	; (800890c <HAL_RCC_GetPCLK1Freq+0x40>)
 80088fa:	5cd3      	ldrb	r3, [r2, r3]
 80088fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	40021000 	.word	0x40021000
 800890c:	0800efd4 	.word	0x0800efd4

08008910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008916:	f7ff ffcd 	bl	80088b4 <HAL_RCC_GetHCLKFreq>
 800891a:	4601      	mov	r1, r0
 800891c:	4b0b      	ldr	r3, [pc, #44]	; (800894c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008924:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008928:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	fa92 f2a2 	rbit	r2, r2
 8008930:	603a      	str	r2, [r7, #0]
  return result;
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	fab2 f282 	clz	r2, r2
 8008938:	b2d2      	uxtb	r2, r2
 800893a:	40d3      	lsrs	r3, r2
 800893c:	4a04      	ldr	r2, [pc, #16]	; (8008950 <HAL_RCC_GetPCLK2Freq+0x40>)
 800893e:	5cd3      	ldrb	r3, [r2, r3]
 8008940:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008944:	4618      	mov	r0, r3
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	40021000 	.word	0x40021000
 8008950:	0800efd4 	.word	0x0800efd4

08008954 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b092      	sub	sp, #72	; 0x48
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008964:	2300      	movs	r3, #0
 8008966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80d4 	beq.w	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008978:	4b4e      	ldr	r3, [pc, #312]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10e      	bne.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008984:	4b4b      	ldr	r3, [pc, #300]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	4a4a      	ldr	r2, [pc, #296]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800898a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800898e:	61d3      	str	r3, [r2, #28]
 8008990:	4b48      	ldr	r3, [pc, #288]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008998:	60bb      	str	r3, [r7, #8]
 800899a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800899c:	2301      	movs	r3, #1
 800899e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089a2:	4b45      	ldr	r3, [pc, #276]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d118      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089ae:	4b42      	ldr	r3, [pc, #264]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a41      	ldr	r2, [pc, #260]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089ba:	f7fc fac7 	bl	8004f4c <HAL_GetTick>
 80089be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089c0:	e008      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089c2:	f7fc fac3 	bl	8004f4c <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b64      	cmp	r3, #100	; 0x64
 80089ce:	d901      	bls.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e1d6      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089d4:	4b38      	ldr	r3, [pc, #224]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0f0      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80089e0:	4b34      	ldr	r3, [pc, #208]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80089ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 8084 	beq.w	8008afa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d07c      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a00:	4b2c      	ldr	r3, [pc, #176]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	fa93 f3a3 	rbit	r3, r3
 8008a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a1a:	fab3 f383 	clz	r3, r3
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	461a      	mov	r2, r3
 8008a22:	4b26      	ldr	r3, [pc, #152]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	461a      	mov	r2, r3
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a36:	fa93 f3a3 	rbit	r3, r3
 8008a3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a3e:	fab3 f383 	clz	r3, r3
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	4b1d      	ldr	r3, [pc, #116]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008a48:	4413      	add	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	2300      	movs	r3, #0
 8008a50:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008a52:	4a18      	ldr	r2, [pc, #96]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a56:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d04b      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a62:	f7fc fa73 	bl	8004f4c <HAL_GetTick>
 8008a66:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a68:	e00a      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6a:	f7fc fa6f 	bl	8004f4c <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d901      	bls.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e180      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008a80:	2302      	movs	r3, #2
 8008a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a86:	fa93 f3a3 	rbit	r3, r3
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	623b      	str	r3, [r7, #32]
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	fa93 f3a3 	rbit	r3, r3
 8008a96:	61fb      	str	r3, [r7, #28]
  return result;
 8008a98:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a9a:	fab3 f383 	clz	r3, r3
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	095b      	lsrs	r3, r3, #5
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f043 0302 	orr.w	r3, r3, #2
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d108      	bne.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008aae:	4b01      	ldr	r3, [pc, #4]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	e00d      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008ab4:	40021000 	.word	0x40021000
 8008ab8:	40007000 	.word	0x40007000
 8008abc:	10908100 	.word	0x10908100
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	fa93 f3a3 	rbit	r3, r3
 8008aca:	617b      	str	r3, [r7, #20]
 8008acc:	4b9a      	ldr	r3, [pc, #616]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	613a      	str	r2, [r7, #16]
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	fa92 f2a2 	rbit	r2, r2
 8008ada:	60fa      	str	r2, [r7, #12]
  return result;
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	fab2 f282 	clz	r2, r2
 8008ae2:	b2d2      	uxtb	r2, r2
 8008ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ae8:	b2d2      	uxtb	r2, r2
 8008aea:	f002 021f 	and.w	r2, r2, #31
 8008aee:	2101      	movs	r1, #1
 8008af0:	fa01 f202 	lsl.w	r2, r1, r2
 8008af4:	4013      	ands	r3, r2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0b7      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008afa:	4b8f      	ldr	r3, [pc, #572]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	498c      	ldr	r1, [pc, #560]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008b0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d105      	bne.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b14:	4b88      	ldr	r3, [pc, #544]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008b16:	69db      	ldr	r3, [r3, #28]
 8008b18:	4a87      	ldr	r2, [pc, #540]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d008      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b2c:	4b82      	ldr	r3, [pc, #520]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b30:	f023 0203 	bic.w	r2, r3, #3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	497f      	ldr	r1, [pc, #508]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d008      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b4a:	4b7b      	ldr	r3, [pc, #492]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	4978      	ldr	r1, [pc, #480]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d008      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008b68:	4b73      	ldr	r3, [pc, #460]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	4970      	ldr	r1, [pc, #448]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008b76:	4313      	orrs	r3, r2
 8008b78:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0320 	and.w	r3, r3, #32
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d008      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b86:	4b6c      	ldr	r3, [pc, #432]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	f023 0210 	bic.w	r2, r3, #16
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	4969      	ldr	r1, [pc, #420]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008b94:	4313      	orrs	r3, r2
 8008b96:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d008      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008ba4:	4b64      	ldr	r3, [pc, #400]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb0:	4961      	ldr	r1, [pc, #388]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d008      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008bc2:	4b5d      	ldr	r3, [pc, #372]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	f023 0220 	bic.w	r2, r3, #32
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	495a      	ldr	r1, [pc, #360]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d008      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008be0:	4b55      	ldr	r3, [pc, #340]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	4952      	ldr	r1, [pc, #328]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0308 	and.w	r3, r3, #8
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d008      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008bfe:	4b4e      	ldr	r3, [pc, #312]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	494b      	ldr	r1, [pc, #300]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0310 	and.w	r3, r3, #16
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d008      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008c1c:	4b46      	ldr	r3, [pc, #280]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	4943      	ldr	r1, [pc, #268]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d008      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c3a:	4b3f      	ldr	r3, [pc, #252]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c46:	493c      	ldr	r1, [pc, #240]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d008      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008c58:	4b37      	ldr	r3, [pc, #220]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	4934      	ldr	r1, [pc, #208]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d008      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008c76:	4b30      	ldr	r3, [pc, #192]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c82:	492d      	ldr	r1, [pc, #180]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d008      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008c94:	4b28      	ldr	r3, [pc, #160]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca0:	4925      	ldr	r1, [pc, #148]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d008      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008cb2:	4b21      	ldr	r3, [pc, #132]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbe:	491e      	ldr	r1, [pc, #120]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d008      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8008cd0:	4b19      	ldr	r3, [pc, #100]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	4916      	ldr	r1, [pc, #88]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d008      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8008cee:	4b12      	ldr	r3, [pc, #72]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfa:	490f      	ldr	r1, [pc, #60]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d008      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008d0c:	4b0a      	ldr	r3, [pc, #40]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d10:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d18:	4907      	ldr	r1, [pc, #28]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00c      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008d2a:	4b03      	ldr	r3, [pc, #12]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	e002      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008d36:	bf00      	nop
 8008d38:	40021000 	.word	0x40021000
 8008d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d3e:	4913      	ldr	r1, [pc, #76]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d008      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008d50:	4b0e      	ldr	r3, [pc, #56]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d5c:	490b      	ldr	r1, [pc, #44]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d008      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8008d6e:	4b07      	ldr	r3, [pc, #28]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d7a:	4904      	ldr	r1, [pc, #16]	; (8008d8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3748      	adds	r7, #72	; 0x48
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	40021000 	.word	0x40021000

08008d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e049      	b.n	8008e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7fb fe78 	bl	8004aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f000 fcd2 	bl	8009778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e049      	b.n	8008ee4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d106      	bne.n	8008e6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f841 	bl	8008eec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f000 fc7b 	bl	8009778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d109      	bne.n	8008f24 <HAL_TIM_PWM_Start+0x24>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	bf14      	ite	ne
 8008f1c:	2301      	movne	r3, #1
 8008f1e:	2300      	moveq	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	e03c      	b.n	8008f9e <HAL_TIM_PWM_Start+0x9e>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d109      	bne.n	8008f3e <HAL_TIM_PWM_Start+0x3e>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	bf14      	ite	ne
 8008f36:	2301      	movne	r3, #1
 8008f38:	2300      	moveq	r3, #0
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	e02f      	b.n	8008f9e <HAL_TIM_PWM_Start+0x9e>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d109      	bne.n	8008f58 <HAL_TIM_PWM_Start+0x58>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	bf14      	ite	ne
 8008f50:	2301      	movne	r3, #1
 8008f52:	2300      	moveq	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	e022      	b.n	8008f9e <HAL_TIM_PWM_Start+0x9e>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2b0c      	cmp	r3, #12
 8008f5c:	d109      	bne.n	8008f72 <HAL_TIM_PWM_Start+0x72>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	bf14      	ite	ne
 8008f6a:	2301      	movne	r3, #1
 8008f6c:	2300      	moveq	r3, #0
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	e015      	b.n	8008f9e <HAL_TIM_PWM_Start+0x9e>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b10      	cmp	r3, #16
 8008f76:	d109      	bne.n	8008f8c <HAL_TIM_PWM_Start+0x8c>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	bf14      	ite	ne
 8008f84:	2301      	movne	r3, #1
 8008f86:	2300      	moveq	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	e008      	b.n	8008f9e <HAL_TIM_PWM_Start+0x9e>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	bf14      	ite	ne
 8008f98:	2301      	movne	r3, #1
 8008f9a:	2300      	moveq	r3, #0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e0a1      	b.n	80090ea <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <HAL_TIM_PWM_Start+0xb6>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fb4:	e023      	b.n	8008ffe <HAL_TIM_PWM_Start+0xfe>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d104      	bne.n	8008fc6 <HAL_TIM_PWM_Start+0xc6>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fc4:	e01b      	b.n	8008ffe <HAL_TIM_PWM_Start+0xfe>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d104      	bne.n	8008fd6 <HAL_TIM_PWM_Start+0xd6>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fd4:	e013      	b.n	8008ffe <HAL_TIM_PWM_Start+0xfe>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b0c      	cmp	r3, #12
 8008fda:	d104      	bne.n	8008fe6 <HAL_TIM_PWM_Start+0xe6>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fe4:	e00b      	b.n	8008ffe <HAL_TIM_PWM_Start+0xfe>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b10      	cmp	r3, #16
 8008fea:	d104      	bne.n	8008ff6 <HAL_TIM_PWM_Start+0xf6>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2202      	movs	r2, #2
 8008ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ff4:	e003      	b.n	8008ffe <HAL_TIM_PWM_Start+0xfe>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2201      	movs	r2, #1
 8009004:	6839      	ldr	r1, [r7, #0]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fff4 	bl	8009ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a38      	ldr	r2, [pc, #224]	; (80090f4 <HAL_TIM_PWM_Start+0x1f4>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d018      	beq.n	8009048 <HAL_TIM_PWM_Start+0x148>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a37      	ldr	r2, [pc, #220]	; (80090f8 <HAL_TIM_PWM_Start+0x1f8>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d013      	beq.n	8009048 <HAL_TIM_PWM_Start+0x148>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a35      	ldr	r2, [pc, #212]	; (80090fc <HAL_TIM_PWM_Start+0x1fc>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d00e      	beq.n	8009048 <HAL_TIM_PWM_Start+0x148>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a34      	ldr	r2, [pc, #208]	; (8009100 <HAL_TIM_PWM_Start+0x200>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d009      	beq.n	8009048 <HAL_TIM_PWM_Start+0x148>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a32      	ldr	r2, [pc, #200]	; (8009104 <HAL_TIM_PWM_Start+0x204>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d004      	beq.n	8009048 <HAL_TIM_PWM_Start+0x148>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a31      	ldr	r2, [pc, #196]	; (8009108 <HAL_TIM_PWM_Start+0x208>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d101      	bne.n	800904c <HAL_TIM_PWM_Start+0x14c>
 8009048:	2301      	movs	r3, #1
 800904a:	e000      	b.n	800904e <HAL_TIM_PWM_Start+0x14e>
 800904c:	2300      	movs	r3, #0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d007      	beq.n	8009062 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009060:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a23      	ldr	r2, [pc, #140]	; (80090f4 <HAL_TIM_PWM_Start+0x1f4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d01d      	beq.n	80090a8 <HAL_TIM_PWM_Start+0x1a8>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009074:	d018      	beq.n	80090a8 <HAL_TIM_PWM_Start+0x1a8>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a24      	ldr	r2, [pc, #144]	; (800910c <HAL_TIM_PWM_Start+0x20c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d013      	beq.n	80090a8 <HAL_TIM_PWM_Start+0x1a8>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a22      	ldr	r2, [pc, #136]	; (8009110 <HAL_TIM_PWM_Start+0x210>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00e      	beq.n	80090a8 <HAL_TIM_PWM_Start+0x1a8>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1a      	ldr	r2, [pc, #104]	; (80090f8 <HAL_TIM_PWM_Start+0x1f8>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d009      	beq.n	80090a8 <HAL_TIM_PWM_Start+0x1a8>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a18      	ldr	r2, [pc, #96]	; (80090fc <HAL_TIM_PWM_Start+0x1fc>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d004      	beq.n	80090a8 <HAL_TIM_PWM_Start+0x1a8>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a19      	ldr	r2, [pc, #100]	; (8009108 <HAL_TIM_PWM_Start+0x208>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d115      	bne.n	80090d4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	4b19      	ldr	r3, [pc, #100]	; (8009114 <HAL_TIM_PWM_Start+0x214>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b06      	cmp	r3, #6
 80090b8:	d015      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x1e6>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c0:	d011      	beq.n	80090e6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0201 	orr.w	r2, r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d2:	e008      	b.n	80090e6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	e000      	b.n	80090e8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	40012c00 	.word	0x40012c00
 80090f8:	40013400 	.word	0x40013400
 80090fc:	40014000 	.word	0x40014000
 8009100:	40014400 	.word	0x40014400
 8009104:	40014800 	.word	0x40014800
 8009108:	40015000 	.word	0x40015000
 800910c:	40000400 	.word	0x40000400
 8009110:	40000800 	.word	0x40000800
 8009114:	00010007 	.word	0x00010007

08009118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b02      	cmp	r3, #2
 800912c:	d122      	bne.n	8009174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0302 	and.w	r3, r3, #2
 8009138:	2b02      	cmp	r3, #2
 800913a:	d11b      	bne.n	8009174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0202 	mvn.w	r2, #2
 8009144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 faed 	bl	800973a <HAL_TIM_IC_CaptureCallback>
 8009160:	e005      	b.n	800916e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fadf 	bl	8009726 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 faf0 	bl	800974e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	f003 0304 	and.w	r3, r3, #4
 800917e:	2b04      	cmp	r3, #4
 8009180:	d122      	bne.n	80091c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	2b04      	cmp	r3, #4
 800918e:	d11b      	bne.n	80091c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f06f 0204 	mvn.w	r2, #4
 8009198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2202      	movs	r2, #2
 800919e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fac3 	bl	800973a <HAL_TIM_IC_CaptureCallback>
 80091b4:	e005      	b.n	80091c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fab5 	bl	8009726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fac6 	bl	800974e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	f003 0308 	and.w	r3, r3, #8
 80091d2:	2b08      	cmp	r3, #8
 80091d4:	d122      	bne.n	800921c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b08      	cmp	r3, #8
 80091e2:	d11b      	bne.n	800921c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f06f 0208 	mvn.w	r2, #8
 80091ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2204      	movs	r2, #4
 80091f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fa99 	bl	800973a <HAL_TIM_IC_CaptureCallback>
 8009208:	e005      	b.n	8009216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fa8b 	bl	8009726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fa9c 	bl	800974e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	f003 0310 	and.w	r3, r3, #16
 8009226:	2b10      	cmp	r3, #16
 8009228:	d122      	bne.n	8009270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	f003 0310 	and.w	r3, r3, #16
 8009234:	2b10      	cmp	r3, #16
 8009236:	d11b      	bne.n	8009270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f06f 0210 	mvn.w	r2, #16
 8009240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2208      	movs	r2, #8
 8009246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fa6f 	bl	800973a <HAL_TIM_IC_CaptureCallback>
 800925c:	e005      	b.n	800926a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fa61 	bl	8009726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fa72 	bl	800974e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b01      	cmp	r3, #1
 800927c:	d10e      	bne.n	800929c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b01      	cmp	r3, #1
 800928a:	d107      	bne.n	800929c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f06f 0201 	mvn.w	r2, #1
 8009294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fa3b 	bl	8009712 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a6:	2b80      	cmp	r3, #128	; 0x80
 80092a8:	d10e      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b4:	2b80      	cmp	r3, #128	; 0x80
 80092b6:	d107      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 ff52 	bl	800a16c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d6:	d10e      	bne.n	80092f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e2:	2b80      	cmp	r3, #128	; 0x80
 80092e4:	d107      	bne.n	80092f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80092ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 ff45 	bl	800a180 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009300:	2b40      	cmp	r3, #64	; 0x40
 8009302:	d10e      	bne.n	8009322 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930e:	2b40      	cmp	r3, #64	; 0x40
 8009310:	d107      	bne.n	8009322 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800931a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fa20 	bl	8009762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	f003 0320 	and.w	r3, r3, #32
 800932c:	2b20      	cmp	r3, #32
 800932e:	d10e      	bne.n	800934e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b20      	cmp	r3, #32
 800933c:	d107      	bne.n	800934e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f06f 0220 	mvn.w	r2, #32
 8009346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 ff05 	bl	800a158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800934e:	bf00      	nop
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800936e:	2b01      	cmp	r3, #1
 8009370:	d101      	bne.n	8009376 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009372:	2302      	movs	r3, #2
 8009374:	e0ff      	b.n	8009576 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2b14      	cmp	r3, #20
 8009382:	f200 80f0 	bhi.w	8009566 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009386:	a201      	add	r2, pc, #4	; (adr r2, 800938c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	080093e1 	.word	0x080093e1
 8009390:	08009567 	.word	0x08009567
 8009394:	08009567 	.word	0x08009567
 8009398:	08009567 	.word	0x08009567
 800939c:	08009421 	.word	0x08009421
 80093a0:	08009567 	.word	0x08009567
 80093a4:	08009567 	.word	0x08009567
 80093a8:	08009567 	.word	0x08009567
 80093ac:	08009463 	.word	0x08009463
 80093b0:	08009567 	.word	0x08009567
 80093b4:	08009567 	.word	0x08009567
 80093b8:	08009567 	.word	0x08009567
 80093bc:	080094a3 	.word	0x080094a3
 80093c0:	08009567 	.word	0x08009567
 80093c4:	08009567 	.word	0x08009567
 80093c8:	08009567 	.word	0x08009567
 80093cc:	080094e5 	.word	0x080094e5
 80093d0:	08009567 	.word	0x08009567
 80093d4:	08009567 	.word	0x08009567
 80093d8:	08009567 	.word	0x08009567
 80093dc:	08009525 	.word	0x08009525
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68b9      	ldr	r1, [r7, #8]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 fa64 	bl	80098b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	699a      	ldr	r2, [r3, #24]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0208 	orr.w	r2, r2, #8
 80093fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	699a      	ldr	r2, [r3, #24]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 0204 	bic.w	r2, r2, #4
 800940a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6999      	ldr	r1, [r3, #24]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	691a      	ldr	r2, [r3, #16]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	430a      	orrs	r2, r1
 800941c:	619a      	str	r2, [r3, #24]
      break;
 800941e:	e0a5      	b.n	800956c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68b9      	ldr	r1, [r7, #8]
 8009426:	4618      	mov	r0, r3
 8009428:	f000 fade 	bl	80099e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	699a      	ldr	r2, [r3, #24]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800943a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	699a      	ldr	r2, [r3, #24]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800944a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6999      	ldr	r1, [r3, #24]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	021a      	lsls	r2, r3, #8
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	619a      	str	r2, [r3, #24]
      break;
 8009460:	e084      	b.n	800956c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 fb51 	bl	8009b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	69da      	ldr	r2, [r3, #28]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f042 0208 	orr.w	r2, r2, #8
 800947c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	69da      	ldr	r2, [r3, #28]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 0204 	bic.w	r2, r2, #4
 800948c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69d9      	ldr	r1, [r3, #28]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	691a      	ldr	r2, [r3, #16]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	61da      	str	r2, [r3, #28]
      break;
 80094a0:	e064      	b.n	800956c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68b9      	ldr	r1, [r7, #8]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 fbc3 	bl	8009c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	69da      	ldr	r2, [r3, #28]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	69da      	ldr	r2, [r3, #28]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69d9      	ldr	r1, [r3, #28]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	021a      	lsls	r2, r3, #8
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	61da      	str	r2, [r3, #28]
      break;
 80094e2:	e043      	b.n	800956c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68b9      	ldr	r1, [r7, #8]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fc12 	bl	8009d14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f042 0208 	orr.w	r2, r2, #8
 80094fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0204 	bic.w	r2, r2, #4
 800950e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	691a      	ldr	r2, [r3, #16]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	430a      	orrs	r2, r1
 8009520:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009522:	e023      	b.n	800956c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 fc5c 	bl	8009de8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800953e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800954e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	021a      	lsls	r2, r3, #8
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009564:	e002      	b.n	800956c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]
      break;
 800956a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009574:	7dfb      	ldrb	r3, [r7, #23]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop

08009580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009594:	2b01      	cmp	r3, #1
 8009596:	d101      	bne.n	800959c <HAL_TIM_ConfigClockSource+0x1c>
 8009598:	2302      	movs	r3, #2
 800959a:	e0b6      	b.n	800970a <HAL_TIM_ConfigClockSource+0x18a>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2202      	movs	r2, #2
 80095a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d8:	d03e      	beq.n	8009658 <HAL_TIM_ConfigClockSource+0xd8>
 80095da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095de:	f200 8087 	bhi.w	80096f0 <HAL_TIM_ConfigClockSource+0x170>
 80095e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095e6:	f000 8086 	beq.w	80096f6 <HAL_TIM_ConfigClockSource+0x176>
 80095ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ee:	d87f      	bhi.n	80096f0 <HAL_TIM_ConfigClockSource+0x170>
 80095f0:	2b70      	cmp	r3, #112	; 0x70
 80095f2:	d01a      	beq.n	800962a <HAL_TIM_ConfigClockSource+0xaa>
 80095f4:	2b70      	cmp	r3, #112	; 0x70
 80095f6:	d87b      	bhi.n	80096f0 <HAL_TIM_ConfigClockSource+0x170>
 80095f8:	2b60      	cmp	r3, #96	; 0x60
 80095fa:	d050      	beq.n	800969e <HAL_TIM_ConfigClockSource+0x11e>
 80095fc:	2b60      	cmp	r3, #96	; 0x60
 80095fe:	d877      	bhi.n	80096f0 <HAL_TIM_ConfigClockSource+0x170>
 8009600:	2b50      	cmp	r3, #80	; 0x50
 8009602:	d03c      	beq.n	800967e <HAL_TIM_ConfigClockSource+0xfe>
 8009604:	2b50      	cmp	r3, #80	; 0x50
 8009606:	d873      	bhi.n	80096f0 <HAL_TIM_ConfigClockSource+0x170>
 8009608:	2b40      	cmp	r3, #64	; 0x40
 800960a:	d058      	beq.n	80096be <HAL_TIM_ConfigClockSource+0x13e>
 800960c:	2b40      	cmp	r3, #64	; 0x40
 800960e:	d86f      	bhi.n	80096f0 <HAL_TIM_ConfigClockSource+0x170>
 8009610:	2b30      	cmp	r3, #48	; 0x30
 8009612:	d064      	beq.n	80096de <HAL_TIM_ConfigClockSource+0x15e>
 8009614:	2b30      	cmp	r3, #48	; 0x30
 8009616:	d86b      	bhi.n	80096f0 <HAL_TIM_ConfigClockSource+0x170>
 8009618:	2b20      	cmp	r3, #32
 800961a:	d060      	beq.n	80096de <HAL_TIM_ConfigClockSource+0x15e>
 800961c:	2b20      	cmp	r3, #32
 800961e:	d867      	bhi.n	80096f0 <HAL_TIM_ConfigClockSource+0x170>
 8009620:	2b00      	cmp	r3, #0
 8009622:	d05c      	beq.n	80096de <HAL_TIM_ConfigClockSource+0x15e>
 8009624:	2b10      	cmp	r3, #16
 8009626:	d05a      	beq.n	80096de <HAL_TIM_ConfigClockSource+0x15e>
 8009628:	e062      	b.n	80096f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800963a:	f000 fcbb 	bl	8009fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800964c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	609a      	str	r2, [r3, #8]
      break;
 8009656:	e04f      	b.n	80096f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009668:	f000 fca4 	bl	8009fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689a      	ldr	r2, [r3, #8]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800967a:	609a      	str	r2, [r3, #8]
      break;
 800967c:	e03c      	b.n	80096f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800968a:	461a      	mov	r2, r3
 800968c:	f000 fc18 	bl	8009ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2150      	movs	r1, #80	; 0x50
 8009696:	4618      	mov	r0, r3
 8009698:	f000 fc71 	bl	8009f7e <TIM_ITRx_SetConfig>
      break;
 800969c:	e02c      	b.n	80096f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096aa:	461a      	mov	r2, r3
 80096ac:	f000 fc37 	bl	8009f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2160      	movs	r1, #96	; 0x60
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 fc61 	bl	8009f7e <TIM_ITRx_SetConfig>
      break;
 80096bc:	e01c      	b.n	80096f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ca:	461a      	mov	r2, r3
 80096cc:	f000 fbf8 	bl	8009ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2140      	movs	r1, #64	; 0x40
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fc51 	bl	8009f7e <TIM_ITRx_SetConfig>
      break;
 80096dc:	e00c      	b.n	80096f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4619      	mov	r1, r3
 80096e8:	4610      	mov	r0, r2
 80096ea:	f000 fc48 	bl	8009f7e <TIM_ITRx_SetConfig>
      break;
 80096ee:	e003      	b.n	80096f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	73fb      	strb	r3, [r7, #15]
      break;
 80096f4:	e000      	b.n	80096f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80096f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009708:	7bfb      	ldrb	r3, [r7, #15]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800971a:	bf00      	nop
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009726:	b480      	push	{r7}
 8009728:	b083      	sub	sp, #12
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800972e:	bf00      	nop
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009742:	bf00      	nop
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800976a:	bf00      	nop
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
	...

08009778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a42      	ldr	r2, [pc, #264]	; (8009894 <TIM_Base_SetConfig+0x11c>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d013      	beq.n	80097b8 <TIM_Base_SetConfig+0x40>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009796:	d00f      	beq.n	80097b8 <TIM_Base_SetConfig+0x40>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a3f      	ldr	r2, [pc, #252]	; (8009898 <TIM_Base_SetConfig+0x120>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d00b      	beq.n	80097b8 <TIM_Base_SetConfig+0x40>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a3e      	ldr	r2, [pc, #248]	; (800989c <TIM_Base_SetConfig+0x124>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d007      	beq.n	80097b8 <TIM_Base_SetConfig+0x40>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a3d      	ldr	r2, [pc, #244]	; (80098a0 <TIM_Base_SetConfig+0x128>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d003      	beq.n	80097b8 <TIM_Base_SetConfig+0x40>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a3c      	ldr	r2, [pc, #240]	; (80098a4 <TIM_Base_SetConfig+0x12c>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d108      	bne.n	80097ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a31      	ldr	r2, [pc, #196]	; (8009894 <TIM_Base_SetConfig+0x11c>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d01f      	beq.n	8009812 <TIM_Base_SetConfig+0x9a>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d8:	d01b      	beq.n	8009812 <TIM_Base_SetConfig+0x9a>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a2e      	ldr	r2, [pc, #184]	; (8009898 <TIM_Base_SetConfig+0x120>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d017      	beq.n	8009812 <TIM_Base_SetConfig+0x9a>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a2d      	ldr	r2, [pc, #180]	; (800989c <TIM_Base_SetConfig+0x124>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d013      	beq.n	8009812 <TIM_Base_SetConfig+0x9a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a2c      	ldr	r2, [pc, #176]	; (80098a0 <TIM_Base_SetConfig+0x128>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d00f      	beq.n	8009812 <TIM_Base_SetConfig+0x9a>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a2c      	ldr	r2, [pc, #176]	; (80098a8 <TIM_Base_SetConfig+0x130>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d00b      	beq.n	8009812 <TIM_Base_SetConfig+0x9a>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a2b      	ldr	r2, [pc, #172]	; (80098ac <TIM_Base_SetConfig+0x134>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d007      	beq.n	8009812 <TIM_Base_SetConfig+0x9a>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a2a      	ldr	r2, [pc, #168]	; (80098b0 <TIM_Base_SetConfig+0x138>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d003      	beq.n	8009812 <TIM_Base_SetConfig+0x9a>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a25      	ldr	r2, [pc, #148]	; (80098a4 <TIM_Base_SetConfig+0x12c>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d108      	bne.n	8009824 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	4313      	orrs	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	4313      	orrs	r3, r2
 8009830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a12      	ldr	r2, [pc, #72]	; (8009894 <TIM_Base_SetConfig+0x11c>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d013      	beq.n	8009878 <TIM_Base_SetConfig+0x100>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a13      	ldr	r2, [pc, #76]	; (80098a0 <TIM_Base_SetConfig+0x128>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d00f      	beq.n	8009878 <TIM_Base_SetConfig+0x100>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a13      	ldr	r2, [pc, #76]	; (80098a8 <TIM_Base_SetConfig+0x130>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d00b      	beq.n	8009878 <TIM_Base_SetConfig+0x100>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a12      	ldr	r2, [pc, #72]	; (80098ac <TIM_Base_SetConfig+0x134>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d007      	beq.n	8009878 <TIM_Base_SetConfig+0x100>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a11      	ldr	r2, [pc, #68]	; (80098b0 <TIM_Base_SetConfig+0x138>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d003      	beq.n	8009878 <TIM_Base_SetConfig+0x100>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a0c      	ldr	r2, [pc, #48]	; (80098a4 <TIM_Base_SetConfig+0x12c>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d103      	bne.n	8009880 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	691a      	ldr	r2, [r3, #16]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	615a      	str	r2, [r3, #20]
}
 8009886:	bf00      	nop
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	40012c00 	.word	0x40012c00
 8009898:	40000400 	.word	0x40000400
 800989c:	40000800 	.word	0x40000800
 80098a0:	40013400 	.word	0x40013400
 80098a4:	40015000 	.word	0x40015000
 80098a8:	40014000 	.word	0x40014000
 80098ac:	40014400 	.word	0x40014400
 80098b0:	40014800 	.word	0x40014800

080098b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	f023 0201 	bic.w	r2, r3, #1
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 0303 	bic.w	r3, r3, #3
 80098ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f023 0302 	bic.w	r3, r3, #2
 8009900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	4313      	orrs	r3, r2
 800990a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a30      	ldr	r2, [pc, #192]	; (80099d0 <TIM_OC1_SetConfig+0x11c>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d013      	beq.n	800993c <TIM_OC1_SetConfig+0x88>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a2f      	ldr	r2, [pc, #188]	; (80099d4 <TIM_OC1_SetConfig+0x120>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d00f      	beq.n	800993c <TIM_OC1_SetConfig+0x88>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a2e      	ldr	r2, [pc, #184]	; (80099d8 <TIM_OC1_SetConfig+0x124>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d00b      	beq.n	800993c <TIM_OC1_SetConfig+0x88>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a2d      	ldr	r2, [pc, #180]	; (80099dc <TIM_OC1_SetConfig+0x128>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d007      	beq.n	800993c <TIM_OC1_SetConfig+0x88>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a2c      	ldr	r2, [pc, #176]	; (80099e0 <TIM_OC1_SetConfig+0x12c>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d003      	beq.n	800993c <TIM_OC1_SetConfig+0x88>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a2b      	ldr	r2, [pc, #172]	; (80099e4 <TIM_OC1_SetConfig+0x130>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d10c      	bne.n	8009956 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f023 0308 	bic.w	r3, r3, #8
 8009942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	4313      	orrs	r3, r2
 800994c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f023 0304 	bic.w	r3, r3, #4
 8009954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a1d      	ldr	r2, [pc, #116]	; (80099d0 <TIM_OC1_SetConfig+0x11c>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d013      	beq.n	8009986 <TIM_OC1_SetConfig+0xd2>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a1c      	ldr	r2, [pc, #112]	; (80099d4 <TIM_OC1_SetConfig+0x120>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d00f      	beq.n	8009986 <TIM_OC1_SetConfig+0xd2>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a1b      	ldr	r2, [pc, #108]	; (80099d8 <TIM_OC1_SetConfig+0x124>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d00b      	beq.n	8009986 <TIM_OC1_SetConfig+0xd2>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a1a      	ldr	r2, [pc, #104]	; (80099dc <TIM_OC1_SetConfig+0x128>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d007      	beq.n	8009986 <TIM_OC1_SetConfig+0xd2>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a19      	ldr	r2, [pc, #100]	; (80099e0 <TIM_OC1_SetConfig+0x12c>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d003      	beq.n	8009986 <TIM_OC1_SetConfig+0xd2>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a18      	ldr	r2, [pc, #96]	; (80099e4 <TIM_OC1_SetConfig+0x130>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d111      	bne.n	80099aa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800998c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	4313      	orrs	r3, r2
 800999e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	621a      	str	r2, [r3, #32]
}
 80099c4:	bf00      	nop
 80099c6:	371c      	adds	r7, #28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	40012c00 	.word	0x40012c00
 80099d4:	40013400 	.word	0x40013400
 80099d8:	40014000 	.word	0x40014000
 80099dc:	40014400 	.word	0x40014400
 80099e0:	40014800 	.word	0x40014800
 80099e4:	40015000 	.word	0x40015000

080099e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	f023 0210 	bic.w	r2, r3, #16
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	021b      	lsls	r3, r3, #8
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f023 0320 	bic.w	r3, r3, #32
 8009a36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	011b      	lsls	r3, r3, #4
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a2c      	ldr	r2, [pc, #176]	; (8009af8 <TIM_OC2_SetConfig+0x110>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d007      	beq.n	8009a5c <TIM_OC2_SetConfig+0x74>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a2b      	ldr	r2, [pc, #172]	; (8009afc <TIM_OC2_SetConfig+0x114>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d003      	beq.n	8009a5c <TIM_OC2_SetConfig+0x74>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a2a      	ldr	r2, [pc, #168]	; (8009b00 <TIM_OC2_SetConfig+0x118>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d10d      	bne.n	8009a78 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	011b      	lsls	r3, r3, #4
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a1f      	ldr	r2, [pc, #124]	; (8009af8 <TIM_OC2_SetConfig+0x110>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d013      	beq.n	8009aa8 <TIM_OC2_SetConfig+0xc0>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a1e      	ldr	r2, [pc, #120]	; (8009afc <TIM_OC2_SetConfig+0x114>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d00f      	beq.n	8009aa8 <TIM_OC2_SetConfig+0xc0>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a1e      	ldr	r2, [pc, #120]	; (8009b04 <TIM_OC2_SetConfig+0x11c>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d00b      	beq.n	8009aa8 <TIM_OC2_SetConfig+0xc0>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a1d      	ldr	r2, [pc, #116]	; (8009b08 <TIM_OC2_SetConfig+0x120>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d007      	beq.n	8009aa8 <TIM_OC2_SetConfig+0xc0>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a1c      	ldr	r2, [pc, #112]	; (8009b0c <TIM_OC2_SetConfig+0x124>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d003      	beq.n	8009aa8 <TIM_OC2_SetConfig+0xc0>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a17      	ldr	r2, [pc, #92]	; (8009b00 <TIM_OC2_SetConfig+0x118>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d113      	bne.n	8009ad0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009aae:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ab6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	693a      	ldr	r2, [r7, #16]
 8009ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	621a      	str	r2, [r3, #32]
}
 8009aea:	bf00      	nop
 8009aec:	371c      	adds	r7, #28
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	40012c00 	.word	0x40012c00
 8009afc:	40013400 	.word	0x40013400
 8009b00:	40015000 	.word	0x40015000
 8009b04:	40014000 	.word	0x40014000
 8009b08:	40014400 	.word	0x40014400
 8009b0c:	40014800 	.word	0x40014800

08009b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b087      	sub	sp, #28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f023 0303 	bic.w	r3, r3, #3
 8009b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	021b      	lsls	r3, r3, #8
 8009b64:	697a      	ldr	r2, [r7, #20]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a2b      	ldr	r2, [pc, #172]	; (8009c1c <TIM_OC3_SetConfig+0x10c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d007      	beq.n	8009b82 <TIM_OC3_SetConfig+0x72>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4a2a      	ldr	r2, [pc, #168]	; (8009c20 <TIM_OC3_SetConfig+0x110>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d003      	beq.n	8009b82 <TIM_OC3_SetConfig+0x72>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a29      	ldr	r2, [pc, #164]	; (8009c24 <TIM_OC3_SetConfig+0x114>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d10d      	bne.n	8009b9e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	021b      	lsls	r3, r3, #8
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b9c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4a1e      	ldr	r2, [pc, #120]	; (8009c1c <TIM_OC3_SetConfig+0x10c>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d013      	beq.n	8009bce <TIM_OC3_SetConfig+0xbe>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4a1d      	ldr	r2, [pc, #116]	; (8009c20 <TIM_OC3_SetConfig+0x110>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d00f      	beq.n	8009bce <TIM_OC3_SetConfig+0xbe>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a1d      	ldr	r2, [pc, #116]	; (8009c28 <TIM_OC3_SetConfig+0x118>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d00b      	beq.n	8009bce <TIM_OC3_SetConfig+0xbe>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a1c      	ldr	r2, [pc, #112]	; (8009c2c <TIM_OC3_SetConfig+0x11c>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d007      	beq.n	8009bce <TIM_OC3_SetConfig+0xbe>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a1b      	ldr	r2, [pc, #108]	; (8009c30 <TIM_OC3_SetConfig+0x120>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d003      	beq.n	8009bce <TIM_OC3_SetConfig+0xbe>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a16      	ldr	r2, [pc, #88]	; (8009c24 <TIM_OC3_SetConfig+0x114>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d113      	bne.n	8009bf6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	011b      	lsls	r3, r3, #4
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	685a      	ldr	r2, [r3, #4]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	621a      	str	r2, [r3, #32]
}
 8009c10:	bf00      	nop
 8009c12:	371c      	adds	r7, #28
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	40012c00 	.word	0x40012c00
 8009c20:	40013400 	.word	0x40013400
 8009c24:	40015000 	.word	0x40015000
 8009c28:	40014000 	.word	0x40014000
 8009c2c:	40014400 	.word	0x40014400
 8009c30:	40014800 	.word	0x40014800

08009c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b087      	sub	sp, #28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	021b      	lsls	r3, r3, #8
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	031b      	lsls	r3, r3, #12
 8009c8a:	693a      	ldr	r2, [r7, #16]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a1a      	ldr	r2, [pc, #104]	; (8009cfc <TIM_OC4_SetConfig+0xc8>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d013      	beq.n	8009cc0 <TIM_OC4_SetConfig+0x8c>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a19      	ldr	r2, [pc, #100]	; (8009d00 <TIM_OC4_SetConfig+0xcc>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d00f      	beq.n	8009cc0 <TIM_OC4_SetConfig+0x8c>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a18      	ldr	r2, [pc, #96]	; (8009d04 <TIM_OC4_SetConfig+0xd0>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d00b      	beq.n	8009cc0 <TIM_OC4_SetConfig+0x8c>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a17      	ldr	r2, [pc, #92]	; (8009d08 <TIM_OC4_SetConfig+0xd4>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d007      	beq.n	8009cc0 <TIM_OC4_SetConfig+0x8c>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a16      	ldr	r2, [pc, #88]	; (8009d0c <TIM_OC4_SetConfig+0xd8>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d003      	beq.n	8009cc0 <TIM_OC4_SetConfig+0x8c>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a15      	ldr	r2, [pc, #84]	; (8009d10 <TIM_OC4_SetConfig+0xdc>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d109      	bne.n	8009cd4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	019b      	lsls	r3, r3, #6
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	621a      	str	r2, [r3, #32]
}
 8009cee:	bf00      	nop
 8009cf0:	371c      	adds	r7, #28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	40012c00 	.word	0x40012c00
 8009d00:	40013400 	.word	0x40013400
 8009d04:	40014000 	.word	0x40014000
 8009d08:	40014400 	.word	0x40014400
 8009d0c:	40014800 	.word	0x40014800
 8009d10:	40015000 	.word	0x40015000

08009d14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	041b      	lsls	r3, r3, #16
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a19      	ldr	r2, [pc, #100]	; (8009dd0 <TIM_OC5_SetConfig+0xbc>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d013      	beq.n	8009d96 <TIM_OC5_SetConfig+0x82>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a18      	ldr	r2, [pc, #96]	; (8009dd4 <TIM_OC5_SetConfig+0xc0>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d00f      	beq.n	8009d96 <TIM_OC5_SetConfig+0x82>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a17      	ldr	r2, [pc, #92]	; (8009dd8 <TIM_OC5_SetConfig+0xc4>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d00b      	beq.n	8009d96 <TIM_OC5_SetConfig+0x82>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a16      	ldr	r2, [pc, #88]	; (8009ddc <TIM_OC5_SetConfig+0xc8>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d007      	beq.n	8009d96 <TIM_OC5_SetConfig+0x82>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a15      	ldr	r2, [pc, #84]	; (8009de0 <TIM_OC5_SetConfig+0xcc>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d003      	beq.n	8009d96 <TIM_OC5_SetConfig+0x82>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a14      	ldr	r2, [pc, #80]	; (8009de4 <TIM_OC5_SetConfig+0xd0>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d109      	bne.n	8009daa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	021b      	lsls	r3, r3, #8
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	621a      	str	r2, [r3, #32]
}
 8009dc4:	bf00      	nop
 8009dc6:	371c      	adds	r7, #28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	40012c00 	.word	0x40012c00
 8009dd4:	40013400 	.word	0x40013400
 8009dd8:	40014000 	.word	0x40014000
 8009ddc:	40014400 	.word	0x40014400
 8009de0:	40014800 	.word	0x40014800
 8009de4:	40015000 	.word	0x40015000

08009de8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b087      	sub	sp, #28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	021b      	lsls	r3, r3, #8
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	051b      	lsls	r3, r3, #20
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a1a      	ldr	r2, [pc, #104]	; (8009ea8 <TIM_OC6_SetConfig+0xc0>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d013      	beq.n	8009e6c <TIM_OC6_SetConfig+0x84>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a19      	ldr	r2, [pc, #100]	; (8009eac <TIM_OC6_SetConfig+0xc4>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d00f      	beq.n	8009e6c <TIM_OC6_SetConfig+0x84>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a18      	ldr	r2, [pc, #96]	; (8009eb0 <TIM_OC6_SetConfig+0xc8>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d00b      	beq.n	8009e6c <TIM_OC6_SetConfig+0x84>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a17      	ldr	r2, [pc, #92]	; (8009eb4 <TIM_OC6_SetConfig+0xcc>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d007      	beq.n	8009e6c <TIM_OC6_SetConfig+0x84>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a16      	ldr	r2, [pc, #88]	; (8009eb8 <TIM_OC6_SetConfig+0xd0>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d003      	beq.n	8009e6c <TIM_OC6_SetConfig+0x84>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a15      	ldr	r2, [pc, #84]	; (8009ebc <TIM_OC6_SetConfig+0xd4>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d109      	bne.n	8009e80 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	029b      	lsls	r3, r3, #10
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	621a      	str	r2, [r3, #32]
}
 8009e9a:	bf00      	nop
 8009e9c:	371c      	adds	r7, #28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	40012c00 	.word	0x40012c00
 8009eac:	40013400 	.word	0x40013400
 8009eb0:	40014000 	.word	0x40014000
 8009eb4:	40014400 	.word	0x40014400
 8009eb8:	40014800 	.word	0x40014800
 8009ebc:	40015000 	.word	0x40015000

08009ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b087      	sub	sp, #28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6a1b      	ldr	r3, [r3, #32]
 8009ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	f023 0201 	bic.w	r2, r3, #1
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	011b      	lsls	r3, r3, #4
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f023 030a 	bic.w	r3, r3, #10
 8009efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	621a      	str	r2, [r3, #32]
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b087      	sub	sp, #28
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	60f8      	str	r0, [r7, #12]
 8009f26:	60b9      	str	r1, [r7, #8]
 8009f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	f023 0210 	bic.w	r2, r3, #16
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6a1b      	ldr	r3, [r3, #32]
 8009f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	031b      	lsls	r3, r3, #12
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	011b      	lsls	r3, r3, #4
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	621a      	str	r2, [r3, #32]
}
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b085      	sub	sp, #20
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	f043 0307 	orr.w	r3, r3, #7
 8009fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	609a      	str	r2, [r3, #8]
}
 8009fa8:	bf00      	nop
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b087      	sub	sp, #28
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	021a      	lsls	r2, r3, #8
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	609a      	str	r2, [r3, #8]
}
 8009fe8:	bf00      	nop
 8009fea:	371c      	adds	r7, #28
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	f003 031f 	and.w	r3, r3, #31
 800a006:	2201      	movs	r2, #1
 800a008:	fa02 f303 	lsl.w	r3, r2, r3
 800a00c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6a1a      	ldr	r2, [r3, #32]
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	43db      	mvns	r3, r3
 800a016:	401a      	ands	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a1a      	ldr	r2, [r3, #32]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	f003 031f 	and.w	r3, r3, #31
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	fa01 f303 	lsl.w	r3, r1, r3
 800a02c:	431a      	orrs	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	621a      	str	r2, [r3, #32]
}
 800a032:	bf00      	nop
 800a034:	371c      	adds	r7, #28
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
	...

0800a040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a050:	2b01      	cmp	r3, #1
 800a052:	d101      	bne.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a054:	2302      	movs	r3, #2
 800a056:	e06d      	b.n	800a134 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2202      	movs	r2, #2
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a30      	ldr	r2, [pc, #192]	; (800a140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d009      	beq.n	800a096 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a2f      	ldr	r2, [pc, #188]	; (800a144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d004      	beq.n	800a096 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a2d      	ldr	r2, [pc, #180]	; (800a148 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d108      	bne.n	800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a09c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a1e      	ldr	r2, [pc, #120]	; (800a140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d01d      	beq.n	800a108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0d4:	d018      	beq.n	800a108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a1c      	ldr	r2, [pc, #112]	; (800a14c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d013      	beq.n	800a108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a1a      	ldr	r2, [pc, #104]	; (800a150 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d00e      	beq.n	800a108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a15      	ldr	r2, [pc, #84]	; (800a144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d009      	beq.n	800a108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a16      	ldr	r2, [pc, #88]	; (800a154 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d004      	beq.n	800a108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a11      	ldr	r2, [pc, #68]	; (800a148 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d10c      	bne.n	800a122 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a10e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	4313      	orrs	r3, r2
 800a118:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3714      	adds	r7, #20
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	40012c00 	.word	0x40012c00
 800a144:	40013400 	.word	0x40013400
 800a148:	40015000 	.word	0x40015000
 800a14c:	40000400 	.word	0x40000400
 800a150:	40000800 	.word	0x40000800
 800a154:	40014000 	.word	0x40014000

0800a158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e040      	b.n	800a228 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d106      	bne.n	800a1bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7fa fcd0 	bl	8004b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2224      	movs	r2, #36	; 0x24
 800a1c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f022 0201 	bic.w	r2, r2, #1
 800a1d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f8b6 	bl	800a344 <UART_SetConfig>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e022      	b.n	800a228 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d002      	beq.n	800a1f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fa7e 	bl	800a6ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	689a      	ldr	r2, [r3, #8]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a20e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f042 0201 	orr.w	r2, r2, #1
 800a21e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fb05 	bl	800a830 <UART_CheckIdleState>
 800a226:	4603      	mov	r3, r0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b08a      	sub	sp, #40	; 0x28
 800a234:	af02      	add	r7, sp, #8
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	603b      	str	r3, [r7, #0]
 800a23c:	4613      	mov	r3, r2
 800a23e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a244:	2b20      	cmp	r3, #32
 800a246:	d178      	bne.n	800a33a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <HAL_UART_Transmit+0x24>
 800a24e:	88fb      	ldrh	r3, [r7, #6]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e071      	b.n	800a33c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2221      	movs	r2, #33	; 0x21
 800a264:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a266:	f7fa fe71 	bl	8004f4c <HAL_GetTick>
 800a26a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	88fa      	ldrh	r2, [r7, #6]
 800a270:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	88fa      	ldrh	r2, [r7, #6]
 800a278:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a284:	d108      	bne.n	800a298 <HAL_UART_Transmit+0x68>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d104      	bne.n	800a298 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a28e:	2300      	movs	r3, #0
 800a290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	61bb      	str	r3, [r7, #24]
 800a296:	e003      	b.n	800a2a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a29c:	2300      	movs	r3, #0
 800a29e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a2a0:	e030      	b.n	800a304 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	2180      	movs	r1, #128	; 0x80
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 fb67 	bl	800a980 <UART_WaitOnFlagUntilTimeout>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d004      	beq.n	800a2c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e03c      	b.n	800a33c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10b      	bne.n	800a2e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	881a      	ldrh	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2d4:	b292      	uxth	r2, r2
 800a2d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	3302      	adds	r3, #2
 800a2dc:	61bb      	str	r3, [r7, #24]
 800a2de:	e008      	b.n	800a2f2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	781a      	ldrb	r2, [r3, #0]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	b292      	uxth	r2, r2
 800a2ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1c8      	bne.n	800a2a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	2200      	movs	r2, #0
 800a318:	2140      	movs	r1, #64	; 0x40
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 fb30 	bl	800a980 <UART_WaitOnFlagUntilTimeout>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d004      	beq.n	800a330 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2220      	movs	r2, #32
 800a32a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e005      	b.n	800a33c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2220      	movs	r2, #32
 800a334:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	e000      	b.n	800a33c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800a33a:	2302      	movs	r3, #2
  }
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3720      	adds	r7, #32
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b088      	sub	sp, #32
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	689a      	ldr	r2, [r3, #8]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	431a      	orrs	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	431a      	orrs	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	69db      	ldr	r3, [r3, #28]
 800a364:	4313      	orrs	r3, r2
 800a366:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	4b92      	ldr	r3, [pc, #584]	; (800a5b8 <UART_SetConfig+0x274>)
 800a370:	4013      	ands	r3, r2
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	6812      	ldr	r2, [r2, #0]
 800a376:	6979      	ldr	r1, [r7, #20]
 800a378:	430b      	orrs	r3, r1
 800a37a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a80      	ldr	r2, [pc, #512]	; (800a5bc <UART_SetConfig+0x278>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d120      	bne.n	800a402 <UART_SetConfig+0xbe>
 800a3c0:	4b7f      	ldr	r3, [pc, #508]	; (800a5c0 <UART_SetConfig+0x27c>)
 800a3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c4:	f003 0303 	and.w	r3, r3, #3
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d817      	bhi.n	800a3fc <UART_SetConfig+0xb8>
 800a3cc:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <UART_SetConfig+0x90>)
 800a3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d2:	bf00      	nop
 800a3d4:	0800a3e5 	.word	0x0800a3e5
 800a3d8:	0800a3f1 	.word	0x0800a3f1
 800a3dc:	0800a3f7 	.word	0x0800a3f7
 800a3e0:	0800a3eb 	.word	0x0800a3eb
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	77fb      	strb	r3, [r7, #31]
 800a3e8:	e0b5      	b.n	800a556 <UART_SetConfig+0x212>
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	77fb      	strb	r3, [r7, #31]
 800a3ee:	e0b2      	b.n	800a556 <UART_SetConfig+0x212>
 800a3f0:	2304      	movs	r3, #4
 800a3f2:	77fb      	strb	r3, [r7, #31]
 800a3f4:	e0af      	b.n	800a556 <UART_SetConfig+0x212>
 800a3f6:	2308      	movs	r3, #8
 800a3f8:	77fb      	strb	r3, [r7, #31]
 800a3fa:	e0ac      	b.n	800a556 <UART_SetConfig+0x212>
 800a3fc:	2310      	movs	r3, #16
 800a3fe:	77fb      	strb	r3, [r7, #31]
 800a400:	e0a9      	b.n	800a556 <UART_SetConfig+0x212>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a6f      	ldr	r2, [pc, #444]	; (800a5c4 <UART_SetConfig+0x280>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d124      	bne.n	800a456 <UART_SetConfig+0x112>
 800a40c:	4b6c      	ldr	r3, [pc, #432]	; (800a5c0 <UART_SetConfig+0x27c>)
 800a40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a414:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a418:	d011      	beq.n	800a43e <UART_SetConfig+0xfa>
 800a41a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a41e:	d817      	bhi.n	800a450 <UART_SetConfig+0x10c>
 800a420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a424:	d011      	beq.n	800a44a <UART_SetConfig+0x106>
 800a426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a42a:	d811      	bhi.n	800a450 <UART_SetConfig+0x10c>
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d003      	beq.n	800a438 <UART_SetConfig+0xf4>
 800a430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a434:	d006      	beq.n	800a444 <UART_SetConfig+0x100>
 800a436:	e00b      	b.n	800a450 <UART_SetConfig+0x10c>
 800a438:	2300      	movs	r3, #0
 800a43a:	77fb      	strb	r3, [r7, #31]
 800a43c:	e08b      	b.n	800a556 <UART_SetConfig+0x212>
 800a43e:	2302      	movs	r3, #2
 800a440:	77fb      	strb	r3, [r7, #31]
 800a442:	e088      	b.n	800a556 <UART_SetConfig+0x212>
 800a444:	2304      	movs	r3, #4
 800a446:	77fb      	strb	r3, [r7, #31]
 800a448:	e085      	b.n	800a556 <UART_SetConfig+0x212>
 800a44a:	2308      	movs	r3, #8
 800a44c:	77fb      	strb	r3, [r7, #31]
 800a44e:	e082      	b.n	800a556 <UART_SetConfig+0x212>
 800a450:	2310      	movs	r3, #16
 800a452:	77fb      	strb	r3, [r7, #31]
 800a454:	e07f      	b.n	800a556 <UART_SetConfig+0x212>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a5b      	ldr	r2, [pc, #364]	; (800a5c8 <UART_SetConfig+0x284>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d124      	bne.n	800a4aa <UART_SetConfig+0x166>
 800a460:	4b57      	ldr	r3, [pc, #348]	; (800a5c0 <UART_SetConfig+0x27c>)
 800a462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a464:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a468:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a46c:	d011      	beq.n	800a492 <UART_SetConfig+0x14e>
 800a46e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a472:	d817      	bhi.n	800a4a4 <UART_SetConfig+0x160>
 800a474:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a478:	d011      	beq.n	800a49e <UART_SetConfig+0x15a>
 800a47a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a47e:	d811      	bhi.n	800a4a4 <UART_SetConfig+0x160>
 800a480:	2b00      	cmp	r3, #0
 800a482:	d003      	beq.n	800a48c <UART_SetConfig+0x148>
 800a484:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a488:	d006      	beq.n	800a498 <UART_SetConfig+0x154>
 800a48a:	e00b      	b.n	800a4a4 <UART_SetConfig+0x160>
 800a48c:	2300      	movs	r3, #0
 800a48e:	77fb      	strb	r3, [r7, #31]
 800a490:	e061      	b.n	800a556 <UART_SetConfig+0x212>
 800a492:	2302      	movs	r3, #2
 800a494:	77fb      	strb	r3, [r7, #31]
 800a496:	e05e      	b.n	800a556 <UART_SetConfig+0x212>
 800a498:	2304      	movs	r3, #4
 800a49a:	77fb      	strb	r3, [r7, #31]
 800a49c:	e05b      	b.n	800a556 <UART_SetConfig+0x212>
 800a49e:	2308      	movs	r3, #8
 800a4a0:	77fb      	strb	r3, [r7, #31]
 800a4a2:	e058      	b.n	800a556 <UART_SetConfig+0x212>
 800a4a4:	2310      	movs	r3, #16
 800a4a6:	77fb      	strb	r3, [r7, #31]
 800a4a8:	e055      	b.n	800a556 <UART_SetConfig+0x212>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a47      	ldr	r2, [pc, #284]	; (800a5cc <UART_SetConfig+0x288>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d124      	bne.n	800a4fe <UART_SetConfig+0x1ba>
 800a4b4:	4b42      	ldr	r3, [pc, #264]	; (800a5c0 <UART_SetConfig+0x27c>)
 800a4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a4bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4c0:	d011      	beq.n	800a4e6 <UART_SetConfig+0x1a2>
 800a4c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4c6:	d817      	bhi.n	800a4f8 <UART_SetConfig+0x1b4>
 800a4c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4cc:	d011      	beq.n	800a4f2 <UART_SetConfig+0x1ae>
 800a4ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4d2:	d811      	bhi.n	800a4f8 <UART_SetConfig+0x1b4>
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d003      	beq.n	800a4e0 <UART_SetConfig+0x19c>
 800a4d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4dc:	d006      	beq.n	800a4ec <UART_SetConfig+0x1a8>
 800a4de:	e00b      	b.n	800a4f8 <UART_SetConfig+0x1b4>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	77fb      	strb	r3, [r7, #31]
 800a4e4:	e037      	b.n	800a556 <UART_SetConfig+0x212>
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	77fb      	strb	r3, [r7, #31]
 800a4ea:	e034      	b.n	800a556 <UART_SetConfig+0x212>
 800a4ec:	2304      	movs	r3, #4
 800a4ee:	77fb      	strb	r3, [r7, #31]
 800a4f0:	e031      	b.n	800a556 <UART_SetConfig+0x212>
 800a4f2:	2308      	movs	r3, #8
 800a4f4:	77fb      	strb	r3, [r7, #31]
 800a4f6:	e02e      	b.n	800a556 <UART_SetConfig+0x212>
 800a4f8:	2310      	movs	r3, #16
 800a4fa:	77fb      	strb	r3, [r7, #31]
 800a4fc:	e02b      	b.n	800a556 <UART_SetConfig+0x212>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a33      	ldr	r2, [pc, #204]	; (800a5d0 <UART_SetConfig+0x28c>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d124      	bne.n	800a552 <UART_SetConfig+0x20e>
 800a508:	4b2d      	ldr	r3, [pc, #180]	; (800a5c0 <UART_SetConfig+0x27c>)
 800a50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a510:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a514:	d011      	beq.n	800a53a <UART_SetConfig+0x1f6>
 800a516:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a51a:	d817      	bhi.n	800a54c <UART_SetConfig+0x208>
 800a51c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a520:	d011      	beq.n	800a546 <UART_SetConfig+0x202>
 800a522:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a526:	d811      	bhi.n	800a54c <UART_SetConfig+0x208>
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d003      	beq.n	800a534 <UART_SetConfig+0x1f0>
 800a52c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a530:	d006      	beq.n	800a540 <UART_SetConfig+0x1fc>
 800a532:	e00b      	b.n	800a54c <UART_SetConfig+0x208>
 800a534:	2300      	movs	r3, #0
 800a536:	77fb      	strb	r3, [r7, #31]
 800a538:	e00d      	b.n	800a556 <UART_SetConfig+0x212>
 800a53a:	2302      	movs	r3, #2
 800a53c:	77fb      	strb	r3, [r7, #31]
 800a53e:	e00a      	b.n	800a556 <UART_SetConfig+0x212>
 800a540:	2304      	movs	r3, #4
 800a542:	77fb      	strb	r3, [r7, #31]
 800a544:	e007      	b.n	800a556 <UART_SetConfig+0x212>
 800a546:	2308      	movs	r3, #8
 800a548:	77fb      	strb	r3, [r7, #31]
 800a54a:	e004      	b.n	800a556 <UART_SetConfig+0x212>
 800a54c:	2310      	movs	r3, #16
 800a54e:	77fb      	strb	r3, [r7, #31]
 800a550:	e001      	b.n	800a556 <UART_SetConfig+0x212>
 800a552:	2310      	movs	r3, #16
 800a554:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	69db      	ldr	r3, [r3, #28]
 800a55a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a55e:	d16b      	bne.n	800a638 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800a560:	7ffb      	ldrb	r3, [r7, #31]
 800a562:	2b08      	cmp	r3, #8
 800a564:	d838      	bhi.n	800a5d8 <UART_SetConfig+0x294>
 800a566:	a201      	add	r2, pc, #4	; (adr r2, 800a56c <UART_SetConfig+0x228>)
 800a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56c:	0800a591 	.word	0x0800a591
 800a570:	0800a599 	.word	0x0800a599
 800a574:	0800a5a1 	.word	0x0800a5a1
 800a578:	0800a5d9 	.word	0x0800a5d9
 800a57c:	0800a5a7 	.word	0x0800a5a7
 800a580:	0800a5d9 	.word	0x0800a5d9
 800a584:	0800a5d9 	.word	0x0800a5d9
 800a588:	0800a5d9 	.word	0x0800a5d9
 800a58c:	0800a5af 	.word	0x0800a5af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a590:	f7fe f99c 	bl	80088cc <HAL_RCC_GetPCLK1Freq>
 800a594:	61b8      	str	r0, [r7, #24]
        break;
 800a596:	e024      	b.n	800a5e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a598:	f7fe f9ba 	bl	8008910 <HAL_RCC_GetPCLK2Freq>
 800a59c:	61b8      	str	r0, [r7, #24]
        break;
 800a59e:	e020      	b.n	800a5e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5a0:	4b0c      	ldr	r3, [pc, #48]	; (800a5d4 <UART_SetConfig+0x290>)
 800a5a2:	61bb      	str	r3, [r7, #24]
        break;
 800a5a4:	e01d      	b.n	800a5e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5a6:	f7fe f91b 	bl	80087e0 <HAL_RCC_GetSysClockFreq>
 800a5aa:	61b8      	str	r0, [r7, #24]
        break;
 800a5ac:	e019      	b.n	800a5e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5b2:	61bb      	str	r3, [r7, #24]
        break;
 800a5b4:	e015      	b.n	800a5e2 <UART_SetConfig+0x29e>
 800a5b6:	bf00      	nop
 800a5b8:	efff69f3 	.word	0xefff69f3
 800a5bc:	40013800 	.word	0x40013800
 800a5c0:	40021000 	.word	0x40021000
 800a5c4:	40004400 	.word	0x40004400
 800a5c8:	40004800 	.word	0x40004800
 800a5cc:	40004c00 	.word	0x40004c00
 800a5d0:	40005000 	.word	0x40005000
 800a5d4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	77bb      	strb	r3, [r7, #30]
        break;
 800a5e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d073      	beq.n	800a6d0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	005a      	lsls	r2, r3, #1
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	085b      	lsrs	r3, r3, #1
 800a5f2:	441a      	add	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	2b0f      	cmp	r3, #15
 800a602:	d916      	bls.n	800a632 <UART_SetConfig+0x2ee>
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a60a:	d212      	bcs.n	800a632 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	b29b      	uxth	r3, r3
 800a610:	f023 030f 	bic.w	r3, r3, #15
 800a614:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	085b      	lsrs	r3, r3, #1
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	f003 0307 	and.w	r3, r3, #7
 800a620:	b29a      	uxth	r2, r3
 800a622:	89fb      	ldrh	r3, [r7, #14]
 800a624:	4313      	orrs	r3, r2
 800a626:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	89fa      	ldrh	r2, [r7, #14]
 800a62e:	60da      	str	r2, [r3, #12]
 800a630:	e04e      	b.n	800a6d0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	77bb      	strb	r3, [r7, #30]
 800a636:	e04b      	b.n	800a6d0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a638:	7ffb      	ldrb	r3, [r7, #31]
 800a63a:	2b08      	cmp	r3, #8
 800a63c:	d827      	bhi.n	800a68e <UART_SetConfig+0x34a>
 800a63e:	a201      	add	r2, pc, #4	; (adr r2, 800a644 <UART_SetConfig+0x300>)
 800a640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a644:	0800a669 	.word	0x0800a669
 800a648:	0800a671 	.word	0x0800a671
 800a64c:	0800a679 	.word	0x0800a679
 800a650:	0800a68f 	.word	0x0800a68f
 800a654:	0800a67f 	.word	0x0800a67f
 800a658:	0800a68f 	.word	0x0800a68f
 800a65c:	0800a68f 	.word	0x0800a68f
 800a660:	0800a68f 	.word	0x0800a68f
 800a664:	0800a687 	.word	0x0800a687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a668:	f7fe f930 	bl	80088cc <HAL_RCC_GetPCLK1Freq>
 800a66c:	61b8      	str	r0, [r7, #24]
        break;
 800a66e:	e013      	b.n	800a698 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a670:	f7fe f94e 	bl	8008910 <HAL_RCC_GetPCLK2Freq>
 800a674:	61b8      	str	r0, [r7, #24]
        break;
 800a676:	e00f      	b.n	800a698 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a678:	4b1b      	ldr	r3, [pc, #108]	; (800a6e8 <UART_SetConfig+0x3a4>)
 800a67a:	61bb      	str	r3, [r7, #24]
        break;
 800a67c:	e00c      	b.n	800a698 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a67e:	f7fe f8af 	bl	80087e0 <HAL_RCC_GetSysClockFreq>
 800a682:	61b8      	str	r0, [r7, #24]
        break;
 800a684:	e008      	b.n	800a698 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a68a:	61bb      	str	r3, [r7, #24]
        break;
 800a68c:	e004      	b.n	800a698 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800a68e:	2300      	movs	r3, #0
 800a690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	77bb      	strb	r3, [r7, #30]
        break;
 800a696:	bf00      	nop
    }

    if (pclk != 0U)
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d018      	beq.n	800a6d0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	085a      	lsrs	r2, r3, #1
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	441a      	add	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	2b0f      	cmp	r3, #15
 800a6b6:	d909      	bls.n	800a6cc <UART_SetConfig+0x388>
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6be:	d205      	bcs.n	800a6cc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	60da      	str	r2, [r3, #12]
 800a6ca:	e001      	b.n	800a6d0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a6dc:	7fbb      	ldrb	r3, [r7, #30]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3720      	adds	r7, #32
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	007a1200 	.word	0x007a1200

0800a6ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f8:	f003 0301 	and.w	r3, r3, #1
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00a      	beq.n	800a716 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71a:	f003 0302 	and.w	r3, r3, #2
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00a      	beq.n	800a738 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	f003 0304 	and.w	r3, r3, #4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00a      	beq.n	800a75a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	f003 0308 	and.w	r3, r3, #8
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	430a      	orrs	r2, r1
 800a77a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	f003 0310 	and.w	r3, r3, #16
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00a      	beq.n	800a79e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a2:	f003 0320 	and.w	r3, r3, #32
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00a      	beq.n	800a7c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	430a      	orrs	r2, r1
 800a7be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d01a      	beq.n	800a802 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7ea:	d10a      	bne.n	800a802 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	430a      	orrs	r2, r1
 800a800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	430a      	orrs	r2, r1
 800a822:	605a      	str	r2, [r3, #4]
  }
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b098      	sub	sp, #96	; 0x60
 800a834:	af02      	add	r7, sp, #8
 800a836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a840:	f7fa fb84 	bl	8004f4c <HAL_GetTick>
 800a844:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 0308 	and.w	r3, r3, #8
 800a850:	2b08      	cmp	r3, #8
 800a852:	d12e      	bne.n	800a8b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a854:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a85c:	2200      	movs	r2, #0
 800a85e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f88c 	bl	800a980 <UART_WaitOnFlagUntilTimeout>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d021      	beq.n	800a8b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a876:	e853 3f00 	ldrex	r3, [r3]
 800a87a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a882:	653b      	str	r3, [r7, #80]	; 0x50
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	461a      	mov	r2, r3
 800a88a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a88c:	647b      	str	r3, [r7, #68]	; 0x44
 800a88e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a890:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a894:	e841 2300 	strex	r3, r2, [r1]
 800a898:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d1e6      	bne.n	800a86e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2220      	movs	r2, #32
 800a8a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e062      	b.n	800a978 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 0304 	and.w	r3, r3, #4
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	d149      	bne.n	800a954 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f856 	bl	800a980 <UART_WaitOnFlagUntilTimeout>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d03c      	beq.n	800a954 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	e853 3f00 	ldrex	r3, [r3]
 800a8e6:	623b      	str	r3, [r7, #32]
   return(result);
 800a8e8:	6a3b      	ldr	r3, [r7, #32]
 800a8ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8f8:	633b      	str	r3, [r7, #48]	; 0x30
 800a8fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a900:	e841 2300 	strex	r3, r2, [r1]
 800a904:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1e6      	bne.n	800a8da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3308      	adds	r3, #8
 800a912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	e853 3f00 	ldrex	r3, [r3]
 800a91a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f023 0301 	bic.w	r3, r3, #1
 800a922:	64bb      	str	r3, [r7, #72]	; 0x48
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	3308      	adds	r3, #8
 800a92a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a92c:	61fa      	str	r2, [r7, #28]
 800a92e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a930:	69b9      	ldr	r1, [r7, #24]
 800a932:	69fa      	ldr	r2, [r7, #28]
 800a934:	e841 2300 	strex	r3, r2, [r1]
 800a938:	617b      	str	r3, [r7, #20]
   return(result);
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1e5      	bne.n	800a90c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2220      	movs	r2, #32
 800a944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	e011      	b.n	800a978 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2220      	movs	r2, #32
 800a958:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2220      	movs	r2, #32
 800a95e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3758      	adds	r7, #88	; 0x58
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	603b      	str	r3, [r7, #0]
 800a98c:	4613      	mov	r3, r2
 800a98e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a990:	e049      	b.n	800aa26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a998:	d045      	beq.n	800aa26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a99a:	f7fa fad7 	bl	8004f4c <HAL_GetTick>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d302      	bcc.n	800a9b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d101      	bne.n	800a9b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	e048      	b.n	800aa46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0304 	and.w	r3, r3, #4
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d031      	beq.n	800aa26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	f003 0308 	and.w	r3, r3, #8
 800a9cc:	2b08      	cmp	r3, #8
 800a9ce:	d110      	bne.n	800a9f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2208      	movs	r2, #8
 800a9d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f000 f838 	bl	800aa4e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2208      	movs	r2, #8
 800a9e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e029      	b.n	800aa46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa00:	d111      	bne.n	800aa26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 f81e 	bl	800aa4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2220      	movs	r2, #32
 800aa16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e00f      	b.n	800aa46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	69da      	ldr	r2, [r3, #28]
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	4013      	ands	r3, r2
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	bf0c      	ite	eq
 800aa36:	2301      	moveq	r3, #1
 800aa38:	2300      	movne	r3, #0
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d0a6      	beq.n	800a992 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b095      	sub	sp, #84	; 0x54
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5e:	e853 3f00 	ldrex	r3, [r3]
 800aa62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	461a      	mov	r2, r3
 800aa72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa74:	643b      	str	r3, [r7, #64]	; 0x40
 800aa76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa7c:	e841 2300 	strex	r3, r2, [r1]
 800aa80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1e6      	bne.n	800aa56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa90:	6a3b      	ldr	r3, [r7, #32]
 800aa92:	e853 3f00 	ldrex	r3, [r3]
 800aa96:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	f023 0301 	bic.w	r3, r3, #1
 800aa9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3308      	adds	r3, #8
 800aaa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aaaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aab0:	e841 2300 	strex	r3, r2, [r1]
 800aab4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1e5      	bne.n	800aa88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d118      	bne.n	800aaf6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	e853 3f00 	ldrex	r3, [r3]
 800aad0:	60bb      	str	r3, [r7, #8]
   return(result);
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	f023 0310 	bic.w	r3, r3, #16
 800aad8:	647b      	str	r3, [r7, #68]	; 0x44
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	461a      	mov	r2, r3
 800aae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aae2:	61bb      	str	r3, [r7, #24]
 800aae4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae6:	6979      	ldr	r1, [r7, #20]
 800aae8:	69ba      	ldr	r2, [r7, #24]
 800aaea:	e841 2300 	strex	r3, r2, [r1]
 800aaee:	613b      	str	r3, [r7, #16]
   return(result);
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1e6      	bne.n	800aac4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2220      	movs	r2, #32
 800aafa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ab0a:	bf00      	nop
 800ab0c:	3754      	adds	r7, #84	; 0x54
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
	...

0800ab18 <_ZN4blib6ButtonC1Ev>:
#include "Button.h"

#include "TestLcd.h"
namespace blib
{
    Button::Button()
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 f850 	bl	800abc8 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>
 800ab28:	4a03      	ldr	r2, [pc, #12]	; (800ab38 <_ZN4blib6ButtonC1Ev+0x20>)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	601a      	str	r2, [r3, #0]
    {

    }
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4618      	mov	r0, r3
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	0800f004 	.word	0x0800f004

0800ab3c <_ZN4blib6ButtonD1Ev>:
    Button::~Button()
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	4a05      	ldr	r2, [pc, #20]	; (800ab5c <_ZN4blib6ButtonD1Ev+0x20>)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	601a      	str	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 f84b 	bl	800abe8 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
    {

    }
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4618      	mov	r0, r3
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	0800f004 	.word	0x0800f004

0800ab60 <_ZN4blib6ButtonD0Ev>:
    Button::~Button()
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
    }
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7ff ffe7 	bl	800ab3c <_ZN4blib6ButtonD1Ev>
 800ab6e:	2108      	movs	r1, #8
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fb4f 	bl	800b214 <_ZdlPvj>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>:
    void Button::setLatestPressedButton(const Button::ButtonName button)
    {
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
        mLatestPressedButton = button;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	605a      	str	r2, [r3, #4]
    }
 800ab90:	bf00      	nop
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <_ZNK4blib6Button22getLatestPressedButtonEv>:
    Button::ButtonName Button::getLatestPressedButton() const
    {
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
        return mLatestPressedButton;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	685b      	ldr	r3, [r3, #4]
    }
 800aba8:	4618      	mov	r0, r3
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <_ZN4blib6Button12handleSignalEv>:
    void Button::handleSignal()
    {
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
//        LcdSimulate::getInstance().impl_ClearScreen();
    }
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>:
                Singleton()
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
                {
 800abd0:	4a04      	ldr	r2, [pc, #16]	; (800abe4 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev+0x1c>)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	601a      	str	r2, [r3, #0]
                }
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	0800f014 	.word	0x0800f014

0800abe8 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>:
                virtual ~Singleton()
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
                }
 800abf0:	4a04      	ldr	r2, [pc, #16]	; (800ac04 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev+0x1c>)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	601a      	str	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4618      	mov	r0, r3
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	0800f014 	.word	0x0800f014

0800ac08 <_ZN4blib2dp9SingletonINS_6ButtonEED0Ev>:
                virtual ~Singleton()
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
                }
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7ff ffe9 	bl	800abe8 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
 800ac16:	2104      	movs	r1, #4
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fafb 	bl	800b214 <_ZdlPvj>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh>:
#include "Lcd.h"

namespace blib
{

    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
 800ac34:	70fb      	strb	r3, [r7, #3]
            address)
 800ac36:	4a0a      	ldr	r2, [pc, #40]	; (800ac60 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh+0x38>)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	601a      	str	r2, [r3, #0]
    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	605a      	str	r2, [r3, #4]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	609a      	str	r2, [r3, #8]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	78fa      	ldrb	r2, [r7, #3]
 800ac4c:	731a      	strb	r2, [r3, #12]
    {
        init();
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f000 f9d2 	bl	800aff8 <_ZN4blib3Lcd4initEv>
    }
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	0800f024 	.word	0x0800f024

0800ac64 <_ZN4blib3LcdD1Ev>:
    Lcd::~Lcd()
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	4a04      	ldr	r2, [pc, #16]	; (800ac80 <_ZN4blib3LcdD1Ev+0x1c>)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	601a      	str	r2, [r3, #0]
    {

    }
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4618      	mov	r0, r3
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	0800f024 	.word	0x0800f024

0800ac84 <_ZN4blib3LcdD0Ev>:
    Lcd::~Lcd()
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
    }
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff ffe9 	bl	800ac64 <_ZN4blib3LcdD1Ev>
 800ac92:	2114      	movs	r1, #20
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fabd 	bl	800b214 <_ZdlPvj>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <_ZN4blib3Lcd7sendCmdEh>:
    void Lcd::sendCmd(uint8_t command)
    {
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af02      	add	r7, sp, #8
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	70fb      	strb	r3, [r7, #3]
        uint8_t dataHigh = 0, dataLow = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	73fb      	strb	r3, [r7, #15]
 800acb4:	2300      	movs	r3, #0
 800acb6:	73bb      	strb	r3, [r7, #14]
        uint8_t data[4];
        dataHigh = (command & 0xF0);
 800acb8:	78fb      	ldrb	r3, [r7, #3]
 800acba:	f023 030f 	bic.w	r3, r3, #15
 800acbe:	73fb      	strb	r3, [r7, #15]
        dataLow = ((command << 4) & 0xF0);
 800acc0:	78fb      	ldrb	r3, [r7, #3]
 800acc2:	011b      	lsls	r3, r3, #4
 800acc4:	73bb      	strb	r3, [r7, #14]
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
 800acc8:	f043 030c 	orr.w	r3, r3, #12
 800accc:	b2db      	uxtb	r3, r3
 800acce:	723b      	strb	r3, [r7, #8]
        data[1] = dataHigh | 0x08;    //en = 0, rw = 0, rs = 0;
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
 800acd2:	f043 0308 	orr.w	r3, r3, #8
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	727b      	strb	r3, [r7, #9]
        data[2] = dataLow | 0x0C;
 800acda:	7bbb      	ldrb	r3, [r7, #14]
 800acdc:	f043 030c 	orr.w	r3, r3, #12
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	72bb      	strb	r3, [r7, #10]
        data[3] = dataLow | 0x08;
 800ace4:	7bbb      	ldrb	r3, [r7, #14]
 800ace6:	f043 0308 	orr.w	r3, r3, #8
 800acea:	b2db      	uxtb	r3, r3
 800acec:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6898      	ldr	r0, [r3, #8]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	7b1b      	ldrb	r3, [r3, #12]
 800acf6:	b299      	uxth	r1, r3
 800acf8:	f107 0208 	add.w	r2, r7, #8
 800acfc:	2364      	movs	r3, #100	; 0x64
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	2304      	movs	r3, #4
 800ad02:	f7fc f801 	bl	8006d08 <HAL_I2C_Master_Transmit>
    }
 800ad06:	bf00      	nop
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <_ZN4blib3Lcd8sendDataEh>:
    void Lcd::sendData(uint8_t data)
    {
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b086      	sub	sp, #24
 800ad12:	af02      	add	r7, sp, #8
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	460b      	mov	r3, r1
 800ad18:	70fb      	strb	r3, [r7, #3]
        uint8_t dataHigh = 0, dataLow = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	73fb      	strb	r3, [r7, #15]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	73bb      	strb	r3, [r7, #14]
        uint8_t dataBuf[4];
        dataHigh = (data & 0xF0);
 800ad22:	78fb      	ldrb	r3, [r7, #3]
 800ad24:	f023 030f 	bic.w	r3, r3, #15
 800ad28:	73fb      	strb	r3, [r7, #15]
        dataLow = ((data << 4) & 0xF0);
 800ad2a:	78fb      	ldrb	r3, [r7, #3]
 800ad2c:	011b      	lsls	r3, r3, #4
 800ad2e:	73bb      	strb	r3, [r7, #14]
        dataBuf[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
 800ad30:	7bfb      	ldrb	r3, [r7, #15]
 800ad32:	f043 030d 	orr.w	r3, r3, #13
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	723b      	strb	r3, [r7, #8]
        dataBuf[1] = dataHigh | 0x09;    //en = 0, rw = 0, rs = 1;
 800ad3a:	7bfb      	ldrb	r3, [r7, #15]
 800ad3c:	f043 0309 	orr.w	r3, r3, #9
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	727b      	strb	r3, [r7, #9]
        dataBuf[2] = dataLow | 0x0D;
 800ad44:	7bbb      	ldrb	r3, [r7, #14]
 800ad46:	f043 030d 	orr.w	r3, r3, #13
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	72bb      	strb	r3, [r7, #10]
        dataBuf[3] = dataLow | 0x09;
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	f043 0309 	orr.w	r3, r3, #9
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) dataBuf, sizeof(dataBuf), 100);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6898      	ldr	r0, [r3, #8]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	7b1b      	ldrb	r3, [r3, #12]
 800ad60:	b299      	uxth	r1, r3
 800ad62:	f107 0208 	add.w	r2, r7, #8
 800ad66:	2364      	movs	r3, #100	; 0x64
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	2304      	movs	r3, #4
 800ad6c:	f7fb ffcc 	bl	8006d08 <HAL_I2C_Master_Transmit>
    }
 800ad70:	bf00      	nop
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <_ZN4blib6ischarEPKc>:
    {

    }

    char ischar(const char *string)
    {
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
        return (string != nullptr) ? *(string) : ' ';
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d002      	beq.n	800ad8c <_ZN4blib6ischarEPKc+0x14>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	e000      	b.n	800ad8e <_ZN4blib6ischarEPKc+0x16>
 800ad8c:	2320      	movs	r3, #32
    }
 800ad8e:	4618      	mov	r0, r3
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
	...

0800ad9c <_ZN4blib3Lcd11displayLineEhhPKc>:
    void Lcd::displayLine(uint8_t row, uint8_t col, const char *string)
    {
 800ad9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad9e:	b0ab      	sub	sp, #172	; 0xac
 800ada0:	af14      	add	r7, sp, #80	; 0x50
 800ada2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ada4:	647b      	str	r3, [r7, #68]	; 0x44
 800ada6:	460b      	mov	r3, r1
 800ada8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800adac:	4613      	mov	r3, r2
 800adae:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
        LOGI("|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|", ischar(string),
 800adb2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800adb4:	f7ff ffe0 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800adb8:	4603      	mov	r3, r0
 800adba:	643b      	str	r3, [r7, #64]	; 0x40
 800adbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adbe:	3301      	adds	r3, #1
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff ffd9 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800adc6:	4603      	mov	r3, r0
 800adc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adcc:	3302      	adds	r3, #2
 800adce:	4618      	mov	r0, r3
 800add0:	f7ff ffd2 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800add4:	4603      	mov	r3, r0
 800add6:	63bb      	str	r3, [r7, #56]	; 0x38
 800add8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adda:	3303      	adds	r3, #3
 800addc:	4618      	mov	r0, r3
 800adde:	f7ff ffcb 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800ade2:	4603      	mov	r3, r0
 800ade4:	637b      	str	r3, [r7, #52]	; 0x34
 800ade6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ade8:	3304      	adds	r3, #4
 800adea:	4618      	mov	r0, r3
 800adec:	f7ff ffc4 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800adf0:	4603      	mov	r3, r0
 800adf2:	633b      	str	r3, [r7, #48]	; 0x30
 800adf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adf6:	3305      	adds	r3, #5
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff ffbd 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800adfe:	4603      	mov	r3, r0
 800ae00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae04:	3306      	adds	r3, #6
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7ff ffb6 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae12:	3307      	adds	r3, #7
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff ffaf 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae20:	3308      	adds	r3, #8
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff ffa8 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	623b      	str	r3, [r7, #32]
 800ae2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae2e:	3309      	adds	r3, #9
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff ffa1 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800ae36:	4603      	mov	r3, r0
 800ae38:	61fb      	str	r3, [r7, #28]
 800ae3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae3c:	330a      	adds	r3, #10
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7ff ff9a 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800ae44:	4603      	mov	r3, r0
 800ae46:	61bb      	str	r3, [r7, #24]
 800ae48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae4a:	330b      	adds	r3, #11
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7ff ff93 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800ae52:	4603      	mov	r3, r0
 800ae54:	617b      	str	r3, [r7, #20]
 800ae56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae58:	330c      	adds	r3, #12
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff ff8c 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800ae60:	4603      	mov	r3, r0
 800ae62:	613b      	str	r3, [r7, #16]
 800ae64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae66:	330d      	adds	r3, #13
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff ff85 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	60fb      	str	r3, [r7, #12]
 800ae72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae74:	330e      	adds	r3, #14
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7ff ff7e 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	60bb      	str	r3, [r7, #8]
 800ae80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae82:	330f      	adds	r3, #15
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff ff77 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	607b      	str	r3, [r7, #4]
 800ae8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae90:	3310      	adds	r3, #16
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7ff ff70 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	461e      	mov	r6, r3
 800ae9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae9e:	3311      	adds	r3, #17
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7ff ff69 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800aea6:	4603      	mov	r3, r0
 800aea8:	461d      	mov	r5, r3
 800aeaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeac:	3312      	adds	r3, #18
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7ff ff62 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	461c      	mov	r4, r3
 800aeb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeba:	3313      	adds	r3, #19
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7ff ff5b 	bl	800ad78 <_ZN4blib6ischarEPKc>
 800aec2:	4603      	mov	r3, r0
 800aec4:	9313      	str	r3, [sp, #76]	; 0x4c
 800aec6:	9412      	str	r4, [sp, #72]	; 0x48
 800aec8:	9511      	str	r5, [sp, #68]	; 0x44
 800aeca:	9610      	str	r6, [sp, #64]	; 0x40
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	920f      	str	r2, [sp, #60]	; 0x3c
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	920e      	str	r2, [sp, #56]	; 0x38
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	920d      	str	r2, [sp, #52]	; 0x34
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	920c      	str	r2, [sp, #48]	; 0x30
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	920b      	str	r2, [sp, #44]	; 0x2c
 800aee0:	69ba      	ldr	r2, [r7, #24]
 800aee2:	920a      	str	r2, [sp, #40]	; 0x28
 800aee4:	69fa      	ldr	r2, [r7, #28]
 800aee6:	9209      	str	r2, [sp, #36]	; 0x24
 800aee8:	6a3a      	ldr	r2, [r7, #32]
 800aeea:	9208      	str	r2, [sp, #32]
 800aeec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeee:	9207      	str	r2, [sp, #28]
 800aef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aef2:	9206      	str	r2, [sp, #24]
 800aef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aef6:	9205      	str	r2, [sp, #20]
 800aef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aefa:	9204      	str	r2, [sp, #16]
 800aefc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aefe:	9203      	str	r2, [sp, #12]
 800af00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af02:	9202      	str	r2, [sp, #8]
 800af04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af06:	9201      	str	r2, [sp, #4]
 800af08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	4b31      	ldr	r3, [pc, #196]	; (800afd4 <_ZN4blib3Lcd11displayLineEhhPKc+0x238>)
 800af0e:	225d      	movs	r2, #93	; 0x5d
 800af10:	4931      	ldr	r1, [pc, #196]	; (800afd8 <_ZN4blib3Lcd11displayLineEhhPKc+0x23c>)
 800af12:	4832      	ldr	r0, [pc, #200]	; (800afdc <_ZN4blib3Lcd11displayLineEhhPKc+0x240>)
 800af14:	f000 f8fc 	bl	800b110 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_>
                ischar(string + 5), ischar(string + 6), ischar(string + 7), ischar(string + 8),
                ischar(string + 9), ischar(string + 10), ischar(string + 11), ischar(string + 12),
                ischar(string + 13), ischar(string + 14), ischar(string + 15), ischar(string + 16),
                ischar(string + 17), ischar(string + 18), ischar(string + 19));

        uint8_t command = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        switch (mLcdType)
 800af1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d03c      	beq.n	800afa0 <_ZN4blib3Lcd11displayLineEhhPKc+0x204>
 800af26:	2b01      	cmp	r3, #1
 800af28:	d000      	beq.n	800af2c <_ZN4blib3Lcd11displayLineEhhPKc+0x190>
                    default:
                        break;
                }
                break;
            default:
                break;
 800af2a:	e03a      	b.n	800afa2 <_ZN4blib3Lcd11displayLineEhhPKc+0x206>
                switch (row)
 800af2c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800af30:	2b03      	cmp	r3, #3
 800af32:	d833      	bhi.n	800af9c <_ZN4blib3Lcd11displayLineEhhPKc+0x200>
 800af34:	a201      	add	r2, pc, #4	; (adr r2, 800af3c <_ZN4blib3Lcd11displayLineEhhPKc+0x1a0>)
 800af36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3a:	bf00      	nop
 800af3c:	0800af4d 	.word	0x0800af4d
 800af40:	0800af5b 	.word	0x0800af5b
 800af44:	0800af71 	.word	0x0800af71
 800af48:	0800af87 	.word	0x0800af87
                        command = 0x80 | (col + 0x00);
 800af4c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800af50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 800af58:	e021      	b.n	800af9e <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        command = 0x80 | (col + 0x40);
 800af5a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800af5e:	3340      	adds	r3, #64	; 0x40
 800af60:	b2db      	uxtb	r3, r3
 800af62:	b25b      	sxtb	r3, r3
 800af64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af68:	b25b      	sxtb	r3, r3
 800af6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 800af6e:	e016      	b.n	800af9e <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        command = 0x80 | (col + 0x14);
 800af70:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800af74:	3314      	adds	r3, #20
 800af76:	b2db      	uxtb	r3, r3
 800af78:	b25b      	sxtb	r3, r3
 800af7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af7e:	b25b      	sxtb	r3, r3
 800af80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 800af84:	e00b      	b.n	800af9e <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        command = 0x80 | (col + 0x54);
 800af86:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800af8a:	3354      	adds	r3, #84	; 0x54
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	b25b      	sxtb	r3, r3
 800af90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af94:	b25b      	sxtb	r3, r3
 800af96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 800af9a:	e000      	b.n	800af9e <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        break;
 800af9c:	bf00      	nop
                break;
 800af9e:	e000      	b.n	800afa2 <_ZN4blib3Lcd11displayLineEhhPKc+0x206>
                break;
 800afa0:	bf00      	nop
        }

        sendCmd(command);
 800afa2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afa6:	4619      	mov	r1, r3
 800afa8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800afaa:	f7ff fe7b 	bl	800aca4 <_ZN4blib3Lcd7sendCmdEh>

        while (*string)
 800afae:	e008      	b.n	800afc2 <_ZN4blib3Lcd11displayLineEhhPKc+0x226>
        {
            sendData(*string);
 800afb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	4619      	mov	r1, r3
 800afb6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800afb8:	f7ff fea9 	bl	800ad0e <_ZN4blib3Lcd8sendDataEh>
            string++;
 800afbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afbe:	3301      	adds	r3, #1
 800afc0:	647b      	str	r3, [r7, #68]	; 0x44
        while (*string)
 800afc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1f2      	bne.n	800afb0 <_ZN4blib3Lcd11displayLineEhhPKc+0x214>
        }
    }
 800afca:	bf00      	nop
 800afcc:	bf00      	nop
 800afce:	375c      	adds	r7, #92	; 0x5c
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd4:	0800ee98 	.word	0x0800ee98
 800afd8:	0800eea4 	.word	0x0800eea4
 800afdc:	0800eeac 	.word	0x0800eeac

0800afe0 <_ZN4blib3Lcd12clearDisplayEv>:
    void Lcd::clearDisplay()
    {
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
        sendCmd(0x01);
 800afe8:	2101      	movs	r1, #1
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7ff fe5a 	bl	800aca4 <_ZN4blib3Lcd7sendCmdEh>
    }
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <_ZN4blib3Lcd4initEv>:
    void Lcd::init()
    {
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2206      	movs	r2, #6
 800b004:	735a      	strb	r2, [r3, #13]
        mFunctionSet = LCD_FUNCTION_SET | LCD_DATA_DL_4BITS | LCD_LINE_N_2 | LCD_FONT_F_58;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2228      	movs	r2, #40	; 0x28
 800b00a:	73da      	strb	r2, [r3, #15]
        mDisplayControl = LCD_DISPLAY_ON_OFF | LCD_DISPLAY_D_OFF | LCD_CURSOR_C_OFF
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2208      	movs	r2, #8
 800b010:	739a      	strb	r2, [r3, #14]
                | LCD_BLINK_B_OFF;
        mBlackLight = LCD_NOBLACKLIGHT;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	741a      	strb	r2, [r3, #16]

        HAL_Delay(50);
 800b018:	2032      	movs	r0, #50	; 0x32
 800b01a:	f7f9 ffa3 	bl	8004f64 <HAL_Delay>
        sendCmd(0x30);
 800b01e:	2130      	movs	r1, #48	; 0x30
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f7ff fe3f 	bl	800aca4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(5);
 800b026:	2005      	movs	r0, #5
 800b028:	f7f9 ff9c 	bl	8004f64 <HAL_Delay>
        sendCmd(0x30);
 800b02c:	2130      	movs	r1, #48	; 0x30
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7ff fe38 	bl	800aca4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800b034:	2001      	movs	r0, #1
 800b036:	f7f9 ff95 	bl	8004f64 <HAL_Delay>
        sendCmd(0x30);
 800b03a:	2130      	movs	r1, #48	; 0x30
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7ff fe31 	bl	800aca4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 800b042:	200a      	movs	r0, #10
 800b044:	f7f9 ff8e 	bl	8004f64 <HAL_Delay>
        sendCmd(0x20);
 800b048:	2120      	movs	r1, #32
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff fe2a 	bl	800aca4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 800b050:	200a      	movs	r0, #10
 800b052:	f7f9 ff87 	bl	8004f64 <HAL_Delay>

        sendCmd(mFunctionSet);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	7bdb      	ldrb	r3, [r3, #15]
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff fe21 	bl	800aca4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800b062:	2001      	movs	r0, #1
 800b064:	f7f9 ff7e 	bl	8004f64 <HAL_Delay>
        sendCmd(mDisplayControl);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	7b9b      	ldrb	r3, [r3, #14]
 800b06c:	4619      	mov	r1, r3
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7ff fe18 	bl	800aca4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800b074:	2001      	movs	r0, #1
 800b076:	f7f9 ff75 	bl	8004f64 <HAL_Delay>
        sendCmd(0x01);    //clear display
 800b07a:	2101      	movs	r1, #1
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7ff fe11 	bl	800aca4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(2);
 800b082:	2002      	movs	r0, #2
 800b084:	f7f9 ff6e 	bl	8004f64 <HAL_Delay>
        sendCmd(mEntryMode);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	7b5b      	ldrb	r3, [r3, #13]
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7ff fe08 	bl	800aca4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800b094:	2001      	movs	r0, #1
 800b096:	f7f9 ff65 	bl	8004f64 <HAL_Delay>
        sendCmd(mDisplayControl | LCD_DISPLAY_D_ON);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	7b9b      	ldrb	r3, [r3, #14]
 800b09e:	f043 0304 	orr.w	r3, r3, #4
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7ff fdfc 	bl	800aca4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800b0ac:	2001      	movs	r0, #1
 800b0ae:	f7f9 ff59 	bl	8004f64 <HAL_Delay>
        sendCmd(mBlackLight);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	7c1b      	ldrb	r3, [r3, #16]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7ff fdf3 	bl	800aca4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800b0be:	2001      	movs	r0, #1
 800b0c0:	f7f9 ff50 	bl	8004f64 <HAL_Delay>
    }
 800b0c4:	bf00      	nop
 800b0c6:	3708      	adds	r7, #8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <_ZN4blib3Lcd11noBackligthEv>:

    void Lcd::noBackligth()
    {
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
        mBlackLight = LCD_NOBLACKLIGHT;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	741a      	strb	r2, [r3, #16]
        sendData(mBlackLight);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	7c1b      	ldrb	r3, [r3, #16]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7ff fe14 	bl	800ad0e <_ZN4blib3Lcd8sendDataEh>
    }
 800b0e6:	bf00      	nop
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <_ZN4blib3Lcd9backlightEv>:

    void Lcd::backlight()
    {
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b082      	sub	sp, #8
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
        mBlackLight = LCD_BLACKLIGHT;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2208      	movs	r2, #8
 800b0fa:	741a      	strb	r2, [r3, #16]
        sendData(mBlackLight);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	7c1b      	ldrb	r3, [r3, #16]
 800b100:	4619      	mov	r1, r3
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f7ff fe03 	bl	800ad0e <_ZN4blib3Lcd8sendDataEh>
    }
 800b108:	bf00      	nop
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 800b110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b112:	b0a9      	sub	sp, #164	; 0xa4
 800b114:	af16      	add	r7, sp, #88	; 0x58
 800b116:	6478      	str	r0, [r7, #68]	; 0x44
 800b118:	6439      	str	r1, [r7, #64]	; 0x40
 800b11a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b11c:	63bb      	str	r3, [r7, #56]	; 0x38
                print("[>]  ");
 800b11e:	483a      	ldr	r0, [pc, #232]	; (800b208 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0xf8>)
 800b120:	f7f6 f94c 	bl	80013bc <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 800b124:	f897 6060 	ldrb.w	r6, [r7, #96]	; 0x60
 800b128:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800b12c:	637b      	str	r3, [r7, #52]	; 0x34
 800b12e:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800b132:	633a      	str	r2, [r7, #48]	; 0x30
 800b134:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 800b138:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b13a:	f897 0070 	ldrb.w	r0, [r7, #112]	; 0x70
 800b13e:	62b8      	str	r0, [r7, #40]	; 0x28
 800b140:	f897 4074 	ldrb.w	r4, [r7, #116]	; 0x74
 800b144:	627c      	str	r4, [r7, #36]	; 0x24
 800b146:	f897 5078 	ldrb.w	r5, [r7, #120]	; 0x78
 800b14a:	623d      	str	r5, [r7, #32]
 800b14c:	f897 c07c 	ldrb.w	ip, [r7, #124]	; 0x7c
 800b150:	4663      	mov	r3, ip
 800b152:	61fb      	str	r3, [r7, #28]
 800b154:	f897 c080 	ldrb.w	ip, [r7, #128]	; 0x80
 800b158:	4662      	mov	r2, ip
 800b15a:	61ba      	str	r2, [r7, #24]
 800b15c:	f897 c084 	ldrb.w	ip, [r7, #132]	; 0x84
 800b160:	4661      	mov	r1, ip
 800b162:	6179      	str	r1, [r7, #20]
 800b164:	f897 c088 	ldrb.w	ip, [r7, #136]	; 0x88
 800b168:	4660      	mov	r0, ip
 800b16a:	6138      	str	r0, [r7, #16]
 800b16c:	f897 c08c 	ldrb.w	ip, [r7, #140]	; 0x8c
 800b170:	4664      	mov	r4, ip
 800b172:	60fc      	str	r4, [r7, #12]
 800b174:	f897 c090 	ldrb.w	ip, [r7, #144]	; 0x90
 800b178:	4665      	mov	r5, ip
 800b17a:	60bd      	str	r5, [r7, #8]
 800b17c:	f897 c094 	ldrb.w	ip, [r7, #148]	; 0x94
 800b180:	4663      	mov	r3, ip
 800b182:	607b      	str	r3, [r7, #4]
 800b184:	f897 5098 	ldrb.w	r5, [r7, #152]	; 0x98
 800b188:	f897 409c 	ldrb.w	r4, [r7, #156]	; 0x9c
 800b18c:	f897 00a0 	ldrb.w	r0, [r7, #160]	; 0xa0
 800b190:	f897 10a4 	ldrb.w	r1, [r7, #164]	; 0xa4
 800b194:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 800b198:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800b19c:	9315      	str	r3, [sp, #84]	; 0x54
 800b19e:	9214      	str	r2, [sp, #80]	; 0x50
 800b1a0:	9113      	str	r1, [sp, #76]	; 0x4c
 800b1a2:	9012      	str	r0, [sp, #72]	; 0x48
 800b1a4:	9411      	str	r4, [sp, #68]	; 0x44
 800b1a6:	9510      	str	r5, [sp, #64]	; 0x40
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1ac:	68bd      	ldr	r5, [r7, #8]
 800b1ae:	950e      	str	r5, [sp, #56]	; 0x38
 800b1b0:	68fc      	ldr	r4, [r7, #12]
 800b1b2:	940d      	str	r4, [sp, #52]	; 0x34
 800b1b4:	6938      	ldr	r0, [r7, #16]
 800b1b6:	900c      	str	r0, [sp, #48]	; 0x30
 800b1b8:	6979      	ldr	r1, [r7, #20]
 800b1ba:	910b      	str	r1, [sp, #44]	; 0x2c
 800b1bc:	69ba      	ldr	r2, [r7, #24]
 800b1be:	920a      	str	r2, [sp, #40]	; 0x28
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c4:	6a3d      	ldr	r5, [r7, #32]
 800b1c6:	9508      	str	r5, [sp, #32]
 800b1c8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b1ca:	9407      	str	r4, [sp, #28]
 800b1cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ce:	9006      	str	r0, [sp, #24]
 800b1d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1d2:	9105      	str	r1, [sp, #20]
 800b1d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1d6:	9204      	str	r2, [sp, #16]
 800b1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1da:	9303      	str	r3, [sp, #12]
 800b1dc:	9602      	str	r6, [sp, #8]
 800b1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e0:	9301      	str	r3, [sp, #4]
 800b1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b1ee:	4807      	ldr	r0, [pc, #28]	; (800b20c <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0xfc>)
 800b1f0:	f001 f82c 	bl	800c24c <sniprintf>
                print(mBuffer);
 800b1f4:	4805      	ldr	r0, [pc, #20]	; (800b20c <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0xfc>)
 800b1f6:	f7f6 f8e1 	bl	80013bc <_ZN4blib6Logger5printEPKc>
                print("\n");
 800b1fa:	4805      	ldr	r0, [pc, #20]	; (800b210 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0x100>)
 800b1fc:	f7f6 f8de 	bl	80013bc <_ZN4blib6Logger5printEPKc>
            }
 800b200:	bf00      	nop
 800b202:	374c      	adds	r7, #76	; 0x4c
 800b204:	46bd      	mov	sp, r7
 800b206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b208:	0800eef8 	.word	0x0800eef8
 800b20c:	2000042c 	.word	0x2000042c
 800b210:	0800ef00 	.word	0x0800ef00

0800b214 <_ZdlPvj>:
 800b214:	f000 b820 	b.w	800b258 <_ZdlPv>

0800b218 <__cxa_guard_acquire>:
 800b218:	6803      	ldr	r3, [r0, #0]
 800b21a:	07db      	lsls	r3, r3, #31
 800b21c:	d406      	bmi.n	800b22c <__cxa_guard_acquire+0x14>
 800b21e:	7843      	ldrb	r3, [r0, #1]
 800b220:	b103      	cbz	r3, 800b224 <__cxa_guard_acquire+0xc>
 800b222:	deff      	udf	#255	; 0xff
 800b224:	2301      	movs	r3, #1
 800b226:	7043      	strb	r3, [r0, #1]
 800b228:	4618      	mov	r0, r3
 800b22a:	4770      	bx	lr
 800b22c:	2000      	movs	r0, #0
 800b22e:	4770      	bx	lr

0800b230 <__cxa_guard_release>:
 800b230:	2301      	movs	r3, #1
 800b232:	6003      	str	r3, [r0, #0]
 800b234:	4770      	bx	lr

0800b236 <_Znwj>:
 800b236:	2801      	cmp	r0, #1
 800b238:	bf38      	it	cc
 800b23a:	2001      	movcc	r0, #1
 800b23c:	b510      	push	{r4, lr}
 800b23e:	4604      	mov	r4, r0
 800b240:	4620      	mov	r0, r4
 800b242:	f000 fa1f 	bl	800b684 <malloc>
 800b246:	b100      	cbz	r0, 800b24a <_Znwj+0x14>
 800b248:	bd10      	pop	{r4, pc}
 800b24a:	f000 f807 	bl	800b25c <_ZSt15get_new_handlerv>
 800b24e:	b908      	cbnz	r0, 800b254 <_Znwj+0x1e>
 800b250:	f000 fa10 	bl	800b674 <abort>
 800b254:	4780      	blx	r0
 800b256:	e7f3      	b.n	800b240 <_Znwj+0xa>

0800b258 <_ZdlPv>:
 800b258:	f000 ba1c 	b.w	800b694 <free>

0800b25c <_ZSt15get_new_handlerv>:
 800b25c:	4b02      	ldr	r3, [pc, #8]	; (800b268 <_ZSt15get_new_handlerv+0xc>)
 800b25e:	6818      	ldr	r0, [r3, #0]
 800b260:	f3bf 8f5b 	dmb	ish
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	2000082c 	.word	0x2000082c
 800b26c:	00000000 	.word	0x00000000

0800b270 <log>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	ed2d 8b02 	vpush	{d8}
 800b276:	ec55 4b10 	vmov	r4, r5, d0
 800b27a:	f000 f841 	bl	800b300 <__ieee754_log>
 800b27e:	4622      	mov	r2, r4
 800b280:	462b      	mov	r3, r5
 800b282:	4620      	mov	r0, r4
 800b284:	4629      	mov	r1, r5
 800b286:	eeb0 8a40 	vmov.f32	s16, s0
 800b28a:	eef0 8a60 	vmov.f32	s17, s1
 800b28e:	f7f5 fc55 	bl	8000b3c <__aeabi_dcmpun>
 800b292:	b998      	cbnz	r0, 800b2bc <log+0x4c>
 800b294:	2200      	movs	r2, #0
 800b296:	2300      	movs	r3, #0
 800b298:	4620      	mov	r0, r4
 800b29a:	4629      	mov	r1, r5
 800b29c:	f7f5 fc44 	bl	8000b28 <__aeabi_dcmpgt>
 800b2a0:	b960      	cbnz	r0, 800b2bc <log+0x4c>
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	f7f5 fc15 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2ae:	b160      	cbz	r0, 800b2ca <log+0x5a>
 800b2b0:	f001 f8ea 	bl	800c488 <__errno>
 800b2b4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800b2e0 <log+0x70>
 800b2b8:	2322      	movs	r3, #34	; 0x22
 800b2ba:	6003      	str	r3, [r0, #0]
 800b2bc:	eeb0 0a48 	vmov.f32	s0, s16
 800b2c0:	eef0 0a68 	vmov.f32	s1, s17
 800b2c4:	ecbd 8b02 	vpop	{d8}
 800b2c8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ca:	f001 f8dd 	bl	800c488 <__errno>
 800b2ce:	ecbd 8b02 	vpop	{d8}
 800b2d2:	2321      	movs	r3, #33	; 0x21
 800b2d4:	6003      	str	r3, [r0, #0]
 800b2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2da:	4803      	ldr	r0, [pc, #12]	; (800b2e8 <log+0x78>)
 800b2dc:	f000 b808 	b.w	800b2f0 <nan>
 800b2e0:	00000000 	.word	0x00000000
 800b2e4:	fff00000 	.word	0xfff00000
 800b2e8:	0800f29a 	.word	0x0800f29a
 800b2ec:	00000000 	.word	0x00000000

0800b2f0 <nan>:
 800b2f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b2f8 <nan+0x8>
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	00000000 	.word	0x00000000
 800b2fc:	7ff80000 	.word	0x7ff80000

0800b300 <__ieee754_log>:
 800b300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b304:	ec51 0b10 	vmov	r0, r1, d0
 800b308:	ed2d 8b04 	vpush	{d8-d9}
 800b30c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b310:	b083      	sub	sp, #12
 800b312:	460d      	mov	r5, r1
 800b314:	da29      	bge.n	800b36a <__ieee754_log+0x6a>
 800b316:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b31a:	4303      	orrs	r3, r0
 800b31c:	ee10 2a10 	vmov	r2, s0
 800b320:	d10c      	bne.n	800b33c <__ieee754_log+0x3c>
 800b322:	49cf      	ldr	r1, [pc, #828]	; (800b660 <__ieee754_log+0x360>)
 800b324:	2200      	movs	r2, #0
 800b326:	2300      	movs	r3, #0
 800b328:	2000      	movs	r0, #0
 800b32a:	f7f5 fa97 	bl	800085c <__aeabi_ddiv>
 800b32e:	ec41 0b10 	vmov	d0, r0, r1
 800b332:	b003      	add	sp, #12
 800b334:	ecbd 8b04 	vpop	{d8-d9}
 800b338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33c:	2900      	cmp	r1, #0
 800b33e:	da05      	bge.n	800b34c <__ieee754_log+0x4c>
 800b340:	460b      	mov	r3, r1
 800b342:	f7f4 ffa9 	bl	8000298 <__aeabi_dsub>
 800b346:	2200      	movs	r2, #0
 800b348:	2300      	movs	r3, #0
 800b34a:	e7ee      	b.n	800b32a <__ieee754_log+0x2a>
 800b34c:	4bc5      	ldr	r3, [pc, #788]	; (800b664 <__ieee754_log+0x364>)
 800b34e:	2200      	movs	r2, #0
 800b350:	f7f5 f95a 	bl	8000608 <__aeabi_dmul>
 800b354:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b358:	460d      	mov	r5, r1
 800b35a:	4ac3      	ldr	r2, [pc, #780]	; (800b668 <__ieee754_log+0x368>)
 800b35c:	4295      	cmp	r5, r2
 800b35e:	dd06      	ble.n	800b36e <__ieee754_log+0x6e>
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	f7f4 ff9a 	bl	800029c <__adddf3>
 800b368:	e7e1      	b.n	800b32e <__ieee754_log+0x2e>
 800b36a:	2300      	movs	r3, #0
 800b36c:	e7f5      	b.n	800b35a <__ieee754_log+0x5a>
 800b36e:	152c      	asrs	r4, r5, #20
 800b370:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b374:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b378:	441c      	add	r4, r3
 800b37a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b37e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b386:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b38a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b38e:	ea42 0105 	orr.w	r1, r2, r5
 800b392:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b396:	2200      	movs	r2, #0
 800b398:	4bb4      	ldr	r3, [pc, #720]	; (800b66c <__ieee754_log+0x36c>)
 800b39a:	f7f4 ff7d 	bl	8000298 <__aeabi_dsub>
 800b39e:	1cab      	adds	r3, r5, #2
 800b3a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	4682      	mov	sl, r0
 800b3a8:	468b      	mov	fp, r1
 800b3aa:	f04f 0200 	mov.w	r2, #0
 800b3ae:	dc53      	bgt.n	800b458 <__ieee754_log+0x158>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	f7f5 fb91 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3b6:	b1d0      	cbz	r0, 800b3ee <__ieee754_log+0xee>
 800b3b8:	2c00      	cmp	r4, #0
 800b3ba:	f000 8122 	beq.w	800b602 <__ieee754_log+0x302>
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f7f5 f8b8 	bl	8000534 <__aeabi_i2d>
 800b3c4:	a390      	add	r3, pc, #576	; (adr r3, 800b608 <__ieee754_log+0x308>)
 800b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	460f      	mov	r7, r1
 800b3ce:	f7f5 f91b 	bl	8000608 <__aeabi_dmul>
 800b3d2:	a38f      	add	r3, pc, #572	; (adr r3, 800b610 <__ieee754_log+0x310>)
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	4604      	mov	r4, r0
 800b3da:	460d      	mov	r5, r1
 800b3dc:	4630      	mov	r0, r6
 800b3de:	4639      	mov	r1, r7
 800b3e0:	f7f5 f912 	bl	8000608 <__aeabi_dmul>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	e7ba      	b.n	800b364 <__ieee754_log+0x64>
 800b3ee:	a38a      	add	r3, pc, #552	; (adr r3, 800b618 <__ieee754_log+0x318>)
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	4650      	mov	r0, sl
 800b3f6:	4659      	mov	r1, fp
 800b3f8:	f7f5 f906 	bl	8000608 <__aeabi_dmul>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	2000      	movs	r0, #0
 800b402:	499b      	ldr	r1, [pc, #620]	; (800b670 <__ieee754_log+0x370>)
 800b404:	f7f4 ff48 	bl	8000298 <__aeabi_dsub>
 800b408:	4652      	mov	r2, sl
 800b40a:	4606      	mov	r6, r0
 800b40c:	460f      	mov	r7, r1
 800b40e:	465b      	mov	r3, fp
 800b410:	4650      	mov	r0, sl
 800b412:	4659      	mov	r1, fp
 800b414:	f7f5 f8f8 	bl	8000608 <__aeabi_dmul>
 800b418:	4602      	mov	r2, r0
 800b41a:	460b      	mov	r3, r1
 800b41c:	4630      	mov	r0, r6
 800b41e:	4639      	mov	r1, r7
 800b420:	f7f5 f8f2 	bl	8000608 <__aeabi_dmul>
 800b424:	4606      	mov	r6, r0
 800b426:	460f      	mov	r7, r1
 800b428:	b914      	cbnz	r4, 800b430 <__ieee754_log+0x130>
 800b42a:	4632      	mov	r2, r6
 800b42c:	463b      	mov	r3, r7
 800b42e:	e0a2      	b.n	800b576 <__ieee754_log+0x276>
 800b430:	4620      	mov	r0, r4
 800b432:	f7f5 f87f 	bl	8000534 <__aeabi_i2d>
 800b436:	a374      	add	r3, pc, #464	; (adr r3, 800b608 <__ieee754_log+0x308>)
 800b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43c:	4680      	mov	r8, r0
 800b43e:	4689      	mov	r9, r1
 800b440:	f7f5 f8e2 	bl	8000608 <__aeabi_dmul>
 800b444:	a372      	add	r3, pc, #456	; (adr r3, 800b610 <__ieee754_log+0x310>)
 800b446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44a:	4604      	mov	r4, r0
 800b44c:	460d      	mov	r5, r1
 800b44e:	4640      	mov	r0, r8
 800b450:	4649      	mov	r1, r9
 800b452:	f7f5 f8d9 	bl	8000608 <__aeabi_dmul>
 800b456:	e0a7      	b.n	800b5a8 <__ieee754_log+0x2a8>
 800b458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b45c:	f7f4 ff1e 	bl	800029c <__adddf3>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4650      	mov	r0, sl
 800b466:	4659      	mov	r1, fp
 800b468:	f7f5 f9f8 	bl	800085c <__aeabi_ddiv>
 800b46c:	ec41 0b18 	vmov	d8, r0, r1
 800b470:	4620      	mov	r0, r4
 800b472:	f7f5 f85f 	bl	8000534 <__aeabi_i2d>
 800b476:	ec53 2b18 	vmov	r2, r3, d8
 800b47a:	ec41 0b19 	vmov	d9, r0, r1
 800b47e:	ec51 0b18 	vmov	r0, r1, d8
 800b482:	f7f5 f8c1 	bl	8000608 <__aeabi_dmul>
 800b486:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b48a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b48e:	9301      	str	r3, [sp, #4]
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	4680      	mov	r8, r0
 800b496:	4689      	mov	r9, r1
 800b498:	f7f5 f8b6 	bl	8000608 <__aeabi_dmul>
 800b49c:	a360      	add	r3, pc, #384	; (adr r3, 800b620 <__ieee754_log+0x320>)
 800b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	460f      	mov	r7, r1
 800b4a6:	f7f5 f8af 	bl	8000608 <__aeabi_dmul>
 800b4aa:	a35f      	add	r3, pc, #380	; (adr r3, 800b628 <__ieee754_log+0x328>)
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	f7f4 fef4 	bl	800029c <__adddf3>
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	f7f5 f8a6 	bl	8000608 <__aeabi_dmul>
 800b4bc:	a35c      	add	r3, pc, #368	; (adr r3, 800b630 <__ieee754_log+0x330>)
 800b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c2:	f7f4 feeb 	bl	800029c <__adddf3>
 800b4c6:	4632      	mov	r2, r6
 800b4c8:	463b      	mov	r3, r7
 800b4ca:	f7f5 f89d 	bl	8000608 <__aeabi_dmul>
 800b4ce:	a35a      	add	r3, pc, #360	; (adr r3, 800b638 <__ieee754_log+0x338>)
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f7f4 fee2 	bl	800029c <__adddf3>
 800b4d8:	4642      	mov	r2, r8
 800b4da:	464b      	mov	r3, r9
 800b4dc:	f7f5 f894 	bl	8000608 <__aeabi_dmul>
 800b4e0:	a357      	add	r3, pc, #348	; (adr r3, 800b640 <__ieee754_log+0x340>)
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	4680      	mov	r8, r0
 800b4e8:	4689      	mov	r9, r1
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	4639      	mov	r1, r7
 800b4ee:	f7f5 f88b 	bl	8000608 <__aeabi_dmul>
 800b4f2:	a355      	add	r3, pc, #340	; (adr r3, 800b648 <__ieee754_log+0x348>)
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	f7f4 fed0 	bl	800029c <__adddf3>
 800b4fc:	4632      	mov	r2, r6
 800b4fe:	463b      	mov	r3, r7
 800b500:	f7f5 f882 	bl	8000608 <__aeabi_dmul>
 800b504:	a352      	add	r3, pc, #328	; (adr r3, 800b650 <__ieee754_log+0x350>)
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	f7f4 fec7 	bl	800029c <__adddf3>
 800b50e:	4632      	mov	r2, r6
 800b510:	463b      	mov	r3, r7
 800b512:	f7f5 f879 	bl	8000608 <__aeabi_dmul>
 800b516:	460b      	mov	r3, r1
 800b518:	4602      	mov	r2, r0
 800b51a:	4649      	mov	r1, r9
 800b51c:	4640      	mov	r0, r8
 800b51e:	f7f4 febd 	bl	800029c <__adddf3>
 800b522:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b526:	9b01      	ldr	r3, [sp, #4]
 800b528:	3551      	adds	r5, #81	; 0x51
 800b52a:	431d      	orrs	r5, r3
 800b52c:	2d00      	cmp	r5, #0
 800b52e:	4680      	mov	r8, r0
 800b530:	4689      	mov	r9, r1
 800b532:	dd48      	ble.n	800b5c6 <__ieee754_log+0x2c6>
 800b534:	4b4e      	ldr	r3, [pc, #312]	; (800b670 <__ieee754_log+0x370>)
 800b536:	2200      	movs	r2, #0
 800b538:	4650      	mov	r0, sl
 800b53a:	4659      	mov	r1, fp
 800b53c:	f7f5 f864 	bl	8000608 <__aeabi_dmul>
 800b540:	4652      	mov	r2, sl
 800b542:	465b      	mov	r3, fp
 800b544:	f7f5 f860 	bl	8000608 <__aeabi_dmul>
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	4606      	mov	r6, r0
 800b54e:	460f      	mov	r7, r1
 800b550:	4640      	mov	r0, r8
 800b552:	4649      	mov	r1, r9
 800b554:	f7f4 fea2 	bl	800029c <__adddf3>
 800b558:	ec53 2b18 	vmov	r2, r3, d8
 800b55c:	f7f5 f854 	bl	8000608 <__aeabi_dmul>
 800b560:	4680      	mov	r8, r0
 800b562:	4689      	mov	r9, r1
 800b564:	b964      	cbnz	r4, 800b580 <__ieee754_log+0x280>
 800b566:	4602      	mov	r2, r0
 800b568:	460b      	mov	r3, r1
 800b56a:	4630      	mov	r0, r6
 800b56c:	4639      	mov	r1, r7
 800b56e:	f7f4 fe93 	bl	8000298 <__aeabi_dsub>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	4650      	mov	r0, sl
 800b578:	4659      	mov	r1, fp
 800b57a:	f7f4 fe8d 	bl	8000298 <__aeabi_dsub>
 800b57e:	e6d6      	b.n	800b32e <__ieee754_log+0x2e>
 800b580:	a321      	add	r3, pc, #132	; (adr r3, 800b608 <__ieee754_log+0x308>)
 800b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b586:	ec51 0b19 	vmov	r0, r1, d9
 800b58a:	f7f5 f83d 	bl	8000608 <__aeabi_dmul>
 800b58e:	a320      	add	r3, pc, #128	; (adr r3, 800b610 <__ieee754_log+0x310>)
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	4604      	mov	r4, r0
 800b596:	460d      	mov	r5, r1
 800b598:	ec51 0b19 	vmov	r0, r1, d9
 800b59c:	f7f5 f834 	bl	8000608 <__aeabi_dmul>
 800b5a0:	4642      	mov	r2, r8
 800b5a2:	464b      	mov	r3, r9
 800b5a4:	f7f4 fe7a 	bl	800029c <__adddf3>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	4639      	mov	r1, r7
 800b5b0:	f7f4 fe72 	bl	8000298 <__aeabi_dsub>
 800b5b4:	4652      	mov	r2, sl
 800b5b6:	465b      	mov	r3, fp
 800b5b8:	f7f4 fe6e 	bl	8000298 <__aeabi_dsub>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	460b      	mov	r3, r1
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	e7d9      	b.n	800b57a <__ieee754_log+0x27a>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	4659      	mov	r1, fp
 800b5ce:	f7f4 fe63 	bl	8000298 <__aeabi_dsub>
 800b5d2:	ec53 2b18 	vmov	r2, r3, d8
 800b5d6:	f7f5 f817 	bl	8000608 <__aeabi_dmul>
 800b5da:	4606      	mov	r6, r0
 800b5dc:	460f      	mov	r7, r1
 800b5de:	2c00      	cmp	r4, #0
 800b5e0:	f43f af23 	beq.w	800b42a <__ieee754_log+0x12a>
 800b5e4:	a308      	add	r3, pc, #32	; (adr r3, 800b608 <__ieee754_log+0x308>)
 800b5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ea:	ec51 0b19 	vmov	r0, r1, d9
 800b5ee:	f7f5 f80b 	bl	8000608 <__aeabi_dmul>
 800b5f2:	a307      	add	r3, pc, #28	; (adr r3, 800b610 <__ieee754_log+0x310>)
 800b5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	460d      	mov	r5, r1
 800b5fc:	ec51 0b19 	vmov	r0, r1, d9
 800b600:	e727      	b.n	800b452 <__ieee754_log+0x152>
 800b602:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b658 <__ieee754_log+0x358>
 800b606:	e694      	b.n	800b332 <__ieee754_log+0x32>
 800b608:	fee00000 	.word	0xfee00000
 800b60c:	3fe62e42 	.word	0x3fe62e42
 800b610:	35793c76 	.word	0x35793c76
 800b614:	3dea39ef 	.word	0x3dea39ef
 800b618:	55555555 	.word	0x55555555
 800b61c:	3fd55555 	.word	0x3fd55555
 800b620:	df3e5244 	.word	0xdf3e5244
 800b624:	3fc2f112 	.word	0x3fc2f112
 800b628:	96cb03de 	.word	0x96cb03de
 800b62c:	3fc74664 	.word	0x3fc74664
 800b630:	94229359 	.word	0x94229359
 800b634:	3fd24924 	.word	0x3fd24924
 800b638:	55555593 	.word	0x55555593
 800b63c:	3fe55555 	.word	0x3fe55555
 800b640:	d078c69f 	.word	0xd078c69f
 800b644:	3fc39a09 	.word	0x3fc39a09
 800b648:	1d8e78af 	.word	0x1d8e78af
 800b64c:	3fcc71c5 	.word	0x3fcc71c5
 800b650:	9997fa04 	.word	0x9997fa04
 800b654:	3fd99999 	.word	0x3fd99999
	...
 800b660:	c3500000 	.word	0xc3500000
 800b664:	43500000 	.word	0x43500000
 800b668:	7fefffff 	.word	0x7fefffff
 800b66c:	3ff00000 	.word	0x3ff00000
 800b670:	3fe00000 	.word	0x3fe00000

0800b674 <abort>:
 800b674:	b508      	push	{r3, lr}
 800b676:	2006      	movs	r0, #6
 800b678:	f000 fe90 	bl	800c39c <raise>
 800b67c:	2001      	movs	r0, #1
 800b67e:	f7f9 fb21 	bl	8004cc4 <_exit>
	...

0800b684 <malloc>:
 800b684:	4b02      	ldr	r3, [pc, #8]	; (800b690 <malloc+0xc>)
 800b686:	4601      	mov	r1, r0
 800b688:	6818      	ldr	r0, [r3, #0]
 800b68a:	f000 b82b 	b.w	800b6e4 <_malloc_r>
 800b68e:	bf00      	nop
 800b690:	20000074 	.word	0x20000074

0800b694 <free>:
 800b694:	4b02      	ldr	r3, [pc, #8]	; (800b6a0 <free+0xc>)
 800b696:	4601      	mov	r1, r0
 800b698:	6818      	ldr	r0, [r3, #0]
 800b69a:	f001 bdab 	b.w	800d1f4 <_free_r>
 800b69e:	bf00      	nop
 800b6a0:	20000074 	.word	0x20000074

0800b6a4 <sbrk_aligned>:
 800b6a4:	b570      	push	{r4, r5, r6, lr}
 800b6a6:	4e0e      	ldr	r6, [pc, #56]	; (800b6e0 <sbrk_aligned+0x3c>)
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	6831      	ldr	r1, [r6, #0]
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	b911      	cbnz	r1, 800b6b6 <sbrk_aligned+0x12>
 800b6b0:	f000 fec8 	bl	800c444 <_sbrk_r>
 800b6b4:	6030      	str	r0, [r6, #0]
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f000 fec3 	bl	800c444 <_sbrk_r>
 800b6be:	1c43      	adds	r3, r0, #1
 800b6c0:	d00a      	beq.n	800b6d8 <sbrk_aligned+0x34>
 800b6c2:	1cc4      	adds	r4, r0, #3
 800b6c4:	f024 0403 	bic.w	r4, r4, #3
 800b6c8:	42a0      	cmp	r0, r4
 800b6ca:	d007      	beq.n	800b6dc <sbrk_aligned+0x38>
 800b6cc:	1a21      	subs	r1, r4, r0
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f000 feb8 	bl	800c444 <_sbrk_r>
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	d101      	bne.n	800b6dc <sbrk_aligned+0x38>
 800b6d8:	f04f 34ff 	mov.w	r4, #4294967295
 800b6dc:	4620      	mov	r0, r4
 800b6de:	bd70      	pop	{r4, r5, r6, pc}
 800b6e0:	20000834 	.word	0x20000834

0800b6e4 <_malloc_r>:
 800b6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6e8:	1ccd      	adds	r5, r1, #3
 800b6ea:	f025 0503 	bic.w	r5, r5, #3
 800b6ee:	3508      	adds	r5, #8
 800b6f0:	2d0c      	cmp	r5, #12
 800b6f2:	bf38      	it	cc
 800b6f4:	250c      	movcc	r5, #12
 800b6f6:	2d00      	cmp	r5, #0
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	db01      	blt.n	800b700 <_malloc_r+0x1c>
 800b6fc:	42a9      	cmp	r1, r5
 800b6fe:	d905      	bls.n	800b70c <_malloc_r+0x28>
 800b700:	230c      	movs	r3, #12
 800b702:	603b      	str	r3, [r7, #0]
 800b704:	2600      	movs	r6, #0
 800b706:	4630      	mov	r0, r6
 800b708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b70c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b7e0 <_malloc_r+0xfc>
 800b710:	f000 f868 	bl	800b7e4 <__malloc_lock>
 800b714:	f8d8 3000 	ldr.w	r3, [r8]
 800b718:	461c      	mov	r4, r3
 800b71a:	bb5c      	cbnz	r4, 800b774 <_malloc_r+0x90>
 800b71c:	4629      	mov	r1, r5
 800b71e:	4638      	mov	r0, r7
 800b720:	f7ff ffc0 	bl	800b6a4 <sbrk_aligned>
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	4604      	mov	r4, r0
 800b728:	d155      	bne.n	800b7d6 <_malloc_r+0xf2>
 800b72a:	f8d8 4000 	ldr.w	r4, [r8]
 800b72e:	4626      	mov	r6, r4
 800b730:	2e00      	cmp	r6, #0
 800b732:	d145      	bne.n	800b7c0 <_malloc_r+0xdc>
 800b734:	2c00      	cmp	r4, #0
 800b736:	d048      	beq.n	800b7ca <_malloc_r+0xe6>
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	4631      	mov	r1, r6
 800b73c:	4638      	mov	r0, r7
 800b73e:	eb04 0903 	add.w	r9, r4, r3
 800b742:	f000 fe7f 	bl	800c444 <_sbrk_r>
 800b746:	4581      	cmp	r9, r0
 800b748:	d13f      	bne.n	800b7ca <_malloc_r+0xe6>
 800b74a:	6821      	ldr	r1, [r4, #0]
 800b74c:	1a6d      	subs	r5, r5, r1
 800b74e:	4629      	mov	r1, r5
 800b750:	4638      	mov	r0, r7
 800b752:	f7ff ffa7 	bl	800b6a4 <sbrk_aligned>
 800b756:	3001      	adds	r0, #1
 800b758:	d037      	beq.n	800b7ca <_malloc_r+0xe6>
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	442b      	add	r3, r5
 800b75e:	6023      	str	r3, [r4, #0]
 800b760:	f8d8 3000 	ldr.w	r3, [r8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d038      	beq.n	800b7da <_malloc_r+0xf6>
 800b768:	685a      	ldr	r2, [r3, #4]
 800b76a:	42a2      	cmp	r2, r4
 800b76c:	d12b      	bne.n	800b7c6 <_malloc_r+0xe2>
 800b76e:	2200      	movs	r2, #0
 800b770:	605a      	str	r2, [r3, #4]
 800b772:	e00f      	b.n	800b794 <_malloc_r+0xb0>
 800b774:	6822      	ldr	r2, [r4, #0]
 800b776:	1b52      	subs	r2, r2, r5
 800b778:	d41f      	bmi.n	800b7ba <_malloc_r+0xd6>
 800b77a:	2a0b      	cmp	r2, #11
 800b77c:	d917      	bls.n	800b7ae <_malloc_r+0xca>
 800b77e:	1961      	adds	r1, r4, r5
 800b780:	42a3      	cmp	r3, r4
 800b782:	6025      	str	r5, [r4, #0]
 800b784:	bf18      	it	ne
 800b786:	6059      	strne	r1, [r3, #4]
 800b788:	6863      	ldr	r3, [r4, #4]
 800b78a:	bf08      	it	eq
 800b78c:	f8c8 1000 	streq.w	r1, [r8]
 800b790:	5162      	str	r2, [r4, r5]
 800b792:	604b      	str	r3, [r1, #4]
 800b794:	4638      	mov	r0, r7
 800b796:	f104 060b 	add.w	r6, r4, #11
 800b79a:	f000 f829 	bl	800b7f0 <__malloc_unlock>
 800b79e:	f026 0607 	bic.w	r6, r6, #7
 800b7a2:	1d23      	adds	r3, r4, #4
 800b7a4:	1af2      	subs	r2, r6, r3
 800b7a6:	d0ae      	beq.n	800b706 <_malloc_r+0x22>
 800b7a8:	1b9b      	subs	r3, r3, r6
 800b7aa:	50a3      	str	r3, [r4, r2]
 800b7ac:	e7ab      	b.n	800b706 <_malloc_r+0x22>
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	6862      	ldr	r2, [r4, #4]
 800b7b2:	d1dd      	bne.n	800b770 <_malloc_r+0x8c>
 800b7b4:	f8c8 2000 	str.w	r2, [r8]
 800b7b8:	e7ec      	b.n	800b794 <_malloc_r+0xb0>
 800b7ba:	4623      	mov	r3, r4
 800b7bc:	6864      	ldr	r4, [r4, #4]
 800b7be:	e7ac      	b.n	800b71a <_malloc_r+0x36>
 800b7c0:	4634      	mov	r4, r6
 800b7c2:	6876      	ldr	r6, [r6, #4]
 800b7c4:	e7b4      	b.n	800b730 <_malloc_r+0x4c>
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	e7cc      	b.n	800b764 <_malloc_r+0x80>
 800b7ca:	230c      	movs	r3, #12
 800b7cc:	603b      	str	r3, [r7, #0]
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	f000 f80e 	bl	800b7f0 <__malloc_unlock>
 800b7d4:	e797      	b.n	800b706 <_malloc_r+0x22>
 800b7d6:	6025      	str	r5, [r4, #0]
 800b7d8:	e7dc      	b.n	800b794 <_malloc_r+0xb0>
 800b7da:	605b      	str	r3, [r3, #4]
 800b7dc:	deff      	udf	#255	; 0xff
 800b7de:	bf00      	nop
 800b7e0:	20000830 	.word	0x20000830

0800b7e4 <__malloc_lock>:
 800b7e4:	4801      	ldr	r0, [pc, #4]	; (800b7ec <__malloc_lock+0x8>)
 800b7e6:	f000 be7a 	b.w	800c4de <__retarget_lock_acquire_recursive>
 800b7ea:	bf00      	nop
 800b7ec:	20000978 	.word	0x20000978

0800b7f0 <__malloc_unlock>:
 800b7f0:	4801      	ldr	r0, [pc, #4]	; (800b7f8 <__malloc_unlock+0x8>)
 800b7f2:	f000 be75 	b.w	800c4e0 <__retarget_lock_release_recursive>
 800b7f6:	bf00      	nop
 800b7f8:	20000978 	.word	0x20000978

0800b7fc <__cvt>:
 800b7fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b800:	ec55 4b10 	vmov	r4, r5, d0
 800b804:	2d00      	cmp	r5, #0
 800b806:	460e      	mov	r6, r1
 800b808:	4619      	mov	r1, r3
 800b80a:	462b      	mov	r3, r5
 800b80c:	bfbb      	ittet	lt
 800b80e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b812:	461d      	movlt	r5, r3
 800b814:	2300      	movge	r3, #0
 800b816:	232d      	movlt	r3, #45	; 0x2d
 800b818:	700b      	strb	r3, [r1, #0]
 800b81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b81c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b820:	4691      	mov	r9, r2
 800b822:	f023 0820 	bic.w	r8, r3, #32
 800b826:	bfbc      	itt	lt
 800b828:	4622      	movlt	r2, r4
 800b82a:	4614      	movlt	r4, r2
 800b82c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b830:	d005      	beq.n	800b83e <__cvt+0x42>
 800b832:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b836:	d100      	bne.n	800b83a <__cvt+0x3e>
 800b838:	3601      	adds	r6, #1
 800b83a:	2102      	movs	r1, #2
 800b83c:	e000      	b.n	800b840 <__cvt+0x44>
 800b83e:	2103      	movs	r1, #3
 800b840:	ab03      	add	r3, sp, #12
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	ab02      	add	r3, sp, #8
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	ec45 4b10 	vmov	d0, r4, r5
 800b84c:	4653      	mov	r3, sl
 800b84e:	4632      	mov	r2, r6
 800b850:	f000 fede 	bl	800c610 <_dtoa_r>
 800b854:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b858:	4607      	mov	r7, r0
 800b85a:	d102      	bne.n	800b862 <__cvt+0x66>
 800b85c:	f019 0f01 	tst.w	r9, #1
 800b860:	d022      	beq.n	800b8a8 <__cvt+0xac>
 800b862:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b866:	eb07 0906 	add.w	r9, r7, r6
 800b86a:	d110      	bne.n	800b88e <__cvt+0x92>
 800b86c:	783b      	ldrb	r3, [r7, #0]
 800b86e:	2b30      	cmp	r3, #48	; 0x30
 800b870:	d10a      	bne.n	800b888 <__cvt+0x8c>
 800b872:	2200      	movs	r2, #0
 800b874:	2300      	movs	r3, #0
 800b876:	4620      	mov	r0, r4
 800b878:	4629      	mov	r1, r5
 800b87a:	f7f5 f92d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b87e:	b918      	cbnz	r0, 800b888 <__cvt+0x8c>
 800b880:	f1c6 0601 	rsb	r6, r6, #1
 800b884:	f8ca 6000 	str.w	r6, [sl]
 800b888:	f8da 3000 	ldr.w	r3, [sl]
 800b88c:	4499      	add	r9, r3
 800b88e:	2200      	movs	r2, #0
 800b890:	2300      	movs	r3, #0
 800b892:	4620      	mov	r0, r4
 800b894:	4629      	mov	r1, r5
 800b896:	f7f5 f91f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b89a:	b108      	cbz	r0, 800b8a0 <__cvt+0xa4>
 800b89c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b8a0:	2230      	movs	r2, #48	; 0x30
 800b8a2:	9b03      	ldr	r3, [sp, #12]
 800b8a4:	454b      	cmp	r3, r9
 800b8a6:	d307      	bcc.n	800b8b8 <__cvt+0xbc>
 800b8a8:	9b03      	ldr	r3, [sp, #12]
 800b8aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8ac:	1bdb      	subs	r3, r3, r7
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	6013      	str	r3, [r2, #0]
 800b8b2:	b004      	add	sp, #16
 800b8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b8:	1c59      	adds	r1, r3, #1
 800b8ba:	9103      	str	r1, [sp, #12]
 800b8bc:	701a      	strb	r2, [r3, #0]
 800b8be:	e7f0      	b.n	800b8a2 <__cvt+0xa6>

0800b8c0 <__exponent>:
 800b8c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2900      	cmp	r1, #0
 800b8c6:	bfb8      	it	lt
 800b8c8:	4249      	neglt	r1, r1
 800b8ca:	f803 2b02 	strb.w	r2, [r3], #2
 800b8ce:	bfb4      	ite	lt
 800b8d0:	222d      	movlt	r2, #45	; 0x2d
 800b8d2:	222b      	movge	r2, #43	; 0x2b
 800b8d4:	2909      	cmp	r1, #9
 800b8d6:	7042      	strb	r2, [r0, #1]
 800b8d8:	dd2a      	ble.n	800b930 <__exponent+0x70>
 800b8da:	f10d 0207 	add.w	r2, sp, #7
 800b8de:	4617      	mov	r7, r2
 800b8e0:	260a      	movs	r6, #10
 800b8e2:	4694      	mov	ip, r2
 800b8e4:	fb91 f5f6 	sdiv	r5, r1, r6
 800b8e8:	fb06 1415 	mls	r4, r6, r5, r1
 800b8ec:	3430      	adds	r4, #48	; 0x30
 800b8ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b8f2:	460c      	mov	r4, r1
 800b8f4:	2c63      	cmp	r4, #99	; 0x63
 800b8f6:	f102 32ff 	add.w	r2, r2, #4294967295
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	dcf1      	bgt.n	800b8e2 <__exponent+0x22>
 800b8fe:	3130      	adds	r1, #48	; 0x30
 800b900:	f1ac 0402 	sub.w	r4, ip, #2
 800b904:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b908:	1c41      	adds	r1, r0, #1
 800b90a:	4622      	mov	r2, r4
 800b90c:	42ba      	cmp	r2, r7
 800b90e:	d30a      	bcc.n	800b926 <__exponent+0x66>
 800b910:	f10d 0209 	add.w	r2, sp, #9
 800b914:	eba2 020c 	sub.w	r2, r2, ip
 800b918:	42bc      	cmp	r4, r7
 800b91a:	bf88      	it	hi
 800b91c:	2200      	movhi	r2, #0
 800b91e:	4413      	add	r3, r2
 800b920:	1a18      	subs	r0, r3, r0
 800b922:	b003      	add	sp, #12
 800b924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b926:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b92a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b92e:	e7ed      	b.n	800b90c <__exponent+0x4c>
 800b930:	2330      	movs	r3, #48	; 0x30
 800b932:	3130      	adds	r1, #48	; 0x30
 800b934:	7083      	strb	r3, [r0, #2]
 800b936:	70c1      	strb	r1, [r0, #3]
 800b938:	1d03      	adds	r3, r0, #4
 800b93a:	e7f1      	b.n	800b920 <__exponent+0x60>

0800b93c <_printf_float>:
 800b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b940:	ed2d 8b02 	vpush	{d8}
 800b944:	b08d      	sub	sp, #52	; 0x34
 800b946:	460c      	mov	r4, r1
 800b948:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b94c:	4616      	mov	r6, r2
 800b94e:	461f      	mov	r7, r3
 800b950:	4605      	mov	r5, r0
 800b952:	f000 fd2b 	bl	800c3ac <_localeconv_r>
 800b956:	f8d0 a000 	ldr.w	sl, [r0]
 800b95a:	4650      	mov	r0, sl
 800b95c:	f7f4 fc90 	bl	8000280 <strlen>
 800b960:	2300      	movs	r3, #0
 800b962:	930a      	str	r3, [sp, #40]	; 0x28
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	9305      	str	r3, [sp, #20]
 800b968:	f8d8 3000 	ldr.w	r3, [r8]
 800b96c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b970:	3307      	adds	r3, #7
 800b972:	f023 0307 	bic.w	r3, r3, #7
 800b976:	f103 0208 	add.w	r2, r3, #8
 800b97a:	f8c8 2000 	str.w	r2, [r8]
 800b97e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b982:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b986:	9307      	str	r3, [sp, #28]
 800b988:	f8cd 8018 	str.w	r8, [sp, #24]
 800b98c:	ee08 0a10 	vmov	s16, r0
 800b990:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b998:	4b9e      	ldr	r3, [pc, #632]	; (800bc14 <_printf_float+0x2d8>)
 800b99a:	f04f 32ff 	mov.w	r2, #4294967295
 800b99e:	f7f5 f8cd 	bl	8000b3c <__aeabi_dcmpun>
 800b9a2:	bb88      	cbnz	r0, 800ba08 <_printf_float+0xcc>
 800b9a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9a8:	4b9a      	ldr	r3, [pc, #616]	; (800bc14 <_printf_float+0x2d8>)
 800b9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ae:	f7f5 f8a7 	bl	8000b00 <__aeabi_dcmple>
 800b9b2:	bb48      	cbnz	r0, 800ba08 <_printf_float+0xcc>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	4640      	mov	r0, r8
 800b9ba:	4649      	mov	r1, r9
 800b9bc:	f7f5 f896 	bl	8000aec <__aeabi_dcmplt>
 800b9c0:	b110      	cbz	r0, 800b9c8 <_printf_float+0x8c>
 800b9c2:	232d      	movs	r3, #45	; 0x2d
 800b9c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9c8:	4a93      	ldr	r2, [pc, #588]	; (800bc18 <_printf_float+0x2dc>)
 800b9ca:	4b94      	ldr	r3, [pc, #592]	; (800bc1c <_printf_float+0x2e0>)
 800b9cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b9d0:	bf94      	ite	ls
 800b9d2:	4690      	movls	r8, r2
 800b9d4:	4698      	movhi	r8, r3
 800b9d6:	2303      	movs	r3, #3
 800b9d8:	6123      	str	r3, [r4, #16]
 800b9da:	9b05      	ldr	r3, [sp, #20]
 800b9dc:	f023 0304 	bic.w	r3, r3, #4
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	f04f 0900 	mov.w	r9, #0
 800b9e6:	9700      	str	r7, [sp, #0]
 800b9e8:	4633      	mov	r3, r6
 800b9ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	f000 f9da 	bl	800bda8 <_printf_common>
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	f040 8090 	bne.w	800bb1a <_printf_float+0x1de>
 800b9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fe:	b00d      	add	sp, #52	; 0x34
 800ba00:	ecbd 8b02 	vpop	{d8}
 800ba04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba08:	4642      	mov	r2, r8
 800ba0a:	464b      	mov	r3, r9
 800ba0c:	4640      	mov	r0, r8
 800ba0e:	4649      	mov	r1, r9
 800ba10:	f7f5 f894 	bl	8000b3c <__aeabi_dcmpun>
 800ba14:	b140      	cbz	r0, 800ba28 <_printf_float+0xec>
 800ba16:	464b      	mov	r3, r9
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	bfbc      	itt	lt
 800ba1c:	232d      	movlt	r3, #45	; 0x2d
 800ba1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ba22:	4a7f      	ldr	r2, [pc, #508]	; (800bc20 <_printf_float+0x2e4>)
 800ba24:	4b7f      	ldr	r3, [pc, #508]	; (800bc24 <_printf_float+0x2e8>)
 800ba26:	e7d1      	b.n	800b9cc <_printf_float+0x90>
 800ba28:	6863      	ldr	r3, [r4, #4]
 800ba2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ba2e:	9206      	str	r2, [sp, #24]
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	d13f      	bne.n	800bab4 <_printf_float+0x178>
 800ba34:	2306      	movs	r3, #6
 800ba36:	6063      	str	r3, [r4, #4]
 800ba38:	9b05      	ldr	r3, [sp, #20]
 800ba3a:	6861      	ldr	r1, [r4, #4]
 800ba3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ba40:	2300      	movs	r3, #0
 800ba42:	9303      	str	r3, [sp, #12]
 800ba44:	ab0a      	add	r3, sp, #40	; 0x28
 800ba46:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ba4a:	ab09      	add	r3, sp, #36	; 0x24
 800ba4c:	ec49 8b10 	vmov	d0, r8, r9
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	6022      	str	r2, [r4, #0]
 800ba54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba58:	4628      	mov	r0, r5
 800ba5a:	f7ff fecf 	bl	800b7fc <__cvt>
 800ba5e:	9b06      	ldr	r3, [sp, #24]
 800ba60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba62:	2b47      	cmp	r3, #71	; 0x47
 800ba64:	4680      	mov	r8, r0
 800ba66:	d108      	bne.n	800ba7a <_printf_float+0x13e>
 800ba68:	1cc8      	adds	r0, r1, #3
 800ba6a:	db02      	blt.n	800ba72 <_printf_float+0x136>
 800ba6c:	6863      	ldr	r3, [r4, #4]
 800ba6e:	4299      	cmp	r1, r3
 800ba70:	dd41      	ble.n	800baf6 <_printf_float+0x1ba>
 800ba72:	f1ab 0302 	sub.w	r3, fp, #2
 800ba76:	fa5f fb83 	uxtb.w	fp, r3
 800ba7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba7e:	d820      	bhi.n	800bac2 <_printf_float+0x186>
 800ba80:	3901      	subs	r1, #1
 800ba82:	465a      	mov	r2, fp
 800ba84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba88:	9109      	str	r1, [sp, #36]	; 0x24
 800ba8a:	f7ff ff19 	bl	800b8c0 <__exponent>
 800ba8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba90:	1813      	adds	r3, r2, r0
 800ba92:	2a01      	cmp	r2, #1
 800ba94:	4681      	mov	r9, r0
 800ba96:	6123      	str	r3, [r4, #16]
 800ba98:	dc02      	bgt.n	800baa0 <_printf_float+0x164>
 800ba9a:	6822      	ldr	r2, [r4, #0]
 800ba9c:	07d2      	lsls	r2, r2, #31
 800ba9e:	d501      	bpl.n	800baa4 <_printf_float+0x168>
 800baa0:	3301      	adds	r3, #1
 800baa2:	6123      	str	r3, [r4, #16]
 800baa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d09c      	beq.n	800b9e6 <_printf_float+0xaa>
 800baac:	232d      	movs	r3, #45	; 0x2d
 800baae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bab2:	e798      	b.n	800b9e6 <_printf_float+0xaa>
 800bab4:	9a06      	ldr	r2, [sp, #24]
 800bab6:	2a47      	cmp	r2, #71	; 0x47
 800bab8:	d1be      	bne.n	800ba38 <_printf_float+0xfc>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1bc      	bne.n	800ba38 <_printf_float+0xfc>
 800babe:	2301      	movs	r3, #1
 800bac0:	e7b9      	b.n	800ba36 <_printf_float+0xfa>
 800bac2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bac6:	d118      	bne.n	800bafa <_printf_float+0x1be>
 800bac8:	2900      	cmp	r1, #0
 800baca:	6863      	ldr	r3, [r4, #4]
 800bacc:	dd0b      	ble.n	800bae6 <_printf_float+0x1aa>
 800bace:	6121      	str	r1, [r4, #16]
 800bad0:	b913      	cbnz	r3, 800bad8 <_printf_float+0x19c>
 800bad2:	6822      	ldr	r2, [r4, #0]
 800bad4:	07d0      	lsls	r0, r2, #31
 800bad6:	d502      	bpl.n	800bade <_printf_float+0x1a2>
 800bad8:	3301      	adds	r3, #1
 800bada:	440b      	add	r3, r1
 800badc:	6123      	str	r3, [r4, #16]
 800bade:	65a1      	str	r1, [r4, #88]	; 0x58
 800bae0:	f04f 0900 	mov.w	r9, #0
 800bae4:	e7de      	b.n	800baa4 <_printf_float+0x168>
 800bae6:	b913      	cbnz	r3, 800baee <_printf_float+0x1b2>
 800bae8:	6822      	ldr	r2, [r4, #0]
 800baea:	07d2      	lsls	r2, r2, #31
 800baec:	d501      	bpl.n	800baf2 <_printf_float+0x1b6>
 800baee:	3302      	adds	r3, #2
 800baf0:	e7f4      	b.n	800badc <_printf_float+0x1a0>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e7f2      	b.n	800badc <_printf_float+0x1a0>
 800baf6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bafc:	4299      	cmp	r1, r3
 800bafe:	db05      	blt.n	800bb0c <_printf_float+0x1d0>
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	6121      	str	r1, [r4, #16]
 800bb04:	07d8      	lsls	r0, r3, #31
 800bb06:	d5ea      	bpl.n	800bade <_printf_float+0x1a2>
 800bb08:	1c4b      	adds	r3, r1, #1
 800bb0a:	e7e7      	b.n	800badc <_printf_float+0x1a0>
 800bb0c:	2900      	cmp	r1, #0
 800bb0e:	bfd4      	ite	le
 800bb10:	f1c1 0202 	rsble	r2, r1, #2
 800bb14:	2201      	movgt	r2, #1
 800bb16:	4413      	add	r3, r2
 800bb18:	e7e0      	b.n	800badc <_printf_float+0x1a0>
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	055a      	lsls	r2, r3, #21
 800bb1e:	d407      	bmi.n	800bb30 <_printf_float+0x1f4>
 800bb20:	6923      	ldr	r3, [r4, #16]
 800bb22:	4642      	mov	r2, r8
 800bb24:	4631      	mov	r1, r6
 800bb26:	4628      	mov	r0, r5
 800bb28:	47b8      	blx	r7
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	d12c      	bne.n	800bb88 <_printf_float+0x24c>
 800bb2e:	e764      	b.n	800b9fa <_printf_float+0xbe>
 800bb30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb34:	f240 80e0 	bls.w	800bcf8 <_printf_float+0x3bc>
 800bb38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2300      	movs	r3, #0
 800bb40:	f7f4 ffca 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d034      	beq.n	800bbb2 <_printf_float+0x276>
 800bb48:	4a37      	ldr	r2, [pc, #220]	; (800bc28 <_printf_float+0x2ec>)
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	4631      	mov	r1, r6
 800bb4e:	4628      	mov	r0, r5
 800bb50:	47b8      	blx	r7
 800bb52:	3001      	adds	r0, #1
 800bb54:	f43f af51 	beq.w	800b9fa <_printf_float+0xbe>
 800bb58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	db02      	blt.n	800bb66 <_printf_float+0x22a>
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	07d8      	lsls	r0, r3, #31
 800bb64:	d510      	bpl.n	800bb88 <_printf_float+0x24c>
 800bb66:	ee18 3a10 	vmov	r3, s16
 800bb6a:	4652      	mov	r2, sl
 800bb6c:	4631      	mov	r1, r6
 800bb6e:	4628      	mov	r0, r5
 800bb70:	47b8      	blx	r7
 800bb72:	3001      	adds	r0, #1
 800bb74:	f43f af41 	beq.w	800b9fa <_printf_float+0xbe>
 800bb78:	f04f 0800 	mov.w	r8, #0
 800bb7c:	f104 091a 	add.w	r9, r4, #26
 800bb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb82:	3b01      	subs	r3, #1
 800bb84:	4543      	cmp	r3, r8
 800bb86:	dc09      	bgt.n	800bb9c <_printf_float+0x260>
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	079b      	lsls	r3, r3, #30
 800bb8c:	f100 8107 	bmi.w	800bd9e <_printf_float+0x462>
 800bb90:	68e0      	ldr	r0, [r4, #12]
 800bb92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb94:	4298      	cmp	r0, r3
 800bb96:	bfb8      	it	lt
 800bb98:	4618      	movlt	r0, r3
 800bb9a:	e730      	b.n	800b9fe <_printf_float+0xc2>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	464a      	mov	r2, r9
 800bba0:	4631      	mov	r1, r6
 800bba2:	4628      	mov	r0, r5
 800bba4:	47b8      	blx	r7
 800bba6:	3001      	adds	r0, #1
 800bba8:	f43f af27 	beq.w	800b9fa <_printf_float+0xbe>
 800bbac:	f108 0801 	add.w	r8, r8, #1
 800bbb0:	e7e6      	b.n	800bb80 <_printf_float+0x244>
 800bbb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	dc39      	bgt.n	800bc2c <_printf_float+0x2f0>
 800bbb8:	4a1b      	ldr	r2, [pc, #108]	; (800bc28 <_printf_float+0x2ec>)
 800bbba:	2301      	movs	r3, #1
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	47b8      	blx	r7
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	f43f af19 	beq.w	800b9fa <_printf_float+0xbe>
 800bbc8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	d102      	bne.n	800bbd6 <_printf_float+0x29a>
 800bbd0:	6823      	ldr	r3, [r4, #0]
 800bbd2:	07d9      	lsls	r1, r3, #31
 800bbd4:	d5d8      	bpl.n	800bb88 <_printf_float+0x24c>
 800bbd6:	ee18 3a10 	vmov	r3, s16
 800bbda:	4652      	mov	r2, sl
 800bbdc:	4631      	mov	r1, r6
 800bbde:	4628      	mov	r0, r5
 800bbe0:	47b8      	blx	r7
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	f43f af09 	beq.w	800b9fa <_printf_float+0xbe>
 800bbe8:	f04f 0900 	mov.w	r9, #0
 800bbec:	f104 0a1a 	add.w	sl, r4, #26
 800bbf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf2:	425b      	negs	r3, r3
 800bbf4:	454b      	cmp	r3, r9
 800bbf6:	dc01      	bgt.n	800bbfc <_printf_float+0x2c0>
 800bbf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbfa:	e792      	b.n	800bb22 <_printf_float+0x1e6>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	4652      	mov	r2, sl
 800bc00:	4631      	mov	r1, r6
 800bc02:	4628      	mov	r0, r5
 800bc04:	47b8      	blx	r7
 800bc06:	3001      	adds	r0, #1
 800bc08:	f43f aef7 	beq.w	800b9fa <_printf_float+0xbe>
 800bc0c:	f109 0901 	add.w	r9, r9, #1
 800bc10:	e7ee      	b.n	800bbf0 <_printf_float+0x2b4>
 800bc12:	bf00      	nop
 800bc14:	7fefffff 	.word	0x7fefffff
 800bc18:	0800f02c 	.word	0x0800f02c
 800bc1c:	0800f030 	.word	0x0800f030
 800bc20:	0800f034 	.word	0x0800f034
 800bc24:	0800f038 	.word	0x0800f038
 800bc28:	0800f03c 	.word	0x0800f03c
 800bc2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc30:	429a      	cmp	r2, r3
 800bc32:	bfa8      	it	ge
 800bc34:	461a      	movge	r2, r3
 800bc36:	2a00      	cmp	r2, #0
 800bc38:	4691      	mov	r9, r2
 800bc3a:	dc37      	bgt.n	800bcac <_printf_float+0x370>
 800bc3c:	f04f 0b00 	mov.w	fp, #0
 800bc40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc44:	f104 021a 	add.w	r2, r4, #26
 800bc48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc4a:	9305      	str	r3, [sp, #20]
 800bc4c:	eba3 0309 	sub.w	r3, r3, r9
 800bc50:	455b      	cmp	r3, fp
 800bc52:	dc33      	bgt.n	800bcbc <_printf_float+0x380>
 800bc54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	db3b      	blt.n	800bcd4 <_printf_float+0x398>
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	07da      	lsls	r2, r3, #31
 800bc60:	d438      	bmi.n	800bcd4 <_printf_float+0x398>
 800bc62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bc66:	eba2 0903 	sub.w	r9, r2, r3
 800bc6a:	9b05      	ldr	r3, [sp, #20]
 800bc6c:	1ad2      	subs	r2, r2, r3
 800bc6e:	4591      	cmp	r9, r2
 800bc70:	bfa8      	it	ge
 800bc72:	4691      	movge	r9, r2
 800bc74:	f1b9 0f00 	cmp.w	r9, #0
 800bc78:	dc35      	bgt.n	800bce6 <_printf_float+0x3aa>
 800bc7a:	f04f 0800 	mov.w	r8, #0
 800bc7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc82:	f104 0a1a 	add.w	sl, r4, #26
 800bc86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc8a:	1a9b      	subs	r3, r3, r2
 800bc8c:	eba3 0309 	sub.w	r3, r3, r9
 800bc90:	4543      	cmp	r3, r8
 800bc92:	f77f af79 	ble.w	800bb88 <_printf_float+0x24c>
 800bc96:	2301      	movs	r3, #1
 800bc98:	4652      	mov	r2, sl
 800bc9a:	4631      	mov	r1, r6
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	47b8      	blx	r7
 800bca0:	3001      	adds	r0, #1
 800bca2:	f43f aeaa 	beq.w	800b9fa <_printf_float+0xbe>
 800bca6:	f108 0801 	add.w	r8, r8, #1
 800bcaa:	e7ec      	b.n	800bc86 <_printf_float+0x34a>
 800bcac:	4613      	mov	r3, r2
 800bcae:	4631      	mov	r1, r6
 800bcb0:	4642      	mov	r2, r8
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	47b8      	blx	r7
 800bcb6:	3001      	adds	r0, #1
 800bcb8:	d1c0      	bne.n	800bc3c <_printf_float+0x300>
 800bcba:	e69e      	b.n	800b9fa <_printf_float+0xbe>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	4631      	mov	r1, r6
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	9205      	str	r2, [sp, #20]
 800bcc4:	47b8      	blx	r7
 800bcc6:	3001      	adds	r0, #1
 800bcc8:	f43f ae97 	beq.w	800b9fa <_printf_float+0xbe>
 800bccc:	9a05      	ldr	r2, [sp, #20]
 800bcce:	f10b 0b01 	add.w	fp, fp, #1
 800bcd2:	e7b9      	b.n	800bc48 <_printf_float+0x30c>
 800bcd4:	ee18 3a10 	vmov	r3, s16
 800bcd8:	4652      	mov	r2, sl
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b8      	blx	r7
 800bce0:	3001      	adds	r0, #1
 800bce2:	d1be      	bne.n	800bc62 <_printf_float+0x326>
 800bce4:	e689      	b.n	800b9fa <_printf_float+0xbe>
 800bce6:	9a05      	ldr	r2, [sp, #20]
 800bce8:	464b      	mov	r3, r9
 800bcea:	4442      	add	r2, r8
 800bcec:	4631      	mov	r1, r6
 800bcee:	4628      	mov	r0, r5
 800bcf0:	47b8      	blx	r7
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	d1c1      	bne.n	800bc7a <_printf_float+0x33e>
 800bcf6:	e680      	b.n	800b9fa <_printf_float+0xbe>
 800bcf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcfa:	2a01      	cmp	r2, #1
 800bcfc:	dc01      	bgt.n	800bd02 <_printf_float+0x3c6>
 800bcfe:	07db      	lsls	r3, r3, #31
 800bd00:	d53a      	bpl.n	800bd78 <_printf_float+0x43c>
 800bd02:	2301      	movs	r3, #1
 800bd04:	4642      	mov	r2, r8
 800bd06:	4631      	mov	r1, r6
 800bd08:	4628      	mov	r0, r5
 800bd0a:	47b8      	blx	r7
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	f43f ae74 	beq.w	800b9fa <_printf_float+0xbe>
 800bd12:	ee18 3a10 	vmov	r3, s16
 800bd16:	4652      	mov	r2, sl
 800bd18:	4631      	mov	r1, r6
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	47b8      	blx	r7
 800bd1e:	3001      	adds	r0, #1
 800bd20:	f43f ae6b 	beq.w	800b9fa <_printf_float+0xbe>
 800bd24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bd30:	f7f4 fed2 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd34:	b9d8      	cbnz	r0, 800bd6e <_printf_float+0x432>
 800bd36:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bd3a:	f108 0201 	add.w	r2, r8, #1
 800bd3e:	4631      	mov	r1, r6
 800bd40:	4628      	mov	r0, r5
 800bd42:	47b8      	blx	r7
 800bd44:	3001      	adds	r0, #1
 800bd46:	d10e      	bne.n	800bd66 <_printf_float+0x42a>
 800bd48:	e657      	b.n	800b9fa <_printf_float+0xbe>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	4652      	mov	r2, sl
 800bd4e:	4631      	mov	r1, r6
 800bd50:	4628      	mov	r0, r5
 800bd52:	47b8      	blx	r7
 800bd54:	3001      	adds	r0, #1
 800bd56:	f43f ae50 	beq.w	800b9fa <_printf_float+0xbe>
 800bd5a:	f108 0801 	add.w	r8, r8, #1
 800bd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd60:	3b01      	subs	r3, #1
 800bd62:	4543      	cmp	r3, r8
 800bd64:	dcf1      	bgt.n	800bd4a <_printf_float+0x40e>
 800bd66:	464b      	mov	r3, r9
 800bd68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd6c:	e6da      	b.n	800bb24 <_printf_float+0x1e8>
 800bd6e:	f04f 0800 	mov.w	r8, #0
 800bd72:	f104 0a1a 	add.w	sl, r4, #26
 800bd76:	e7f2      	b.n	800bd5e <_printf_float+0x422>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	4642      	mov	r2, r8
 800bd7c:	e7df      	b.n	800bd3e <_printf_float+0x402>
 800bd7e:	2301      	movs	r3, #1
 800bd80:	464a      	mov	r2, r9
 800bd82:	4631      	mov	r1, r6
 800bd84:	4628      	mov	r0, r5
 800bd86:	47b8      	blx	r7
 800bd88:	3001      	adds	r0, #1
 800bd8a:	f43f ae36 	beq.w	800b9fa <_printf_float+0xbe>
 800bd8e:	f108 0801 	add.w	r8, r8, #1
 800bd92:	68e3      	ldr	r3, [r4, #12]
 800bd94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd96:	1a5b      	subs	r3, r3, r1
 800bd98:	4543      	cmp	r3, r8
 800bd9a:	dcf0      	bgt.n	800bd7e <_printf_float+0x442>
 800bd9c:	e6f8      	b.n	800bb90 <_printf_float+0x254>
 800bd9e:	f04f 0800 	mov.w	r8, #0
 800bda2:	f104 0919 	add.w	r9, r4, #25
 800bda6:	e7f4      	b.n	800bd92 <_printf_float+0x456>

0800bda8 <_printf_common>:
 800bda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdac:	4616      	mov	r6, r2
 800bdae:	4699      	mov	r9, r3
 800bdb0:	688a      	ldr	r2, [r1, #8]
 800bdb2:	690b      	ldr	r3, [r1, #16]
 800bdb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	bfb8      	it	lt
 800bdbc:	4613      	movlt	r3, r2
 800bdbe:	6033      	str	r3, [r6, #0]
 800bdc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bdc4:	4607      	mov	r7, r0
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	b10a      	cbz	r2, 800bdce <_printf_common+0x26>
 800bdca:	3301      	adds	r3, #1
 800bdcc:	6033      	str	r3, [r6, #0]
 800bdce:	6823      	ldr	r3, [r4, #0]
 800bdd0:	0699      	lsls	r1, r3, #26
 800bdd2:	bf42      	ittt	mi
 800bdd4:	6833      	ldrmi	r3, [r6, #0]
 800bdd6:	3302      	addmi	r3, #2
 800bdd8:	6033      	strmi	r3, [r6, #0]
 800bdda:	6825      	ldr	r5, [r4, #0]
 800bddc:	f015 0506 	ands.w	r5, r5, #6
 800bde0:	d106      	bne.n	800bdf0 <_printf_common+0x48>
 800bde2:	f104 0a19 	add.w	sl, r4, #25
 800bde6:	68e3      	ldr	r3, [r4, #12]
 800bde8:	6832      	ldr	r2, [r6, #0]
 800bdea:	1a9b      	subs	r3, r3, r2
 800bdec:	42ab      	cmp	r3, r5
 800bdee:	dc26      	bgt.n	800be3e <_printf_common+0x96>
 800bdf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bdf4:	1e13      	subs	r3, r2, #0
 800bdf6:	6822      	ldr	r2, [r4, #0]
 800bdf8:	bf18      	it	ne
 800bdfa:	2301      	movne	r3, #1
 800bdfc:	0692      	lsls	r2, r2, #26
 800bdfe:	d42b      	bmi.n	800be58 <_printf_common+0xb0>
 800be00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be04:	4649      	mov	r1, r9
 800be06:	4638      	mov	r0, r7
 800be08:	47c0      	blx	r8
 800be0a:	3001      	adds	r0, #1
 800be0c:	d01e      	beq.n	800be4c <_printf_common+0xa4>
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	6922      	ldr	r2, [r4, #16]
 800be12:	f003 0306 	and.w	r3, r3, #6
 800be16:	2b04      	cmp	r3, #4
 800be18:	bf02      	ittt	eq
 800be1a:	68e5      	ldreq	r5, [r4, #12]
 800be1c:	6833      	ldreq	r3, [r6, #0]
 800be1e:	1aed      	subeq	r5, r5, r3
 800be20:	68a3      	ldr	r3, [r4, #8]
 800be22:	bf0c      	ite	eq
 800be24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be28:	2500      	movne	r5, #0
 800be2a:	4293      	cmp	r3, r2
 800be2c:	bfc4      	itt	gt
 800be2e:	1a9b      	subgt	r3, r3, r2
 800be30:	18ed      	addgt	r5, r5, r3
 800be32:	2600      	movs	r6, #0
 800be34:	341a      	adds	r4, #26
 800be36:	42b5      	cmp	r5, r6
 800be38:	d11a      	bne.n	800be70 <_printf_common+0xc8>
 800be3a:	2000      	movs	r0, #0
 800be3c:	e008      	b.n	800be50 <_printf_common+0xa8>
 800be3e:	2301      	movs	r3, #1
 800be40:	4652      	mov	r2, sl
 800be42:	4649      	mov	r1, r9
 800be44:	4638      	mov	r0, r7
 800be46:	47c0      	blx	r8
 800be48:	3001      	adds	r0, #1
 800be4a:	d103      	bne.n	800be54 <_printf_common+0xac>
 800be4c:	f04f 30ff 	mov.w	r0, #4294967295
 800be50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be54:	3501      	adds	r5, #1
 800be56:	e7c6      	b.n	800bde6 <_printf_common+0x3e>
 800be58:	18e1      	adds	r1, r4, r3
 800be5a:	1c5a      	adds	r2, r3, #1
 800be5c:	2030      	movs	r0, #48	; 0x30
 800be5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be62:	4422      	add	r2, r4
 800be64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be6c:	3302      	adds	r3, #2
 800be6e:	e7c7      	b.n	800be00 <_printf_common+0x58>
 800be70:	2301      	movs	r3, #1
 800be72:	4622      	mov	r2, r4
 800be74:	4649      	mov	r1, r9
 800be76:	4638      	mov	r0, r7
 800be78:	47c0      	blx	r8
 800be7a:	3001      	adds	r0, #1
 800be7c:	d0e6      	beq.n	800be4c <_printf_common+0xa4>
 800be7e:	3601      	adds	r6, #1
 800be80:	e7d9      	b.n	800be36 <_printf_common+0x8e>
	...

0800be84 <_printf_i>:
 800be84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be88:	7e0f      	ldrb	r7, [r1, #24]
 800be8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be8c:	2f78      	cmp	r7, #120	; 0x78
 800be8e:	4691      	mov	r9, r2
 800be90:	4680      	mov	r8, r0
 800be92:	460c      	mov	r4, r1
 800be94:	469a      	mov	sl, r3
 800be96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be9a:	d807      	bhi.n	800beac <_printf_i+0x28>
 800be9c:	2f62      	cmp	r7, #98	; 0x62
 800be9e:	d80a      	bhi.n	800beb6 <_printf_i+0x32>
 800bea0:	2f00      	cmp	r7, #0
 800bea2:	f000 80d4 	beq.w	800c04e <_printf_i+0x1ca>
 800bea6:	2f58      	cmp	r7, #88	; 0x58
 800bea8:	f000 80c0 	beq.w	800c02c <_printf_i+0x1a8>
 800beac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800beb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800beb4:	e03a      	b.n	800bf2c <_printf_i+0xa8>
 800beb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800beba:	2b15      	cmp	r3, #21
 800bebc:	d8f6      	bhi.n	800beac <_printf_i+0x28>
 800bebe:	a101      	add	r1, pc, #4	; (adr r1, 800bec4 <_printf_i+0x40>)
 800bec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bec4:	0800bf1d 	.word	0x0800bf1d
 800bec8:	0800bf31 	.word	0x0800bf31
 800becc:	0800bead 	.word	0x0800bead
 800bed0:	0800bead 	.word	0x0800bead
 800bed4:	0800bead 	.word	0x0800bead
 800bed8:	0800bead 	.word	0x0800bead
 800bedc:	0800bf31 	.word	0x0800bf31
 800bee0:	0800bead 	.word	0x0800bead
 800bee4:	0800bead 	.word	0x0800bead
 800bee8:	0800bead 	.word	0x0800bead
 800beec:	0800bead 	.word	0x0800bead
 800bef0:	0800c035 	.word	0x0800c035
 800bef4:	0800bf5d 	.word	0x0800bf5d
 800bef8:	0800bfef 	.word	0x0800bfef
 800befc:	0800bead 	.word	0x0800bead
 800bf00:	0800bead 	.word	0x0800bead
 800bf04:	0800c057 	.word	0x0800c057
 800bf08:	0800bead 	.word	0x0800bead
 800bf0c:	0800bf5d 	.word	0x0800bf5d
 800bf10:	0800bead 	.word	0x0800bead
 800bf14:	0800bead 	.word	0x0800bead
 800bf18:	0800bff7 	.word	0x0800bff7
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	1d1a      	adds	r2, r3, #4
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	602a      	str	r2, [r5, #0]
 800bf24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e09f      	b.n	800c070 <_printf_i+0x1ec>
 800bf30:	6820      	ldr	r0, [r4, #0]
 800bf32:	682b      	ldr	r3, [r5, #0]
 800bf34:	0607      	lsls	r7, r0, #24
 800bf36:	f103 0104 	add.w	r1, r3, #4
 800bf3a:	6029      	str	r1, [r5, #0]
 800bf3c:	d501      	bpl.n	800bf42 <_printf_i+0xbe>
 800bf3e:	681e      	ldr	r6, [r3, #0]
 800bf40:	e003      	b.n	800bf4a <_printf_i+0xc6>
 800bf42:	0646      	lsls	r6, r0, #25
 800bf44:	d5fb      	bpl.n	800bf3e <_printf_i+0xba>
 800bf46:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bf4a:	2e00      	cmp	r6, #0
 800bf4c:	da03      	bge.n	800bf56 <_printf_i+0xd2>
 800bf4e:	232d      	movs	r3, #45	; 0x2d
 800bf50:	4276      	negs	r6, r6
 800bf52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf56:	485a      	ldr	r0, [pc, #360]	; (800c0c0 <_printf_i+0x23c>)
 800bf58:	230a      	movs	r3, #10
 800bf5a:	e012      	b.n	800bf82 <_printf_i+0xfe>
 800bf5c:	682b      	ldr	r3, [r5, #0]
 800bf5e:	6820      	ldr	r0, [r4, #0]
 800bf60:	1d19      	adds	r1, r3, #4
 800bf62:	6029      	str	r1, [r5, #0]
 800bf64:	0605      	lsls	r5, r0, #24
 800bf66:	d501      	bpl.n	800bf6c <_printf_i+0xe8>
 800bf68:	681e      	ldr	r6, [r3, #0]
 800bf6a:	e002      	b.n	800bf72 <_printf_i+0xee>
 800bf6c:	0641      	lsls	r1, r0, #25
 800bf6e:	d5fb      	bpl.n	800bf68 <_printf_i+0xe4>
 800bf70:	881e      	ldrh	r6, [r3, #0]
 800bf72:	4853      	ldr	r0, [pc, #332]	; (800c0c0 <_printf_i+0x23c>)
 800bf74:	2f6f      	cmp	r7, #111	; 0x6f
 800bf76:	bf0c      	ite	eq
 800bf78:	2308      	moveq	r3, #8
 800bf7a:	230a      	movne	r3, #10
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf82:	6865      	ldr	r5, [r4, #4]
 800bf84:	60a5      	str	r5, [r4, #8]
 800bf86:	2d00      	cmp	r5, #0
 800bf88:	bfa2      	ittt	ge
 800bf8a:	6821      	ldrge	r1, [r4, #0]
 800bf8c:	f021 0104 	bicge.w	r1, r1, #4
 800bf90:	6021      	strge	r1, [r4, #0]
 800bf92:	b90e      	cbnz	r6, 800bf98 <_printf_i+0x114>
 800bf94:	2d00      	cmp	r5, #0
 800bf96:	d04b      	beq.n	800c030 <_printf_i+0x1ac>
 800bf98:	4615      	mov	r5, r2
 800bf9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf9e:	fb03 6711 	mls	r7, r3, r1, r6
 800bfa2:	5dc7      	ldrb	r7, [r0, r7]
 800bfa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bfa8:	4637      	mov	r7, r6
 800bfaa:	42bb      	cmp	r3, r7
 800bfac:	460e      	mov	r6, r1
 800bfae:	d9f4      	bls.n	800bf9a <_printf_i+0x116>
 800bfb0:	2b08      	cmp	r3, #8
 800bfb2:	d10b      	bne.n	800bfcc <_printf_i+0x148>
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	07de      	lsls	r6, r3, #31
 800bfb8:	d508      	bpl.n	800bfcc <_printf_i+0x148>
 800bfba:	6923      	ldr	r3, [r4, #16]
 800bfbc:	6861      	ldr	r1, [r4, #4]
 800bfbe:	4299      	cmp	r1, r3
 800bfc0:	bfde      	ittt	le
 800bfc2:	2330      	movle	r3, #48	; 0x30
 800bfc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bfc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bfcc:	1b52      	subs	r2, r2, r5
 800bfce:	6122      	str	r2, [r4, #16]
 800bfd0:	f8cd a000 	str.w	sl, [sp]
 800bfd4:	464b      	mov	r3, r9
 800bfd6:	aa03      	add	r2, sp, #12
 800bfd8:	4621      	mov	r1, r4
 800bfda:	4640      	mov	r0, r8
 800bfdc:	f7ff fee4 	bl	800bda8 <_printf_common>
 800bfe0:	3001      	adds	r0, #1
 800bfe2:	d14a      	bne.n	800c07a <_printf_i+0x1f6>
 800bfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe8:	b004      	add	sp, #16
 800bfea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	f043 0320 	orr.w	r3, r3, #32
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	4833      	ldr	r0, [pc, #204]	; (800c0c4 <_printf_i+0x240>)
 800bff8:	2778      	movs	r7, #120	; 0x78
 800bffa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	6829      	ldr	r1, [r5, #0]
 800c002:	061f      	lsls	r7, r3, #24
 800c004:	f851 6b04 	ldr.w	r6, [r1], #4
 800c008:	d402      	bmi.n	800c010 <_printf_i+0x18c>
 800c00a:	065f      	lsls	r7, r3, #25
 800c00c:	bf48      	it	mi
 800c00e:	b2b6      	uxthmi	r6, r6
 800c010:	07df      	lsls	r7, r3, #31
 800c012:	bf48      	it	mi
 800c014:	f043 0320 	orrmi.w	r3, r3, #32
 800c018:	6029      	str	r1, [r5, #0]
 800c01a:	bf48      	it	mi
 800c01c:	6023      	strmi	r3, [r4, #0]
 800c01e:	b91e      	cbnz	r6, 800c028 <_printf_i+0x1a4>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	f023 0320 	bic.w	r3, r3, #32
 800c026:	6023      	str	r3, [r4, #0]
 800c028:	2310      	movs	r3, #16
 800c02a:	e7a7      	b.n	800bf7c <_printf_i+0xf8>
 800c02c:	4824      	ldr	r0, [pc, #144]	; (800c0c0 <_printf_i+0x23c>)
 800c02e:	e7e4      	b.n	800bffa <_printf_i+0x176>
 800c030:	4615      	mov	r5, r2
 800c032:	e7bd      	b.n	800bfb0 <_printf_i+0x12c>
 800c034:	682b      	ldr	r3, [r5, #0]
 800c036:	6826      	ldr	r6, [r4, #0]
 800c038:	6961      	ldr	r1, [r4, #20]
 800c03a:	1d18      	adds	r0, r3, #4
 800c03c:	6028      	str	r0, [r5, #0]
 800c03e:	0635      	lsls	r5, r6, #24
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	d501      	bpl.n	800c048 <_printf_i+0x1c4>
 800c044:	6019      	str	r1, [r3, #0]
 800c046:	e002      	b.n	800c04e <_printf_i+0x1ca>
 800c048:	0670      	lsls	r0, r6, #25
 800c04a:	d5fb      	bpl.n	800c044 <_printf_i+0x1c0>
 800c04c:	8019      	strh	r1, [r3, #0]
 800c04e:	2300      	movs	r3, #0
 800c050:	6123      	str	r3, [r4, #16]
 800c052:	4615      	mov	r5, r2
 800c054:	e7bc      	b.n	800bfd0 <_printf_i+0x14c>
 800c056:	682b      	ldr	r3, [r5, #0]
 800c058:	1d1a      	adds	r2, r3, #4
 800c05a:	602a      	str	r2, [r5, #0]
 800c05c:	681d      	ldr	r5, [r3, #0]
 800c05e:	6862      	ldr	r2, [r4, #4]
 800c060:	2100      	movs	r1, #0
 800c062:	4628      	mov	r0, r5
 800c064:	f7f4 f8bc 	bl	80001e0 <memchr>
 800c068:	b108      	cbz	r0, 800c06e <_printf_i+0x1ea>
 800c06a:	1b40      	subs	r0, r0, r5
 800c06c:	6060      	str	r0, [r4, #4]
 800c06e:	6863      	ldr	r3, [r4, #4]
 800c070:	6123      	str	r3, [r4, #16]
 800c072:	2300      	movs	r3, #0
 800c074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c078:	e7aa      	b.n	800bfd0 <_printf_i+0x14c>
 800c07a:	6923      	ldr	r3, [r4, #16]
 800c07c:	462a      	mov	r2, r5
 800c07e:	4649      	mov	r1, r9
 800c080:	4640      	mov	r0, r8
 800c082:	47d0      	blx	sl
 800c084:	3001      	adds	r0, #1
 800c086:	d0ad      	beq.n	800bfe4 <_printf_i+0x160>
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	079b      	lsls	r3, r3, #30
 800c08c:	d413      	bmi.n	800c0b6 <_printf_i+0x232>
 800c08e:	68e0      	ldr	r0, [r4, #12]
 800c090:	9b03      	ldr	r3, [sp, #12]
 800c092:	4298      	cmp	r0, r3
 800c094:	bfb8      	it	lt
 800c096:	4618      	movlt	r0, r3
 800c098:	e7a6      	b.n	800bfe8 <_printf_i+0x164>
 800c09a:	2301      	movs	r3, #1
 800c09c:	4632      	mov	r2, r6
 800c09e:	4649      	mov	r1, r9
 800c0a0:	4640      	mov	r0, r8
 800c0a2:	47d0      	blx	sl
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	d09d      	beq.n	800bfe4 <_printf_i+0x160>
 800c0a8:	3501      	adds	r5, #1
 800c0aa:	68e3      	ldr	r3, [r4, #12]
 800c0ac:	9903      	ldr	r1, [sp, #12]
 800c0ae:	1a5b      	subs	r3, r3, r1
 800c0b0:	42ab      	cmp	r3, r5
 800c0b2:	dcf2      	bgt.n	800c09a <_printf_i+0x216>
 800c0b4:	e7eb      	b.n	800c08e <_printf_i+0x20a>
 800c0b6:	2500      	movs	r5, #0
 800c0b8:	f104 0619 	add.w	r6, r4, #25
 800c0bc:	e7f5      	b.n	800c0aa <_printf_i+0x226>
 800c0be:	bf00      	nop
 800c0c0:	0800f03e 	.word	0x0800f03e
 800c0c4:	0800f04f 	.word	0x0800f04f

0800c0c8 <std>:
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	b510      	push	{r4, lr}
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	e9c0 3300 	strd	r3, r3, [r0]
 800c0d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0d6:	6083      	str	r3, [r0, #8]
 800c0d8:	8181      	strh	r1, [r0, #12]
 800c0da:	6643      	str	r3, [r0, #100]	; 0x64
 800c0dc:	81c2      	strh	r2, [r0, #14]
 800c0de:	6183      	str	r3, [r0, #24]
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	2208      	movs	r2, #8
 800c0e4:	305c      	adds	r0, #92	; 0x5c
 800c0e6:	f000 f928 	bl	800c33a <memset>
 800c0ea:	4b0d      	ldr	r3, [pc, #52]	; (800c120 <std+0x58>)
 800c0ec:	6263      	str	r3, [r4, #36]	; 0x24
 800c0ee:	4b0d      	ldr	r3, [pc, #52]	; (800c124 <std+0x5c>)
 800c0f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0f2:	4b0d      	ldr	r3, [pc, #52]	; (800c128 <std+0x60>)
 800c0f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0f6:	4b0d      	ldr	r3, [pc, #52]	; (800c12c <std+0x64>)
 800c0f8:	6323      	str	r3, [r4, #48]	; 0x30
 800c0fa:	4b0d      	ldr	r3, [pc, #52]	; (800c130 <std+0x68>)
 800c0fc:	6224      	str	r4, [r4, #32]
 800c0fe:	429c      	cmp	r4, r3
 800c100:	d006      	beq.n	800c110 <std+0x48>
 800c102:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c106:	4294      	cmp	r4, r2
 800c108:	d002      	beq.n	800c110 <std+0x48>
 800c10a:	33d0      	adds	r3, #208	; 0xd0
 800c10c:	429c      	cmp	r4, r3
 800c10e:	d105      	bne.n	800c11c <std+0x54>
 800c110:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c118:	f000 b9e0 	b.w	800c4dc <__retarget_lock_init_recursive>
 800c11c:	bd10      	pop	{r4, pc}
 800c11e:	bf00      	nop
 800c120:	0800c2b5 	.word	0x0800c2b5
 800c124:	0800c2d7 	.word	0x0800c2d7
 800c128:	0800c30f 	.word	0x0800c30f
 800c12c:	0800c333 	.word	0x0800c333
 800c130:	20000838 	.word	0x20000838

0800c134 <stdio_exit_handler>:
 800c134:	4a02      	ldr	r2, [pc, #8]	; (800c140 <stdio_exit_handler+0xc>)
 800c136:	4903      	ldr	r1, [pc, #12]	; (800c144 <stdio_exit_handler+0x10>)
 800c138:	4803      	ldr	r0, [pc, #12]	; (800c148 <stdio_exit_handler+0x14>)
 800c13a:	f000 b869 	b.w	800c210 <_fwalk_sglue>
 800c13e:	bf00      	nop
 800c140:	2000001c 	.word	0x2000001c
 800c144:	0800dd41 	.word	0x0800dd41
 800c148:	20000028 	.word	0x20000028

0800c14c <cleanup_stdio>:
 800c14c:	6841      	ldr	r1, [r0, #4]
 800c14e:	4b0c      	ldr	r3, [pc, #48]	; (800c180 <cleanup_stdio+0x34>)
 800c150:	4299      	cmp	r1, r3
 800c152:	b510      	push	{r4, lr}
 800c154:	4604      	mov	r4, r0
 800c156:	d001      	beq.n	800c15c <cleanup_stdio+0x10>
 800c158:	f001 fdf2 	bl	800dd40 <_fflush_r>
 800c15c:	68a1      	ldr	r1, [r4, #8]
 800c15e:	4b09      	ldr	r3, [pc, #36]	; (800c184 <cleanup_stdio+0x38>)
 800c160:	4299      	cmp	r1, r3
 800c162:	d002      	beq.n	800c16a <cleanup_stdio+0x1e>
 800c164:	4620      	mov	r0, r4
 800c166:	f001 fdeb 	bl	800dd40 <_fflush_r>
 800c16a:	68e1      	ldr	r1, [r4, #12]
 800c16c:	4b06      	ldr	r3, [pc, #24]	; (800c188 <cleanup_stdio+0x3c>)
 800c16e:	4299      	cmp	r1, r3
 800c170:	d004      	beq.n	800c17c <cleanup_stdio+0x30>
 800c172:	4620      	mov	r0, r4
 800c174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c178:	f001 bde2 	b.w	800dd40 <_fflush_r>
 800c17c:	bd10      	pop	{r4, pc}
 800c17e:	bf00      	nop
 800c180:	20000838 	.word	0x20000838
 800c184:	200008a0 	.word	0x200008a0
 800c188:	20000908 	.word	0x20000908

0800c18c <global_stdio_init.part.0>:
 800c18c:	b510      	push	{r4, lr}
 800c18e:	4b0b      	ldr	r3, [pc, #44]	; (800c1bc <global_stdio_init.part.0+0x30>)
 800c190:	4c0b      	ldr	r4, [pc, #44]	; (800c1c0 <global_stdio_init.part.0+0x34>)
 800c192:	4a0c      	ldr	r2, [pc, #48]	; (800c1c4 <global_stdio_init.part.0+0x38>)
 800c194:	601a      	str	r2, [r3, #0]
 800c196:	4620      	mov	r0, r4
 800c198:	2200      	movs	r2, #0
 800c19a:	2104      	movs	r1, #4
 800c19c:	f7ff ff94 	bl	800c0c8 <std>
 800c1a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	2109      	movs	r1, #9
 800c1a8:	f7ff ff8e 	bl	800c0c8 <std>
 800c1ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c1b0:	2202      	movs	r2, #2
 800c1b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1b6:	2112      	movs	r1, #18
 800c1b8:	f7ff bf86 	b.w	800c0c8 <std>
 800c1bc:	20000970 	.word	0x20000970
 800c1c0:	20000838 	.word	0x20000838
 800c1c4:	0800c135 	.word	0x0800c135

0800c1c8 <__sfp_lock_acquire>:
 800c1c8:	4801      	ldr	r0, [pc, #4]	; (800c1d0 <__sfp_lock_acquire+0x8>)
 800c1ca:	f000 b988 	b.w	800c4de <__retarget_lock_acquire_recursive>
 800c1ce:	bf00      	nop
 800c1d0:	20000979 	.word	0x20000979

0800c1d4 <__sfp_lock_release>:
 800c1d4:	4801      	ldr	r0, [pc, #4]	; (800c1dc <__sfp_lock_release+0x8>)
 800c1d6:	f000 b983 	b.w	800c4e0 <__retarget_lock_release_recursive>
 800c1da:	bf00      	nop
 800c1dc:	20000979 	.word	0x20000979

0800c1e0 <__sinit>:
 800c1e0:	b510      	push	{r4, lr}
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	f7ff fff0 	bl	800c1c8 <__sfp_lock_acquire>
 800c1e8:	6a23      	ldr	r3, [r4, #32]
 800c1ea:	b11b      	cbz	r3, 800c1f4 <__sinit+0x14>
 800c1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1f0:	f7ff bff0 	b.w	800c1d4 <__sfp_lock_release>
 800c1f4:	4b04      	ldr	r3, [pc, #16]	; (800c208 <__sinit+0x28>)
 800c1f6:	6223      	str	r3, [r4, #32]
 800c1f8:	4b04      	ldr	r3, [pc, #16]	; (800c20c <__sinit+0x2c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1f5      	bne.n	800c1ec <__sinit+0xc>
 800c200:	f7ff ffc4 	bl	800c18c <global_stdio_init.part.0>
 800c204:	e7f2      	b.n	800c1ec <__sinit+0xc>
 800c206:	bf00      	nop
 800c208:	0800c14d 	.word	0x0800c14d
 800c20c:	20000970 	.word	0x20000970

0800c210 <_fwalk_sglue>:
 800c210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c214:	4607      	mov	r7, r0
 800c216:	4688      	mov	r8, r1
 800c218:	4614      	mov	r4, r2
 800c21a:	2600      	movs	r6, #0
 800c21c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c220:	f1b9 0901 	subs.w	r9, r9, #1
 800c224:	d505      	bpl.n	800c232 <_fwalk_sglue+0x22>
 800c226:	6824      	ldr	r4, [r4, #0]
 800c228:	2c00      	cmp	r4, #0
 800c22a:	d1f7      	bne.n	800c21c <_fwalk_sglue+0xc>
 800c22c:	4630      	mov	r0, r6
 800c22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c232:	89ab      	ldrh	r3, [r5, #12]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d907      	bls.n	800c248 <_fwalk_sglue+0x38>
 800c238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c23c:	3301      	adds	r3, #1
 800c23e:	d003      	beq.n	800c248 <_fwalk_sglue+0x38>
 800c240:	4629      	mov	r1, r5
 800c242:	4638      	mov	r0, r7
 800c244:	47c0      	blx	r8
 800c246:	4306      	orrs	r6, r0
 800c248:	3568      	adds	r5, #104	; 0x68
 800c24a:	e7e9      	b.n	800c220 <_fwalk_sglue+0x10>

0800c24c <sniprintf>:
 800c24c:	b40c      	push	{r2, r3}
 800c24e:	b530      	push	{r4, r5, lr}
 800c250:	4b17      	ldr	r3, [pc, #92]	; (800c2b0 <sniprintf+0x64>)
 800c252:	1e0c      	subs	r4, r1, #0
 800c254:	681d      	ldr	r5, [r3, #0]
 800c256:	b09d      	sub	sp, #116	; 0x74
 800c258:	da08      	bge.n	800c26c <sniprintf+0x20>
 800c25a:	238b      	movs	r3, #139	; 0x8b
 800c25c:	602b      	str	r3, [r5, #0]
 800c25e:	f04f 30ff 	mov.w	r0, #4294967295
 800c262:	b01d      	add	sp, #116	; 0x74
 800c264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c268:	b002      	add	sp, #8
 800c26a:	4770      	bx	lr
 800c26c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c270:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c274:	bf14      	ite	ne
 800c276:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c27a:	4623      	moveq	r3, r4
 800c27c:	9304      	str	r3, [sp, #16]
 800c27e:	9307      	str	r3, [sp, #28]
 800c280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c284:	9002      	str	r0, [sp, #8]
 800c286:	9006      	str	r0, [sp, #24]
 800c288:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c28c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c28e:	ab21      	add	r3, sp, #132	; 0x84
 800c290:	a902      	add	r1, sp, #8
 800c292:	4628      	mov	r0, r5
 800c294:	9301      	str	r3, [sp, #4]
 800c296:	f001 fbcf 	bl	800da38 <_svfiprintf_r>
 800c29a:	1c43      	adds	r3, r0, #1
 800c29c:	bfbc      	itt	lt
 800c29e:	238b      	movlt	r3, #139	; 0x8b
 800c2a0:	602b      	strlt	r3, [r5, #0]
 800c2a2:	2c00      	cmp	r4, #0
 800c2a4:	d0dd      	beq.n	800c262 <sniprintf+0x16>
 800c2a6:	9b02      	ldr	r3, [sp, #8]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	701a      	strb	r2, [r3, #0]
 800c2ac:	e7d9      	b.n	800c262 <sniprintf+0x16>
 800c2ae:	bf00      	nop
 800c2b0:	20000074 	.word	0x20000074

0800c2b4 <__sread>:
 800c2b4:	b510      	push	{r4, lr}
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2bc:	f000 f89c 	bl	800c3f8 <_read_r>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	bfab      	itete	ge
 800c2c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2c6:	89a3      	ldrhlt	r3, [r4, #12]
 800c2c8:	181b      	addge	r3, r3, r0
 800c2ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2ce:	bfac      	ite	ge
 800c2d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2d2:	81a3      	strhlt	r3, [r4, #12]
 800c2d4:	bd10      	pop	{r4, pc}

0800c2d6 <__swrite>:
 800c2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2da:	461f      	mov	r7, r3
 800c2dc:	898b      	ldrh	r3, [r1, #12]
 800c2de:	05db      	lsls	r3, r3, #23
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	460c      	mov	r4, r1
 800c2e4:	4616      	mov	r6, r2
 800c2e6:	d505      	bpl.n	800c2f4 <__swrite+0x1e>
 800c2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f000 f870 	bl	800c3d4 <_lseek_r>
 800c2f4:	89a3      	ldrh	r3, [r4, #12]
 800c2f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2fe:	81a3      	strh	r3, [r4, #12]
 800c300:	4632      	mov	r2, r6
 800c302:	463b      	mov	r3, r7
 800c304:	4628      	mov	r0, r5
 800c306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c30a:	f000 b8ab 	b.w	800c464 <_write_r>

0800c30e <__sseek>:
 800c30e:	b510      	push	{r4, lr}
 800c310:	460c      	mov	r4, r1
 800c312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c316:	f000 f85d 	bl	800c3d4 <_lseek_r>
 800c31a:	1c43      	adds	r3, r0, #1
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	bf15      	itete	ne
 800c320:	6560      	strne	r0, [r4, #84]	; 0x54
 800c322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c32a:	81a3      	strheq	r3, [r4, #12]
 800c32c:	bf18      	it	ne
 800c32e:	81a3      	strhne	r3, [r4, #12]
 800c330:	bd10      	pop	{r4, pc}

0800c332 <__sclose>:
 800c332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c336:	f000 b83d 	b.w	800c3b4 <_close_r>

0800c33a <memset>:
 800c33a:	4402      	add	r2, r0
 800c33c:	4603      	mov	r3, r0
 800c33e:	4293      	cmp	r3, r2
 800c340:	d100      	bne.n	800c344 <memset+0xa>
 800c342:	4770      	bx	lr
 800c344:	f803 1b01 	strb.w	r1, [r3], #1
 800c348:	e7f9      	b.n	800c33e <memset+0x4>

0800c34a <_raise_r>:
 800c34a:	291f      	cmp	r1, #31
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	4604      	mov	r4, r0
 800c350:	460d      	mov	r5, r1
 800c352:	d904      	bls.n	800c35e <_raise_r+0x14>
 800c354:	2316      	movs	r3, #22
 800c356:	6003      	str	r3, [r0, #0]
 800c358:	f04f 30ff 	mov.w	r0, #4294967295
 800c35c:	bd38      	pop	{r3, r4, r5, pc}
 800c35e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c360:	b112      	cbz	r2, 800c368 <_raise_r+0x1e>
 800c362:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c366:	b94b      	cbnz	r3, 800c37c <_raise_r+0x32>
 800c368:	4620      	mov	r0, r4
 800c36a:	f000 f869 	bl	800c440 <_getpid_r>
 800c36e:	462a      	mov	r2, r5
 800c370:	4601      	mov	r1, r0
 800c372:	4620      	mov	r0, r4
 800c374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c378:	f000 b850 	b.w	800c41c <_kill_r>
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d00a      	beq.n	800c396 <_raise_r+0x4c>
 800c380:	1c59      	adds	r1, r3, #1
 800c382:	d103      	bne.n	800c38c <_raise_r+0x42>
 800c384:	2316      	movs	r3, #22
 800c386:	6003      	str	r3, [r0, #0]
 800c388:	2001      	movs	r0, #1
 800c38a:	e7e7      	b.n	800c35c <_raise_r+0x12>
 800c38c:	2400      	movs	r4, #0
 800c38e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c392:	4628      	mov	r0, r5
 800c394:	4798      	blx	r3
 800c396:	2000      	movs	r0, #0
 800c398:	e7e0      	b.n	800c35c <_raise_r+0x12>
	...

0800c39c <raise>:
 800c39c:	4b02      	ldr	r3, [pc, #8]	; (800c3a8 <raise+0xc>)
 800c39e:	4601      	mov	r1, r0
 800c3a0:	6818      	ldr	r0, [r3, #0]
 800c3a2:	f7ff bfd2 	b.w	800c34a <_raise_r>
 800c3a6:	bf00      	nop
 800c3a8:	20000074 	.word	0x20000074

0800c3ac <_localeconv_r>:
 800c3ac:	4800      	ldr	r0, [pc, #0]	; (800c3b0 <_localeconv_r+0x4>)
 800c3ae:	4770      	bx	lr
 800c3b0:	20000168 	.word	0x20000168

0800c3b4 <_close_r>:
 800c3b4:	b538      	push	{r3, r4, r5, lr}
 800c3b6:	4d06      	ldr	r5, [pc, #24]	; (800c3d0 <_close_r+0x1c>)
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	4608      	mov	r0, r1
 800c3be:	602b      	str	r3, [r5, #0]
 800c3c0:	f7f8 fcc3 	bl	8004d4a <_close>
 800c3c4:	1c43      	adds	r3, r0, #1
 800c3c6:	d102      	bne.n	800c3ce <_close_r+0x1a>
 800c3c8:	682b      	ldr	r3, [r5, #0]
 800c3ca:	b103      	cbz	r3, 800c3ce <_close_r+0x1a>
 800c3cc:	6023      	str	r3, [r4, #0]
 800c3ce:	bd38      	pop	{r3, r4, r5, pc}
 800c3d0:	20000974 	.word	0x20000974

0800c3d4 <_lseek_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	4d07      	ldr	r5, [pc, #28]	; (800c3f4 <_lseek_r+0x20>)
 800c3d8:	4604      	mov	r4, r0
 800c3da:	4608      	mov	r0, r1
 800c3dc:	4611      	mov	r1, r2
 800c3de:	2200      	movs	r2, #0
 800c3e0:	602a      	str	r2, [r5, #0]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	f7f8 fcd8 	bl	8004d98 <_lseek>
 800c3e8:	1c43      	adds	r3, r0, #1
 800c3ea:	d102      	bne.n	800c3f2 <_lseek_r+0x1e>
 800c3ec:	682b      	ldr	r3, [r5, #0]
 800c3ee:	b103      	cbz	r3, 800c3f2 <_lseek_r+0x1e>
 800c3f0:	6023      	str	r3, [r4, #0]
 800c3f2:	bd38      	pop	{r3, r4, r5, pc}
 800c3f4:	20000974 	.word	0x20000974

0800c3f8 <_read_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	4d07      	ldr	r5, [pc, #28]	; (800c418 <_read_r+0x20>)
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	4608      	mov	r0, r1
 800c400:	4611      	mov	r1, r2
 800c402:	2200      	movs	r2, #0
 800c404:	602a      	str	r2, [r5, #0]
 800c406:	461a      	mov	r2, r3
 800c408:	f7f8 fc66 	bl	8004cd8 <_read>
 800c40c:	1c43      	adds	r3, r0, #1
 800c40e:	d102      	bne.n	800c416 <_read_r+0x1e>
 800c410:	682b      	ldr	r3, [r5, #0]
 800c412:	b103      	cbz	r3, 800c416 <_read_r+0x1e>
 800c414:	6023      	str	r3, [r4, #0]
 800c416:	bd38      	pop	{r3, r4, r5, pc}
 800c418:	20000974 	.word	0x20000974

0800c41c <_kill_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	4d07      	ldr	r5, [pc, #28]	; (800c43c <_kill_r+0x20>)
 800c420:	2300      	movs	r3, #0
 800c422:	4604      	mov	r4, r0
 800c424:	4608      	mov	r0, r1
 800c426:	4611      	mov	r1, r2
 800c428:	602b      	str	r3, [r5, #0]
 800c42a:	f7f8 fc3b 	bl	8004ca4 <_kill>
 800c42e:	1c43      	adds	r3, r0, #1
 800c430:	d102      	bne.n	800c438 <_kill_r+0x1c>
 800c432:	682b      	ldr	r3, [r5, #0]
 800c434:	b103      	cbz	r3, 800c438 <_kill_r+0x1c>
 800c436:	6023      	str	r3, [r4, #0]
 800c438:	bd38      	pop	{r3, r4, r5, pc}
 800c43a:	bf00      	nop
 800c43c:	20000974 	.word	0x20000974

0800c440 <_getpid_r>:
 800c440:	f7f8 bc28 	b.w	8004c94 <_getpid>

0800c444 <_sbrk_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	4d06      	ldr	r5, [pc, #24]	; (800c460 <_sbrk_r+0x1c>)
 800c448:	2300      	movs	r3, #0
 800c44a:	4604      	mov	r4, r0
 800c44c:	4608      	mov	r0, r1
 800c44e:	602b      	str	r3, [r5, #0]
 800c450:	f7f8 fcb0 	bl	8004db4 <_sbrk>
 800c454:	1c43      	adds	r3, r0, #1
 800c456:	d102      	bne.n	800c45e <_sbrk_r+0x1a>
 800c458:	682b      	ldr	r3, [r5, #0]
 800c45a:	b103      	cbz	r3, 800c45e <_sbrk_r+0x1a>
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	bd38      	pop	{r3, r4, r5, pc}
 800c460:	20000974 	.word	0x20000974

0800c464 <_write_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	4d07      	ldr	r5, [pc, #28]	; (800c484 <_write_r+0x20>)
 800c468:	4604      	mov	r4, r0
 800c46a:	4608      	mov	r0, r1
 800c46c:	4611      	mov	r1, r2
 800c46e:	2200      	movs	r2, #0
 800c470:	602a      	str	r2, [r5, #0]
 800c472:	461a      	mov	r2, r3
 800c474:	f7f8 fc4d 	bl	8004d12 <_write>
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	d102      	bne.n	800c482 <_write_r+0x1e>
 800c47c:	682b      	ldr	r3, [r5, #0]
 800c47e:	b103      	cbz	r3, 800c482 <_write_r+0x1e>
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	bd38      	pop	{r3, r4, r5, pc}
 800c484:	20000974 	.word	0x20000974

0800c488 <__errno>:
 800c488:	4b01      	ldr	r3, [pc, #4]	; (800c490 <__errno+0x8>)
 800c48a:	6818      	ldr	r0, [r3, #0]
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	20000074 	.word	0x20000074

0800c494 <__libc_init_array>:
 800c494:	b570      	push	{r4, r5, r6, lr}
 800c496:	4d0d      	ldr	r5, [pc, #52]	; (800c4cc <__libc_init_array+0x38>)
 800c498:	4c0d      	ldr	r4, [pc, #52]	; (800c4d0 <__libc_init_array+0x3c>)
 800c49a:	1b64      	subs	r4, r4, r5
 800c49c:	10a4      	asrs	r4, r4, #2
 800c49e:	2600      	movs	r6, #0
 800c4a0:	42a6      	cmp	r6, r4
 800c4a2:	d109      	bne.n	800c4b8 <__libc_init_array+0x24>
 800c4a4:	4d0b      	ldr	r5, [pc, #44]	; (800c4d4 <__libc_init_array+0x40>)
 800c4a6:	4c0c      	ldr	r4, [pc, #48]	; (800c4d8 <__libc_init_array+0x44>)
 800c4a8:	f001 ff86 	bl	800e3b8 <_init>
 800c4ac:	1b64      	subs	r4, r4, r5
 800c4ae:	10a4      	asrs	r4, r4, #2
 800c4b0:	2600      	movs	r6, #0
 800c4b2:	42a6      	cmp	r6, r4
 800c4b4:	d105      	bne.n	800c4c2 <__libc_init_array+0x2e>
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4bc:	4798      	blx	r3
 800c4be:	3601      	adds	r6, #1
 800c4c0:	e7ee      	b.n	800c4a0 <__libc_init_array+0xc>
 800c4c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4c6:	4798      	blx	r3
 800c4c8:	3601      	adds	r6, #1
 800c4ca:	e7f2      	b.n	800c4b2 <__libc_init_array+0x1e>
 800c4cc:	0800f39c 	.word	0x0800f39c
 800c4d0:	0800f39c 	.word	0x0800f39c
 800c4d4:	0800f39c 	.word	0x0800f39c
 800c4d8:	0800f3a0 	.word	0x0800f3a0

0800c4dc <__retarget_lock_init_recursive>:
 800c4dc:	4770      	bx	lr

0800c4de <__retarget_lock_acquire_recursive>:
 800c4de:	4770      	bx	lr

0800c4e0 <__retarget_lock_release_recursive>:
 800c4e0:	4770      	bx	lr

0800c4e2 <memcpy>:
 800c4e2:	440a      	add	r2, r1
 800c4e4:	4291      	cmp	r1, r2
 800c4e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4ea:	d100      	bne.n	800c4ee <memcpy+0xc>
 800c4ec:	4770      	bx	lr
 800c4ee:	b510      	push	{r4, lr}
 800c4f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4f8:	4291      	cmp	r1, r2
 800c4fa:	d1f9      	bne.n	800c4f0 <memcpy+0xe>
 800c4fc:	bd10      	pop	{r4, pc}

0800c4fe <quorem>:
 800c4fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c502:	6903      	ldr	r3, [r0, #16]
 800c504:	690c      	ldr	r4, [r1, #16]
 800c506:	42a3      	cmp	r3, r4
 800c508:	4607      	mov	r7, r0
 800c50a:	db7e      	blt.n	800c60a <quorem+0x10c>
 800c50c:	3c01      	subs	r4, #1
 800c50e:	f101 0814 	add.w	r8, r1, #20
 800c512:	f100 0514 	add.w	r5, r0, #20
 800c516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c51a:	9301      	str	r3, [sp, #4]
 800c51c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c520:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c524:	3301      	adds	r3, #1
 800c526:	429a      	cmp	r2, r3
 800c528:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c52c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c530:	fbb2 f6f3 	udiv	r6, r2, r3
 800c534:	d331      	bcc.n	800c59a <quorem+0x9c>
 800c536:	f04f 0e00 	mov.w	lr, #0
 800c53a:	4640      	mov	r0, r8
 800c53c:	46ac      	mov	ip, r5
 800c53e:	46f2      	mov	sl, lr
 800c540:	f850 2b04 	ldr.w	r2, [r0], #4
 800c544:	b293      	uxth	r3, r2
 800c546:	fb06 e303 	mla	r3, r6, r3, lr
 800c54a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c54e:	0c1a      	lsrs	r2, r3, #16
 800c550:	b29b      	uxth	r3, r3
 800c552:	ebaa 0303 	sub.w	r3, sl, r3
 800c556:	f8dc a000 	ldr.w	sl, [ip]
 800c55a:	fa13 f38a 	uxtah	r3, r3, sl
 800c55e:	fb06 220e 	mla	r2, r6, lr, r2
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	9b00      	ldr	r3, [sp, #0]
 800c566:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c56a:	b292      	uxth	r2, r2
 800c56c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c570:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c574:	f8bd 3000 	ldrh.w	r3, [sp]
 800c578:	4581      	cmp	r9, r0
 800c57a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c57e:	f84c 3b04 	str.w	r3, [ip], #4
 800c582:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c586:	d2db      	bcs.n	800c540 <quorem+0x42>
 800c588:	f855 300b 	ldr.w	r3, [r5, fp]
 800c58c:	b92b      	cbnz	r3, 800c59a <quorem+0x9c>
 800c58e:	9b01      	ldr	r3, [sp, #4]
 800c590:	3b04      	subs	r3, #4
 800c592:	429d      	cmp	r5, r3
 800c594:	461a      	mov	r2, r3
 800c596:	d32c      	bcc.n	800c5f2 <quorem+0xf4>
 800c598:	613c      	str	r4, [r7, #16]
 800c59a:	4638      	mov	r0, r7
 800c59c:	f001 f8f2 	bl	800d784 <__mcmp>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	db22      	blt.n	800c5ea <quorem+0xec>
 800c5a4:	3601      	adds	r6, #1
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5ae:	f8d1 c000 	ldr.w	ip, [r1]
 800c5b2:	b293      	uxth	r3, r2
 800c5b4:	1ac3      	subs	r3, r0, r3
 800c5b6:	0c12      	lsrs	r2, r2, #16
 800c5b8:	fa13 f38c 	uxtah	r3, r3, ip
 800c5bc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c5c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5ca:	45c1      	cmp	r9, r8
 800c5cc:	f841 3b04 	str.w	r3, [r1], #4
 800c5d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c5d4:	d2e9      	bcs.n	800c5aa <quorem+0xac>
 800c5d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5de:	b922      	cbnz	r2, 800c5ea <quorem+0xec>
 800c5e0:	3b04      	subs	r3, #4
 800c5e2:	429d      	cmp	r5, r3
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	d30a      	bcc.n	800c5fe <quorem+0x100>
 800c5e8:	613c      	str	r4, [r7, #16]
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	b003      	add	sp, #12
 800c5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f2:	6812      	ldr	r2, [r2, #0]
 800c5f4:	3b04      	subs	r3, #4
 800c5f6:	2a00      	cmp	r2, #0
 800c5f8:	d1ce      	bne.n	800c598 <quorem+0x9a>
 800c5fa:	3c01      	subs	r4, #1
 800c5fc:	e7c9      	b.n	800c592 <quorem+0x94>
 800c5fe:	6812      	ldr	r2, [r2, #0]
 800c600:	3b04      	subs	r3, #4
 800c602:	2a00      	cmp	r2, #0
 800c604:	d1f0      	bne.n	800c5e8 <quorem+0xea>
 800c606:	3c01      	subs	r4, #1
 800c608:	e7eb      	b.n	800c5e2 <quorem+0xe4>
 800c60a:	2000      	movs	r0, #0
 800c60c:	e7ee      	b.n	800c5ec <quorem+0xee>
	...

0800c610 <_dtoa_r>:
 800c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c614:	ed2d 8b04 	vpush	{d8-d9}
 800c618:	69c5      	ldr	r5, [r0, #28]
 800c61a:	b093      	sub	sp, #76	; 0x4c
 800c61c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c620:	ec57 6b10 	vmov	r6, r7, d0
 800c624:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c628:	9107      	str	r1, [sp, #28]
 800c62a:	4604      	mov	r4, r0
 800c62c:	920a      	str	r2, [sp, #40]	; 0x28
 800c62e:	930d      	str	r3, [sp, #52]	; 0x34
 800c630:	b975      	cbnz	r5, 800c650 <_dtoa_r+0x40>
 800c632:	2010      	movs	r0, #16
 800c634:	f7ff f826 	bl	800b684 <malloc>
 800c638:	4602      	mov	r2, r0
 800c63a:	61e0      	str	r0, [r4, #28]
 800c63c:	b920      	cbnz	r0, 800c648 <_dtoa_r+0x38>
 800c63e:	4bae      	ldr	r3, [pc, #696]	; (800c8f8 <_dtoa_r+0x2e8>)
 800c640:	21ef      	movs	r1, #239	; 0xef
 800c642:	48ae      	ldr	r0, [pc, #696]	; (800c8fc <_dtoa_r+0x2ec>)
 800c644:	f001 fbbe 	bl	800ddc4 <__assert_func>
 800c648:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c64c:	6005      	str	r5, [r0, #0]
 800c64e:	60c5      	str	r5, [r0, #12]
 800c650:	69e3      	ldr	r3, [r4, #28]
 800c652:	6819      	ldr	r1, [r3, #0]
 800c654:	b151      	cbz	r1, 800c66c <_dtoa_r+0x5c>
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	604a      	str	r2, [r1, #4]
 800c65a:	2301      	movs	r3, #1
 800c65c:	4093      	lsls	r3, r2
 800c65e:	608b      	str	r3, [r1, #8]
 800c660:	4620      	mov	r0, r4
 800c662:	f000 fe53 	bl	800d30c <_Bfree>
 800c666:	69e3      	ldr	r3, [r4, #28]
 800c668:	2200      	movs	r2, #0
 800c66a:	601a      	str	r2, [r3, #0]
 800c66c:	1e3b      	subs	r3, r7, #0
 800c66e:	bfbb      	ittet	lt
 800c670:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c674:	9303      	strlt	r3, [sp, #12]
 800c676:	2300      	movge	r3, #0
 800c678:	2201      	movlt	r2, #1
 800c67a:	bfac      	ite	ge
 800c67c:	f8c8 3000 	strge.w	r3, [r8]
 800c680:	f8c8 2000 	strlt.w	r2, [r8]
 800c684:	4b9e      	ldr	r3, [pc, #632]	; (800c900 <_dtoa_r+0x2f0>)
 800c686:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c68a:	ea33 0308 	bics.w	r3, r3, r8
 800c68e:	d11b      	bne.n	800c6c8 <_dtoa_r+0xb8>
 800c690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c692:	f242 730f 	movw	r3, #9999	; 0x270f
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c69c:	4333      	orrs	r3, r6
 800c69e:	f000 8593 	beq.w	800d1c8 <_dtoa_r+0xbb8>
 800c6a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6a4:	b963      	cbnz	r3, 800c6c0 <_dtoa_r+0xb0>
 800c6a6:	4b97      	ldr	r3, [pc, #604]	; (800c904 <_dtoa_r+0x2f4>)
 800c6a8:	e027      	b.n	800c6fa <_dtoa_r+0xea>
 800c6aa:	4b97      	ldr	r3, [pc, #604]	; (800c908 <_dtoa_r+0x2f8>)
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6b2:	6013      	str	r3, [r2, #0]
 800c6b4:	9800      	ldr	r0, [sp, #0]
 800c6b6:	b013      	add	sp, #76	; 0x4c
 800c6b8:	ecbd 8b04 	vpop	{d8-d9}
 800c6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c0:	4b90      	ldr	r3, [pc, #576]	; (800c904 <_dtoa_r+0x2f4>)
 800c6c2:	9300      	str	r3, [sp, #0]
 800c6c4:	3303      	adds	r3, #3
 800c6c6:	e7f3      	b.n	800c6b0 <_dtoa_r+0xa0>
 800c6c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	ec51 0b17 	vmov	r0, r1, d7
 800c6d2:	eeb0 8a47 	vmov.f32	s16, s14
 800c6d6:	eef0 8a67 	vmov.f32	s17, s15
 800c6da:	2300      	movs	r3, #0
 800c6dc:	f7f4 f9fc 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6e0:	4681      	mov	r9, r0
 800c6e2:	b160      	cbz	r0, 800c6fe <_dtoa_r+0xee>
 800c6e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	6013      	str	r3, [r2, #0]
 800c6ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f000 8568 	beq.w	800d1c2 <_dtoa_r+0xbb2>
 800c6f2:	4b86      	ldr	r3, [pc, #536]	; (800c90c <_dtoa_r+0x2fc>)
 800c6f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6f6:	6013      	str	r3, [r2, #0]
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	e7da      	b.n	800c6b4 <_dtoa_r+0xa4>
 800c6fe:	aa10      	add	r2, sp, #64	; 0x40
 800c700:	a911      	add	r1, sp, #68	; 0x44
 800c702:	4620      	mov	r0, r4
 800c704:	eeb0 0a48 	vmov.f32	s0, s16
 800c708:	eef0 0a68 	vmov.f32	s1, s17
 800c70c:	f001 f8e0 	bl	800d8d0 <__d2b>
 800c710:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c714:	4682      	mov	sl, r0
 800c716:	2d00      	cmp	r5, #0
 800c718:	d07f      	beq.n	800c81a <_dtoa_r+0x20a>
 800c71a:	ee18 3a90 	vmov	r3, s17
 800c71e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c722:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c726:	ec51 0b18 	vmov	r0, r1, d8
 800c72a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c72e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c732:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c736:	4619      	mov	r1, r3
 800c738:	2200      	movs	r2, #0
 800c73a:	4b75      	ldr	r3, [pc, #468]	; (800c910 <_dtoa_r+0x300>)
 800c73c:	f7f3 fdac 	bl	8000298 <__aeabi_dsub>
 800c740:	a367      	add	r3, pc, #412	; (adr r3, 800c8e0 <_dtoa_r+0x2d0>)
 800c742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c746:	f7f3 ff5f 	bl	8000608 <__aeabi_dmul>
 800c74a:	a367      	add	r3, pc, #412	; (adr r3, 800c8e8 <_dtoa_r+0x2d8>)
 800c74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c750:	f7f3 fda4 	bl	800029c <__adddf3>
 800c754:	4606      	mov	r6, r0
 800c756:	4628      	mov	r0, r5
 800c758:	460f      	mov	r7, r1
 800c75a:	f7f3 feeb 	bl	8000534 <__aeabi_i2d>
 800c75e:	a364      	add	r3, pc, #400	; (adr r3, 800c8f0 <_dtoa_r+0x2e0>)
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	f7f3 ff50 	bl	8000608 <__aeabi_dmul>
 800c768:	4602      	mov	r2, r0
 800c76a:	460b      	mov	r3, r1
 800c76c:	4630      	mov	r0, r6
 800c76e:	4639      	mov	r1, r7
 800c770:	f7f3 fd94 	bl	800029c <__adddf3>
 800c774:	4606      	mov	r6, r0
 800c776:	460f      	mov	r7, r1
 800c778:	f7f4 f9f6 	bl	8000b68 <__aeabi_d2iz>
 800c77c:	2200      	movs	r2, #0
 800c77e:	4683      	mov	fp, r0
 800c780:	2300      	movs	r3, #0
 800c782:	4630      	mov	r0, r6
 800c784:	4639      	mov	r1, r7
 800c786:	f7f4 f9b1 	bl	8000aec <__aeabi_dcmplt>
 800c78a:	b148      	cbz	r0, 800c7a0 <_dtoa_r+0x190>
 800c78c:	4658      	mov	r0, fp
 800c78e:	f7f3 fed1 	bl	8000534 <__aeabi_i2d>
 800c792:	4632      	mov	r2, r6
 800c794:	463b      	mov	r3, r7
 800c796:	f7f4 f99f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c79a:	b908      	cbnz	r0, 800c7a0 <_dtoa_r+0x190>
 800c79c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c7a0:	f1bb 0f16 	cmp.w	fp, #22
 800c7a4:	d857      	bhi.n	800c856 <_dtoa_r+0x246>
 800c7a6:	4b5b      	ldr	r3, [pc, #364]	; (800c914 <_dtoa_r+0x304>)
 800c7a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b0:	ec51 0b18 	vmov	r0, r1, d8
 800c7b4:	f7f4 f99a 	bl	8000aec <__aeabi_dcmplt>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	d04e      	beq.n	800c85a <_dtoa_r+0x24a>
 800c7bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	930c      	str	r3, [sp, #48]	; 0x30
 800c7c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7c6:	1b5b      	subs	r3, r3, r5
 800c7c8:	1e5a      	subs	r2, r3, #1
 800c7ca:	bf45      	ittet	mi
 800c7cc:	f1c3 0301 	rsbmi	r3, r3, #1
 800c7d0:	9305      	strmi	r3, [sp, #20]
 800c7d2:	2300      	movpl	r3, #0
 800c7d4:	2300      	movmi	r3, #0
 800c7d6:	9206      	str	r2, [sp, #24]
 800c7d8:	bf54      	ite	pl
 800c7da:	9305      	strpl	r3, [sp, #20]
 800c7dc:	9306      	strmi	r3, [sp, #24]
 800c7de:	f1bb 0f00 	cmp.w	fp, #0
 800c7e2:	db3c      	blt.n	800c85e <_dtoa_r+0x24e>
 800c7e4:	9b06      	ldr	r3, [sp, #24]
 800c7e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c7ea:	445b      	add	r3, fp
 800c7ec:	9306      	str	r3, [sp, #24]
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	9308      	str	r3, [sp, #32]
 800c7f2:	9b07      	ldr	r3, [sp, #28]
 800c7f4:	2b09      	cmp	r3, #9
 800c7f6:	d868      	bhi.n	800c8ca <_dtoa_r+0x2ba>
 800c7f8:	2b05      	cmp	r3, #5
 800c7fa:	bfc4      	itt	gt
 800c7fc:	3b04      	subgt	r3, #4
 800c7fe:	9307      	strgt	r3, [sp, #28]
 800c800:	9b07      	ldr	r3, [sp, #28]
 800c802:	f1a3 0302 	sub.w	r3, r3, #2
 800c806:	bfcc      	ite	gt
 800c808:	2500      	movgt	r5, #0
 800c80a:	2501      	movle	r5, #1
 800c80c:	2b03      	cmp	r3, #3
 800c80e:	f200 8085 	bhi.w	800c91c <_dtoa_r+0x30c>
 800c812:	e8df f003 	tbb	[pc, r3]
 800c816:	3b2e      	.short	0x3b2e
 800c818:	5839      	.short	0x5839
 800c81a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c81e:	441d      	add	r5, r3
 800c820:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c824:	2b20      	cmp	r3, #32
 800c826:	bfc1      	itttt	gt
 800c828:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c82c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c830:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c834:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c838:	bfd6      	itet	le
 800c83a:	f1c3 0320 	rsble	r3, r3, #32
 800c83e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c842:	fa06 f003 	lslle.w	r0, r6, r3
 800c846:	f7f3 fe65 	bl	8000514 <__aeabi_ui2d>
 800c84a:	2201      	movs	r2, #1
 800c84c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c850:	3d01      	subs	r5, #1
 800c852:	920e      	str	r2, [sp, #56]	; 0x38
 800c854:	e76f      	b.n	800c736 <_dtoa_r+0x126>
 800c856:	2301      	movs	r3, #1
 800c858:	e7b3      	b.n	800c7c2 <_dtoa_r+0x1b2>
 800c85a:	900c      	str	r0, [sp, #48]	; 0x30
 800c85c:	e7b2      	b.n	800c7c4 <_dtoa_r+0x1b4>
 800c85e:	9b05      	ldr	r3, [sp, #20]
 800c860:	eba3 030b 	sub.w	r3, r3, fp
 800c864:	9305      	str	r3, [sp, #20]
 800c866:	f1cb 0300 	rsb	r3, fp, #0
 800c86a:	9308      	str	r3, [sp, #32]
 800c86c:	2300      	movs	r3, #0
 800c86e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c870:	e7bf      	b.n	800c7f2 <_dtoa_r+0x1e2>
 800c872:	2300      	movs	r3, #0
 800c874:	9309      	str	r3, [sp, #36]	; 0x24
 800c876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c878:	2b00      	cmp	r3, #0
 800c87a:	dc52      	bgt.n	800c922 <_dtoa_r+0x312>
 800c87c:	2301      	movs	r3, #1
 800c87e:	9301      	str	r3, [sp, #4]
 800c880:	9304      	str	r3, [sp, #16]
 800c882:	461a      	mov	r2, r3
 800c884:	920a      	str	r2, [sp, #40]	; 0x28
 800c886:	e00b      	b.n	800c8a0 <_dtoa_r+0x290>
 800c888:	2301      	movs	r3, #1
 800c88a:	e7f3      	b.n	800c874 <_dtoa_r+0x264>
 800c88c:	2300      	movs	r3, #0
 800c88e:	9309      	str	r3, [sp, #36]	; 0x24
 800c890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c892:	445b      	add	r3, fp
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	3301      	adds	r3, #1
 800c898:	2b01      	cmp	r3, #1
 800c89a:	9304      	str	r3, [sp, #16]
 800c89c:	bfb8      	it	lt
 800c89e:	2301      	movlt	r3, #1
 800c8a0:	69e0      	ldr	r0, [r4, #28]
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	2204      	movs	r2, #4
 800c8a6:	f102 0614 	add.w	r6, r2, #20
 800c8aa:	429e      	cmp	r6, r3
 800c8ac:	d93d      	bls.n	800c92a <_dtoa_r+0x31a>
 800c8ae:	6041      	str	r1, [r0, #4]
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f000 fceb 	bl	800d28c <_Balloc>
 800c8b6:	9000      	str	r0, [sp, #0]
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d139      	bne.n	800c930 <_dtoa_r+0x320>
 800c8bc:	4b16      	ldr	r3, [pc, #88]	; (800c918 <_dtoa_r+0x308>)
 800c8be:	4602      	mov	r2, r0
 800c8c0:	f240 11af 	movw	r1, #431	; 0x1af
 800c8c4:	e6bd      	b.n	800c642 <_dtoa_r+0x32>
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e7e1      	b.n	800c88e <_dtoa_r+0x27e>
 800c8ca:	2501      	movs	r5, #1
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	9307      	str	r3, [sp, #28]
 800c8d0:	9509      	str	r5, [sp, #36]	; 0x24
 800c8d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d6:	9301      	str	r3, [sp, #4]
 800c8d8:	9304      	str	r3, [sp, #16]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2312      	movs	r3, #18
 800c8de:	e7d1      	b.n	800c884 <_dtoa_r+0x274>
 800c8e0:	636f4361 	.word	0x636f4361
 800c8e4:	3fd287a7 	.word	0x3fd287a7
 800c8e8:	8b60c8b3 	.word	0x8b60c8b3
 800c8ec:	3fc68a28 	.word	0x3fc68a28
 800c8f0:	509f79fb 	.word	0x509f79fb
 800c8f4:	3fd34413 	.word	0x3fd34413
 800c8f8:	0800f06d 	.word	0x0800f06d
 800c8fc:	0800f084 	.word	0x0800f084
 800c900:	7ff00000 	.word	0x7ff00000
 800c904:	0800f069 	.word	0x0800f069
 800c908:	0800f060 	.word	0x0800f060
 800c90c:	0800f03d 	.word	0x0800f03d
 800c910:	3ff80000 	.word	0x3ff80000
 800c914:	0800f170 	.word	0x0800f170
 800c918:	0800f0dc 	.word	0x0800f0dc
 800c91c:	2301      	movs	r3, #1
 800c91e:	9309      	str	r3, [sp, #36]	; 0x24
 800c920:	e7d7      	b.n	800c8d2 <_dtoa_r+0x2c2>
 800c922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c924:	9301      	str	r3, [sp, #4]
 800c926:	9304      	str	r3, [sp, #16]
 800c928:	e7ba      	b.n	800c8a0 <_dtoa_r+0x290>
 800c92a:	3101      	adds	r1, #1
 800c92c:	0052      	lsls	r2, r2, #1
 800c92e:	e7ba      	b.n	800c8a6 <_dtoa_r+0x296>
 800c930:	69e3      	ldr	r3, [r4, #28]
 800c932:	9a00      	ldr	r2, [sp, #0]
 800c934:	601a      	str	r2, [r3, #0]
 800c936:	9b04      	ldr	r3, [sp, #16]
 800c938:	2b0e      	cmp	r3, #14
 800c93a:	f200 80a8 	bhi.w	800ca8e <_dtoa_r+0x47e>
 800c93e:	2d00      	cmp	r5, #0
 800c940:	f000 80a5 	beq.w	800ca8e <_dtoa_r+0x47e>
 800c944:	f1bb 0f00 	cmp.w	fp, #0
 800c948:	dd38      	ble.n	800c9bc <_dtoa_r+0x3ac>
 800c94a:	4bc0      	ldr	r3, [pc, #768]	; (800cc4c <_dtoa_r+0x63c>)
 800c94c:	f00b 020f 	and.w	r2, fp, #15
 800c950:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c954:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c958:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c95c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c960:	d019      	beq.n	800c996 <_dtoa_r+0x386>
 800c962:	4bbb      	ldr	r3, [pc, #748]	; (800cc50 <_dtoa_r+0x640>)
 800c964:	ec51 0b18 	vmov	r0, r1, d8
 800c968:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c96c:	f7f3 ff76 	bl	800085c <__aeabi_ddiv>
 800c970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c974:	f008 080f 	and.w	r8, r8, #15
 800c978:	2503      	movs	r5, #3
 800c97a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cc50 <_dtoa_r+0x640>
 800c97e:	f1b8 0f00 	cmp.w	r8, #0
 800c982:	d10a      	bne.n	800c99a <_dtoa_r+0x38a>
 800c984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c988:	4632      	mov	r2, r6
 800c98a:	463b      	mov	r3, r7
 800c98c:	f7f3 ff66 	bl	800085c <__aeabi_ddiv>
 800c990:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c994:	e02b      	b.n	800c9ee <_dtoa_r+0x3de>
 800c996:	2502      	movs	r5, #2
 800c998:	e7ef      	b.n	800c97a <_dtoa_r+0x36a>
 800c99a:	f018 0f01 	tst.w	r8, #1
 800c99e:	d008      	beq.n	800c9b2 <_dtoa_r+0x3a2>
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c9a8:	f7f3 fe2e 	bl	8000608 <__aeabi_dmul>
 800c9ac:	3501      	adds	r5, #1
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	460f      	mov	r7, r1
 800c9b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c9b6:	f109 0908 	add.w	r9, r9, #8
 800c9ba:	e7e0      	b.n	800c97e <_dtoa_r+0x36e>
 800c9bc:	f000 809f 	beq.w	800cafe <_dtoa_r+0x4ee>
 800c9c0:	f1cb 0600 	rsb	r6, fp, #0
 800c9c4:	4ba1      	ldr	r3, [pc, #644]	; (800cc4c <_dtoa_r+0x63c>)
 800c9c6:	4fa2      	ldr	r7, [pc, #648]	; (800cc50 <_dtoa_r+0x640>)
 800c9c8:	f006 020f 	and.w	r2, r6, #15
 800c9cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	ec51 0b18 	vmov	r0, r1, d8
 800c9d8:	f7f3 fe16 	bl	8000608 <__aeabi_dmul>
 800c9dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9e0:	1136      	asrs	r6, r6, #4
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	2502      	movs	r5, #2
 800c9e6:	2e00      	cmp	r6, #0
 800c9e8:	d17e      	bne.n	800cae8 <_dtoa_r+0x4d8>
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1d0      	bne.n	800c990 <_dtoa_r+0x380>
 800c9ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f000 8084 	beq.w	800cb02 <_dtoa_r+0x4f2>
 800c9fa:	4b96      	ldr	r3, [pc, #600]	; (800cc54 <_dtoa_r+0x644>)
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	4640      	mov	r0, r8
 800ca00:	4649      	mov	r1, r9
 800ca02:	f7f4 f873 	bl	8000aec <__aeabi_dcmplt>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d07b      	beq.n	800cb02 <_dtoa_r+0x4f2>
 800ca0a:	9b04      	ldr	r3, [sp, #16]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d078      	beq.n	800cb02 <_dtoa_r+0x4f2>
 800ca10:	9b01      	ldr	r3, [sp, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	dd39      	ble.n	800ca8a <_dtoa_r+0x47a>
 800ca16:	4b90      	ldr	r3, [pc, #576]	; (800cc58 <_dtoa_r+0x648>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	4640      	mov	r0, r8
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	f7f3 fdf3 	bl	8000608 <__aeabi_dmul>
 800ca22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca26:	9e01      	ldr	r6, [sp, #4]
 800ca28:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ca2c:	3501      	adds	r5, #1
 800ca2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca32:	4628      	mov	r0, r5
 800ca34:	f7f3 fd7e 	bl	8000534 <__aeabi_i2d>
 800ca38:	4642      	mov	r2, r8
 800ca3a:	464b      	mov	r3, r9
 800ca3c:	f7f3 fde4 	bl	8000608 <__aeabi_dmul>
 800ca40:	4b86      	ldr	r3, [pc, #536]	; (800cc5c <_dtoa_r+0x64c>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	f7f3 fc2a 	bl	800029c <__adddf3>
 800ca48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ca4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca50:	9303      	str	r3, [sp, #12]
 800ca52:	2e00      	cmp	r6, #0
 800ca54:	d158      	bne.n	800cb08 <_dtoa_r+0x4f8>
 800ca56:	4b82      	ldr	r3, [pc, #520]	; (800cc60 <_dtoa_r+0x650>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	4640      	mov	r0, r8
 800ca5c:	4649      	mov	r1, r9
 800ca5e:	f7f3 fc1b 	bl	8000298 <__aeabi_dsub>
 800ca62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca66:	4680      	mov	r8, r0
 800ca68:	4689      	mov	r9, r1
 800ca6a:	f7f4 f85d 	bl	8000b28 <__aeabi_dcmpgt>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	f040 8296 	bne.w	800cfa0 <_dtoa_r+0x990>
 800ca74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ca78:	4640      	mov	r0, r8
 800ca7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca7e:	4649      	mov	r1, r9
 800ca80:	f7f4 f834 	bl	8000aec <__aeabi_dcmplt>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	f040 8289 	bne.w	800cf9c <_dtoa_r+0x98c>
 800ca8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ca8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	f2c0 814e 	blt.w	800cd32 <_dtoa_r+0x722>
 800ca96:	f1bb 0f0e 	cmp.w	fp, #14
 800ca9a:	f300 814a 	bgt.w	800cd32 <_dtoa_r+0x722>
 800ca9e:	4b6b      	ldr	r3, [pc, #428]	; (800cc4c <_dtoa_r+0x63c>)
 800caa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800caa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800caa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f280 80dc 	bge.w	800cc68 <_dtoa_r+0x658>
 800cab0:	9b04      	ldr	r3, [sp, #16]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f300 80d8 	bgt.w	800cc68 <_dtoa_r+0x658>
 800cab8:	f040 826f 	bne.w	800cf9a <_dtoa_r+0x98a>
 800cabc:	4b68      	ldr	r3, [pc, #416]	; (800cc60 <_dtoa_r+0x650>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	4640      	mov	r0, r8
 800cac2:	4649      	mov	r1, r9
 800cac4:	f7f3 fda0 	bl	8000608 <__aeabi_dmul>
 800cac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cacc:	f7f4 f822 	bl	8000b14 <__aeabi_dcmpge>
 800cad0:	9e04      	ldr	r6, [sp, #16]
 800cad2:	4637      	mov	r7, r6
 800cad4:	2800      	cmp	r0, #0
 800cad6:	f040 8245 	bne.w	800cf64 <_dtoa_r+0x954>
 800cada:	9d00      	ldr	r5, [sp, #0]
 800cadc:	2331      	movs	r3, #49	; 0x31
 800cade:	f805 3b01 	strb.w	r3, [r5], #1
 800cae2:	f10b 0b01 	add.w	fp, fp, #1
 800cae6:	e241      	b.n	800cf6c <_dtoa_r+0x95c>
 800cae8:	07f2      	lsls	r2, r6, #31
 800caea:	d505      	bpl.n	800caf8 <_dtoa_r+0x4e8>
 800caec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caf0:	f7f3 fd8a 	bl	8000608 <__aeabi_dmul>
 800caf4:	3501      	adds	r5, #1
 800caf6:	2301      	movs	r3, #1
 800caf8:	1076      	asrs	r6, r6, #1
 800cafa:	3708      	adds	r7, #8
 800cafc:	e773      	b.n	800c9e6 <_dtoa_r+0x3d6>
 800cafe:	2502      	movs	r5, #2
 800cb00:	e775      	b.n	800c9ee <_dtoa_r+0x3de>
 800cb02:	9e04      	ldr	r6, [sp, #16]
 800cb04:	465f      	mov	r7, fp
 800cb06:	e792      	b.n	800ca2e <_dtoa_r+0x41e>
 800cb08:	9900      	ldr	r1, [sp, #0]
 800cb0a:	4b50      	ldr	r3, [pc, #320]	; (800cc4c <_dtoa_r+0x63c>)
 800cb0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb10:	4431      	add	r1, r6
 800cb12:	9102      	str	r1, [sp, #8]
 800cb14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb16:	eeb0 9a47 	vmov.f32	s18, s14
 800cb1a:	eef0 9a67 	vmov.f32	s19, s15
 800cb1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb26:	2900      	cmp	r1, #0
 800cb28:	d044      	beq.n	800cbb4 <_dtoa_r+0x5a4>
 800cb2a:	494e      	ldr	r1, [pc, #312]	; (800cc64 <_dtoa_r+0x654>)
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	f7f3 fe95 	bl	800085c <__aeabi_ddiv>
 800cb32:	ec53 2b19 	vmov	r2, r3, d9
 800cb36:	f7f3 fbaf 	bl	8000298 <__aeabi_dsub>
 800cb3a:	9d00      	ldr	r5, [sp, #0]
 800cb3c:	ec41 0b19 	vmov	d9, r0, r1
 800cb40:	4649      	mov	r1, r9
 800cb42:	4640      	mov	r0, r8
 800cb44:	f7f4 f810 	bl	8000b68 <__aeabi_d2iz>
 800cb48:	4606      	mov	r6, r0
 800cb4a:	f7f3 fcf3 	bl	8000534 <__aeabi_i2d>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	4640      	mov	r0, r8
 800cb54:	4649      	mov	r1, r9
 800cb56:	f7f3 fb9f 	bl	8000298 <__aeabi_dsub>
 800cb5a:	3630      	adds	r6, #48	; 0x30
 800cb5c:	f805 6b01 	strb.w	r6, [r5], #1
 800cb60:	ec53 2b19 	vmov	r2, r3, d9
 800cb64:	4680      	mov	r8, r0
 800cb66:	4689      	mov	r9, r1
 800cb68:	f7f3 ffc0 	bl	8000aec <__aeabi_dcmplt>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d164      	bne.n	800cc3a <_dtoa_r+0x62a>
 800cb70:	4642      	mov	r2, r8
 800cb72:	464b      	mov	r3, r9
 800cb74:	4937      	ldr	r1, [pc, #220]	; (800cc54 <_dtoa_r+0x644>)
 800cb76:	2000      	movs	r0, #0
 800cb78:	f7f3 fb8e 	bl	8000298 <__aeabi_dsub>
 800cb7c:	ec53 2b19 	vmov	r2, r3, d9
 800cb80:	f7f3 ffb4 	bl	8000aec <__aeabi_dcmplt>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	f040 80b6 	bne.w	800ccf6 <_dtoa_r+0x6e6>
 800cb8a:	9b02      	ldr	r3, [sp, #8]
 800cb8c:	429d      	cmp	r5, r3
 800cb8e:	f43f af7c 	beq.w	800ca8a <_dtoa_r+0x47a>
 800cb92:	4b31      	ldr	r3, [pc, #196]	; (800cc58 <_dtoa_r+0x648>)
 800cb94:	ec51 0b19 	vmov	r0, r1, d9
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f7f3 fd35 	bl	8000608 <__aeabi_dmul>
 800cb9e:	4b2e      	ldr	r3, [pc, #184]	; (800cc58 <_dtoa_r+0x648>)
 800cba0:	ec41 0b19 	vmov	d9, r0, r1
 800cba4:	2200      	movs	r2, #0
 800cba6:	4640      	mov	r0, r8
 800cba8:	4649      	mov	r1, r9
 800cbaa:	f7f3 fd2d 	bl	8000608 <__aeabi_dmul>
 800cbae:	4680      	mov	r8, r0
 800cbb0:	4689      	mov	r9, r1
 800cbb2:	e7c5      	b.n	800cb40 <_dtoa_r+0x530>
 800cbb4:	ec51 0b17 	vmov	r0, r1, d7
 800cbb8:	f7f3 fd26 	bl	8000608 <__aeabi_dmul>
 800cbbc:	9b02      	ldr	r3, [sp, #8]
 800cbbe:	9d00      	ldr	r5, [sp, #0]
 800cbc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbc2:	ec41 0b19 	vmov	d9, r0, r1
 800cbc6:	4649      	mov	r1, r9
 800cbc8:	4640      	mov	r0, r8
 800cbca:	f7f3 ffcd 	bl	8000b68 <__aeabi_d2iz>
 800cbce:	4606      	mov	r6, r0
 800cbd0:	f7f3 fcb0 	bl	8000534 <__aeabi_i2d>
 800cbd4:	3630      	adds	r6, #48	; 0x30
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	460b      	mov	r3, r1
 800cbda:	4640      	mov	r0, r8
 800cbdc:	4649      	mov	r1, r9
 800cbde:	f7f3 fb5b 	bl	8000298 <__aeabi_dsub>
 800cbe2:	f805 6b01 	strb.w	r6, [r5], #1
 800cbe6:	9b02      	ldr	r3, [sp, #8]
 800cbe8:	429d      	cmp	r5, r3
 800cbea:	4680      	mov	r8, r0
 800cbec:	4689      	mov	r9, r1
 800cbee:	f04f 0200 	mov.w	r2, #0
 800cbf2:	d124      	bne.n	800cc3e <_dtoa_r+0x62e>
 800cbf4:	4b1b      	ldr	r3, [pc, #108]	; (800cc64 <_dtoa_r+0x654>)
 800cbf6:	ec51 0b19 	vmov	r0, r1, d9
 800cbfa:	f7f3 fb4f 	bl	800029c <__adddf3>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	4640      	mov	r0, r8
 800cc04:	4649      	mov	r1, r9
 800cc06:	f7f3 ff8f 	bl	8000b28 <__aeabi_dcmpgt>
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	d173      	bne.n	800ccf6 <_dtoa_r+0x6e6>
 800cc0e:	ec53 2b19 	vmov	r2, r3, d9
 800cc12:	4914      	ldr	r1, [pc, #80]	; (800cc64 <_dtoa_r+0x654>)
 800cc14:	2000      	movs	r0, #0
 800cc16:	f7f3 fb3f 	bl	8000298 <__aeabi_dsub>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	4640      	mov	r0, r8
 800cc20:	4649      	mov	r1, r9
 800cc22:	f7f3 ff63 	bl	8000aec <__aeabi_dcmplt>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	f43f af2f 	beq.w	800ca8a <_dtoa_r+0x47a>
 800cc2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc2e:	1e6b      	subs	r3, r5, #1
 800cc30:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc36:	2b30      	cmp	r3, #48	; 0x30
 800cc38:	d0f8      	beq.n	800cc2c <_dtoa_r+0x61c>
 800cc3a:	46bb      	mov	fp, r7
 800cc3c:	e04a      	b.n	800ccd4 <_dtoa_r+0x6c4>
 800cc3e:	4b06      	ldr	r3, [pc, #24]	; (800cc58 <_dtoa_r+0x648>)
 800cc40:	f7f3 fce2 	bl	8000608 <__aeabi_dmul>
 800cc44:	4680      	mov	r8, r0
 800cc46:	4689      	mov	r9, r1
 800cc48:	e7bd      	b.n	800cbc6 <_dtoa_r+0x5b6>
 800cc4a:	bf00      	nop
 800cc4c:	0800f170 	.word	0x0800f170
 800cc50:	0800f148 	.word	0x0800f148
 800cc54:	3ff00000 	.word	0x3ff00000
 800cc58:	40240000 	.word	0x40240000
 800cc5c:	401c0000 	.word	0x401c0000
 800cc60:	40140000 	.word	0x40140000
 800cc64:	3fe00000 	.word	0x3fe00000
 800cc68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cc6c:	9d00      	ldr	r5, [sp, #0]
 800cc6e:	4642      	mov	r2, r8
 800cc70:	464b      	mov	r3, r9
 800cc72:	4630      	mov	r0, r6
 800cc74:	4639      	mov	r1, r7
 800cc76:	f7f3 fdf1 	bl	800085c <__aeabi_ddiv>
 800cc7a:	f7f3 ff75 	bl	8000b68 <__aeabi_d2iz>
 800cc7e:	9001      	str	r0, [sp, #4]
 800cc80:	f7f3 fc58 	bl	8000534 <__aeabi_i2d>
 800cc84:	4642      	mov	r2, r8
 800cc86:	464b      	mov	r3, r9
 800cc88:	f7f3 fcbe 	bl	8000608 <__aeabi_dmul>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	4630      	mov	r0, r6
 800cc92:	4639      	mov	r1, r7
 800cc94:	f7f3 fb00 	bl	8000298 <__aeabi_dsub>
 800cc98:	9e01      	ldr	r6, [sp, #4]
 800cc9a:	9f04      	ldr	r7, [sp, #16]
 800cc9c:	3630      	adds	r6, #48	; 0x30
 800cc9e:	f805 6b01 	strb.w	r6, [r5], #1
 800cca2:	9e00      	ldr	r6, [sp, #0]
 800cca4:	1bae      	subs	r6, r5, r6
 800cca6:	42b7      	cmp	r7, r6
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	d134      	bne.n	800cd18 <_dtoa_r+0x708>
 800ccae:	f7f3 faf5 	bl	800029c <__adddf3>
 800ccb2:	4642      	mov	r2, r8
 800ccb4:	464b      	mov	r3, r9
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	460f      	mov	r7, r1
 800ccba:	f7f3 ff35 	bl	8000b28 <__aeabi_dcmpgt>
 800ccbe:	b9c8      	cbnz	r0, 800ccf4 <_dtoa_r+0x6e4>
 800ccc0:	4642      	mov	r2, r8
 800ccc2:	464b      	mov	r3, r9
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	4639      	mov	r1, r7
 800ccc8:	f7f3 ff06 	bl	8000ad8 <__aeabi_dcmpeq>
 800cccc:	b110      	cbz	r0, 800ccd4 <_dtoa_r+0x6c4>
 800ccce:	9b01      	ldr	r3, [sp, #4]
 800ccd0:	07db      	lsls	r3, r3, #31
 800ccd2:	d40f      	bmi.n	800ccf4 <_dtoa_r+0x6e4>
 800ccd4:	4651      	mov	r1, sl
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f000 fb18 	bl	800d30c <_Bfree>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cce0:	702b      	strb	r3, [r5, #0]
 800cce2:	f10b 0301 	add.w	r3, fp, #1
 800cce6:	6013      	str	r3, [r2, #0]
 800cce8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f43f ace2 	beq.w	800c6b4 <_dtoa_r+0xa4>
 800ccf0:	601d      	str	r5, [r3, #0]
 800ccf2:	e4df      	b.n	800c6b4 <_dtoa_r+0xa4>
 800ccf4:	465f      	mov	r7, fp
 800ccf6:	462b      	mov	r3, r5
 800ccf8:	461d      	mov	r5, r3
 800ccfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccfe:	2a39      	cmp	r2, #57	; 0x39
 800cd00:	d106      	bne.n	800cd10 <_dtoa_r+0x700>
 800cd02:	9a00      	ldr	r2, [sp, #0]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d1f7      	bne.n	800ccf8 <_dtoa_r+0x6e8>
 800cd08:	9900      	ldr	r1, [sp, #0]
 800cd0a:	2230      	movs	r2, #48	; 0x30
 800cd0c:	3701      	adds	r7, #1
 800cd0e:	700a      	strb	r2, [r1, #0]
 800cd10:	781a      	ldrb	r2, [r3, #0]
 800cd12:	3201      	adds	r2, #1
 800cd14:	701a      	strb	r2, [r3, #0]
 800cd16:	e790      	b.n	800cc3a <_dtoa_r+0x62a>
 800cd18:	4ba3      	ldr	r3, [pc, #652]	; (800cfa8 <_dtoa_r+0x998>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f7f3 fc74 	bl	8000608 <__aeabi_dmul>
 800cd20:	2200      	movs	r2, #0
 800cd22:	2300      	movs	r3, #0
 800cd24:	4606      	mov	r6, r0
 800cd26:	460f      	mov	r7, r1
 800cd28:	f7f3 fed6 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d09e      	beq.n	800cc6e <_dtoa_r+0x65e>
 800cd30:	e7d0      	b.n	800ccd4 <_dtoa_r+0x6c4>
 800cd32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd34:	2a00      	cmp	r2, #0
 800cd36:	f000 80ca 	beq.w	800cece <_dtoa_r+0x8be>
 800cd3a:	9a07      	ldr	r2, [sp, #28]
 800cd3c:	2a01      	cmp	r2, #1
 800cd3e:	f300 80ad 	bgt.w	800ce9c <_dtoa_r+0x88c>
 800cd42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd44:	2a00      	cmp	r2, #0
 800cd46:	f000 80a5 	beq.w	800ce94 <_dtoa_r+0x884>
 800cd4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd4e:	9e08      	ldr	r6, [sp, #32]
 800cd50:	9d05      	ldr	r5, [sp, #20]
 800cd52:	9a05      	ldr	r2, [sp, #20]
 800cd54:	441a      	add	r2, r3
 800cd56:	9205      	str	r2, [sp, #20]
 800cd58:	9a06      	ldr	r2, [sp, #24]
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	441a      	add	r2, r3
 800cd5e:	4620      	mov	r0, r4
 800cd60:	9206      	str	r2, [sp, #24]
 800cd62:	f000 fb89 	bl	800d478 <__i2b>
 800cd66:	4607      	mov	r7, r0
 800cd68:	b165      	cbz	r5, 800cd84 <_dtoa_r+0x774>
 800cd6a:	9b06      	ldr	r3, [sp, #24]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	dd09      	ble.n	800cd84 <_dtoa_r+0x774>
 800cd70:	42ab      	cmp	r3, r5
 800cd72:	9a05      	ldr	r2, [sp, #20]
 800cd74:	bfa8      	it	ge
 800cd76:	462b      	movge	r3, r5
 800cd78:	1ad2      	subs	r2, r2, r3
 800cd7a:	9205      	str	r2, [sp, #20]
 800cd7c:	9a06      	ldr	r2, [sp, #24]
 800cd7e:	1aed      	subs	r5, r5, r3
 800cd80:	1ad3      	subs	r3, r2, r3
 800cd82:	9306      	str	r3, [sp, #24]
 800cd84:	9b08      	ldr	r3, [sp, #32]
 800cd86:	b1f3      	cbz	r3, 800cdc6 <_dtoa_r+0x7b6>
 800cd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f000 80a3 	beq.w	800ced6 <_dtoa_r+0x8c6>
 800cd90:	2e00      	cmp	r6, #0
 800cd92:	dd10      	ble.n	800cdb6 <_dtoa_r+0x7a6>
 800cd94:	4639      	mov	r1, r7
 800cd96:	4632      	mov	r2, r6
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f000 fc2d 	bl	800d5f8 <__pow5mult>
 800cd9e:	4652      	mov	r2, sl
 800cda0:	4601      	mov	r1, r0
 800cda2:	4607      	mov	r7, r0
 800cda4:	4620      	mov	r0, r4
 800cda6:	f000 fb7d 	bl	800d4a4 <__multiply>
 800cdaa:	4651      	mov	r1, sl
 800cdac:	4680      	mov	r8, r0
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f000 faac 	bl	800d30c <_Bfree>
 800cdb4:	46c2      	mov	sl, r8
 800cdb6:	9b08      	ldr	r3, [sp, #32]
 800cdb8:	1b9a      	subs	r2, r3, r6
 800cdba:	d004      	beq.n	800cdc6 <_dtoa_r+0x7b6>
 800cdbc:	4651      	mov	r1, sl
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f000 fc1a 	bl	800d5f8 <__pow5mult>
 800cdc4:	4682      	mov	sl, r0
 800cdc6:	2101      	movs	r1, #1
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f000 fb55 	bl	800d478 <__i2b>
 800cdce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	4606      	mov	r6, r0
 800cdd4:	f340 8081 	ble.w	800ceda <_dtoa_r+0x8ca>
 800cdd8:	461a      	mov	r2, r3
 800cdda:	4601      	mov	r1, r0
 800cddc:	4620      	mov	r0, r4
 800cdde:	f000 fc0b 	bl	800d5f8 <__pow5mult>
 800cde2:	9b07      	ldr	r3, [sp, #28]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	4606      	mov	r6, r0
 800cde8:	dd7a      	ble.n	800cee0 <_dtoa_r+0x8d0>
 800cdea:	f04f 0800 	mov.w	r8, #0
 800cdee:	6933      	ldr	r3, [r6, #16]
 800cdf0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cdf4:	6918      	ldr	r0, [r3, #16]
 800cdf6:	f000 faf1 	bl	800d3dc <__hi0bits>
 800cdfa:	f1c0 0020 	rsb	r0, r0, #32
 800cdfe:	9b06      	ldr	r3, [sp, #24]
 800ce00:	4418      	add	r0, r3
 800ce02:	f010 001f 	ands.w	r0, r0, #31
 800ce06:	f000 8094 	beq.w	800cf32 <_dtoa_r+0x922>
 800ce0a:	f1c0 0320 	rsb	r3, r0, #32
 800ce0e:	2b04      	cmp	r3, #4
 800ce10:	f340 8085 	ble.w	800cf1e <_dtoa_r+0x90e>
 800ce14:	9b05      	ldr	r3, [sp, #20]
 800ce16:	f1c0 001c 	rsb	r0, r0, #28
 800ce1a:	4403      	add	r3, r0
 800ce1c:	9305      	str	r3, [sp, #20]
 800ce1e:	9b06      	ldr	r3, [sp, #24]
 800ce20:	4403      	add	r3, r0
 800ce22:	4405      	add	r5, r0
 800ce24:	9306      	str	r3, [sp, #24]
 800ce26:	9b05      	ldr	r3, [sp, #20]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	dd05      	ble.n	800ce38 <_dtoa_r+0x828>
 800ce2c:	4651      	mov	r1, sl
 800ce2e:	461a      	mov	r2, r3
 800ce30:	4620      	mov	r0, r4
 800ce32:	f000 fc3b 	bl	800d6ac <__lshift>
 800ce36:	4682      	mov	sl, r0
 800ce38:	9b06      	ldr	r3, [sp, #24]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	dd05      	ble.n	800ce4a <_dtoa_r+0x83a>
 800ce3e:	4631      	mov	r1, r6
 800ce40:	461a      	mov	r2, r3
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 fc32 	bl	800d6ac <__lshift>
 800ce48:	4606      	mov	r6, r0
 800ce4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d072      	beq.n	800cf36 <_dtoa_r+0x926>
 800ce50:	4631      	mov	r1, r6
 800ce52:	4650      	mov	r0, sl
 800ce54:	f000 fc96 	bl	800d784 <__mcmp>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	da6c      	bge.n	800cf36 <_dtoa_r+0x926>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	4651      	mov	r1, sl
 800ce60:	220a      	movs	r2, #10
 800ce62:	4620      	mov	r0, r4
 800ce64:	f000 fa74 	bl	800d350 <__multadd>
 800ce68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce6e:	4682      	mov	sl, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f000 81b0 	beq.w	800d1d6 <_dtoa_r+0xbc6>
 800ce76:	2300      	movs	r3, #0
 800ce78:	4639      	mov	r1, r7
 800ce7a:	220a      	movs	r2, #10
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f000 fa67 	bl	800d350 <__multadd>
 800ce82:	9b01      	ldr	r3, [sp, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	4607      	mov	r7, r0
 800ce88:	f300 8096 	bgt.w	800cfb8 <_dtoa_r+0x9a8>
 800ce8c:	9b07      	ldr	r3, [sp, #28]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	dc59      	bgt.n	800cf46 <_dtoa_r+0x936>
 800ce92:	e091      	b.n	800cfb8 <_dtoa_r+0x9a8>
 800ce94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce9a:	e758      	b.n	800cd4e <_dtoa_r+0x73e>
 800ce9c:	9b04      	ldr	r3, [sp, #16]
 800ce9e:	1e5e      	subs	r6, r3, #1
 800cea0:	9b08      	ldr	r3, [sp, #32]
 800cea2:	42b3      	cmp	r3, r6
 800cea4:	bfbf      	itttt	lt
 800cea6:	9b08      	ldrlt	r3, [sp, #32]
 800cea8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ceaa:	9608      	strlt	r6, [sp, #32]
 800ceac:	1af3      	sublt	r3, r6, r3
 800ceae:	bfb4      	ite	lt
 800ceb0:	18d2      	addlt	r2, r2, r3
 800ceb2:	1b9e      	subge	r6, r3, r6
 800ceb4:	9b04      	ldr	r3, [sp, #16]
 800ceb6:	bfbc      	itt	lt
 800ceb8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ceba:	2600      	movlt	r6, #0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	bfb7      	itett	lt
 800cec0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cec4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cec8:	1a9d      	sublt	r5, r3, r2
 800ceca:	2300      	movlt	r3, #0
 800cecc:	e741      	b.n	800cd52 <_dtoa_r+0x742>
 800cece:	9e08      	ldr	r6, [sp, #32]
 800ced0:	9d05      	ldr	r5, [sp, #20]
 800ced2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ced4:	e748      	b.n	800cd68 <_dtoa_r+0x758>
 800ced6:	9a08      	ldr	r2, [sp, #32]
 800ced8:	e770      	b.n	800cdbc <_dtoa_r+0x7ac>
 800ceda:	9b07      	ldr	r3, [sp, #28]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	dc19      	bgt.n	800cf14 <_dtoa_r+0x904>
 800cee0:	9b02      	ldr	r3, [sp, #8]
 800cee2:	b9bb      	cbnz	r3, 800cf14 <_dtoa_r+0x904>
 800cee4:	9b03      	ldr	r3, [sp, #12]
 800cee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ceea:	b99b      	cbnz	r3, 800cf14 <_dtoa_r+0x904>
 800ceec:	9b03      	ldr	r3, [sp, #12]
 800ceee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cef2:	0d1b      	lsrs	r3, r3, #20
 800cef4:	051b      	lsls	r3, r3, #20
 800cef6:	b183      	cbz	r3, 800cf1a <_dtoa_r+0x90a>
 800cef8:	9b05      	ldr	r3, [sp, #20]
 800cefa:	3301      	adds	r3, #1
 800cefc:	9305      	str	r3, [sp, #20]
 800cefe:	9b06      	ldr	r3, [sp, #24]
 800cf00:	3301      	adds	r3, #1
 800cf02:	9306      	str	r3, [sp, #24]
 800cf04:	f04f 0801 	mov.w	r8, #1
 800cf08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f47f af6f 	bne.w	800cdee <_dtoa_r+0x7de>
 800cf10:	2001      	movs	r0, #1
 800cf12:	e774      	b.n	800cdfe <_dtoa_r+0x7ee>
 800cf14:	f04f 0800 	mov.w	r8, #0
 800cf18:	e7f6      	b.n	800cf08 <_dtoa_r+0x8f8>
 800cf1a:	4698      	mov	r8, r3
 800cf1c:	e7f4      	b.n	800cf08 <_dtoa_r+0x8f8>
 800cf1e:	d082      	beq.n	800ce26 <_dtoa_r+0x816>
 800cf20:	9a05      	ldr	r2, [sp, #20]
 800cf22:	331c      	adds	r3, #28
 800cf24:	441a      	add	r2, r3
 800cf26:	9205      	str	r2, [sp, #20]
 800cf28:	9a06      	ldr	r2, [sp, #24]
 800cf2a:	441a      	add	r2, r3
 800cf2c:	441d      	add	r5, r3
 800cf2e:	9206      	str	r2, [sp, #24]
 800cf30:	e779      	b.n	800ce26 <_dtoa_r+0x816>
 800cf32:	4603      	mov	r3, r0
 800cf34:	e7f4      	b.n	800cf20 <_dtoa_r+0x910>
 800cf36:	9b04      	ldr	r3, [sp, #16]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	dc37      	bgt.n	800cfac <_dtoa_r+0x99c>
 800cf3c:	9b07      	ldr	r3, [sp, #28]
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	dd34      	ble.n	800cfac <_dtoa_r+0x99c>
 800cf42:	9b04      	ldr	r3, [sp, #16]
 800cf44:	9301      	str	r3, [sp, #4]
 800cf46:	9b01      	ldr	r3, [sp, #4]
 800cf48:	b963      	cbnz	r3, 800cf64 <_dtoa_r+0x954>
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	2205      	movs	r2, #5
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f000 f9fe 	bl	800d350 <__multadd>
 800cf54:	4601      	mov	r1, r0
 800cf56:	4606      	mov	r6, r0
 800cf58:	4650      	mov	r0, sl
 800cf5a:	f000 fc13 	bl	800d784 <__mcmp>
 800cf5e:	2800      	cmp	r0, #0
 800cf60:	f73f adbb 	bgt.w	800cada <_dtoa_r+0x4ca>
 800cf64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf66:	9d00      	ldr	r5, [sp, #0]
 800cf68:	ea6f 0b03 	mvn.w	fp, r3
 800cf6c:	f04f 0800 	mov.w	r8, #0
 800cf70:	4631      	mov	r1, r6
 800cf72:	4620      	mov	r0, r4
 800cf74:	f000 f9ca 	bl	800d30c <_Bfree>
 800cf78:	2f00      	cmp	r7, #0
 800cf7a:	f43f aeab 	beq.w	800ccd4 <_dtoa_r+0x6c4>
 800cf7e:	f1b8 0f00 	cmp.w	r8, #0
 800cf82:	d005      	beq.n	800cf90 <_dtoa_r+0x980>
 800cf84:	45b8      	cmp	r8, r7
 800cf86:	d003      	beq.n	800cf90 <_dtoa_r+0x980>
 800cf88:	4641      	mov	r1, r8
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f000 f9be 	bl	800d30c <_Bfree>
 800cf90:	4639      	mov	r1, r7
 800cf92:	4620      	mov	r0, r4
 800cf94:	f000 f9ba 	bl	800d30c <_Bfree>
 800cf98:	e69c      	b.n	800ccd4 <_dtoa_r+0x6c4>
 800cf9a:	2600      	movs	r6, #0
 800cf9c:	4637      	mov	r7, r6
 800cf9e:	e7e1      	b.n	800cf64 <_dtoa_r+0x954>
 800cfa0:	46bb      	mov	fp, r7
 800cfa2:	4637      	mov	r7, r6
 800cfa4:	e599      	b.n	800cada <_dtoa_r+0x4ca>
 800cfa6:	bf00      	nop
 800cfa8:	40240000 	.word	0x40240000
 800cfac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	f000 80c8 	beq.w	800d144 <_dtoa_r+0xb34>
 800cfb4:	9b04      	ldr	r3, [sp, #16]
 800cfb6:	9301      	str	r3, [sp, #4]
 800cfb8:	2d00      	cmp	r5, #0
 800cfba:	dd05      	ble.n	800cfc8 <_dtoa_r+0x9b8>
 800cfbc:	4639      	mov	r1, r7
 800cfbe:	462a      	mov	r2, r5
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f000 fb73 	bl	800d6ac <__lshift>
 800cfc6:	4607      	mov	r7, r0
 800cfc8:	f1b8 0f00 	cmp.w	r8, #0
 800cfcc:	d05b      	beq.n	800d086 <_dtoa_r+0xa76>
 800cfce:	6879      	ldr	r1, [r7, #4]
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f000 f95b 	bl	800d28c <_Balloc>
 800cfd6:	4605      	mov	r5, r0
 800cfd8:	b928      	cbnz	r0, 800cfe6 <_dtoa_r+0x9d6>
 800cfda:	4b83      	ldr	r3, [pc, #524]	; (800d1e8 <_dtoa_r+0xbd8>)
 800cfdc:	4602      	mov	r2, r0
 800cfde:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cfe2:	f7ff bb2e 	b.w	800c642 <_dtoa_r+0x32>
 800cfe6:	693a      	ldr	r2, [r7, #16]
 800cfe8:	3202      	adds	r2, #2
 800cfea:	0092      	lsls	r2, r2, #2
 800cfec:	f107 010c 	add.w	r1, r7, #12
 800cff0:	300c      	adds	r0, #12
 800cff2:	f7ff fa76 	bl	800c4e2 <memcpy>
 800cff6:	2201      	movs	r2, #1
 800cff8:	4629      	mov	r1, r5
 800cffa:	4620      	mov	r0, r4
 800cffc:	f000 fb56 	bl	800d6ac <__lshift>
 800d000:	9b00      	ldr	r3, [sp, #0]
 800d002:	3301      	adds	r3, #1
 800d004:	9304      	str	r3, [sp, #16]
 800d006:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d00a:	4413      	add	r3, r2
 800d00c:	9308      	str	r3, [sp, #32]
 800d00e:	9b02      	ldr	r3, [sp, #8]
 800d010:	f003 0301 	and.w	r3, r3, #1
 800d014:	46b8      	mov	r8, r7
 800d016:	9306      	str	r3, [sp, #24]
 800d018:	4607      	mov	r7, r0
 800d01a:	9b04      	ldr	r3, [sp, #16]
 800d01c:	4631      	mov	r1, r6
 800d01e:	3b01      	subs	r3, #1
 800d020:	4650      	mov	r0, sl
 800d022:	9301      	str	r3, [sp, #4]
 800d024:	f7ff fa6b 	bl	800c4fe <quorem>
 800d028:	4641      	mov	r1, r8
 800d02a:	9002      	str	r0, [sp, #8]
 800d02c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d030:	4650      	mov	r0, sl
 800d032:	f000 fba7 	bl	800d784 <__mcmp>
 800d036:	463a      	mov	r2, r7
 800d038:	9005      	str	r0, [sp, #20]
 800d03a:	4631      	mov	r1, r6
 800d03c:	4620      	mov	r0, r4
 800d03e:	f000 fbbd 	bl	800d7bc <__mdiff>
 800d042:	68c2      	ldr	r2, [r0, #12]
 800d044:	4605      	mov	r5, r0
 800d046:	bb02      	cbnz	r2, 800d08a <_dtoa_r+0xa7a>
 800d048:	4601      	mov	r1, r0
 800d04a:	4650      	mov	r0, sl
 800d04c:	f000 fb9a 	bl	800d784 <__mcmp>
 800d050:	4602      	mov	r2, r0
 800d052:	4629      	mov	r1, r5
 800d054:	4620      	mov	r0, r4
 800d056:	9209      	str	r2, [sp, #36]	; 0x24
 800d058:	f000 f958 	bl	800d30c <_Bfree>
 800d05c:	9b07      	ldr	r3, [sp, #28]
 800d05e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d060:	9d04      	ldr	r5, [sp, #16]
 800d062:	ea43 0102 	orr.w	r1, r3, r2
 800d066:	9b06      	ldr	r3, [sp, #24]
 800d068:	4319      	orrs	r1, r3
 800d06a:	d110      	bne.n	800d08e <_dtoa_r+0xa7e>
 800d06c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d070:	d029      	beq.n	800d0c6 <_dtoa_r+0xab6>
 800d072:	9b05      	ldr	r3, [sp, #20]
 800d074:	2b00      	cmp	r3, #0
 800d076:	dd02      	ble.n	800d07e <_dtoa_r+0xa6e>
 800d078:	9b02      	ldr	r3, [sp, #8]
 800d07a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d07e:	9b01      	ldr	r3, [sp, #4]
 800d080:	f883 9000 	strb.w	r9, [r3]
 800d084:	e774      	b.n	800cf70 <_dtoa_r+0x960>
 800d086:	4638      	mov	r0, r7
 800d088:	e7ba      	b.n	800d000 <_dtoa_r+0x9f0>
 800d08a:	2201      	movs	r2, #1
 800d08c:	e7e1      	b.n	800d052 <_dtoa_r+0xa42>
 800d08e:	9b05      	ldr	r3, [sp, #20]
 800d090:	2b00      	cmp	r3, #0
 800d092:	db04      	blt.n	800d09e <_dtoa_r+0xa8e>
 800d094:	9907      	ldr	r1, [sp, #28]
 800d096:	430b      	orrs	r3, r1
 800d098:	9906      	ldr	r1, [sp, #24]
 800d09a:	430b      	orrs	r3, r1
 800d09c:	d120      	bne.n	800d0e0 <_dtoa_r+0xad0>
 800d09e:	2a00      	cmp	r2, #0
 800d0a0:	dded      	ble.n	800d07e <_dtoa_r+0xa6e>
 800d0a2:	4651      	mov	r1, sl
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f000 fb00 	bl	800d6ac <__lshift>
 800d0ac:	4631      	mov	r1, r6
 800d0ae:	4682      	mov	sl, r0
 800d0b0:	f000 fb68 	bl	800d784 <__mcmp>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	dc03      	bgt.n	800d0c0 <_dtoa_r+0xab0>
 800d0b8:	d1e1      	bne.n	800d07e <_dtoa_r+0xa6e>
 800d0ba:	f019 0f01 	tst.w	r9, #1
 800d0be:	d0de      	beq.n	800d07e <_dtoa_r+0xa6e>
 800d0c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d0c4:	d1d8      	bne.n	800d078 <_dtoa_r+0xa68>
 800d0c6:	9a01      	ldr	r2, [sp, #4]
 800d0c8:	2339      	movs	r3, #57	; 0x39
 800d0ca:	7013      	strb	r3, [r2, #0]
 800d0cc:	462b      	mov	r3, r5
 800d0ce:	461d      	mov	r5, r3
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d0d6:	2a39      	cmp	r2, #57	; 0x39
 800d0d8:	d06c      	beq.n	800d1b4 <_dtoa_r+0xba4>
 800d0da:	3201      	adds	r2, #1
 800d0dc:	701a      	strb	r2, [r3, #0]
 800d0de:	e747      	b.n	800cf70 <_dtoa_r+0x960>
 800d0e0:	2a00      	cmp	r2, #0
 800d0e2:	dd07      	ble.n	800d0f4 <_dtoa_r+0xae4>
 800d0e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d0e8:	d0ed      	beq.n	800d0c6 <_dtoa_r+0xab6>
 800d0ea:	9a01      	ldr	r2, [sp, #4]
 800d0ec:	f109 0301 	add.w	r3, r9, #1
 800d0f0:	7013      	strb	r3, [r2, #0]
 800d0f2:	e73d      	b.n	800cf70 <_dtoa_r+0x960>
 800d0f4:	9b04      	ldr	r3, [sp, #16]
 800d0f6:	9a08      	ldr	r2, [sp, #32]
 800d0f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d043      	beq.n	800d188 <_dtoa_r+0xb78>
 800d100:	4651      	mov	r1, sl
 800d102:	2300      	movs	r3, #0
 800d104:	220a      	movs	r2, #10
 800d106:	4620      	mov	r0, r4
 800d108:	f000 f922 	bl	800d350 <__multadd>
 800d10c:	45b8      	cmp	r8, r7
 800d10e:	4682      	mov	sl, r0
 800d110:	f04f 0300 	mov.w	r3, #0
 800d114:	f04f 020a 	mov.w	r2, #10
 800d118:	4641      	mov	r1, r8
 800d11a:	4620      	mov	r0, r4
 800d11c:	d107      	bne.n	800d12e <_dtoa_r+0xb1e>
 800d11e:	f000 f917 	bl	800d350 <__multadd>
 800d122:	4680      	mov	r8, r0
 800d124:	4607      	mov	r7, r0
 800d126:	9b04      	ldr	r3, [sp, #16]
 800d128:	3301      	adds	r3, #1
 800d12a:	9304      	str	r3, [sp, #16]
 800d12c:	e775      	b.n	800d01a <_dtoa_r+0xa0a>
 800d12e:	f000 f90f 	bl	800d350 <__multadd>
 800d132:	4639      	mov	r1, r7
 800d134:	4680      	mov	r8, r0
 800d136:	2300      	movs	r3, #0
 800d138:	220a      	movs	r2, #10
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 f908 	bl	800d350 <__multadd>
 800d140:	4607      	mov	r7, r0
 800d142:	e7f0      	b.n	800d126 <_dtoa_r+0xb16>
 800d144:	9b04      	ldr	r3, [sp, #16]
 800d146:	9301      	str	r3, [sp, #4]
 800d148:	9d00      	ldr	r5, [sp, #0]
 800d14a:	4631      	mov	r1, r6
 800d14c:	4650      	mov	r0, sl
 800d14e:	f7ff f9d6 	bl	800c4fe <quorem>
 800d152:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d156:	9b00      	ldr	r3, [sp, #0]
 800d158:	f805 9b01 	strb.w	r9, [r5], #1
 800d15c:	1aea      	subs	r2, r5, r3
 800d15e:	9b01      	ldr	r3, [sp, #4]
 800d160:	4293      	cmp	r3, r2
 800d162:	dd07      	ble.n	800d174 <_dtoa_r+0xb64>
 800d164:	4651      	mov	r1, sl
 800d166:	2300      	movs	r3, #0
 800d168:	220a      	movs	r2, #10
 800d16a:	4620      	mov	r0, r4
 800d16c:	f000 f8f0 	bl	800d350 <__multadd>
 800d170:	4682      	mov	sl, r0
 800d172:	e7ea      	b.n	800d14a <_dtoa_r+0xb3a>
 800d174:	9b01      	ldr	r3, [sp, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	bfc8      	it	gt
 800d17a:	461d      	movgt	r5, r3
 800d17c:	9b00      	ldr	r3, [sp, #0]
 800d17e:	bfd8      	it	le
 800d180:	2501      	movle	r5, #1
 800d182:	441d      	add	r5, r3
 800d184:	f04f 0800 	mov.w	r8, #0
 800d188:	4651      	mov	r1, sl
 800d18a:	2201      	movs	r2, #1
 800d18c:	4620      	mov	r0, r4
 800d18e:	f000 fa8d 	bl	800d6ac <__lshift>
 800d192:	4631      	mov	r1, r6
 800d194:	4682      	mov	sl, r0
 800d196:	f000 faf5 	bl	800d784 <__mcmp>
 800d19a:	2800      	cmp	r0, #0
 800d19c:	dc96      	bgt.n	800d0cc <_dtoa_r+0xabc>
 800d19e:	d102      	bne.n	800d1a6 <_dtoa_r+0xb96>
 800d1a0:	f019 0f01 	tst.w	r9, #1
 800d1a4:	d192      	bne.n	800d0cc <_dtoa_r+0xabc>
 800d1a6:	462b      	mov	r3, r5
 800d1a8:	461d      	mov	r5, r3
 800d1aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1ae:	2a30      	cmp	r2, #48	; 0x30
 800d1b0:	d0fa      	beq.n	800d1a8 <_dtoa_r+0xb98>
 800d1b2:	e6dd      	b.n	800cf70 <_dtoa_r+0x960>
 800d1b4:	9a00      	ldr	r2, [sp, #0]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d189      	bne.n	800d0ce <_dtoa_r+0xabe>
 800d1ba:	f10b 0b01 	add.w	fp, fp, #1
 800d1be:	2331      	movs	r3, #49	; 0x31
 800d1c0:	e796      	b.n	800d0f0 <_dtoa_r+0xae0>
 800d1c2:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <_dtoa_r+0xbdc>)
 800d1c4:	f7ff ba99 	b.w	800c6fa <_dtoa_r+0xea>
 800d1c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f47f aa6d 	bne.w	800c6aa <_dtoa_r+0x9a>
 800d1d0:	4b07      	ldr	r3, [pc, #28]	; (800d1f0 <_dtoa_r+0xbe0>)
 800d1d2:	f7ff ba92 	b.w	800c6fa <_dtoa_r+0xea>
 800d1d6:	9b01      	ldr	r3, [sp, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	dcb5      	bgt.n	800d148 <_dtoa_r+0xb38>
 800d1dc:	9b07      	ldr	r3, [sp, #28]
 800d1de:	2b02      	cmp	r3, #2
 800d1e0:	f73f aeb1 	bgt.w	800cf46 <_dtoa_r+0x936>
 800d1e4:	e7b0      	b.n	800d148 <_dtoa_r+0xb38>
 800d1e6:	bf00      	nop
 800d1e8:	0800f0dc 	.word	0x0800f0dc
 800d1ec:	0800f03c 	.word	0x0800f03c
 800d1f0:	0800f060 	.word	0x0800f060

0800d1f4 <_free_r>:
 800d1f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1f6:	2900      	cmp	r1, #0
 800d1f8:	d044      	beq.n	800d284 <_free_r+0x90>
 800d1fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1fe:	9001      	str	r0, [sp, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	f1a1 0404 	sub.w	r4, r1, #4
 800d206:	bfb8      	it	lt
 800d208:	18e4      	addlt	r4, r4, r3
 800d20a:	f7fe faeb 	bl	800b7e4 <__malloc_lock>
 800d20e:	4a1e      	ldr	r2, [pc, #120]	; (800d288 <_free_r+0x94>)
 800d210:	9801      	ldr	r0, [sp, #4]
 800d212:	6813      	ldr	r3, [r2, #0]
 800d214:	b933      	cbnz	r3, 800d224 <_free_r+0x30>
 800d216:	6063      	str	r3, [r4, #4]
 800d218:	6014      	str	r4, [r2, #0]
 800d21a:	b003      	add	sp, #12
 800d21c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d220:	f7fe bae6 	b.w	800b7f0 <__malloc_unlock>
 800d224:	42a3      	cmp	r3, r4
 800d226:	d908      	bls.n	800d23a <_free_r+0x46>
 800d228:	6825      	ldr	r5, [r4, #0]
 800d22a:	1961      	adds	r1, r4, r5
 800d22c:	428b      	cmp	r3, r1
 800d22e:	bf01      	itttt	eq
 800d230:	6819      	ldreq	r1, [r3, #0]
 800d232:	685b      	ldreq	r3, [r3, #4]
 800d234:	1949      	addeq	r1, r1, r5
 800d236:	6021      	streq	r1, [r4, #0]
 800d238:	e7ed      	b.n	800d216 <_free_r+0x22>
 800d23a:	461a      	mov	r2, r3
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	b10b      	cbz	r3, 800d244 <_free_r+0x50>
 800d240:	42a3      	cmp	r3, r4
 800d242:	d9fa      	bls.n	800d23a <_free_r+0x46>
 800d244:	6811      	ldr	r1, [r2, #0]
 800d246:	1855      	adds	r5, r2, r1
 800d248:	42a5      	cmp	r5, r4
 800d24a:	d10b      	bne.n	800d264 <_free_r+0x70>
 800d24c:	6824      	ldr	r4, [r4, #0]
 800d24e:	4421      	add	r1, r4
 800d250:	1854      	adds	r4, r2, r1
 800d252:	42a3      	cmp	r3, r4
 800d254:	6011      	str	r1, [r2, #0]
 800d256:	d1e0      	bne.n	800d21a <_free_r+0x26>
 800d258:	681c      	ldr	r4, [r3, #0]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	6053      	str	r3, [r2, #4]
 800d25e:	440c      	add	r4, r1
 800d260:	6014      	str	r4, [r2, #0]
 800d262:	e7da      	b.n	800d21a <_free_r+0x26>
 800d264:	d902      	bls.n	800d26c <_free_r+0x78>
 800d266:	230c      	movs	r3, #12
 800d268:	6003      	str	r3, [r0, #0]
 800d26a:	e7d6      	b.n	800d21a <_free_r+0x26>
 800d26c:	6825      	ldr	r5, [r4, #0]
 800d26e:	1961      	adds	r1, r4, r5
 800d270:	428b      	cmp	r3, r1
 800d272:	bf04      	itt	eq
 800d274:	6819      	ldreq	r1, [r3, #0]
 800d276:	685b      	ldreq	r3, [r3, #4]
 800d278:	6063      	str	r3, [r4, #4]
 800d27a:	bf04      	itt	eq
 800d27c:	1949      	addeq	r1, r1, r5
 800d27e:	6021      	streq	r1, [r4, #0]
 800d280:	6054      	str	r4, [r2, #4]
 800d282:	e7ca      	b.n	800d21a <_free_r+0x26>
 800d284:	b003      	add	sp, #12
 800d286:	bd30      	pop	{r4, r5, pc}
 800d288:	20000830 	.word	0x20000830

0800d28c <_Balloc>:
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	69c6      	ldr	r6, [r0, #28]
 800d290:	4604      	mov	r4, r0
 800d292:	460d      	mov	r5, r1
 800d294:	b976      	cbnz	r6, 800d2b4 <_Balloc+0x28>
 800d296:	2010      	movs	r0, #16
 800d298:	f7fe f9f4 	bl	800b684 <malloc>
 800d29c:	4602      	mov	r2, r0
 800d29e:	61e0      	str	r0, [r4, #28]
 800d2a0:	b920      	cbnz	r0, 800d2ac <_Balloc+0x20>
 800d2a2:	4b18      	ldr	r3, [pc, #96]	; (800d304 <_Balloc+0x78>)
 800d2a4:	4818      	ldr	r0, [pc, #96]	; (800d308 <_Balloc+0x7c>)
 800d2a6:	216b      	movs	r1, #107	; 0x6b
 800d2a8:	f000 fd8c 	bl	800ddc4 <__assert_func>
 800d2ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2b0:	6006      	str	r6, [r0, #0]
 800d2b2:	60c6      	str	r6, [r0, #12]
 800d2b4:	69e6      	ldr	r6, [r4, #28]
 800d2b6:	68f3      	ldr	r3, [r6, #12]
 800d2b8:	b183      	cbz	r3, 800d2dc <_Balloc+0x50>
 800d2ba:	69e3      	ldr	r3, [r4, #28]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d2c2:	b9b8      	cbnz	r0, 800d2f4 <_Balloc+0x68>
 800d2c4:	2101      	movs	r1, #1
 800d2c6:	fa01 f605 	lsl.w	r6, r1, r5
 800d2ca:	1d72      	adds	r2, r6, #5
 800d2cc:	0092      	lsls	r2, r2, #2
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f000 fd96 	bl	800de00 <_calloc_r>
 800d2d4:	b160      	cbz	r0, 800d2f0 <_Balloc+0x64>
 800d2d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2da:	e00e      	b.n	800d2fa <_Balloc+0x6e>
 800d2dc:	2221      	movs	r2, #33	; 0x21
 800d2de:	2104      	movs	r1, #4
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f000 fd8d 	bl	800de00 <_calloc_r>
 800d2e6:	69e3      	ldr	r3, [r4, #28]
 800d2e8:	60f0      	str	r0, [r6, #12]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1e4      	bne.n	800d2ba <_Balloc+0x2e>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}
 800d2f4:	6802      	ldr	r2, [r0, #0]
 800d2f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d300:	e7f7      	b.n	800d2f2 <_Balloc+0x66>
 800d302:	bf00      	nop
 800d304:	0800f06d 	.word	0x0800f06d
 800d308:	0800f0ed 	.word	0x0800f0ed

0800d30c <_Bfree>:
 800d30c:	b570      	push	{r4, r5, r6, lr}
 800d30e:	69c6      	ldr	r6, [r0, #28]
 800d310:	4605      	mov	r5, r0
 800d312:	460c      	mov	r4, r1
 800d314:	b976      	cbnz	r6, 800d334 <_Bfree+0x28>
 800d316:	2010      	movs	r0, #16
 800d318:	f7fe f9b4 	bl	800b684 <malloc>
 800d31c:	4602      	mov	r2, r0
 800d31e:	61e8      	str	r0, [r5, #28]
 800d320:	b920      	cbnz	r0, 800d32c <_Bfree+0x20>
 800d322:	4b09      	ldr	r3, [pc, #36]	; (800d348 <_Bfree+0x3c>)
 800d324:	4809      	ldr	r0, [pc, #36]	; (800d34c <_Bfree+0x40>)
 800d326:	218f      	movs	r1, #143	; 0x8f
 800d328:	f000 fd4c 	bl	800ddc4 <__assert_func>
 800d32c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d330:	6006      	str	r6, [r0, #0]
 800d332:	60c6      	str	r6, [r0, #12]
 800d334:	b13c      	cbz	r4, 800d346 <_Bfree+0x3a>
 800d336:	69eb      	ldr	r3, [r5, #28]
 800d338:	6862      	ldr	r2, [r4, #4]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d340:	6021      	str	r1, [r4, #0]
 800d342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d346:	bd70      	pop	{r4, r5, r6, pc}
 800d348:	0800f06d 	.word	0x0800f06d
 800d34c:	0800f0ed 	.word	0x0800f0ed

0800d350 <__multadd>:
 800d350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d354:	690d      	ldr	r5, [r1, #16]
 800d356:	4607      	mov	r7, r0
 800d358:	460c      	mov	r4, r1
 800d35a:	461e      	mov	r6, r3
 800d35c:	f101 0c14 	add.w	ip, r1, #20
 800d360:	2000      	movs	r0, #0
 800d362:	f8dc 3000 	ldr.w	r3, [ip]
 800d366:	b299      	uxth	r1, r3
 800d368:	fb02 6101 	mla	r1, r2, r1, r6
 800d36c:	0c1e      	lsrs	r6, r3, #16
 800d36e:	0c0b      	lsrs	r3, r1, #16
 800d370:	fb02 3306 	mla	r3, r2, r6, r3
 800d374:	b289      	uxth	r1, r1
 800d376:	3001      	adds	r0, #1
 800d378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d37c:	4285      	cmp	r5, r0
 800d37e:	f84c 1b04 	str.w	r1, [ip], #4
 800d382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d386:	dcec      	bgt.n	800d362 <__multadd+0x12>
 800d388:	b30e      	cbz	r6, 800d3ce <__multadd+0x7e>
 800d38a:	68a3      	ldr	r3, [r4, #8]
 800d38c:	42ab      	cmp	r3, r5
 800d38e:	dc19      	bgt.n	800d3c4 <__multadd+0x74>
 800d390:	6861      	ldr	r1, [r4, #4]
 800d392:	4638      	mov	r0, r7
 800d394:	3101      	adds	r1, #1
 800d396:	f7ff ff79 	bl	800d28c <_Balloc>
 800d39a:	4680      	mov	r8, r0
 800d39c:	b928      	cbnz	r0, 800d3aa <__multadd+0x5a>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	4b0c      	ldr	r3, [pc, #48]	; (800d3d4 <__multadd+0x84>)
 800d3a2:	480d      	ldr	r0, [pc, #52]	; (800d3d8 <__multadd+0x88>)
 800d3a4:	21ba      	movs	r1, #186	; 0xba
 800d3a6:	f000 fd0d 	bl	800ddc4 <__assert_func>
 800d3aa:	6922      	ldr	r2, [r4, #16]
 800d3ac:	3202      	adds	r2, #2
 800d3ae:	f104 010c 	add.w	r1, r4, #12
 800d3b2:	0092      	lsls	r2, r2, #2
 800d3b4:	300c      	adds	r0, #12
 800d3b6:	f7ff f894 	bl	800c4e2 <memcpy>
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4638      	mov	r0, r7
 800d3be:	f7ff ffa5 	bl	800d30c <_Bfree>
 800d3c2:	4644      	mov	r4, r8
 800d3c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d3c8:	3501      	adds	r5, #1
 800d3ca:	615e      	str	r6, [r3, #20]
 800d3cc:	6125      	str	r5, [r4, #16]
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d4:	0800f0dc 	.word	0x0800f0dc
 800d3d8:	0800f0ed 	.word	0x0800f0ed

0800d3dc <__hi0bits>:
 800d3dc:	0c03      	lsrs	r3, r0, #16
 800d3de:	041b      	lsls	r3, r3, #16
 800d3e0:	b9d3      	cbnz	r3, 800d418 <__hi0bits+0x3c>
 800d3e2:	0400      	lsls	r0, r0, #16
 800d3e4:	2310      	movs	r3, #16
 800d3e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d3ea:	bf04      	itt	eq
 800d3ec:	0200      	lsleq	r0, r0, #8
 800d3ee:	3308      	addeq	r3, #8
 800d3f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d3f4:	bf04      	itt	eq
 800d3f6:	0100      	lsleq	r0, r0, #4
 800d3f8:	3304      	addeq	r3, #4
 800d3fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d3fe:	bf04      	itt	eq
 800d400:	0080      	lsleq	r0, r0, #2
 800d402:	3302      	addeq	r3, #2
 800d404:	2800      	cmp	r0, #0
 800d406:	db05      	blt.n	800d414 <__hi0bits+0x38>
 800d408:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d40c:	f103 0301 	add.w	r3, r3, #1
 800d410:	bf08      	it	eq
 800d412:	2320      	moveq	r3, #32
 800d414:	4618      	mov	r0, r3
 800d416:	4770      	bx	lr
 800d418:	2300      	movs	r3, #0
 800d41a:	e7e4      	b.n	800d3e6 <__hi0bits+0xa>

0800d41c <__lo0bits>:
 800d41c:	6803      	ldr	r3, [r0, #0]
 800d41e:	f013 0207 	ands.w	r2, r3, #7
 800d422:	d00c      	beq.n	800d43e <__lo0bits+0x22>
 800d424:	07d9      	lsls	r1, r3, #31
 800d426:	d422      	bmi.n	800d46e <__lo0bits+0x52>
 800d428:	079a      	lsls	r2, r3, #30
 800d42a:	bf49      	itett	mi
 800d42c:	085b      	lsrmi	r3, r3, #1
 800d42e:	089b      	lsrpl	r3, r3, #2
 800d430:	6003      	strmi	r3, [r0, #0]
 800d432:	2201      	movmi	r2, #1
 800d434:	bf5c      	itt	pl
 800d436:	6003      	strpl	r3, [r0, #0]
 800d438:	2202      	movpl	r2, #2
 800d43a:	4610      	mov	r0, r2
 800d43c:	4770      	bx	lr
 800d43e:	b299      	uxth	r1, r3
 800d440:	b909      	cbnz	r1, 800d446 <__lo0bits+0x2a>
 800d442:	0c1b      	lsrs	r3, r3, #16
 800d444:	2210      	movs	r2, #16
 800d446:	b2d9      	uxtb	r1, r3
 800d448:	b909      	cbnz	r1, 800d44e <__lo0bits+0x32>
 800d44a:	3208      	adds	r2, #8
 800d44c:	0a1b      	lsrs	r3, r3, #8
 800d44e:	0719      	lsls	r1, r3, #28
 800d450:	bf04      	itt	eq
 800d452:	091b      	lsreq	r3, r3, #4
 800d454:	3204      	addeq	r2, #4
 800d456:	0799      	lsls	r1, r3, #30
 800d458:	bf04      	itt	eq
 800d45a:	089b      	lsreq	r3, r3, #2
 800d45c:	3202      	addeq	r2, #2
 800d45e:	07d9      	lsls	r1, r3, #31
 800d460:	d403      	bmi.n	800d46a <__lo0bits+0x4e>
 800d462:	085b      	lsrs	r3, r3, #1
 800d464:	f102 0201 	add.w	r2, r2, #1
 800d468:	d003      	beq.n	800d472 <__lo0bits+0x56>
 800d46a:	6003      	str	r3, [r0, #0]
 800d46c:	e7e5      	b.n	800d43a <__lo0bits+0x1e>
 800d46e:	2200      	movs	r2, #0
 800d470:	e7e3      	b.n	800d43a <__lo0bits+0x1e>
 800d472:	2220      	movs	r2, #32
 800d474:	e7e1      	b.n	800d43a <__lo0bits+0x1e>
	...

0800d478 <__i2b>:
 800d478:	b510      	push	{r4, lr}
 800d47a:	460c      	mov	r4, r1
 800d47c:	2101      	movs	r1, #1
 800d47e:	f7ff ff05 	bl	800d28c <_Balloc>
 800d482:	4602      	mov	r2, r0
 800d484:	b928      	cbnz	r0, 800d492 <__i2b+0x1a>
 800d486:	4b05      	ldr	r3, [pc, #20]	; (800d49c <__i2b+0x24>)
 800d488:	4805      	ldr	r0, [pc, #20]	; (800d4a0 <__i2b+0x28>)
 800d48a:	f240 1145 	movw	r1, #325	; 0x145
 800d48e:	f000 fc99 	bl	800ddc4 <__assert_func>
 800d492:	2301      	movs	r3, #1
 800d494:	6144      	str	r4, [r0, #20]
 800d496:	6103      	str	r3, [r0, #16]
 800d498:	bd10      	pop	{r4, pc}
 800d49a:	bf00      	nop
 800d49c:	0800f0dc 	.word	0x0800f0dc
 800d4a0:	0800f0ed 	.word	0x0800f0ed

0800d4a4 <__multiply>:
 800d4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a8:	4691      	mov	r9, r2
 800d4aa:	690a      	ldr	r2, [r1, #16]
 800d4ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	bfb8      	it	lt
 800d4b4:	460b      	movlt	r3, r1
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	bfbc      	itt	lt
 800d4ba:	464c      	movlt	r4, r9
 800d4bc:	4699      	movlt	r9, r3
 800d4be:	6927      	ldr	r7, [r4, #16]
 800d4c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d4c4:	68a3      	ldr	r3, [r4, #8]
 800d4c6:	6861      	ldr	r1, [r4, #4]
 800d4c8:	eb07 060a 	add.w	r6, r7, sl
 800d4cc:	42b3      	cmp	r3, r6
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	bfb8      	it	lt
 800d4d2:	3101      	addlt	r1, #1
 800d4d4:	f7ff feda 	bl	800d28c <_Balloc>
 800d4d8:	b930      	cbnz	r0, 800d4e8 <__multiply+0x44>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	4b44      	ldr	r3, [pc, #272]	; (800d5f0 <__multiply+0x14c>)
 800d4de:	4845      	ldr	r0, [pc, #276]	; (800d5f4 <__multiply+0x150>)
 800d4e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d4e4:	f000 fc6e 	bl	800ddc4 <__assert_func>
 800d4e8:	f100 0514 	add.w	r5, r0, #20
 800d4ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d4f0:	462b      	mov	r3, r5
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	4543      	cmp	r3, r8
 800d4f6:	d321      	bcc.n	800d53c <__multiply+0x98>
 800d4f8:	f104 0314 	add.w	r3, r4, #20
 800d4fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d500:	f109 0314 	add.w	r3, r9, #20
 800d504:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d508:	9202      	str	r2, [sp, #8]
 800d50a:	1b3a      	subs	r2, r7, r4
 800d50c:	3a15      	subs	r2, #21
 800d50e:	f022 0203 	bic.w	r2, r2, #3
 800d512:	3204      	adds	r2, #4
 800d514:	f104 0115 	add.w	r1, r4, #21
 800d518:	428f      	cmp	r7, r1
 800d51a:	bf38      	it	cc
 800d51c:	2204      	movcc	r2, #4
 800d51e:	9201      	str	r2, [sp, #4]
 800d520:	9a02      	ldr	r2, [sp, #8]
 800d522:	9303      	str	r3, [sp, #12]
 800d524:	429a      	cmp	r2, r3
 800d526:	d80c      	bhi.n	800d542 <__multiply+0x9e>
 800d528:	2e00      	cmp	r6, #0
 800d52a:	dd03      	ble.n	800d534 <__multiply+0x90>
 800d52c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d530:	2b00      	cmp	r3, #0
 800d532:	d05b      	beq.n	800d5ec <__multiply+0x148>
 800d534:	6106      	str	r6, [r0, #16]
 800d536:	b005      	add	sp, #20
 800d538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d53c:	f843 2b04 	str.w	r2, [r3], #4
 800d540:	e7d8      	b.n	800d4f4 <__multiply+0x50>
 800d542:	f8b3 a000 	ldrh.w	sl, [r3]
 800d546:	f1ba 0f00 	cmp.w	sl, #0
 800d54a:	d024      	beq.n	800d596 <__multiply+0xf2>
 800d54c:	f104 0e14 	add.w	lr, r4, #20
 800d550:	46a9      	mov	r9, r5
 800d552:	f04f 0c00 	mov.w	ip, #0
 800d556:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d55a:	f8d9 1000 	ldr.w	r1, [r9]
 800d55e:	fa1f fb82 	uxth.w	fp, r2
 800d562:	b289      	uxth	r1, r1
 800d564:	fb0a 110b 	mla	r1, sl, fp, r1
 800d568:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d56c:	f8d9 2000 	ldr.w	r2, [r9]
 800d570:	4461      	add	r1, ip
 800d572:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d576:	fb0a c20b 	mla	r2, sl, fp, ip
 800d57a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d57e:	b289      	uxth	r1, r1
 800d580:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d584:	4577      	cmp	r7, lr
 800d586:	f849 1b04 	str.w	r1, [r9], #4
 800d58a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d58e:	d8e2      	bhi.n	800d556 <__multiply+0xb2>
 800d590:	9a01      	ldr	r2, [sp, #4]
 800d592:	f845 c002 	str.w	ip, [r5, r2]
 800d596:	9a03      	ldr	r2, [sp, #12]
 800d598:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d59c:	3304      	adds	r3, #4
 800d59e:	f1b9 0f00 	cmp.w	r9, #0
 800d5a2:	d021      	beq.n	800d5e8 <__multiply+0x144>
 800d5a4:	6829      	ldr	r1, [r5, #0]
 800d5a6:	f104 0c14 	add.w	ip, r4, #20
 800d5aa:	46ae      	mov	lr, r5
 800d5ac:	f04f 0a00 	mov.w	sl, #0
 800d5b0:	f8bc b000 	ldrh.w	fp, [ip]
 800d5b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d5b8:	fb09 220b 	mla	r2, r9, fp, r2
 800d5bc:	4452      	add	r2, sl
 800d5be:	b289      	uxth	r1, r1
 800d5c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d5c4:	f84e 1b04 	str.w	r1, [lr], #4
 800d5c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d5cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d5d0:	f8be 1000 	ldrh.w	r1, [lr]
 800d5d4:	fb09 110a 	mla	r1, r9, sl, r1
 800d5d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d5dc:	4567      	cmp	r7, ip
 800d5de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d5e2:	d8e5      	bhi.n	800d5b0 <__multiply+0x10c>
 800d5e4:	9a01      	ldr	r2, [sp, #4]
 800d5e6:	50a9      	str	r1, [r5, r2]
 800d5e8:	3504      	adds	r5, #4
 800d5ea:	e799      	b.n	800d520 <__multiply+0x7c>
 800d5ec:	3e01      	subs	r6, #1
 800d5ee:	e79b      	b.n	800d528 <__multiply+0x84>
 800d5f0:	0800f0dc 	.word	0x0800f0dc
 800d5f4:	0800f0ed 	.word	0x0800f0ed

0800d5f8 <__pow5mult>:
 800d5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5fc:	4615      	mov	r5, r2
 800d5fe:	f012 0203 	ands.w	r2, r2, #3
 800d602:	4606      	mov	r6, r0
 800d604:	460f      	mov	r7, r1
 800d606:	d007      	beq.n	800d618 <__pow5mult+0x20>
 800d608:	4c25      	ldr	r4, [pc, #148]	; (800d6a0 <__pow5mult+0xa8>)
 800d60a:	3a01      	subs	r2, #1
 800d60c:	2300      	movs	r3, #0
 800d60e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d612:	f7ff fe9d 	bl	800d350 <__multadd>
 800d616:	4607      	mov	r7, r0
 800d618:	10ad      	asrs	r5, r5, #2
 800d61a:	d03d      	beq.n	800d698 <__pow5mult+0xa0>
 800d61c:	69f4      	ldr	r4, [r6, #28]
 800d61e:	b97c      	cbnz	r4, 800d640 <__pow5mult+0x48>
 800d620:	2010      	movs	r0, #16
 800d622:	f7fe f82f 	bl	800b684 <malloc>
 800d626:	4602      	mov	r2, r0
 800d628:	61f0      	str	r0, [r6, #28]
 800d62a:	b928      	cbnz	r0, 800d638 <__pow5mult+0x40>
 800d62c:	4b1d      	ldr	r3, [pc, #116]	; (800d6a4 <__pow5mult+0xac>)
 800d62e:	481e      	ldr	r0, [pc, #120]	; (800d6a8 <__pow5mult+0xb0>)
 800d630:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d634:	f000 fbc6 	bl	800ddc4 <__assert_func>
 800d638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d63c:	6004      	str	r4, [r0, #0]
 800d63e:	60c4      	str	r4, [r0, #12]
 800d640:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d648:	b94c      	cbnz	r4, 800d65e <__pow5mult+0x66>
 800d64a:	f240 2171 	movw	r1, #625	; 0x271
 800d64e:	4630      	mov	r0, r6
 800d650:	f7ff ff12 	bl	800d478 <__i2b>
 800d654:	2300      	movs	r3, #0
 800d656:	f8c8 0008 	str.w	r0, [r8, #8]
 800d65a:	4604      	mov	r4, r0
 800d65c:	6003      	str	r3, [r0, #0]
 800d65e:	f04f 0900 	mov.w	r9, #0
 800d662:	07eb      	lsls	r3, r5, #31
 800d664:	d50a      	bpl.n	800d67c <__pow5mult+0x84>
 800d666:	4639      	mov	r1, r7
 800d668:	4622      	mov	r2, r4
 800d66a:	4630      	mov	r0, r6
 800d66c:	f7ff ff1a 	bl	800d4a4 <__multiply>
 800d670:	4639      	mov	r1, r7
 800d672:	4680      	mov	r8, r0
 800d674:	4630      	mov	r0, r6
 800d676:	f7ff fe49 	bl	800d30c <_Bfree>
 800d67a:	4647      	mov	r7, r8
 800d67c:	106d      	asrs	r5, r5, #1
 800d67e:	d00b      	beq.n	800d698 <__pow5mult+0xa0>
 800d680:	6820      	ldr	r0, [r4, #0]
 800d682:	b938      	cbnz	r0, 800d694 <__pow5mult+0x9c>
 800d684:	4622      	mov	r2, r4
 800d686:	4621      	mov	r1, r4
 800d688:	4630      	mov	r0, r6
 800d68a:	f7ff ff0b 	bl	800d4a4 <__multiply>
 800d68e:	6020      	str	r0, [r4, #0]
 800d690:	f8c0 9000 	str.w	r9, [r0]
 800d694:	4604      	mov	r4, r0
 800d696:	e7e4      	b.n	800d662 <__pow5mult+0x6a>
 800d698:	4638      	mov	r0, r7
 800d69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d69e:	bf00      	nop
 800d6a0:	0800f238 	.word	0x0800f238
 800d6a4:	0800f06d 	.word	0x0800f06d
 800d6a8:	0800f0ed 	.word	0x0800f0ed

0800d6ac <__lshift>:
 800d6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	6849      	ldr	r1, [r1, #4]
 800d6b4:	6923      	ldr	r3, [r4, #16]
 800d6b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6ba:	68a3      	ldr	r3, [r4, #8]
 800d6bc:	4607      	mov	r7, r0
 800d6be:	4691      	mov	r9, r2
 800d6c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d6c4:	f108 0601 	add.w	r6, r8, #1
 800d6c8:	42b3      	cmp	r3, r6
 800d6ca:	db0b      	blt.n	800d6e4 <__lshift+0x38>
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	f7ff fddd 	bl	800d28c <_Balloc>
 800d6d2:	4605      	mov	r5, r0
 800d6d4:	b948      	cbnz	r0, 800d6ea <__lshift+0x3e>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	4b28      	ldr	r3, [pc, #160]	; (800d77c <__lshift+0xd0>)
 800d6da:	4829      	ldr	r0, [pc, #164]	; (800d780 <__lshift+0xd4>)
 800d6dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d6e0:	f000 fb70 	bl	800ddc4 <__assert_func>
 800d6e4:	3101      	adds	r1, #1
 800d6e6:	005b      	lsls	r3, r3, #1
 800d6e8:	e7ee      	b.n	800d6c8 <__lshift+0x1c>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f100 0114 	add.w	r1, r0, #20
 800d6f0:	f100 0210 	add.w	r2, r0, #16
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	4553      	cmp	r3, sl
 800d6f8:	db33      	blt.n	800d762 <__lshift+0xb6>
 800d6fa:	6920      	ldr	r0, [r4, #16]
 800d6fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d700:	f104 0314 	add.w	r3, r4, #20
 800d704:	f019 091f 	ands.w	r9, r9, #31
 800d708:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d70c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d710:	d02b      	beq.n	800d76a <__lshift+0xbe>
 800d712:	f1c9 0e20 	rsb	lr, r9, #32
 800d716:	468a      	mov	sl, r1
 800d718:	2200      	movs	r2, #0
 800d71a:	6818      	ldr	r0, [r3, #0]
 800d71c:	fa00 f009 	lsl.w	r0, r0, r9
 800d720:	4310      	orrs	r0, r2
 800d722:	f84a 0b04 	str.w	r0, [sl], #4
 800d726:	f853 2b04 	ldr.w	r2, [r3], #4
 800d72a:	459c      	cmp	ip, r3
 800d72c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d730:	d8f3      	bhi.n	800d71a <__lshift+0x6e>
 800d732:	ebac 0304 	sub.w	r3, ip, r4
 800d736:	3b15      	subs	r3, #21
 800d738:	f023 0303 	bic.w	r3, r3, #3
 800d73c:	3304      	adds	r3, #4
 800d73e:	f104 0015 	add.w	r0, r4, #21
 800d742:	4584      	cmp	ip, r0
 800d744:	bf38      	it	cc
 800d746:	2304      	movcc	r3, #4
 800d748:	50ca      	str	r2, [r1, r3]
 800d74a:	b10a      	cbz	r2, 800d750 <__lshift+0xa4>
 800d74c:	f108 0602 	add.w	r6, r8, #2
 800d750:	3e01      	subs	r6, #1
 800d752:	4638      	mov	r0, r7
 800d754:	612e      	str	r6, [r5, #16]
 800d756:	4621      	mov	r1, r4
 800d758:	f7ff fdd8 	bl	800d30c <_Bfree>
 800d75c:	4628      	mov	r0, r5
 800d75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d762:	f842 0f04 	str.w	r0, [r2, #4]!
 800d766:	3301      	adds	r3, #1
 800d768:	e7c5      	b.n	800d6f6 <__lshift+0x4a>
 800d76a:	3904      	subs	r1, #4
 800d76c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d770:	f841 2f04 	str.w	r2, [r1, #4]!
 800d774:	459c      	cmp	ip, r3
 800d776:	d8f9      	bhi.n	800d76c <__lshift+0xc0>
 800d778:	e7ea      	b.n	800d750 <__lshift+0xa4>
 800d77a:	bf00      	nop
 800d77c:	0800f0dc 	.word	0x0800f0dc
 800d780:	0800f0ed 	.word	0x0800f0ed

0800d784 <__mcmp>:
 800d784:	b530      	push	{r4, r5, lr}
 800d786:	6902      	ldr	r2, [r0, #16]
 800d788:	690c      	ldr	r4, [r1, #16]
 800d78a:	1b12      	subs	r2, r2, r4
 800d78c:	d10e      	bne.n	800d7ac <__mcmp+0x28>
 800d78e:	f100 0314 	add.w	r3, r0, #20
 800d792:	3114      	adds	r1, #20
 800d794:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d798:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d79c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d7a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d7a4:	42a5      	cmp	r5, r4
 800d7a6:	d003      	beq.n	800d7b0 <__mcmp+0x2c>
 800d7a8:	d305      	bcc.n	800d7b6 <__mcmp+0x32>
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	4610      	mov	r0, r2
 800d7ae:	bd30      	pop	{r4, r5, pc}
 800d7b0:	4283      	cmp	r3, r0
 800d7b2:	d3f3      	bcc.n	800d79c <__mcmp+0x18>
 800d7b4:	e7fa      	b.n	800d7ac <__mcmp+0x28>
 800d7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ba:	e7f7      	b.n	800d7ac <__mcmp+0x28>

0800d7bc <__mdiff>:
 800d7bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	4606      	mov	r6, r0
 800d7c4:	4611      	mov	r1, r2
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	4690      	mov	r8, r2
 800d7ca:	f7ff ffdb 	bl	800d784 <__mcmp>
 800d7ce:	1e05      	subs	r5, r0, #0
 800d7d0:	d110      	bne.n	800d7f4 <__mdiff+0x38>
 800d7d2:	4629      	mov	r1, r5
 800d7d4:	4630      	mov	r0, r6
 800d7d6:	f7ff fd59 	bl	800d28c <_Balloc>
 800d7da:	b930      	cbnz	r0, 800d7ea <__mdiff+0x2e>
 800d7dc:	4b3a      	ldr	r3, [pc, #232]	; (800d8c8 <__mdiff+0x10c>)
 800d7de:	4602      	mov	r2, r0
 800d7e0:	f240 2137 	movw	r1, #567	; 0x237
 800d7e4:	4839      	ldr	r0, [pc, #228]	; (800d8cc <__mdiff+0x110>)
 800d7e6:	f000 faed 	bl	800ddc4 <__assert_func>
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f4:	bfa4      	itt	ge
 800d7f6:	4643      	movge	r3, r8
 800d7f8:	46a0      	movge	r8, r4
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d800:	bfa6      	itte	ge
 800d802:	461c      	movge	r4, r3
 800d804:	2500      	movge	r5, #0
 800d806:	2501      	movlt	r5, #1
 800d808:	f7ff fd40 	bl	800d28c <_Balloc>
 800d80c:	b920      	cbnz	r0, 800d818 <__mdiff+0x5c>
 800d80e:	4b2e      	ldr	r3, [pc, #184]	; (800d8c8 <__mdiff+0x10c>)
 800d810:	4602      	mov	r2, r0
 800d812:	f240 2145 	movw	r1, #581	; 0x245
 800d816:	e7e5      	b.n	800d7e4 <__mdiff+0x28>
 800d818:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d81c:	6926      	ldr	r6, [r4, #16]
 800d81e:	60c5      	str	r5, [r0, #12]
 800d820:	f104 0914 	add.w	r9, r4, #20
 800d824:	f108 0514 	add.w	r5, r8, #20
 800d828:	f100 0e14 	add.w	lr, r0, #20
 800d82c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d830:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d834:	f108 0210 	add.w	r2, r8, #16
 800d838:	46f2      	mov	sl, lr
 800d83a:	2100      	movs	r1, #0
 800d83c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d840:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d844:	fa11 f88b 	uxtah	r8, r1, fp
 800d848:	b299      	uxth	r1, r3
 800d84a:	0c1b      	lsrs	r3, r3, #16
 800d84c:	eba8 0801 	sub.w	r8, r8, r1
 800d850:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d854:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d858:	fa1f f888 	uxth.w	r8, r8
 800d85c:	1419      	asrs	r1, r3, #16
 800d85e:	454e      	cmp	r6, r9
 800d860:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d864:	f84a 3b04 	str.w	r3, [sl], #4
 800d868:	d8e8      	bhi.n	800d83c <__mdiff+0x80>
 800d86a:	1b33      	subs	r3, r6, r4
 800d86c:	3b15      	subs	r3, #21
 800d86e:	f023 0303 	bic.w	r3, r3, #3
 800d872:	3304      	adds	r3, #4
 800d874:	3415      	adds	r4, #21
 800d876:	42a6      	cmp	r6, r4
 800d878:	bf38      	it	cc
 800d87a:	2304      	movcc	r3, #4
 800d87c:	441d      	add	r5, r3
 800d87e:	4473      	add	r3, lr
 800d880:	469e      	mov	lr, r3
 800d882:	462e      	mov	r6, r5
 800d884:	4566      	cmp	r6, ip
 800d886:	d30e      	bcc.n	800d8a6 <__mdiff+0xea>
 800d888:	f10c 0203 	add.w	r2, ip, #3
 800d88c:	1b52      	subs	r2, r2, r5
 800d88e:	f022 0203 	bic.w	r2, r2, #3
 800d892:	3d03      	subs	r5, #3
 800d894:	45ac      	cmp	ip, r5
 800d896:	bf38      	it	cc
 800d898:	2200      	movcc	r2, #0
 800d89a:	4413      	add	r3, r2
 800d89c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d8a0:	b17a      	cbz	r2, 800d8c2 <__mdiff+0x106>
 800d8a2:	6107      	str	r7, [r0, #16]
 800d8a4:	e7a4      	b.n	800d7f0 <__mdiff+0x34>
 800d8a6:	f856 8b04 	ldr.w	r8, [r6], #4
 800d8aa:	fa11 f288 	uxtah	r2, r1, r8
 800d8ae:	1414      	asrs	r4, r2, #16
 800d8b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d8b4:	b292      	uxth	r2, r2
 800d8b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d8ba:	f84e 2b04 	str.w	r2, [lr], #4
 800d8be:	1421      	asrs	r1, r4, #16
 800d8c0:	e7e0      	b.n	800d884 <__mdiff+0xc8>
 800d8c2:	3f01      	subs	r7, #1
 800d8c4:	e7ea      	b.n	800d89c <__mdiff+0xe0>
 800d8c6:	bf00      	nop
 800d8c8:	0800f0dc 	.word	0x0800f0dc
 800d8cc:	0800f0ed 	.word	0x0800f0ed

0800d8d0 <__d2b>:
 800d8d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8d4:	460f      	mov	r7, r1
 800d8d6:	2101      	movs	r1, #1
 800d8d8:	ec59 8b10 	vmov	r8, r9, d0
 800d8dc:	4616      	mov	r6, r2
 800d8de:	f7ff fcd5 	bl	800d28c <_Balloc>
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	b930      	cbnz	r0, 800d8f4 <__d2b+0x24>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	4b24      	ldr	r3, [pc, #144]	; (800d97c <__d2b+0xac>)
 800d8ea:	4825      	ldr	r0, [pc, #148]	; (800d980 <__d2b+0xb0>)
 800d8ec:	f240 310f 	movw	r1, #783	; 0x30f
 800d8f0:	f000 fa68 	bl	800ddc4 <__assert_func>
 800d8f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8fc:	bb2d      	cbnz	r5, 800d94a <__d2b+0x7a>
 800d8fe:	9301      	str	r3, [sp, #4]
 800d900:	f1b8 0300 	subs.w	r3, r8, #0
 800d904:	d026      	beq.n	800d954 <__d2b+0x84>
 800d906:	4668      	mov	r0, sp
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	f7ff fd87 	bl	800d41c <__lo0bits>
 800d90e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d912:	b1e8      	cbz	r0, 800d950 <__d2b+0x80>
 800d914:	f1c0 0320 	rsb	r3, r0, #32
 800d918:	fa02 f303 	lsl.w	r3, r2, r3
 800d91c:	430b      	orrs	r3, r1
 800d91e:	40c2      	lsrs	r2, r0
 800d920:	6163      	str	r3, [r4, #20]
 800d922:	9201      	str	r2, [sp, #4]
 800d924:	9b01      	ldr	r3, [sp, #4]
 800d926:	61a3      	str	r3, [r4, #24]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	bf14      	ite	ne
 800d92c:	2202      	movne	r2, #2
 800d92e:	2201      	moveq	r2, #1
 800d930:	6122      	str	r2, [r4, #16]
 800d932:	b1bd      	cbz	r5, 800d964 <__d2b+0x94>
 800d934:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d938:	4405      	add	r5, r0
 800d93a:	603d      	str	r5, [r7, #0]
 800d93c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d940:	6030      	str	r0, [r6, #0]
 800d942:	4620      	mov	r0, r4
 800d944:	b003      	add	sp, #12
 800d946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d94a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d94e:	e7d6      	b.n	800d8fe <__d2b+0x2e>
 800d950:	6161      	str	r1, [r4, #20]
 800d952:	e7e7      	b.n	800d924 <__d2b+0x54>
 800d954:	a801      	add	r0, sp, #4
 800d956:	f7ff fd61 	bl	800d41c <__lo0bits>
 800d95a:	9b01      	ldr	r3, [sp, #4]
 800d95c:	6163      	str	r3, [r4, #20]
 800d95e:	3020      	adds	r0, #32
 800d960:	2201      	movs	r2, #1
 800d962:	e7e5      	b.n	800d930 <__d2b+0x60>
 800d964:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d968:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d96c:	6038      	str	r0, [r7, #0]
 800d96e:	6918      	ldr	r0, [r3, #16]
 800d970:	f7ff fd34 	bl	800d3dc <__hi0bits>
 800d974:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d978:	e7e2      	b.n	800d940 <__d2b+0x70>
 800d97a:	bf00      	nop
 800d97c:	0800f0dc 	.word	0x0800f0dc
 800d980:	0800f0ed 	.word	0x0800f0ed

0800d984 <__ssputs_r>:
 800d984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d988:	688e      	ldr	r6, [r1, #8]
 800d98a:	461f      	mov	r7, r3
 800d98c:	42be      	cmp	r6, r7
 800d98e:	680b      	ldr	r3, [r1, #0]
 800d990:	4682      	mov	sl, r0
 800d992:	460c      	mov	r4, r1
 800d994:	4690      	mov	r8, r2
 800d996:	d82c      	bhi.n	800d9f2 <__ssputs_r+0x6e>
 800d998:	898a      	ldrh	r2, [r1, #12]
 800d99a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d99e:	d026      	beq.n	800d9ee <__ssputs_r+0x6a>
 800d9a0:	6965      	ldr	r5, [r4, #20]
 800d9a2:	6909      	ldr	r1, [r1, #16]
 800d9a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9a8:	eba3 0901 	sub.w	r9, r3, r1
 800d9ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9b0:	1c7b      	adds	r3, r7, #1
 800d9b2:	444b      	add	r3, r9
 800d9b4:	106d      	asrs	r5, r5, #1
 800d9b6:	429d      	cmp	r5, r3
 800d9b8:	bf38      	it	cc
 800d9ba:	461d      	movcc	r5, r3
 800d9bc:	0553      	lsls	r3, r2, #21
 800d9be:	d527      	bpl.n	800da10 <__ssputs_r+0x8c>
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	f7fd fe8f 	bl	800b6e4 <_malloc_r>
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	b360      	cbz	r0, 800da24 <__ssputs_r+0xa0>
 800d9ca:	6921      	ldr	r1, [r4, #16]
 800d9cc:	464a      	mov	r2, r9
 800d9ce:	f7fe fd88 	bl	800c4e2 <memcpy>
 800d9d2:	89a3      	ldrh	r3, [r4, #12]
 800d9d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9dc:	81a3      	strh	r3, [r4, #12]
 800d9de:	6126      	str	r6, [r4, #16]
 800d9e0:	6165      	str	r5, [r4, #20]
 800d9e2:	444e      	add	r6, r9
 800d9e4:	eba5 0509 	sub.w	r5, r5, r9
 800d9e8:	6026      	str	r6, [r4, #0]
 800d9ea:	60a5      	str	r5, [r4, #8]
 800d9ec:	463e      	mov	r6, r7
 800d9ee:	42be      	cmp	r6, r7
 800d9f0:	d900      	bls.n	800d9f4 <__ssputs_r+0x70>
 800d9f2:	463e      	mov	r6, r7
 800d9f4:	6820      	ldr	r0, [r4, #0]
 800d9f6:	4632      	mov	r2, r6
 800d9f8:	4641      	mov	r1, r8
 800d9fa:	f000 f9c9 	bl	800dd90 <memmove>
 800d9fe:	68a3      	ldr	r3, [r4, #8]
 800da00:	1b9b      	subs	r3, r3, r6
 800da02:	60a3      	str	r3, [r4, #8]
 800da04:	6823      	ldr	r3, [r4, #0]
 800da06:	4433      	add	r3, r6
 800da08:	6023      	str	r3, [r4, #0]
 800da0a:	2000      	movs	r0, #0
 800da0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da10:	462a      	mov	r2, r5
 800da12:	f000 fa1d 	bl	800de50 <_realloc_r>
 800da16:	4606      	mov	r6, r0
 800da18:	2800      	cmp	r0, #0
 800da1a:	d1e0      	bne.n	800d9de <__ssputs_r+0x5a>
 800da1c:	6921      	ldr	r1, [r4, #16]
 800da1e:	4650      	mov	r0, sl
 800da20:	f7ff fbe8 	bl	800d1f4 <_free_r>
 800da24:	230c      	movs	r3, #12
 800da26:	f8ca 3000 	str.w	r3, [sl]
 800da2a:	89a3      	ldrh	r3, [r4, #12]
 800da2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da30:	81a3      	strh	r3, [r4, #12]
 800da32:	f04f 30ff 	mov.w	r0, #4294967295
 800da36:	e7e9      	b.n	800da0c <__ssputs_r+0x88>

0800da38 <_svfiprintf_r>:
 800da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	4698      	mov	r8, r3
 800da3e:	898b      	ldrh	r3, [r1, #12]
 800da40:	061b      	lsls	r3, r3, #24
 800da42:	b09d      	sub	sp, #116	; 0x74
 800da44:	4607      	mov	r7, r0
 800da46:	460d      	mov	r5, r1
 800da48:	4614      	mov	r4, r2
 800da4a:	d50e      	bpl.n	800da6a <_svfiprintf_r+0x32>
 800da4c:	690b      	ldr	r3, [r1, #16]
 800da4e:	b963      	cbnz	r3, 800da6a <_svfiprintf_r+0x32>
 800da50:	2140      	movs	r1, #64	; 0x40
 800da52:	f7fd fe47 	bl	800b6e4 <_malloc_r>
 800da56:	6028      	str	r0, [r5, #0]
 800da58:	6128      	str	r0, [r5, #16]
 800da5a:	b920      	cbnz	r0, 800da66 <_svfiprintf_r+0x2e>
 800da5c:	230c      	movs	r3, #12
 800da5e:	603b      	str	r3, [r7, #0]
 800da60:	f04f 30ff 	mov.w	r0, #4294967295
 800da64:	e0d0      	b.n	800dc08 <_svfiprintf_r+0x1d0>
 800da66:	2340      	movs	r3, #64	; 0x40
 800da68:	616b      	str	r3, [r5, #20]
 800da6a:	2300      	movs	r3, #0
 800da6c:	9309      	str	r3, [sp, #36]	; 0x24
 800da6e:	2320      	movs	r3, #32
 800da70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da74:	f8cd 800c 	str.w	r8, [sp, #12]
 800da78:	2330      	movs	r3, #48	; 0x30
 800da7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dc20 <_svfiprintf_r+0x1e8>
 800da7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da82:	f04f 0901 	mov.w	r9, #1
 800da86:	4623      	mov	r3, r4
 800da88:	469a      	mov	sl, r3
 800da8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da8e:	b10a      	cbz	r2, 800da94 <_svfiprintf_r+0x5c>
 800da90:	2a25      	cmp	r2, #37	; 0x25
 800da92:	d1f9      	bne.n	800da88 <_svfiprintf_r+0x50>
 800da94:	ebba 0b04 	subs.w	fp, sl, r4
 800da98:	d00b      	beq.n	800dab2 <_svfiprintf_r+0x7a>
 800da9a:	465b      	mov	r3, fp
 800da9c:	4622      	mov	r2, r4
 800da9e:	4629      	mov	r1, r5
 800daa0:	4638      	mov	r0, r7
 800daa2:	f7ff ff6f 	bl	800d984 <__ssputs_r>
 800daa6:	3001      	adds	r0, #1
 800daa8:	f000 80a9 	beq.w	800dbfe <_svfiprintf_r+0x1c6>
 800daac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daae:	445a      	add	r2, fp
 800dab0:	9209      	str	r2, [sp, #36]	; 0x24
 800dab2:	f89a 3000 	ldrb.w	r3, [sl]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f000 80a1 	beq.w	800dbfe <_svfiprintf_r+0x1c6>
 800dabc:	2300      	movs	r3, #0
 800dabe:	f04f 32ff 	mov.w	r2, #4294967295
 800dac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dac6:	f10a 0a01 	add.w	sl, sl, #1
 800daca:	9304      	str	r3, [sp, #16]
 800dacc:	9307      	str	r3, [sp, #28]
 800dace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dad2:	931a      	str	r3, [sp, #104]	; 0x68
 800dad4:	4654      	mov	r4, sl
 800dad6:	2205      	movs	r2, #5
 800dad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dadc:	4850      	ldr	r0, [pc, #320]	; (800dc20 <_svfiprintf_r+0x1e8>)
 800dade:	f7f2 fb7f 	bl	80001e0 <memchr>
 800dae2:	9a04      	ldr	r2, [sp, #16]
 800dae4:	b9d8      	cbnz	r0, 800db1e <_svfiprintf_r+0xe6>
 800dae6:	06d0      	lsls	r0, r2, #27
 800dae8:	bf44      	itt	mi
 800daea:	2320      	movmi	r3, #32
 800daec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daf0:	0711      	lsls	r1, r2, #28
 800daf2:	bf44      	itt	mi
 800daf4:	232b      	movmi	r3, #43	; 0x2b
 800daf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dafa:	f89a 3000 	ldrb.w	r3, [sl]
 800dafe:	2b2a      	cmp	r3, #42	; 0x2a
 800db00:	d015      	beq.n	800db2e <_svfiprintf_r+0xf6>
 800db02:	9a07      	ldr	r2, [sp, #28]
 800db04:	4654      	mov	r4, sl
 800db06:	2000      	movs	r0, #0
 800db08:	f04f 0c0a 	mov.w	ip, #10
 800db0c:	4621      	mov	r1, r4
 800db0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db12:	3b30      	subs	r3, #48	; 0x30
 800db14:	2b09      	cmp	r3, #9
 800db16:	d94d      	bls.n	800dbb4 <_svfiprintf_r+0x17c>
 800db18:	b1b0      	cbz	r0, 800db48 <_svfiprintf_r+0x110>
 800db1a:	9207      	str	r2, [sp, #28]
 800db1c:	e014      	b.n	800db48 <_svfiprintf_r+0x110>
 800db1e:	eba0 0308 	sub.w	r3, r0, r8
 800db22:	fa09 f303 	lsl.w	r3, r9, r3
 800db26:	4313      	orrs	r3, r2
 800db28:	9304      	str	r3, [sp, #16]
 800db2a:	46a2      	mov	sl, r4
 800db2c:	e7d2      	b.n	800dad4 <_svfiprintf_r+0x9c>
 800db2e:	9b03      	ldr	r3, [sp, #12]
 800db30:	1d19      	adds	r1, r3, #4
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	9103      	str	r1, [sp, #12]
 800db36:	2b00      	cmp	r3, #0
 800db38:	bfbb      	ittet	lt
 800db3a:	425b      	neglt	r3, r3
 800db3c:	f042 0202 	orrlt.w	r2, r2, #2
 800db40:	9307      	strge	r3, [sp, #28]
 800db42:	9307      	strlt	r3, [sp, #28]
 800db44:	bfb8      	it	lt
 800db46:	9204      	strlt	r2, [sp, #16]
 800db48:	7823      	ldrb	r3, [r4, #0]
 800db4a:	2b2e      	cmp	r3, #46	; 0x2e
 800db4c:	d10c      	bne.n	800db68 <_svfiprintf_r+0x130>
 800db4e:	7863      	ldrb	r3, [r4, #1]
 800db50:	2b2a      	cmp	r3, #42	; 0x2a
 800db52:	d134      	bne.n	800dbbe <_svfiprintf_r+0x186>
 800db54:	9b03      	ldr	r3, [sp, #12]
 800db56:	1d1a      	adds	r2, r3, #4
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	9203      	str	r2, [sp, #12]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	bfb8      	it	lt
 800db60:	f04f 33ff 	movlt.w	r3, #4294967295
 800db64:	3402      	adds	r4, #2
 800db66:	9305      	str	r3, [sp, #20]
 800db68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dc30 <_svfiprintf_r+0x1f8>
 800db6c:	7821      	ldrb	r1, [r4, #0]
 800db6e:	2203      	movs	r2, #3
 800db70:	4650      	mov	r0, sl
 800db72:	f7f2 fb35 	bl	80001e0 <memchr>
 800db76:	b138      	cbz	r0, 800db88 <_svfiprintf_r+0x150>
 800db78:	9b04      	ldr	r3, [sp, #16]
 800db7a:	eba0 000a 	sub.w	r0, r0, sl
 800db7e:	2240      	movs	r2, #64	; 0x40
 800db80:	4082      	lsls	r2, r0
 800db82:	4313      	orrs	r3, r2
 800db84:	3401      	adds	r4, #1
 800db86:	9304      	str	r3, [sp, #16]
 800db88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db8c:	4825      	ldr	r0, [pc, #148]	; (800dc24 <_svfiprintf_r+0x1ec>)
 800db8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db92:	2206      	movs	r2, #6
 800db94:	f7f2 fb24 	bl	80001e0 <memchr>
 800db98:	2800      	cmp	r0, #0
 800db9a:	d038      	beq.n	800dc0e <_svfiprintf_r+0x1d6>
 800db9c:	4b22      	ldr	r3, [pc, #136]	; (800dc28 <_svfiprintf_r+0x1f0>)
 800db9e:	bb1b      	cbnz	r3, 800dbe8 <_svfiprintf_r+0x1b0>
 800dba0:	9b03      	ldr	r3, [sp, #12]
 800dba2:	3307      	adds	r3, #7
 800dba4:	f023 0307 	bic.w	r3, r3, #7
 800dba8:	3308      	adds	r3, #8
 800dbaa:	9303      	str	r3, [sp, #12]
 800dbac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbae:	4433      	add	r3, r6
 800dbb0:	9309      	str	r3, [sp, #36]	; 0x24
 800dbb2:	e768      	b.n	800da86 <_svfiprintf_r+0x4e>
 800dbb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbb8:	460c      	mov	r4, r1
 800dbba:	2001      	movs	r0, #1
 800dbbc:	e7a6      	b.n	800db0c <_svfiprintf_r+0xd4>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	3401      	adds	r4, #1
 800dbc2:	9305      	str	r3, [sp, #20]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	f04f 0c0a 	mov.w	ip, #10
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbd0:	3a30      	subs	r2, #48	; 0x30
 800dbd2:	2a09      	cmp	r2, #9
 800dbd4:	d903      	bls.n	800dbde <_svfiprintf_r+0x1a6>
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d0c6      	beq.n	800db68 <_svfiprintf_r+0x130>
 800dbda:	9105      	str	r1, [sp, #20]
 800dbdc:	e7c4      	b.n	800db68 <_svfiprintf_r+0x130>
 800dbde:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e7f0      	b.n	800dbca <_svfiprintf_r+0x192>
 800dbe8:	ab03      	add	r3, sp, #12
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	462a      	mov	r2, r5
 800dbee:	4b0f      	ldr	r3, [pc, #60]	; (800dc2c <_svfiprintf_r+0x1f4>)
 800dbf0:	a904      	add	r1, sp, #16
 800dbf2:	4638      	mov	r0, r7
 800dbf4:	f7fd fea2 	bl	800b93c <_printf_float>
 800dbf8:	1c42      	adds	r2, r0, #1
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	d1d6      	bne.n	800dbac <_svfiprintf_r+0x174>
 800dbfe:	89ab      	ldrh	r3, [r5, #12]
 800dc00:	065b      	lsls	r3, r3, #25
 800dc02:	f53f af2d 	bmi.w	800da60 <_svfiprintf_r+0x28>
 800dc06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc08:	b01d      	add	sp, #116	; 0x74
 800dc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0e:	ab03      	add	r3, sp, #12
 800dc10:	9300      	str	r3, [sp, #0]
 800dc12:	462a      	mov	r2, r5
 800dc14:	4b05      	ldr	r3, [pc, #20]	; (800dc2c <_svfiprintf_r+0x1f4>)
 800dc16:	a904      	add	r1, sp, #16
 800dc18:	4638      	mov	r0, r7
 800dc1a:	f7fe f933 	bl	800be84 <_printf_i>
 800dc1e:	e7eb      	b.n	800dbf8 <_svfiprintf_r+0x1c0>
 800dc20:	0800f244 	.word	0x0800f244
 800dc24:	0800f24e 	.word	0x0800f24e
 800dc28:	0800b93d 	.word	0x0800b93d
 800dc2c:	0800d985 	.word	0x0800d985
 800dc30:	0800f24a 	.word	0x0800f24a

0800dc34 <__sflush_r>:
 800dc34:	898a      	ldrh	r2, [r1, #12]
 800dc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc3a:	4605      	mov	r5, r0
 800dc3c:	0710      	lsls	r0, r2, #28
 800dc3e:	460c      	mov	r4, r1
 800dc40:	d458      	bmi.n	800dcf4 <__sflush_r+0xc0>
 800dc42:	684b      	ldr	r3, [r1, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	dc05      	bgt.n	800dc54 <__sflush_r+0x20>
 800dc48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	dc02      	bgt.n	800dc54 <__sflush_r+0x20>
 800dc4e:	2000      	movs	r0, #0
 800dc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc56:	2e00      	cmp	r6, #0
 800dc58:	d0f9      	beq.n	800dc4e <__sflush_r+0x1a>
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc60:	682f      	ldr	r7, [r5, #0]
 800dc62:	6a21      	ldr	r1, [r4, #32]
 800dc64:	602b      	str	r3, [r5, #0]
 800dc66:	d032      	beq.n	800dcce <__sflush_r+0x9a>
 800dc68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc6a:	89a3      	ldrh	r3, [r4, #12]
 800dc6c:	075a      	lsls	r2, r3, #29
 800dc6e:	d505      	bpl.n	800dc7c <__sflush_r+0x48>
 800dc70:	6863      	ldr	r3, [r4, #4]
 800dc72:	1ac0      	subs	r0, r0, r3
 800dc74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc76:	b10b      	cbz	r3, 800dc7c <__sflush_r+0x48>
 800dc78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc7a:	1ac0      	subs	r0, r0, r3
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	4602      	mov	r2, r0
 800dc80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc82:	6a21      	ldr	r1, [r4, #32]
 800dc84:	4628      	mov	r0, r5
 800dc86:	47b0      	blx	r6
 800dc88:	1c43      	adds	r3, r0, #1
 800dc8a:	89a3      	ldrh	r3, [r4, #12]
 800dc8c:	d106      	bne.n	800dc9c <__sflush_r+0x68>
 800dc8e:	6829      	ldr	r1, [r5, #0]
 800dc90:	291d      	cmp	r1, #29
 800dc92:	d82b      	bhi.n	800dcec <__sflush_r+0xb8>
 800dc94:	4a29      	ldr	r2, [pc, #164]	; (800dd3c <__sflush_r+0x108>)
 800dc96:	410a      	asrs	r2, r1
 800dc98:	07d6      	lsls	r6, r2, #31
 800dc9a:	d427      	bmi.n	800dcec <__sflush_r+0xb8>
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	6062      	str	r2, [r4, #4]
 800dca0:	04d9      	lsls	r1, r3, #19
 800dca2:	6922      	ldr	r2, [r4, #16]
 800dca4:	6022      	str	r2, [r4, #0]
 800dca6:	d504      	bpl.n	800dcb2 <__sflush_r+0x7e>
 800dca8:	1c42      	adds	r2, r0, #1
 800dcaa:	d101      	bne.n	800dcb0 <__sflush_r+0x7c>
 800dcac:	682b      	ldr	r3, [r5, #0]
 800dcae:	b903      	cbnz	r3, 800dcb2 <__sflush_r+0x7e>
 800dcb0:	6560      	str	r0, [r4, #84]	; 0x54
 800dcb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcb4:	602f      	str	r7, [r5, #0]
 800dcb6:	2900      	cmp	r1, #0
 800dcb8:	d0c9      	beq.n	800dc4e <__sflush_r+0x1a>
 800dcba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcbe:	4299      	cmp	r1, r3
 800dcc0:	d002      	beq.n	800dcc8 <__sflush_r+0x94>
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f7ff fa96 	bl	800d1f4 <_free_r>
 800dcc8:	2000      	movs	r0, #0
 800dcca:	6360      	str	r0, [r4, #52]	; 0x34
 800dccc:	e7c0      	b.n	800dc50 <__sflush_r+0x1c>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	47b0      	blx	r6
 800dcd4:	1c41      	adds	r1, r0, #1
 800dcd6:	d1c8      	bne.n	800dc6a <__sflush_r+0x36>
 800dcd8:	682b      	ldr	r3, [r5, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d0c5      	beq.n	800dc6a <__sflush_r+0x36>
 800dcde:	2b1d      	cmp	r3, #29
 800dce0:	d001      	beq.n	800dce6 <__sflush_r+0xb2>
 800dce2:	2b16      	cmp	r3, #22
 800dce4:	d101      	bne.n	800dcea <__sflush_r+0xb6>
 800dce6:	602f      	str	r7, [r5, #0]
 800dce8:	e7b1      	b.n	800dc4e <__sflush_r+0x1a>
 800dcea:	89a3      	ldrh	r3, [r4, #12]
 800dcec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcf0:	81a3      	strh	r3, [r4, #12]
 800dcf2:	e7ad      	b.n	800dc50 <__sflush_r+0x1c>
 800dcf4:	690f      	ldr	r7, [r1, #16]
 800dcf6:	2f00      	cmp	r7, #0
 800dcf8:	d0a9      	beq.n	800dc4e <__sflush_r+0x1a>
 800dcfa:	0793      	lsls	r3, r2, #30
 800dcfc:	680e      	ldr	r6, [r1, #0]
 800dcfe:	bf08      	it	eq
 800dd00:	694b      	ldreq	r3, [r1, #20]
 800dd02:	600f      	str	r7, [r1, #0]
 800dd04:	bf18      	it	ne
 800dd06:	2300      	movne	r3, #0
 800dd08:	eba6 0807 	sub.w	r8, r6, r7
 800dd0c:	608b      	str	r3, [r1, #8]
 800dd0e:	f1b8 0f00 	cmp.w	r8, #0
 800dd12:	dd9c      	ble.n	800dc4e <__sflush_r+0x1a>
 800dd14:	6a21      	ldr	r1, [r4, #32]
 800dd16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd18:	4643      	mov	r3, r8
 800dd1a:	463a      	mov	r2, r7
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	47b0      	blx	r6
 800dd20:	2800      	cmp	r0, #0
 800dd22:	dc06      	bgt.n	800dd32 <__sflush_r+0xfe>
 800dd24:	89a3      	ldrh	r3, [r4, #12]
 800dd26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd2a:	81a3      	strh	r3, [r4, #12]
 800dd2c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd30:	e78e      	b.n	800dc50 <__sflush_r+0x1c>
 800dd32:	4407      	add	r7, r0
 800dd34:	eba8 0800 	sub.w	r8, r8, r0
 800dd38:	e7e9      	b.n	800dd0e <__sflush_r+0xda>
 800dd3a:	bf00      	nop
 800dd3c:	dfbffffe 	.word	0xdfbffffe

0800dd40 <_fflush_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	690b      	ldr	r3, [r1, #16]
 800dd44:	4605      	mov	r5, r0
 800dd46:	460c      	mov	r4, r1
 800dd48:	b913      	cbnz	r3, 800dd50 <_fflush_r+0x10>
 800dd4a:	2500      	movs	r5, #0
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	bd38      	pop	{r3, r4, r5, pc}
 800dd50:	b118      	cbz	r0, 800dd5a <_fflush_r+0x1a>
 800dd52:	6a03      	ldr	r3, [r0, #32]
 800dd54:	b90b      	cbnz	r3, 800dd5a <_fflush_r+0x1a>
 800dd56:	f7fe fa43 	bl	800c1e0 <__sinit>
 800dd5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d0f3      	beq.n	800dd4a <_fflush_r+0xa>
 800dd62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd64:	07d0      	lsls	r0, r2, #31
 800dd66:	d404      	bmi.n	800dd72 <_fflush_r+0x32>
 800dd68:	0599      	lsls	r1, r3, #22
 800dd6a:	d402      	bmi.n	800dd72 <_fflush_r+0x32>
 800dd6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd6e:	f7fe fbb6 	bl	800c4de <__retarget_lock_acquire_recursive>
 800dd72:	4628      	mov	r0, r5
 800dd74:	4621      	mov	r1, r4
 800dd76:	f7ff ff5d 	bl	800dc34 <__sflush_r>
 800dd7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd7c:	07da      	lsls	r2, r3, #31
 800dd7e:	4605      	mov	r5, r0
 800dd80:	d4e4      	bmi.n	800dd4c <_fflush_r+0xc>
 800dd82:	89a3      	ldrh	r3, [r4, #12]
 800dd84:	059b      	lsls	r3, r3, #22
 800dd86:	d4e1      	bmi.n	800dd4c <_fflush_r+0xc>
 800dd88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd8a:	f7fe fba9 	bl	800c4e0 <__retarget_lock_release_recursive>
 800dd8e:	e7dd      	b.n	800dd4c <_fflush_r+0xc>

0800dd90 <memmove>:
 800dd90:	4288      	cmp	r0, r1
 800dd92:	b510      	push	{r4, lr}
 800dd94:	eb01 0402 	add.w	r4, r1, r2
 800dd98:	d902      	bls.n	800dda0 <memmove+0x10>
 800dd9a:	4284      	cmp	r4, r0
 800dd9c:	4623      	mov	r3, r4
 800dd9e:	d807      	bhi.n	800ddb0 <memmove+0x20>
 800dda0:	1e43      	subs	r3, r0, #1
 800dda2:	42a1      	cmp	r1, r4
 800dda4:	d008      	beq.n	800ddb8 <memmove+0x28>
 800dda6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ddaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ddae:	e7f8      	b.n	800dda2 <memmove+0x12>
 800ddb0:	4402      	add	r2, r0
 800ddb2:	4601      	mov	r1, r0
 800ddb4:	428a      	cmp	r2, r1
 800ddb6:	d100      	bne.n	800ddba <memmove+0x2a>
 800ddb8:	bd10      	pop	{r4, pc}
 800ddba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ddbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddc2:	e7f7      	b.n	800ddb4 <memmove+0x24>

0800ddc4 <__assert_func>:
 800ddc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddc6:	4614      	mov	r4, r2
 800ddc8:	461a      	mov	r2, r3
 800ddca:	4b09      	ldr	r3, [pc, #36]	; (800ddf0 <__assert_func+0x2c>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4605      	mov	r5, r0
 800ddd0:	68d8      	ldr	r0, [r3, #12]
 800ddd2:	b14c      	cbz	r4, 800dde8 <__assert_func+0x24>
 800ddd4:	4b07      	ldr	r3, [pc, #28]	; (800ddf4 <__assert_func+0x30>)
 800ddd6:	9100      	str	r1, [sp, #0]
 800ddd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dddc:	4906      	ldr	r1, [pc, #24]	; (800ddf8 <__assert_func+0x34>)
 800ddde:	462b      	mov	r3, r5
 800dde0:	f000 f872 	bl	800dec8 <fiprintf>
 800dde4:	f7fd fc46 	bl	800b674 <abort>
 800dde8:	4b04      	ldr	r3, [pc, #16]	; (800ddfc <__assert_func+0x38>)
 800ddea:	461c      	mov	r4, r3
 800ddec:	e7f3      	b.n	800ddd6 <__assert_func+0x12>
 800ddee:	bf00      	nop
 800ddf0:	20000074 	.word	0x20000074
 800ddf4:	0800f25f 	.word	0x0800f25f
 800ddf8:	0800f26c 	.word	0x0800f26c
 800ddfc:	0800f29a 	.word	0x0800f29a

0800de00 <_calloc_r>:
 800de00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de02:	fba1 2402 	umull	r2, r4, r1, r2
 800de06:	b94c      	cbnz	r4, 800de1c <_calloc_r+0x1c>
 800de08:	4611      	mov	r1, r2
 800de0a:	9201      	str	r2, [sp, #4]
 800de0c:	f7fd fc6a 	bl	800b6e4 <_malloc_r>
 800de10:	9a01      	ldr	r2, [sp, #4]
 800de12:	4605      	mov	r5, r0
 800de14:	b930      	cbnz	r0, 800de24 <_calloc_r+0x24>
 800de16:	4628      	mov	r0, r5
 800de18:	b003      	add	sp, #12
 800de1a:	bd30      	pop	{r4, r5, pc}
 800de1c:	220c      	movs	r2, #12
 800de1e:	6002      	str	r2, [r0, #0]
 800de20:	2500      	movs	r5, #0
 800de22:	e7f8      	b.n	800de16 <_calloc_r+0x16>
 800de24:	4621      	mov	r1, r4
 800de26:	f7fe fa88 	bl	800c33a <memset>
 800de2a:	e7f4      	b.n	800de16 <_calloc_r+0x16>

0800de2c <__ascii_mbtowc>:
 800de2c:	b082      	sub	sp, #8
 800de2e:	b901      	cbnz	r1, 800de32 <__ascii_mbtowc+0x6>
 800de30:	a901      	add	r1, sp, #4
 800de32:	b142      	cbz	r2, 800de46 <__ascii_mbtowc+0x1a>
 800de34:	b14b      	cbz	r3, 800de4a <__ascii_mbtowc+0x1e>
 800de36:	7813      	ldrb	r3, [r2, #0]
 800de38:	600b      	str	r3, [r1, #0]
 800de3a:	7812      	ldrb	r2, [r2, #0]
 800de3c:	1e10      	subs	r0, r2, #0
 800de3e:	bf18      	it	ne
 800de40:	2001      	movne	r0, #1
 800de42:	b002      	add	sp, #8
 800de44:	4770      	bx	lr
 800de46:	4610      	mov	r0, r2
 800de48:	e7fb      	b.n	800de42 <__ascii_mbtowc+0x16>
 800de4a:	f06f 0001 	mvn.w	r0, #1
 800de4e:	e7f8      	b.n	800de42 <__ascii_mbtowc+0x16>

0800de50 <_realloc_r>:
 800de50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de54:	4680      	mov	r8, r0
 800de56:	4614      	mov	r4, r2
 800de58:	460e      	mov	r6, r1
 800de5a:	b921      	cbnz	r1, 800de66 <_realloc_r+0x16>
 800de5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de60:	4611      	mov	r1, r2
 800de62:	f7fd bc3f 	b.w	800b6e4 <_malloc_r>
 800de66:	b92a      	cbnz	r2, 800de74 <_realloc_r+0x24>
 800de68:	f7ff f9c4 	bl	800d1f4 <_free_r>
 800de6c:	4625      	mov	r5, r4
 800de6e:	4628      	mov	r0, r5
 800de70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de74:	f000 f83a 	bl	800deec <_malloc_usable_size_r>
 800de78:	4284      	cmp	r4, r0
 800de7a:	4607      	mov	r7, r0
 800de7c:	d802      	bhi.n	800de84 <_realloc_r+0x34>
 800de7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de82:	d812      	bhi.n	800deaa <_realloc_r+0x5a>
 800de84:	4621      	mov	r1, r4
 800de86:	4640      	mov	r0, r8
 800de88:	f7fd fc2c 	bl	800b6e4 <_malloc_r>
 800de8c:	4605      	mov	r5, r0
 800de8e:	2800      	cmp	r0, #0
 800de90:	d0ed      	beq.n	800de6e <_realloc_r+0x1e>
 800de92:	42bc      	cmp	r4, r7
 800de94:	4622      	mov	r2, r4
 800de96:	4631      	mov	r1, r6
 800de98:	bf28      	it	cs
 800de9a:	463a      	movcs	r2, r7
 800de9c:	f7fe fb21 	bl	800c4e2 <memcpy>
 800dea0:	4631      	mov	r1, r6
 800dea2:	4640      	mov	r0, r8
 800dea4:	f7ff f9a6 	bl	800d1f4 <_free_r>
 800dea8:	e7e1      	b.n	800de6e <_realloc_r+0x1e>
 800deaa:	4635      	mov	r5, r6
 800deac:	e7df      	b.n	800de6e <_realloc_r+0x1e>

0800deae <__ascii_wctomb>:
 800deae:	b149      	cbz	r1, 800dec4 <__ascii_wctomb+0x16>
 800deb0:	2aff      	cmp	r2, #255	; 0xff
 800deb2:	bf85      	ittet	hi
 800deb4:	238a      	movhi	r3, #138	; 0x8a
 800deb6:	6003      	strhi	r3, [r0, #0]
 800deb8:	700a      	strbls	r2, [r1, #0]
 800deba:	f04f 30ff 	movhi.w	r0, #4294967295
 800debe:	bf98      	it	ls
 800dec0:	2001      	movls	r0, #1
 800dec2:	4770      	bx	lr
 800dec4:	4608      	mov	r0, r1
 800dec6:	4770      	bx	lr

0800dec8 <fiprintf>:
 800dec8:	b40e      	push	{r1, r2, r3}
 800deca:	b503      	push	{r0, r1, lr}
 800decc:	4601      	mov	r1, r0
 800dece:	ab03      	add	r3, sp, #12
 800ded0:	4805      	ldr	r0, [pc, #20]	; (800dee8 <fiprintf+0x20>)
 800ded2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ded6:	6800      	ldr	r0, [r0, #0]
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	f000 f839 	bl	800df50 <_vfiprintf_r>
 800dede:	b002      	add	sp, #8
 800dee0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dee4:	b003      	add	sp, #12
 800dee6:	4770      	bx	lr
 800dee8:	20000074 	.word	0x20000074

0800deec <_malloc_usable_size_r>:
 800deec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800def0:	1f18      	subs	r0, r3, #4
 800def2:	2b00      	cmp	r3, #0
 800def4:	bfbc      	itt	lt
 800def6:	580b      	ldrlt	r3, [r1, r0]
 800def8:	18c0      	addlt	r0, r0, r3
 800defa:	4770      	bx	lr

0800defc <__sfputc_r>:
 800defc:	6893      	ldr	r3, [r2, #8]
 800defe:	3b01      	subs	r3, #1
 800df00:	2b00      	cmp	r3, #0
 800df02:	b410      	push	{r4}
 800df04:	6093      	str	r3, [r2, #8]
 800df06:	da08      	bge.n	800df1a <__sfputc_r+0x1e>
 800df08:	6994      	ldr	r4, [r2, #24]
 800df0a:	42a3      	cmp	r3, r4
 800df0c:	db01      	blt.n	800df12 <__sfputc_r+0x16>
 800df0e:	290a      	cmp	r1, #10
 800df10:	d103      	bne.n	800df1a <__sfputc_r+0x1e>
 800df12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df16:	f000 b935 	b.w	800e184 <__swbuf_r>
 800df1a:	6813      	ldr	r3, [r2, #0]
 800df1c:	1c58      	adds	r0, r3, #1
 800df1e:	6010      	str	r0, [r2, #0]
 800df20:	7019      	strb	r1, [r3, #0]
 800df22:	4608      	mov	r0, r1
 800df24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df28:	4770      	bx	lr

0800df2a <__sfputs_r>:
 800df2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df2c:	4606      	mov	r6, r0
 800df2e:	460f      	mov	r7, r1
 800df30:	4614      	mov	r4, r2
 800df32:	18d5      	adds	r5, r2, r3
 800df34:	42ac      	cmp	r4, r5
 800df36:	d101      	bne.n	800df3c <__sfputs_r+0x12>
 800df38:	2000      	movs	r0, #0
 800df3a:	e007      	b.n	800df4c <__sfputs_r+0x22>
 800df3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df40:	463a      	mov	r2, r7
 800df42:	4630      	mov	r0, r6
 800df44:	f7ff ffda 	bl	800defc <__sfputc_r>
 800df48:	1c43      	adds	r3, r0, #1
 800df4a:	d1f3      	bne.n	800df34 <__sfputs_r+0xa>
 800df4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df50 <_vfiprintf_r>:
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	460d      	mov	r5, r1
 800df56:	b09d      	sub	sp, #116	; 0x74
 800df58:	4614      	mov	r4, r2
 800df5a:	4698      	mov	r8, r3
 800df5c:	4606      	mov	r6, r0
 800df5e:	b118      	cbz	r0, 800df68 <_vfiprintf_r+0x18>
 800df60:	6a03      	ldr	r3, [r0, #32]
 800df62:	b90b      	cbnz	r3, 800df68 <_vfiprintf_r+0x18>
 800df64:	f7fe f93c 	bl	800c1e0 <__sinit>
 800df68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df6a:	07d9      	lsls	r1, r3, #31
 800df6c:	d405      	bmi.n	800df7a <_vfiprintf_r+0x2a>
 800df6e:	89ab      	ldrh	r3, [r5, #12]
 800df70:	059a      	lsls	r2, r3, #22
 800df72:	d402      	bmi.n	800df7a <_vfiprintf_r+0x2a>
 800df74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df76:	f7fe fab2 	bl	800c4de <__retarget_lock_acquire_recursive>
 800df7a:	89ab      	ldrh	r3, [r5, #12]
 800df7c:	071b      	lsls	r3, r3, #28
 800df7e:	d501      	bpl.n	800df84 <_vfiprintf_r+0x34>
 800df80:	692b      	ldr	r3, [r5, #16]
 800df82:	b99b      	cbnz	r3, 800dfac <_vfiprintf_r+0x5c>
 800df84:	4629      	mov	r1, r5
 800df86:	4630      	mov	r0, r6
 800df88:	f000 f93a 	bl	800e200 <__swsetup_r>
 800df8c:	b170      	cbz	r0, 800dfac <_vfiprintf_r+0x5c>
 800df8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df90:	07dc      	lsls	r4, r3, #31
 800df92:	d504      	bpl.n	800df9e <_vfiprintf_r+0x4e>
 800df94:	f04f 30ff 	mov.w	r0, #4294967295
 800df98:	b01d      	add	sp, #116	; 0x74
 800df9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9e:	89ab      	ldrh	r3, [r5, #12]
 800dfa0:	0598      	lsls	r0, r3, #22
 800dfa2:	d4f7      	bmi.n	800df94 <_vfiprintf_r+0x44>
 800dfa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfa6:	f7fe fa9b 	bl	800c4e0 <__retarget_lock_release_recursive>
 800dfaa:	e7f3      	b.n	800df94 <_vfiprintf_r+0x44>
 800dfac:	2300      	movs	r3, #0
 800dfae:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb0:	2320      	movs	r3, #32
 800dfb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfba:	2330      	movs	r3, #48	; 0x30
 800dfbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e170 <_vfiprintf_r+0x220>
 800dfc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfc4:	f04f 0901 	mov.w	r9, #1
 800dfc8:	4623      	mov	r3, r4
 800dfca:	469a      	mov	sl, r3
 800dfcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfd0:	b10a      	cbz	r2, 800dfd6 <_vfiprintf_r+0x86>
 800dfd2:	2a25      	cmp	r2, #37	; 0x25
 800dfd4:	d1f9      	bne.n	800dfca <_vfiprintf_r+0x7a>
 800dfd6:	ebba 0b04 	subs.w	fp, sl, r4
 800dfda:	d00b      	beq.n	800dff4 <_vfiprintf_r+0xa4>
 800dfdc:	465b      	mov	r3, fp
 800dfde:	4622      	mov	r2, r4
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f7ff ffa1 	bl	800df2a <__sfputs_r>
 800dfe8:	3001      	adds	r0, #1
 800dfea:	f000 80a9 	beq.w	800e140 <_vfiprintf_r+0x1f0>
 800dfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dff0:	445a      	add	r2, fp
 800dff2:	9209      	str	r2, [sp, #36]	; 0x24
 800dff4:	f89a 3000 	ldrb.w	r3, [sl]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f000 80a1 	beq.w	800e140 <_vfiprintf_r+0x1f0>
 800dffe:	2300      	movs	r3, #0
 800e000:	f04f 32ff 	mov.w	r2, #4294967295
 800e004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e008:	f10a 0a01 	add.w	sl, sl, #1
 800e00c:	9304      	str	r3, [sp, #16]
 800e00e:	9307      	str	r3, [sp, #28]
 800e010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e014:	931a      	str	r3, [sp, #104]	; 0x68
 800e016:	4654      	mov	r4, sl
 800e018:	2205      	movs	r2, #5
 800e01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e01e:	4854      	ldr	r0, [pc, #336]	; (800e170 <_vfiprintf_r+0x220>)
 800e020:	f7f2 f8de 	bl	80001e0 <memchr>
 800e024:	9a04      	ldr	r2, [sp, #16]
 800e026:	b9d8      	cbnz	r0, 800e060 <_vfiprintf_r+0x110>
 800e028:	06d1      	lsls	r1, r2, #27
 800e02a:	bf44      	itt	mi
 800e02c:	2320      	movmi	r3, #32
 800e02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e032:	0713      	lsls	r3, r2, #28
 800e034:	bf44      	itt	mi
 800e036:	232b      	movmi	r3, #43	; 0x2b
 800e038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e03c:	f89a 3000 	ldrb.w	r3, [sl]
 800e040:	2b2a      	cmp	r3, #42	; 0x2a
 800e042:	d015      	beq.n	800e070 <_vfiprintf_r+0x120>
 800e044:	9a07      	ldr	r2, [sp, #28]
 800e046:	4654      	mov	r4, sl
 800e048:	2000      	movs	r0, #0
 800e04a:	f04f 0c0a 	mov.w	ip, #10
 800e04e:	4621      	mov	r1, r4
 800e050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e054:	3b30      	subs	r3, #48	; 0x30
 800e056:	2b09      	cmp	r3, #9
 800e058:	d94d      	bls.n	800e0f6 <_vfiprintf_r+0x1a6>
 800e05a:	b1b0      	cbz	r0, 800e08a <_vfiprintf_r+0x13a>
 800e05c:	9207      	str	r2, [sp, #28]
 800e05e:	e014      	b.n	800e08a <_vfiprintf_r+0x13a>
 800e060:	eba0 0308 	sub.w	r3, r0, r8
 800e064:	fa09 f303 	lsl.w	r3, r9, r3
 800e068:	4313      	orrs	r3, r2
 800e06a:	9304      	str	r3, [sp, #16]
 800e06c:	46a2      	mov	sl, r4
 800e06e:	e7d2      	b.n	800e016 <_vfiprintf_r+0xc6>
 800e070:	9b03      	ldr	r3, [sp, #12]
 800e072:	1d19      	adds	r1, r3, #4
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	9103      	str	r1, [sp, #12]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	bfbb      	ittet	lt
 800e07c:	425b      	neglt	r3, r3
 800e07e:	f042 0202 	orrlt.w	r2, r2, #2
 800e082:	9307      	strge	r3, [sp, #28]
 800e084:	9307      	strlt	r3, [sp, #28]
 800e086:	bfb8      	it	lt
 800e088:	9204      	strlt	r2, [sp, #16]
 800e08a:	7823      	ldrb	r3, [r4, #0]
 800e08c:	2b2e      	cmp	r3, #46	; 0x2e
 800e08e:	d10c      	bne.n	800e0aa <_vfiprintf_r+0x15a>
 800e090:	7863      	ldrb	r3, [r4, #1]
 800e092:	2b2a      	cmp	r3, #42	; 0x2a
 800e094:	d134      	bne.n	800e100 <_vfiprintf_r+0x1b0>
 800e096:	9b03      	ldr	r3, [sp, #12]
 800e098:	1d1a      	adds	r2, r3, #4
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	9203      	str	r2, [sp, #12]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	bfb8      	it	lt
 800e0a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0a6:	3402      	adds	r4, #2
 800e0a8:	9305      	str	r3, [sp, #20]
 800e0aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e180 <_vfiprintf_r+0x230>
 800e0ae:	7821      	ldrb	r1, [r4, #0]
 800e0b0:	2203      	movs	r2, #3
 800e0b2:	4650      	mov	r0, sl
 800e0b4:	f7f2 f894 	bl	80001e0 <memchr>
 800e0b8:	b138      	cbz	r0, 800e0ca <_vfiprintf_r+0x17a>
 800e0ba:	9b04      	ldr	r3, [sp, #16]
 800e0bc:	eba0 000a 	sub.w	r0, r0, sl
 800e0c0:	2240      	movs	r2, #64	; 0x40
 800e0c2:	4082      	lsls	r2, r0
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	3401      	adds	r4, #1
 800e0c8:	9304      	str	r3, [sp, #16]
 800e0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ce:	4829      	ldr	r0, [pc, #164]	; (800e174 <_vfiprintf_r+0x224>)
 800e0d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0d4:	2206      	movs	r2, #6
 800e0d6:	f7f2 f883 	bl	80001e0 <memchr>
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d03f      	beq.n	800e15e <_vfiprintf_r+0x20e>
 800e0de:	4b26      	ldr	r3, [pc, #152]	; (800e178 <_vfiprintf_r+0x228>)
 800e0e0:	bb1b      	cbnz	r3, 800e12a <_vfiprintf_r+0x1da>
 800e0e2:	9b03      	ldr	r3, [sp, #12]
 800e0e4:	3307      	adds	r3, #7
 800e0e6:	f023 0307 	bic.w	r3, r3, #7
 800e0ea:	3308      	adds	r3, #8
 800e0ec:	9303      	str	r3, [sp, #12]
 800e0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0f0:	443b      	add	r3, r7
 800e0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0f4:	e768      	b.n	800dfc8 <_vfiprintf_r+0x78>
 800e0f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	2001      	movs	r0, #1
 800e0fe:	e7a6      	b.n	800e04e <_vfiprintf_r+0xfe>
 800e100:	2300      	movs	r3, #0
 800e102:	3401      	adds	r4, #1
 800e104:	9305      	str	r3, [sp, #20]
 800e106:	4619      	mov	r1, r3
 800e108:	f04f 0c0a 	mov.w	ip, #10
 800e10c:	4620      	mov	r0, r4
 800e10e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e112:	3a30      	subs	r2, #48	; 0x30
 800e114:	2a09      	cmp	r2, #9
 800e116:	d903      	bls.n	800e120 <_vfiprintf_r+0x1d0>
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d0c6      	beq.n	800e0aa <_vfiprintf_r+0x15a>
 800e11c:	9105      	str	r1, [sp, #20]
 800e11e:	e7c4      	b.n	800e0aa <_vfiprintf_r+0x15a>
 800e120:	fb0c 2101 	mla	r1, ip, r1, r2
 800e124:	4604      	mov	r4, r0
 800e126:	2301      	movs	r3, #1
 800e128:	e7f0      	b.n	800e10c <_vfiprintf_r+0x1bc>
 800e12a:	ab03      	add	r3, sp, #12
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	462a      	mov	r2, r5
 800e130:	4b12      	ldr	r3, [pc, #72]	; (800e17c <_vfiprintf_r+0x22c>)
 800e132:	a904      	add	r1, sp, #16
 800e134:	4630      	mov	r0, r6
 800e136:	f7fd fc01 	bl	800b93c <_printf_float>
 800e13a:	4607      	mov	r7, r0
 800e13c:	1c78      	adds	r0, r7, #1
 800e13e:	d1d6      	bne.n	800e0ee <_vfiprintf_r+0x19e>
 800e140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e142:	07d9      	lsls	r1, r3, #31
 800e144:	d405      	bmi.n	800e152 <_vfiprintf_r+0x202>
 800e146:	89ab      	ldrh	r3, [r5, #12]
 800e148:	059a      	lsls	r2, r3, #22
 800e14a:	d402      	bmi.n	800e152 <_vfiprintf_r+0x202>
 800e14c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e14e:	f7fe f9c7 	bl	800c4e0 <__retarget_lock_release_recursive>
 800e152:	89ab      	ldrh	r3, [r5, #12]
 800e154:	065b      	lsls	r3, r3, #25
 800e156:	f53f af1d 	bmi.w	800df94 <_vfiprintf_r+0x44>
 800e15a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e15c:	e71c      	b.n	800df98 <_vfiprintf_r+0x48>
 800e15e:	ab03      	add	r3, sp, #12
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	462a      	mov	r2, r5
 800e164:	4b05      	ldr	r3, [pc, #20]	; (800e17c <_vfiprintf_r+0x22c>)
 800e166:	a904      	add	r1, sp, #16
 800e168:	4630      	mov	r0, r6
 800e16a:	f7fd fe8b 	bl	800be84 <_printf_i>
 800e16e:	e7e4      	b.n	800e13a <_vfiprintf_r+0x1ea>
 800e170:	0800f244 	.word	0x0800f244
 800e174:	0800f24e 	.word	0x0800f24e
 800e178:	0800b93d 	.word	0x0800b93d
 800e17c:	0800df2b 	.word	0x0800df2b
 800e180:	0800f24a 	.word	0x0800f24a

0800e184 <__swbuf_r>:
 800e184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e186:	460e      	mov	r6, r1
 800e188:	4614      	mov	r4, r2
 800e18a:	4605      	mov	r5, r0
 800e18c:	b118      	cbz	r0, 800e196 <__swbuf_r+0x12>
 800e18e:	6a03      	ldr	r3, [r0, #32]
 800e190:	b90b      	cbnz	r3, 800e196 <__swbuf_r+0x12>
 800e192:	f7fe f825 	bl	800c1e0 <__sinit>
 800e196:	69a3      	ldr	r3, [r4, #24]
 800e198:	60a3      	str	r3, [r4, #8]
 800e19a:	89a3      	ldrh	r3, [r4, #12]
 800e19c:	071a      	lsls	r2, r3, #28
 800e19e:	d525      	bpl.n	800e1ec <__swbuf_r+0x68>
 800e1a0:	6923      	ldr	r3, [r4, #16]
 800e1a2:	b31b      	cbz	r3, 800e1ec <__swbuf_r+0x68>
 800e1a4:	6823      	ldr	r3, [r4, #0]
 800e1a6:	6922      	ldr	r2, [r4, #16]
 800e1a8:	1a98      	subs	r0, r3, r2
 800e1aa:	6963      	ldr	r3, [r4, #20]
 800e1ac:	b2f6      	uxtb	r6, r6
 800e1ae:	4283      	cmp	r3, r0
 800e1b0:	4637      	mov	r7, r6
 800e1b2:	dc04      	bgt.n	800e1be <__swbuf_r+0x3a>
 800e1b4:	4621      	mov	r1, r4
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	f7ff fdc2 	bl	800dd40 <_fflush_r>
 800e1bc:	b9e0      	cbnz	r0, 800e1f8 <__swbuf_r+0x74>
 800e1be:	68a3      	ldr	r3, [r4, #8]
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	60a3      	str	r3, [r4, #8]
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	1c5a      	adds	r2, r3, #1
 800e1c8:	6022      	str	r2, [r4, #0]
 800e1ca:	701e      	strb	r6, [r3, #0]
 800e1cc:	6962      	ldr	r2, [r4, #20]
 800e1ce:	1c43      	adds	r3, r0, #1
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d004      	beq.n	800e1de <__swbuf_r+0x5a>
 800e1d4:	89a3      	ldrh	r3, [r4, #12]
 800e1d6:	07db      	lsls	r3, r3, #31
 800e1d8:	d506      	bpl.n	800e1e8 <__swbuf_r+0x64>
 800e1da:	2e0a      	cmp	r6, #10
 800e1dc:	d104      	bne.n	800e1e8 <__swbuf_r+0x64>
 800e1de:	4621      	mov	r1, r4
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	f7ff fdad 	bl	800dd40 <_fflush_r>
 800e1e6:	b938      	cbnz	r0, 800e1f8 <__swbuf_r+0x74>
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f000 f806 	bl	800e200 <__swsetup_r>
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	d0d5      	beq.n	800e1a4 <__swbuf_r+0x20>
 800e1f8:	f04f 37ff 	mov.w	r7, #4294967295
 800e1fc:	e7f4      	b.n	800e1e8 <__swbuf_r+0x64>
	...

0800e200 <__swsetup_r>:
 800e200:	b538      	push	{r3, r4, r5, lr}
 800e202:	4b2a      	ldr	r3, [pc, #168]	; (800e2ac <__swsetup_r+0xac>)
 800e204:	4605      	mov	r5, r0
 800e206:	6818      	ldr	r0, [r3, #0]
 800e208:	460c      	mov	r4, r1
 800e20a:	b118      	cbz	r0, 800e214 <__swsetup_r+0x14>
 800e20c:	6a03      	ldr	r3, [r0, #32]
 800e20e:	b90b      	cbnz	r3, 800e214 <__swsetup_r+0x14>
 800e210:	f7fd ffe6 	bl	800c1e0 <__sinit>
 800e214:	89a3      	ldrh	r3, [r4, #12]
 800e216:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e21a:	0718      	lsls	r0, r3, #28
 800e21c:	d422      	bmi.n	800e264 <__swsetup_r+0x64>
 800e21e:	06d9      	lsls	r1, r3, #27
 800e220:	d407      	bmi.n	800e232 <__swsetup_r+0x32>
 800e222:	2309      	movs	r3, #9
 800e224:	602b      	str	r3, [r5, #0]
 800e226:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e22a:	81a3      	strh	r3, [r4, #12]
 800e22c:	f04f 30ff 	mov.w	r0, #4294967295
 800e230:	e034      	b.n	800e29c <__swsetup_r+0x9c>
 800e232:	0758      	lsls	r0, r3, #29
 800e234:	d512      	bpl.n	800e25c <__swsetup_r+0x5c>
 800e236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e238:	b141      	cbz	r1, 800e24c <__swsetup_r+0x4c>
 800e23a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e23e:	4299      	cmp	r1, r3
 800e240:	d002      	beq.n	800e248 <__swsetup_r+0x48>
 800e242:	4628      	mov	r0, r5
 800e244:	f7fe ffd6 	bl	800d1f4 <_free_r>
 800e248:	2300      	movs	r3, #0
 800e24a:	6363      	str	r3, [r4, #52]	; 0x34
 800e24c:	89a3      	ldrh	r3, [r4, #12]
 800e24e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e252:	81a3      	strh	r3, [r4, #12]
 800e254:	2300      	movs	r3, #0
 800e256:	6063      	str	r3, [r4, #4]
 800e258:	6923      	ldr	r3, [r4, #16]
 800e25a:	6023      	str	r3, [r4, #0]
 800e25c:	89a3      	ldrh	r3, [r4, #12]
 800e25e:	f043 0308 	orr.w	r3, r3, #8
 800e262:	81a3      	strh	r3, [r4, #12]
 800e264:	6923      	ldr	r3, [r4, #16]
 800e266:	b94b      	cbnz	r3, 800e27c <__swsetup_r+0x7c>
 800e268:	89a3      	ldrh	r3, [r4, #12]
 800e26a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e26e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e272:	d003      	beq.n	800e27c <__swsetup_r+0x7c>
 800e274:	4621      	mov	r1, r4
 800e276:	4628      	mov	r0, r5
 800e278:	f000 f840 	bl	800e2fc <__smakebuf_r>
 800e27c:	89a0      	ldrh	r0, [r4, #12]
 800e27e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e282:	f010 0301 	ands.w	r3, r0, #1
 800e286:	d00a      	beq.n	800e29e <__swsetup_r+0x9e>
 800e288:	2300      	movs	r3, #0
 800e28a:	60a3      	str	r3, [r4, #8]
 800e28c:	6963      	ldr	r3, [r4, #20]
 800e28e:	425b      	negs	r3, r3
 800e290:	61a3      	str	r3, [r4, #24]
 800e292:	6923      	ldr	r3, [r4, #16]
 800e294:	b943      	cbnz	r3, 800e2a8 <__swsetup_r+0xa8>
 800e296:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e29a:	d1c4      	bne.n	800e226 <__swsetup_r+0x26>
 800e29c:	bd38      	pop	{r3, r4, r5, pc}
 800e29e:	0781      	lsls	r1, r0, #30
 800e2a0:	bf58      	it	pl
 800e2a2:	6963      	ldrpl	r3, [r4, #20]
 800e2a4:	60a3      	str	r3, [r4, #8]
 800e2a6:	e7f4      	b.n	800e292 <__swsetup_r+0x92>
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	e7f7      	b.n	800e29c <__swsetup_r+0x9c>
 800e2ac:	20000074 	.word	0x20000074

0800e2b0 <__swhatbuf_r>:
 800e2b0:	b570      	push	{r4, r5, r6, lr}
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2b8:	2900      	cmp	r1, #0
 800e2ba:	b096      	sub	sp, #88	; 0x58
 800e2bc:	4615      	mov	r5, r2
 800e2be:	461e      	mov	r6, r3
 800e2c0:	da0d      	bge.n	800e2de <__swhatbuf_r+0x2e>
 800e2c2:	89a3      	ldrh	r3, [r4, #12]
 800e2c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e2c8:	f04f 0100 	mov.w	r1, #0
 800e2cc:	bf0c      	ite	eq
 800e2ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e2d2:	2340      	movne	r3, #64	; 0x40
 800e2d4:	2000      	movs	r0, #0
 800e2d6:	6031      	str	r1, [r6, #0]
 800e2d8:	602b      	str	r3, [r5, #0]
 800e2da:	b016      	add	sp, #88	; 0x58
 800e2dc:	bd70      	pop	{r4, r5, r6, pc}
 800e2de:	466a      	mov	r2, sp
 800e2e0:	f000 f848 	bl	800e374 <_fstat_r>
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	dbec      	blt.n	800e2c2 <__swhatbuf_r+0x12>
 800e2e8:	9901      	ldr	r1, [sp, #4]
 800e2ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e2ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e2f2:	4259      	negs	r1, r3
 800e2f4:	4159      	adcs	r1, r3
 800e2f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2fa:	e7eb      	b.n	800e2d4 <__swhatbuf_r+0x24>

0800e2fc <__smakebuf_r>:
 800e2fc:	898b      	ldrh	r3, [r1, #12]
 800e2fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e300:	079d      	lsls	r5, r3, #30
 800e302:	4606      	mov	r6, r0
 800e304:	460c      	mov	r4, r1
 800e306:	d507      	bpl.n	800e318 <__smakebuf_r+0x1c>
 800e308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e30c:	6023      	str	r3, [r4, #0]
 800e30e:	6123      	str	r3, [r4, #16]
 800e310:	2301      	movs	r3, #1
 800e312:	6163      	str	r3, [r4, #20]
 800e314:	b002      	add	sp, #8
 800e316:	bd70      	pop	{r4, r5, r6, pc}
 800e318:	ab01      	add	r3, sp, #4
 800e31a:	466a      	mov	r2, sp
 800e31c:	f7ff ffc8 	bl	800e2b0 <__swhatbuf_r>
 800e320:	9900      	ldr	r1, [sp, #0]
 800e322:	4605      	mov	r5, r0
 800e324:	4630      	mov	r0, r6
 800e326:	f7fd f9dd 	bl	800b6e4 <_malloc_r>
 800e32a:	b948      	cbnz	r0, 800e340 <__smakebuf_r+0x44>
 800e32c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e330:	059a      	lsls	r2, r3, #22
 800e332:	d4ef      	bmi.n	800e314 <__smakebuf_r+0x18>
 800e334:	f023 0303 	bic.w	r3, r3, #3
 800e338:	f043 0302 	orr.w	r3, r3, #2
 800e33c:	81a3      	strh	r3, [r4, #12]
 800e33e:	e7e3      	b.n	800e308 <__smakebuf_r+0xc>
 800e340:	89a3      	ldrh	r3, [r4, #12]
 800e342:	6020      	str	r0, [r4, #0]
 800e344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e348:	81a3      	strh	r3, [r4, #12]
 800e34a:	9b00      	ldr	r3, [sp, #0]
 800e34c:	6163      	str	r3, [r4, #20]
 800e34e:	9b01      	ldr	r3, [sp, #4]
 800e350:	6120      	str	r0, [r4, #16]
 800e352:	b15b      	cbz	r3, 800e36c <__smakebuf_r+0x70>
 800e354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e358:	4630      	mov	r0, r6
 800e35a:	f000 f81d 	bl	800e398 <_isatty_r>
 800e35e:	b128      	cbz	r0, 800e36c <__smakebuf_r+0x70>
 800e360:	89a3      	ldrh	r3, [r4, #12]
 800e362:	f023 0303 	bic.w	r3, r3, #3
 800e366:	f043 0301 	orr.w	r3, r3, #1
 800e36a:	81a3      	strh	r3, [r4, #12]
 800e36c:	89a3      	ldrh	r3, [r4, #12]
 800e36e:	431d      	orrs	r5, r3
 800e370:	81a5      	strh	r5, [r4, #12]
 800e372:	e7cf      	b.n	800e314 <__smakebuf_r+0x18>

0800e374 <_fstat_r>:
 800e374:	b538      	push	{r3, r4, r5, lr}
 800e376:	4d07      	ldr	r5, [pc, #28]	; (800e394 <_fstat_r+0x20>)
 800e378:	2300      	movs	r3, #0
 800e37a:	4604      	mov	r4, r0
 800e37c:	4608      	mov	r0, r1
 800e37e:	4611      	mov	r1, r2
 800e380:	602b      	str	r3, [r5, #0]
 800e382:	f7f6 fcee 	bl	8004d62 <_fstat>
 800e386:	1c43      	adds	r3, r0, #1
 800e388:	d102      	bne.n	800e390 <_fstat_r+0x1c>
 800e38a:	682b      	ldr	r3, [r5, #0]
 800e38c:	b103      	cbz	r3, 800e390 <_fstat_r+0x1c>
 800e38e:	6023      	str	r3, [r4, #0]
 800e390:	bd38      	pop	{r3, r4, r5, pc}
 800e392:	bf00      	nop
 800e394:	20000974 	.word	0x20000974

0800e398 <_isatty_r>:
 800e398:	b538      	push	{r3, r4, r5, lr}
 800e39a:	4d06      	ldr	r5, [pc, #24]	; (800e3b4 <_isatty_r+0x1c>)
 800e39c:	2300      	movs	r3, #0
 800e39e:	4604      	mov	r4, r0
 800e3a0:	4608      	mov	r0, r1
 800e3a2:	602b      	str	r3, [r5, #0]
 800e3a4:	f7f6 fced 	bl	8004d82 <_isatty>
 800e3a8:	1c43      	adds	r3, r0, #1
 800e3aa:	d102      	bne.n	800e3b2 <_isatty_r+0x1a>
 800e3ac:	682b      	ldr	r3, [r5, #0]
 800e3ae:	b103      	cbz	r3, 800e3b2 <_isatty_r+0x1a>
 800e3b0:	6023      	str	r3, [r4, #0]
 800e3b2:	bd38      	pop	{r3, r4, r5, pc}
 800e3b4:	20000974 	.word	0x20000974

0800e3b8 <_init>:
 800e3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ba:	bf00      	nop
 800e3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3be:	bc08      	pop	{r3}
 800e3c0:	469e      	mov	lr, r3
 800e3c2:	4770      	bx	lr

0800e3c4 <_fini>:
 800e3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3c6:	bf00      	nop
 800e3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3ca:	bc08      	pop	{r3}
 800e3cc:	469e      	mov	lr, r3
 800e3ce:	4770      	bx	lr
