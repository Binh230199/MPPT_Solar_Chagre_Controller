
MPPT_Solar_Charge_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002880  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08002a10  08002a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c0c  08002c0c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08002c0c  08002c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c14  08002c14  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c14  08002c14  00012c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c18  08002c18  00012c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          0000066c  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006cc  200006cc  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   000186d6  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033d0  00000000  00000000  000387a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000073ee  00000000  00000000  0003bb79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000b00  00000000  00000000  00042f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b09  00000000  00000000  00043a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026cf3  00000000  00000000  00044571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00018d3a  00000000  00000000  0006b264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000dcb28  00000000  00000000  00083f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00002624  00000000  00000000  00160ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000078  00000000  00000000  001630ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080029f8 	.word	0x080029f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080029f8 	.word	0x080029f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <_ZN4blib7MonitorD1Ev>:
        showInit();
    }
    Monitor::~Monitor()
    {

    }
 800057c:	4770      	bx	lr

0800057e <_ZN4blib7MonitorD0Ev>:
    Monitor::~Monitor()
 800057e:	b510      	push	{r4, lr}
    }
 8000580:	2114      	movs	r1, #20
    Monitor::~Monitor()
 8000582:	4604      	mov	r4, r0
    }
 8000584:	f001 fd73 	bl	800206e <_ZdlPvj>
 8000588:	4620      	mov	r0, r4
 800058a:	bd10      	pop	{r4, pc}

0800058c <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 800058c:	b507      	push	{r0, r1, r2, lr}
 800058e:	9001      	str	r0, [sp, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8000590:	f7ff fe1e 	bl	80001d0 <strlen>
 8000594:	b282      	uxth	r2, r0
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <_ZN4blib6Logger5printEPKc+0x20>)
 8000598:	9901      	ldr	r1, [sp, #4]
 800059a:	6800      	ldr	r0, [r0, #0]
 800059c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
            }
 80005a0:	b003      	add	sp, #12
 80005a2:	f85d eb04 	ldr.w	lr, [sp], #4
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 80005a6:	f001 bd0d 	b.w	8001fc4 <HAL_UART_Transmit>
 80005aa:	bf00      	nop
 80005ac:	2000000c 	.word	0x2000000c

080005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 80005b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 80005b4:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80005f4 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>
            static void Log(const char *message, Args ... args)
 80005b8:	460d      	mov	r5, r1
 80005ba:	4616      	mov	r6, r2
 80005bc:	461f      	mov	r7, r3
 80005be:	4604      	mov	r4, r0
                print("[>]  ");
 80005c0:	480a      	ldr	r0, [pc, #40]	; (80005ec <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x3c>)
 80005c2:	f7ff ffe3 	bl	800058c <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 80005c6:	462b      	mov	r3, r5
 80005c8:	4622      	mov	r2, r4
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	e9cd 6700 	strd	r6, r7, [sp]
 80005d2:	4640      	mov	r0, r8
 80005d4:	f001 fe04 	bl	80021e0 <sniprintf>
                print(mBuffer);
 80005d8:	4640      	mov	r0, r8
 80005da:	f7ff ffd7 	bl	800058c <_ZN4blib6Logger5printEPKc>
                print("\n");
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 80005e0:	f7ff ffd4 	bl	800058c <_ZN4blib6Logger5printEPKc>
            }
 80005e4:	b002      	add	sp, #8
 80005e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005ea:	bf00      	nop
 80005ec:	08002a10 	.word	0x08002a10
 80005f0:	08002a16 	.word	0x08002a16
 80005f4:	20000184 	.word	0x20000184

080005f8 <_ZN4blib7Monitor8showInitEv>:

    // Show when begin
    void Monitor::showInit()
    {
 80005f8:	b508      	push	{r3, lr}
        LOGI("MPPT INITIALIZED");
 80005fa:	4909      	ldr	r1, [pc, #36]	; (8000620 <_ZN4blib7Monitor8showInitEv+0x28>)
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <_ZN4blib7Monitor8showInitEv+0x2c>)
 80005fe:	480a      	ldr	r0, [pc, #40]	; (8000628 <_ZN4blib7Monitor8showInitEv+0x30>)
 8000600:	2219      	movs	r2, #25
 8000602:	f7ff ffd5 	bl	80005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        LOGI("FIRMWARE V1.00");
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <_ZN4blib7Monitor8showInitEv+0x2c>)
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <_ZN4blib7Monitor8showInitEv+0x34>)
 800060a:	4905      	ldr	r1, [pc, #20]	; (8000620 <_ZN4blib7Monitor8showInitEv+0x28>)
 800060c:	221a      	movs	r2, #26
 800060e:	f7ff ffcf 	bl	80005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        HAL_Delay(1500);
    }
 8000612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        HAL_Delay(1500);
 8000616:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800061a:	f000 bb91 	b.w	8000d40 <HAL_Delay>
 800061e:	bf00      	nop
 8000620:	08002a21 	.word	0x08002a21
 8000624:	08002a18 	.word	0x08002a18
 8000628:	08002a2d 	.word	0x08002a2d
 800062c:	08002a4b 	.word	0x08002a4b

08000630 <_ZN4blib7MonitorC1Ev>:
    Monitor::Monitor()
 8000630:	b510      	push	{r4, lr}
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <_ZN4blib7MonitorC1Ev+0x1c>)
 8000634:	6003      	str	r3, [r0, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800063c:	4604      	mov	r4, r0
 800063e:	7103      	strb	r3, [r0, #4]
 8000640:	8203      	strh	r3, [r0, #16]
        showInit();
 8000642:	f7ff ffd9 	bl	80005f8 <_ZN4blib7Monitor8showInitEv>
    }
 8000646:	4620      	mov	r0, r4
 8000648:	bd10      	pop	{r4, pc}
 800064a:	bf00      	nop
 800064c:	08002b44 	.word	0x08002b44

08000650 <_ZN4blib7Monitor27showScreenChooseSettingModeEv>:
    void Monitor::showDisplayLevel4()
    {

    }
    void Monitor::showScreenChooseSettingMode()
    {
 8000650:	b508      	push	{r3, lr}
        LOGI("SETTINGS MENU");
 8000652:	4906      	ldr	r1, [pc, #24]	; (800066c <_ZN4blib7Monitor27showScreenChooseSettingModeEv+0x1c>)
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <_ZN4blib7Monitor27showScreenChooseSettingModeEv+0x20>)
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <_ZN4blib7Monitor27showScreenChooseSettingModeEv+0x24>)
 8000658:	22a7      	movs	r2, #167	; 0xa7
 800065a:	f7ff ffa9 	bl	80005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        LOGI("--PRESS SELECT--");
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <_ZN4blib7Monitor27showScreenChooseSettingModeEv+0x20>)
 8000660:	4902      	ldr	r1, [pc, #8]	; (800066c <_ZN4blib7Monitor27showScreenChooseSettingModeEv+0x1c>)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <_ZN4blib7Monitor27showScreenChooseSettingModeEv+0x28>)
 8000664:	22a8      	movs	r2, #168	; 0xa8
 8000666:	f7ff ffa3 	bl	80005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800066a:	bd08      	pop	{r3, pc}
 800066c:	08002a21 	.word	0x08002a21
 8000670:	08002a67 	.word	0x08002a67
 8000674:	08002a83 	.word	0x08002a83
 8000678:	08002a9e 	.word	0x08002a9e

0800067c <_ZN4blib7Monitor22showScreenFactoryResetEv>:
    void Monitor::showScreenFactoryReset()
    {
        if (getFactoryReset() == false)
 800067c:	7c03      	ldrb	r3, [r0, #16]
    {
 800067e:	b510      	push	{r4, lr}
 8000680:	4604      	mov	r4, r0
        if (getFactoryReset() == false)
 8000682:	b963      	cbnz	r3, 800069e <_ZN4blib7Monitor22showScreenFactoryResetEv+0x22>
        {
            LOGI("FACTORY RESET");
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x68>)
 8000686:	4918      	ldr	r1, [pc, #96]	; (80006e8 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x6c>)
 8000688:	4818      	ldr	r0, [pc, #96]	; (80006ec <_ZN4blib7Monitor22showScreenFactoryResetEv+0x70>)
 800068a:	22ae      	movs	r2, #174	; 0xae
 800068c:	f7ff ff90 	bl	80005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
            LOGI("--PRESS SELECT--");
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x68>)
 8000692:	4915      	ldr	r1, [pc, #84]	; (80006e8 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x6c>)
 8000694:	4816      	ldr	r0, [pc, #88]	; (80006f0 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x74>)
 8000696:	22af      	movs	r2, #175	; 0xaf
        else
        {
            if (getConfirmFactoryReset() == false)
            {
                LOGI("ARE YOU SURE?");
                LOGI(" >NO   >YES");
 8000698:	f7ff ff8a 	bl	80005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                // Go to setting mode - show supply algorithm screen
                setSettingMode(true);
                setSettingLevel(SettingLevel::SETTING_LEVEL_CONFIG_1);    // TODO: Check correct screen
            }
        }
    }
 800069c:	bd10      	pop	{r4, pc}
            if (getConfirmFactoryReset() == false)
 800069e:	7c43      	ldrb	r3, [r0, #17]
 80006a0:	b953      	cbnz	r3, 80006b8 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x3c>
                LOGI("ARE YOU SURE?");
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x68>)
 80006a4:	4910      	ldr	r1, [pc, #64]	; (80006e8 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x6c>)
 80006a6:	4813      	ldr	r0, [pc, #76]	; (80006f4 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x78>)
 80006a8:	22b5      	movs	r2, #181	; 0xb5
 80006aa:	f7ff ff81 	bl	80005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                LOGI(" >NO   >YES");
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x68>)
 80006b0:	490d      	ldr	r1, [pc, #52]	; (80006e8 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x6c>)
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x7c>)
 80006b4:	22b6      	movs	r2, #182	; 0xb6
 80006b6:	e7ef      	b.n	8000698 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x1c>
                LOGI("FACTORY RESET");
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x68>)
 80006ba:	490b      	ldr	r1, [pc, #44]	; (80006e8 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x6c>)
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <_ZN4blib7Monitor22showScreenFactoryResetEv+0x70>)
 80006be:	22ba      	movs	r2, #186	; 0xba
 80006c0:	f7ff ff76 	bl	80005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                LOGI("SUCCESSFULLY");
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x68>)
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <_ZN4blib7Monitor22showScreenFactoryResetEv+0x6c>)
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <_ZN4blib7Monitor22showScreenFactoryResetEv+0x80>)
 80006ca:	22bb      	movs	r2, #187	; 0xbb
 80006cc:	f7ff ff70 	bl	80005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                HAL_Delay(1500);
 80006d0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80006d4:	f000 fb34 	bl	8000d40 <HAL_Delay>
        mFactoryResetEnable = val;
 80006d8:	2300      	movs	r3, #0
 80006da:	8223      	strh	r3, [r4, #16]
        mSettingMode = val;
 80006dc:	2301      	movs	r3, #1
 80006de:	7123      	strb	r3, [r4, #4]
        mSettingLevel = val;
 80006e0:	60a3      	str	r3, [r4, #8]
    }
 80006e2:	e7db      	b.n	800069c <_ZN4blib7Monitor22showScreenFactoryResetEv+0x20>
 80006e4:	08002abc 	.word	0x08002abc
 80006e8:	08002a21 	.word	0x08002a21
 80006ec:	08002ad3 	.word	0x08002ad3
 80006f0:	08002a9e 	.word	0x08002a9e
 80006f4:	08002aee 	.word	0x08002aee
 80006f8:	08002b09 	.word	0x08002b09
 80006fc:	08002b22 	.word	0x08002b22

08000700 <_ZN4blib7Monitor11showDisplayEv>:
        return mDisplayLevel;
 8000700:	68c3      	ldr	r3, [r0, #12]
        switch (getDisplayLevel())
 8000702:	2b05      	cmp	r3, #5
 8000704:	d002      	beq.n	800070c <_ZN4blib7Monitor11showDisplayEv+0xc>
 8000706:	2b06      	cmp	r3, #6
 8000708:	d002      	beq.n	8000710 <_ZN4blib7Monitor11showDisplayEv+0x10>
 800070a:	4770      	bx	lr
                showScreenChooseSettingMode();
 800070c:	f7ff bfa0 	b.w	8000650 <_ZN4blib7Monitor27showScreenChooseSettingModeEv>
                showScreenFactoryReset();
 8000710:	f7ff bfb4 	b.w	800067c <_ZN4blib7Monitor22showScreenFactoryResetEv>

08000714 <_ZN4blib7Monitor8showMenuEv>:
        if (getSetttingMode() == true)
 8000714:	7903      	ldrb	r3, [r0, #4]
 8000716:	b90b      	cbnz	r3, 800071c <_ZN4blib7Monitor8showMenuEv+0x8>
            showDisplay();
 8000718:	f7ff bff2 	b.w	8000700 <_ZN4blib7Monitor11showDisplayEv>
    }
 800071c:	4770      	bx	lr
	...

08000720 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000720:	b500      	push	{lr}
 8000722:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000724:	222c      	movs	r2, #44	; 0x2c
 8000726:	2100      	movs	r1, #0
 8000728:	a809      	add	r0, sp, #36	; 0x24
 800072a:	f001 fd8d 	bl	8002248 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800072e:	2214      	movs	r2, #20
 8000730:	2100      	movs	r1, #0
 8000732:	a803      	add	r0, sp, #12
 8000734:	f001 fd88 	bl	8002248 <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	4a1a      	ldr	r2, [pc, #104]	; (80007a4 <_Z18SystemClock_Configv+0x84>)
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000740:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000744:	6411      	str	r1, [r2, #64]	; 0x40
 8000746:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000748:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800074c:	9201      	str	r2, [sp, #4]
 800074e:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <_Z18SystemClock_Configv+0x88>)
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	6811      	ldr	r1, [r2, #0]
 8000756:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800075a:	6011      	str	r1, [r2, #0]
 800075c:	6812      	ldr	r2, [r2, #0]
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075e:	930e      	str	r3, [sp, #56]	; 0x38
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000764:	9202      	str	r2, [sp, #8]
 8000766:	9a02      	ldr	r2, [sp, #8]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8000768:	2206      	movs	r2, #6
 800076a:	9208      	str	r2, [sp, #32]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800076c:	2201      	movs	r2, #1
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076e:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2210      	movs	r2, #16
 8000776:	920c      	str	r2, [sp, #48]	; 0x30
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f000 fe1a 	bl	80013b0 <HAL_RCC_OscConfig>
 800077c:	4601      	mov	r1, r0
 800077e:	b108      	cbz	r0, 8000784 <_Z18SystemClock_Configv+0x64>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000782:	e7fe      	b.n	8000782 <_Z18SystemClock_Configv+0x62>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8000784:	230f      	movs	r3, #15
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000786:	e9cd 3003 	strd	r3, r0, [sp, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078a:	e9cd 0005 	strd	r0, r0, [sp, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	9007      	str	r0, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000790:	a803      	add	r0, sp, #12
 8000792:	f000 ffe7 	bl	8001764 <HAL_RCC_ClockConfig>
 8000796:	b108      	cbz	r0, 800079c <_Z18SystemClock_Configv+0x7c>
 8000798:	b672      	cpsid	i
    while (1)
 800079a:	e7fe      	b.n	800079a <_Z18SystemClock_Configv+0x7a>
}
 800079c:	b015      	add	sp, #84	; 0x54
 800079e:	f85d fb04 	ldr.w	pc, [sp], #4
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <Error_Handler>:
 80007ac:	b672      	cpsid	i
    while (1)
 80007ae:	e7fe      	b.n	80007ae <Error_Handler+0x2>

080007b0 <main>:
{
 80007b0:	b500      	push	{lr}
 80007b2:	b097      	sub	sp, #92	; 0x5c
    HAL_Init();
 80007b4:	f000 fa98 	bl	8000ce8 <HAL_Init>
    SystemClock_Config();
 80007b8:	f7ff ffb2 	bl	8000720 <_Z18SystemClock_Configv>
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007bc:	2214      	movs	r2, #20
 80007be:	2100      	movs	r1, #0
 80007c0:	a80c      	add	r0, sp, #48	; 0x30
 80007c2:	f001 fd41 	bl	8002248 <memset>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2400      	movs	r4, #0
 80007c8:	4b7f      	ldr	r3, [pc, #508]	; (80009c8 <main+0x218>)
 80007ca:	9402      	str	r4, [sp, #8]
 80007cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_WritePin(GPIOD, LED_INDICATE_Pin | FAN_Pin | BUCK_ENABLE_Pin | ANTI_BACKFLOW_Pin,
 80007ce:	487f      	ldr	r0, [pc, #508]	; (80009cc <main+0x21c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d0:	f042 0204 	orr.w	r2, r2, #4
 80007d4:	631a      	str	r2, [r3, #48]	; 0x30
 80007d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d8:	f002 0204 	and.w	r2, r2, #4
 80007dc:	9202      	str	r2, [sp, #8]
 80007de:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e0:	9403      	str	r4, [sp, #12]
 80007e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007e8:	631a      	str	r2, [r3, #48]	; 0x30
 80007ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80007f0:	9203      	str	r2, [sp, #12]
 80007f2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	9404      	str	r4, [sp, #16]
 80007f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007f8:	f042 0201 	orr.w	r2, r2, #1
 80007fc:	631a      	str	r2, [r3, #48]	; 0x30
 80007fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000800:	f002 0201 	and.w	r2, r2, #1
 8000804:	9204      	str	r2, [sp, #16]
 8000806:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000808:	9405      	str	r4, [sp, #20]
 800080a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800080c:	f042 0208 	orr.w	r2, r2, #8
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
 8000812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000814:	f002 0208 	and.w	r2, r2, #8
 8000818:	9205      	str	r2, [sp, #20]
 800081a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	9406      	str	r4, [sp, #24]
 800081e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000820:	f042 0202 	orr.w	r2, r2, #2
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_WritePin(GPIOD, LED_INDICATE_Pin | FAN_Pin | BUCK_ENABLE_Pin | ANTI_BACKFLOW_Pin,
 800082c:	4622      	mov	r2, r4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_WritePin(GPIOD, LED_INDICATE_Pin | FAN_Pin | BUCK_ENABLE_Pin | ANTI_BACKFLOW_Pin,
 8000830:	f44f 4170 	mov.w	r1, #61440	; 0xf000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	250f      	movs	r5, #15
    HAL_GPIO_WritePin(GPIOD, LED_INDICATE_Pin | FAN_Pin | BUCK_ENABLE_Pin | ANTI_BACKFLOW_Pin,
 8000838:	f000 fd0c 	bl	8001254 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000840:	4863      	ldr	r0, [pc, #396]	; (80009d0 <main+0x220>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	940e      	str	r4, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000844:	a90c      	add	r1, sp, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000846:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084c:	f000 fc28 	bl	80010a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000854:	485d      	ldr	r0, [pc, #372]	; (80009cc <main+0x21c>)
    hadc1.Instance = ADC1;
 8000856:	4d5f      	ldr	r5, [pc, #380]	; (80009d4 <main+0x224>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000858:	a90c      	add	r1, sp, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000862:	f000 fc1d 	bl	80010a0 <HAL_GPIO_Init>
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8000866:	2210      	movs	r2, #16
 8000868:	4621      	mov	r1, r4
 800086a:	a80c      	add	r0, sp, #48	; 0x30
 800086c:	f001 fcec 	bl	8002248 <memset>
    hadc1.Instance = ADC1;
 8000870:	4b59      	ldr	r3, [pc, #356]	; (80009d8 <main+0x228>)
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000872:	60ac      	str	r4, [r5, #8]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000874:	e9c5 3400 	strd	r3, r4, [r5]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000878:	4628      	mov	r0, r5
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800087a:	4b58      	ldr	r3, [pc, #352]	; (80009dc <main+0x22c>)
    hadc1.Init.ScanConvMode = DISABLE;
 800087c:	612c      	str	r4, [r5, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800087e:	762c      	strb	r4, [r5, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000880:	f885 4020 	strb.w	r4, [r5, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000884:	62ec      	str	r4, [r5, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000886:	62ab      	str	r3, [r5, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000888:	60ec      	str	r4, [r5, #12]
    hadc1.Init.NbrOfConversion = 1;
 800088a:	61ee      	str	r6, [r5, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800088c:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000890:	616e      	str	r6, [r5, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000892:	f000 fa69 	bl	8000d68 <HAL_ADC_Init>
 8000896:	b108      	cbz	r0, 800089c <main+0xec>
 8000898:	b672      	cpsid	i
    while (1)
 800089a:	e7fe      	b.n	800089a <main+0xea>
    sConfig.Rank = 1;
 800089c:	e9cd 060c 	strd	r0, r6, [sp, #48]	; 0x30
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008a0:	900e      	str	r0, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a2:	a90c      	add	r1, sp, #48	; 0x30
 80008a4:	4628      	mov	r0, r5
 80008a6:	f000 fb05 	bl	8000eb4 <HAL_ADC_ConfigChannel>
 80008aa:	b108      	cbz	r0, 80008b0 <main+0x100>
 80008ac:	b672      	cpsid	i
    while (1)
 80008ae:	e7fe      	b.n	80008ae <main+0xfe>
    hi2c1.Instance = I2C1;
 80008b0:	4b4b      	ldr	r3, [pc, #300]	; (80009e0 <main+0x230>)
    hi2c1.Init.ClockSpeed = 100000;
 80008b2:	4a4c      	ldr	r2, [pc, #304]	; (80009e4 <main+0x234>)
 80008b4:	4c4c      	ldr	r4, [pc, #304]	; (80009e8 <main+0x238>)
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b6:	6218      	str	r0, [r3, #32]
    hi2c1.Init.ClockSpeed = 100000;
 80008b8:	e9c3 4200 	strd	r4, r2, [r3]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hi2c1.Init.OwnAddress1 = 0;
 80008c0:	e9c3 0002 	strd	r0, r0, [r3, #8]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	e9c3 2004 	strd	r2, r0, [r3, #16]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c8:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fcc7 	bl	8001260 <HAL_I2C_Init>
 80008d2:	4605      	mov	r5, r0
 80008d4:	b108      	cbz	r0, 80008da <main+0x12a>
 80008d6:	b672      	cpsid	i
    while (1)
 80008d8:	e7fe      	b.n	80008d8 <main+0x128>
    RTC_TimeTypeDef sTime = { 0 };
 80008da:	4601      	mov	r1, r0
 80008dc:	2214      	movs	r2, #20
 80008de:	a807      	add	r0, sp, #28
 80008e0:	f001 fcb2 	bl	8002248 <memset>
    RTC_AlarmTypeDef sAlarm = { 0 };
 80008e4:	2228      	movs	r2, #40	; 0x28
 80008e6:	4629      	mov	r1, r5
 80008e8:	a80c      	add	r0, sp, #48	; 0x30
    hrtc.Instance = RTC;
 80008ea:	4c40      	ldr	r4, [pc, #256]	; (80009ec <main+0x23c>)
    RTC_DateTypeDef sDate = { 0 };
 80008ec:	9501      	str	r5, [sp, #4]
    RTC_AlarmTypeDef sAlarm = { 0 };
 80008ee:	f001 fcab 	bl	8002248 <memset>
    hrtc.Instance = RTC;
 80008f2:	4b3f      	ldr	r3, [pc, #252]	; (80009f0 <main+0x240>)
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008f4:	61a5      	str	r5, [r4, #24]
    hrtc.Init.SynchPrediv = 255;
 80008f6:	207f      	movs	r0, #127	; 0x7f
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008f8:	e9c4 3500 	strd	r3, r5, [r4]
    hrtc.Init.SynchPrediv = 255;
 80008fc:	23ff      	movs	r3, #255	; 0xff
 80008fe:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000902:	4620      	mov	r0, r4
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000904:	e9c4 5504 	strd	r5, r5, [r4, #16]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000908:	f001 f8f7 	bl	8001afa <HAL_RTC_Init>
 800090c:	b108      	cbz	r0, 8000912 <main+0x162>
 800090e:	b672      	cpsid	i
    while (1)
 8000910:	e7fe      	b.n	8000910 <main+0x160>
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000912:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
    sTime.Hours = 0x0;
 8000916:	f8ad 001c 	strh.w	r0, [sp, #28]
    sTime.Seconds = 0x0;
 800091a:	f88d 001e 	strb.w	r0, [sp, #30]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800091e:	4632      	mov	r2, r6
 8000920:	a907      	add	r1, sp, #28
 8000922:	4620      	mov	r0, r4
 8000924:	f001 f937 	bl	8001b96 <HAL_RTC_SetTime>
 8000928:	b108      	cbz	r0, 800092e <main+0x17e>
 800092a:	b672      	cpsid	i
    while (1)
 800092c:	e7fe      	b.n	800092c <main+0x17c>
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800092e:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <main+0x244>)
 8000930:	9301      	str	r3, [sp, #4]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000932:	4632      	mov	r2, r6
 8000934:	a901      	add	r1, sp, #4
 8000936:	4620      	mov	r0, r4
 8000938:	f001 f987 	bl	8001c4a <HAL_RTC_SetDate>
 800093c:	b108      	cbz	r0, 8000942 <main+0x192>
 800093e:	b672      	cpsid	i
    while (1)
 8000940:	e7fe      	b.n	8000940 <main+0x190>
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000942:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000946:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
    sAlarm.AlarmTime.Hours = 0x0;
 800094a:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    sAlarm.AlarmTime.Seconds = 0x0;
 800094e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    sAlarm.AlarmTime.SubSeconds = 0x0;
 8000952:	900d      	str	r0, [sp, #52]	; 0x34
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000954:	9013      	str	r0, [sp, #76]	; 0x4c
    sAlarm.Alarm = RTC_ALARM_A;
 8000956:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800095a:	4632      	mov	r2, r6
 800095c:	a90c      	add	r1, sp, #48	; 0x30
 800095e:	4620      	mov	r0, r4
    sAlarm.AlarmDateWeekDay = 0x1;
 8000960:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
    sAlarm.Alarm = RTC_ALARM_A;
 8000964:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000966:	f001 f9b9 	bl	8001cdc <HAL_RTC_SetAlarm_IT>
 800096a:	b108      	cbz	r0, 8000970 <main+0x1c0>
 800096c:	b672      	cpsid	i
    while (1)
 800096e:	e7fe      	b.n	800096e <main+0x1be>
    huart2.Instance = USART2;
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <main+0x248>)
    huart2.Init.BaudRate = 115200;
 8000972:	4922      	ldr	r1, [pc, #136]	; (80009fc <main+0x24c>)
    huart2.Init.Parity = UART_PARITY_NONE;
 8000974:	6118      	str	r0, [r3, #16]
    huart2.Init.BaudRate = 115200;
 8000976:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097a:	e9c3 1200 	strd	r1, r2, [r3]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800097e:	220c      	movs	r2, #12
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	e9c3 0002 	strd	r0, r0, [r3, #8]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000984:	e9c3 2005 	strd	r2, r0, [r3, #20]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	61d8      	str	r0, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4618      	mov	r0, r3
 800098c:	f001 faec 	bl	8001f68 <HAL_UART_Init>
 8000990:	b108      	cbz	r0, 8000996 <main+0x1e6>
 8000992:	b672      	cpsid	i
    while (1)
 8000994:	e7fe      	b.n	8000994 <main+0x1e4>
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <main+0x250>)
 8000998:	491a      	ldr	r1, [pc, #104]	; (8000a04 <main+0x254>)
 800099a:	481b      	ldr	r0, [pc, #108]	; (8000a08 <main+0x258>)
 800099c:	229c      	movs	r2, #156	; 0x9c
 800099e:	f7ff fe07 	bl	80005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <main+0x250>)
 80009a4:	4917      	ldr	r1, [pc, #92]	; (8000a04 <main+0x254>)
 80009a6:	4819      	ldr	r0, [pc, #100]	; (8000a0c <main+0x25c>)
 80009a8:	229d      	movs	r2, #157	; 0x9d
 80009aa:	f7ff fe01 	bl	80005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 80009ae:	4818      	ldr	r0, [pc, #96]	; (8000a10 <main+0x260>)
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <main+0x250>)
 80009b2:	4914      	ldr	r1, [pc, #80]	; (8000a04 <main+0x254>)
 80009b4:	229e      	movs	r2, #158	; 0x9e
 80009b6:	f7ff fdfb 	bl	80005b0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    blib::Monitor monitor;
 80009ba:	a80c      	add	r0, sp, #48	; 0x30
 80009bc:	f7ff fe38 	bl	8000630 <_ZN4blib7MonitorC1Ev>
        monitor.showMenu();
 80009c0:	a80c      	add	r0, sp, #48	; 0x30
 80009c2:	f7ff fea7 	bl	8000714 <_ZN4blib7Monitor8showMenuEv>
    while (1)
 80009c6:	e7fb      	b.n	80009c0 <main+0x210>
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	40020800 	.word	0x40020800
 80009d4:	2000007c 	.word	0x2000007c
 80009d8:	40012000 	.word	0x40012000
 80009dc:	0f000001 	.word	0x0f000001
 80009e0:	200000c4 	.word	0x200000c4
 80009e4:	000186a0 	.word	0x000186a0
 80009e8:	40005400 	.word	0x40005400
 80009ec:	20000118 	.word	0x20000118
 80009f0:	40002800 	.word	0x40002800
 80009f4:	00010101 	.word	0x00010101
 80009f8:	20000138 	.word	0x20000138
 80009fc:	40004400 	.word	0x40004400
 8000a00:	08002b4c 	.word	0x08002b4c
 8000a04:	08002b51 	.word	0x08002b51
 8000a08:	08002b5a 	.word	0x08002b5a
 8000a0c:	08002b84 	.word	0x08002b84
 8000a10:	08002b9e 	.word	0x08002b9e

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_MspInit+0x34>)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	9100      	str	r1, [sp, #0]
 8000a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a22:	645a      	str	r2, [r3, #68]	; 0x44
 8000a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a26:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a2a:	9200      	str	r2, [sp, #0]
 8000a2c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	9101      	str	r1, [sp, #4]
 8000a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a36:	641a      	str	r2, [r3, #64]	; 0x40
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	b002      	add	sp, #8
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	4604      	mov	r4, r0
 8000a50:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	2214      	movs	r2, #20
 8000a54:	2100      	movs	r1, #0
 8000a56:	a803      	add	r0, sp, #12
 8000a58:	f001 fbf6 	bl	8002248 <memset>
  if(hadc->Instance==ADC1)
 8000a5c:	6822      	ldr	r2, [r4, #0]
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_ADC_MspInit+0x5c>)
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d11e      	bne.n	8000aa2 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a64:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000a68:	2100      	movs	r1, #0
 8000a6a:	9101      	str	r1, [sp, #4]
 8000a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a74:	645a      	str	r2, [r3, #68]	; 0x44
 8000a76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a78:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000a7c:	9201      	str	r2, [sp, #4]
 8000a7e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	9102      	str	r1, [sp, #8]
 8000a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a84:	f042 0201 	orr.w	r2, r2, #1
 8000a88:	631a      	str	r2, [r3, #48]	; 0x30
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	9302      	str	r3, [sp, #8]
 8000a92:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a94:	221f      	movs	r2, #31
 8000a96:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f000 faff 	bl	80010a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aa2:	b008      	add	sp, #32
 8000aa4:	bd10      	pop	{r4, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40012000 	.word	0x40012000
 8000aac:	40020000 	.word	0x40020000

08000ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab0:	b530      	push	{r4, r5, lr}
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	2214      	movs	r2, #20
 8000ab8:	2100      	movs	r1, #0
 8000aba:	a803      	add	r0, sp, #12
 8000abc:	f001 fbc4 	bl	8002248 <memset>
  if(hi2c->Instance==I2C1)
 8000ac0:	6822      	ldr	r2, [r4, #0]
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <HAL_I2C_MspInit+0x60>)
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d121      	bne.n	8000b0c <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac8:	4c12      	ldr	r4, [pc, #72]	; (8000b14 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	4813      	ldr	r0, [pc, #76]	; (8000b18 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	2500      	movs	r5, #0
 8000ace:	9501      	str	r5, [sp, #4]
 8000ad0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	6323      	str	r3, [r4, #48]	; 0x30
 8000ad8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae2:	22c0      	movs	r2, #192	; 0xc0
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aea:	2103      	movs	r1, #3
 8000aec:	2304      	movs	r3, #4
 8000aee:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	a903      	add	r1, sp, #12
 8000af4:	f000 fad4 	bl	80010a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af8:	9502      	str	r5, [sp, #8]
 8000afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b00:	6423      	str	r3, [r4, #64]	; 0x40
 8000b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	9302      	str	r3, [sp, #8]
 8000b0a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b0c:	b009      	add	sp, #36	; 0x24
 8000b0e:	bd30      	pop	{r4, r5, pc}
 8000b10:	40005400 	.word	0x40005400
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020400 	.word	0x40020400

08000b1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b1e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b20:	2210      	movs	r2, #16
 8000b22:	2100      	movs	r1, #0
 8000b24:	4668      	mov	r0, sp
 8000b26:	f001 fb8f 	bl	8002248 <memset>
  if(hrtc->Instance==RTC)
 8000b2a:	6822      	ldr	r2, [r4, #0]
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_RTC_MspInit+0x48>)
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d116      	bne.n	8000b60 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b32:	2302      	movs	r3, #2
 8000b34:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b36:	4668      	mov	r0, sp
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3c:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3e:	f000 fecb 	bl	80018d8 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	b108      	cbz	r0, 8000b48 <HAL_RTC_MspInit+0x2c>
    {
      Error_Handler();
 8000b44:	f7ff fe32 	bl	80007ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <HAL_RTC_MspInit+0x4c>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2029      	movs	r0, #41	; 0x29
 8000b54:	4611      	mov	r1, r2
 8000b56:	f000 fa4f 	bl	8000ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b5a:	2029      	movs	r0, #41	; 0x29
 8000b5c:	f000 fa7e 	bl	800105c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b60:	b004      	add	sp, #16
 8000b62:	bd10      	pop	{r4, pc}
 8000b64:	40002800 	.word	0x40002800
 8000b68:	42470000 	.word	0x42470000

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b510      	push	{r4, lr}
 8000b6e:	4604      	mov	r4, r0
 8000b70:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	2214      	movs	r2, #20
 8000b74:	2100      	movs	r1, #0
 8000b76:	a803      	add	r0, sp, #12
 8000b78:	f001 fb66 	bl	8002248 <memset>
  if(huart->Instance==USART2)
 8000b7c:	6822      	ldr	r2, [r4, #0]
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_UART_MspInit+0x64>)
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d122      	bne.n	8000bca <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b84:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000b88:	2100      	movs	r1, #0
 8000b8a:	9101      	str	r1, [sp, #4]
 8000b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8e:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b94:	641a      	str	r2, [r3, #64]	; 0x40
 8000b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b98:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000b9c:	9201      	str	r2, [sp, #4]
 8000b9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba0:	9102      	str	r1, [sp, #8]
 8000ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba4:	f042 0208 	orr.w	r2, r2, #8
 8000ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0308 	and.w	r3, r3, #8
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2260      	movs	r2, #96	; 0x60
 8000bb6:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb8:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc4:	a903      	add	r1, sp, #12
 8000bc6:	f000 fa6b 	bl	80010a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bca:	b008      	add	sp, #32
 8000bcc:	bd10      	pop	{r4, pc}
 8000bce:	bf00      	nop
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40020c00 	.word	0x40020c00

08000bd8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler>

08000bda <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler>

08000bdc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler>

08000bde <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler>

08000be0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler>

08000be2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be8:	f000 b898 	b.w	8000d1c <HAL_IncTick>

08000bec <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000bec:	4801      	ldr	r0, [pc, #4]	; (8000bf4 <RTC_Alarm_IRQHandler+0x8>)
 8000bee:	f000 bf0d 	b.w	8001a0c <HAL_RTC_AlarmIRQHandler>
 8000bf2:	bf00      	nop
 8000bf4:	20000118 	.word	0x20000118

08000bf8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <_sbrk+0x30>)
 8000bfa:	6811      	ldr	r1, [r2, #0]
{
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000c00:	b909      	cbnz	r1, 8000c06 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000c02:	490a      	ldr	r1, [pc, #40]	; (8000c2c <_sbrk+0x34>)
 8000c04:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	6810      	ldr	r0, [r2, #0]
 8000c08:	4909      	ldr	r1, [pc, #36]	; (8000c30 <_sbrk+0x38>)
 8000c0a:	4c0a      	ldr	r4, [pc, #40]	; (8000c34 <_sbrk+0x3c>)
 8000c0c:	4403      	add	r3, r0
 8000c0e:	1b09      	subs	r1, r1, r4
 8000c10:	428b      	cmp	r3, r1
 8000c12:	d906      	bls.n	8000c22 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000c14:	f001 fb30 	bl	8002278 <__errno>
 8000c18:	230c      	movs	r3, #12
 8000c1a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000c20:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000c22:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000c24:	e7fc      	b.n	8000c20 <_sbrk+0x28>
 8000c26:	bf00      	nop
 8000c28:	2000017c 	.word	0x2000017c
 8000c2c:	200006d0 	.word	0x200006d0
 8000c30:	20020000 	.word	0x20020000
 8000c34:	00000400 	.word	0x00000400

08000c38 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4a03      	ldr	r2, [pc, #12]	; (8000c48 <SystemInit+0x10>)
 8000c3a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000c3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c52:	490e      	ldr	r1, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c68:	4c0b      	ldr	r4, [pc, #44]	; (8000c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c76:	f7ff ffdf 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f001 fb03 	bl	8002284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fd97 	bl	80007b0 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c90:	08002c1c 	.word	0x08002c1c
  ldr r2, =_sbss
 8000c94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c98:	200006cc 	.word	0x200006cc

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_InitTick+0x3c>)
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cae:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <HAL_InitTick+0x40>)
{
 8000cb0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb2:	6810      	ldr	r0, [r2, #0]
 8000cb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cb8:	f000 f9de 	bl	8001078 <HAL_SYSTICK_Config>
 8000cbc:	4604      	mov	r4, r0
 8000cbe:	b958      	cbnz	r0, 8000cd8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc0:	2d0f      	cmp	r5, #15
 8000cc2:	d809      	bhi.n	8000cd8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	4629      	mov	r1, r5
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f000 f994 	bl	8000ff8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <HAL_InitTick+0x44>)
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000cd8:	2001      	movs	r0, #1
 8000cda:	e7fc      	b.n	8000cd6 <HAL_InitTick+0x36>
 8000cdc:	20000004 	.word	0x20000004
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008

08000ce8 <HAL_Init>:
{
 8000ce8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_Init+0x30>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cf2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cfa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d02:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f965 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f7ff ffc8 	bl	8000ca0 <HAL_InitTick>
  HAL_MspInit();
 8000d10:	f7ff fe80 	bl	8000a14 <HAL_MspInit>
}
 8000d14:	2000      	movs	r0, #0
 8000d16:	bd08      	pop	{r3, pc}
 8000d18:	40023c00 	.word	0x40023c00

08000d1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d1c:	4a03      	ldr	r2, [pc, #12]	; (8000d2c <HAL_IncTick+0x10>)
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <HAL_IncTick+0x14>)
 8000d20:	6811      	ldr	r1, [r2, #0]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	440b      	add	r3, r1
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000180 	.word	0x20000180
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d34:	4b01      	ldr	r3, [pc, #4]	; (8000d3c <HAL_GetTick+0x8>)
 8000d36:	6818      	ldr	r0, [r3, #0]
}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000180 	.word	0x20000180

08000d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d40:	b538      	push	{r3, r4, r5, lr}
 8000d42:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff fff6 	bl	8000d34 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d48:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	bf1c      	itt	ne
 8000d4c:	4b05      	ldrne	r3, [pc, #20]	; (8000d64 <HAL_Delay+0x24>)
 8000d4e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000d52:	bf18      	it	ne
 8000d54:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d56:	f7ff ffed 	bl	8000d34 <HAL_GetTick>
 8000d5a:	1b43      	subs	r3, r0, r5
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d3fa      	bcc.n	8000d56 <HAL_Delay+0x16>
  {
  }
}
 8000d60:	bd38      	pop	{r3, r4, r5, pc}
 8000d62:	bf00      	nop
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d68:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	f000 809b 	beq.w	8000ea8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d72:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000d74:	b925      	cbnz	r5, 8000d80 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d76:	f7ff fe69 	bl	8000a4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d7a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d7c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d82:	06db      	lsls	r3, r3, #27
 8000d84:	f100 808e 	bmi.w	8000ea4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d8e:	f023 0302 	bic.w	r3, r3, #2
 8000d92:	f043 0302 	orr.w	r3, r3, #2
 8000d96:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000d98:	4b44      	ldr	r3, [pc, #272]	; (8000eac <HAL_ADC_Init+0x144>)
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000da0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	6861      	ldr	r1, [r4, #4]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000daa:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dac:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000db4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dbe:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000dc0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dc2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000dc6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000dce:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000dd0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dde:	4934      	ldr	r1, [pc, #208]	; (8000eb0 <HAL_ADC_Init+0x148>)
 8000de0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000de2:	428a      	cmp	r2, r1
 8000de4:	d052      	beq.n	8000e8c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000de6:	6899      	ldr	r1, [r3, #8]
 8000de8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000dec:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000dee:	6899      	ldr	r1, [r3, #8]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000df4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000df6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000df8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e02:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	f022 0202 	bic.w	r2, r2, #2
 8000e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	7e21      	ldrb	r1, [r4, #24]
 8000e10:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000e14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e16:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	d03e      	beq.n	8000e9c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e1e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e20:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	3901      	subs	r1, #1
 8000e34:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e38:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e3c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e46:	3901      	subs	r1, #1
 8000e48:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8000e5c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000e60:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e62:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e64:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e6c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e6e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e70:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000e74:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e76:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000e78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e7a:	f023 0303 	bic.w	r3, r3, #3
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000e84:	2300      	movs	r3, #0
 8000e86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000e8a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e9a:	e7b2      	b.n	8000e02 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ea2:	e7c9      	b.n	8000e38 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	e7ed      	b.n	8000e84 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	e7ee      	b.n	8000e8a <HAL_ADC_Init+0x122>
 8000eac:	40012300 	.word	0x40012300
 8000eb0:	0f000001 	.word	0x0f000001

08000eb4 <HAL_ADC_ConfigChannel>:
{
 8000eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000eba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d064      	beq.n	8000f8c <HAL_ADC_ConfigChannel+0xd8>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ec8:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000eca:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ecc:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ece:	2d09      	cmp	r5, #9
 8000ed0:	b2ac      	uxth	r4, r5
 8000ed2:	d931      	bls.n	8000f38 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ed4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000ed8:	68df      	ldr	r7, [r3, #12]
 8000eda:	3a1e      	subs	r2, #30
 8000edc:	f04f 0c07 	mov.w	ip, #7
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	ea27 070c 	bic.w	r7, r7, ip
 8000ee8:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000eea:	68df      	ldr	r7, [r3, #12]
 8000eec:	fa06 f202 	lsl.w	r2, r6, r2
 8000ef0:	433a      	orrs	r2, r7
 8000ef2:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8000ef4:	6849      	ldr	r1, [r1, #4]
 8000ef6:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ef8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8000efc:	d82b      	bhi.n	8000f56 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000efe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f00:	3a05      	subs	r2, #5
 8000f02:	261f      	movs	r6, #31
 8000f04:	4096      	lsls	r6, r2
 8000f06:	ea21 0106 	bic.w	r1, r1, r6
 8000f0a:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f0e:	fa04 f202 	lsl.w	r2, r4, r2
 8000f12:	430a      	orrs	r2, r1
 8000f14:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f16:	4a2b      	ldr	r2, [pc, #172]	; (8000fc4 <HAL_ADC_ConfigChannel+0x110>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d107      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x78>
 8000f1c:	2d12      	cmp	r5, #18
 8000f1e:	d137      	bne.n	8000f90 <HAL_ADC_ConfigChannel+0xdc>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000f20:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8000f24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f28:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000f32:	4618      	mov	r0, r3
}
 8000f34:	b003      	add	sp, #12
 8000f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8000f3e:	2707      	movs	r7, #7
 8000f40:	fa07 f70c 	lsl.w	r7, r7, ip
 8000f44:	ea22 0207 	bic.w	r2, r2, r7
 8000f48:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	fa06 f60c 	lsl.w	r6, r6, ip
 8000f50:	4316      	orrs	r6, r2
 8000f52:	611e      	str	r6, [r3, #16]
 8000f54:	e7ce      	b.n	8000ef4 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000f56:	290c      	cmp	r1, #12
 8000f58:	f04f 011f 	mov.w	r1, #31
 8000f5c:	d80b      	bhi.n	8000f76 <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f5e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8000f60:	3a23      	subs	r2, #35	; 0x23
 8000f62:	4091      	lsls	r1, r2
 8000f64:	ea26 0101 	bic.w	r1, r6, r1
 8000f68:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f6c:	fa04 f202 	lsl.w	r2, r4, r2
 8000f70:	430a      	orrs	r2, r1
 8000f72:	631a      	str	r2, [r3, #48]	; 0x30
 8000f74:	e7cf      	b.n	8000f16 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f76:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8000f78:	3a41      	subs	r2, #65	; 0x41
 8000f7a:	4091      	lsls	r1, r2
 8000f7c:	ea26 0101 	bic.w	r1, r6, r1
 8000f80:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000f82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f84:	4094      	lsls	r4, r2
 8000f86:	430c      	orrs	r4, r1
 8000f88:	62dc      	str	r4, [r3, #44]	; 0x2c
 8000f8a:	e7c4      	b.n	8000f16 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	e7d1      	b.n	8000f34 <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f90:	f1a5 0310 	sub.w	r3, r5, #16
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d8c9      	bhi.n	8000f2c <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <HAL_ADC_ConfigChannel+0x114>)
 8000f9a:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f9c:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000f9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fa2:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fa4:	d1c2      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_ADC_ConfigChannel+0x118>)
 8000fa8:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <HAL_ADC_ConfigChannel+0x11c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fb0:	220a      	movs	r2, #10
 8000fb2:	4353      	muls	r3, r2
        counter--;
 8000fb4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000fb6:	9b01      	ldr	r3, [sp, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0b7      	beq.n	8000f2c <HAL_ADC_ConfigChannel+0x78>
        counter--;
 8000fbc:	9b01      	ldr	r3, [sp, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	e7f8      	b.n	8000fb4 <HAL_ADC_ConfigChannel+0x100>
 8000fc2:	bf00      	nop
 8000fc4:	40012000 	.word	0x40012000
 8000fc8:	40012300 	.word	0x40012300
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	000f4240 	.word	0x000f4240

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fd6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ff0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b530      	push	{r4, r5, lr}
 8000ffc:	68dc      	ldr	r4, [r3, #12]
 8000ffe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001002:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	2b04      	cmp	r3, #4
 800100a:	bf28      	it	cs
 800100c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001014:	bf8c      	ite	hi
 8001016:	3c03      	subhi	r4, #3
 8001018:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101a:	fa05 f303 	lsl.w	r3, r5, r3
 800101e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001022:	40a5      	lsls	r5, r4
 8001024:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800102a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	bfac      	ite	ge
 8001032:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	4a08      	ldrlt	r2, [pc, #32]	; (8001058 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	bfb8      	it	lt
 800103e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	b2db      	uxtb	r3, r3
 8001044:	bfaa      	itet	ge
 8001046:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001050:	bd30      	pop	{r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00
 8001058:	e000ed14 	.word	0xe000ed14

0800105c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800105c:	2800      	cmp	r0, #0
 800105e:	db07      	blt.n	8001070 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001060:	0941      	lsrs	r1, r0, #5
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_NVIC_EnableIRQ+0x18>)
 8001064:	f000 001f 	and.w	r0, r0, #31
 8001068:	2301      	movs	r3, #1
 800106a:	4083      	lsls	r3, r0
 800106c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	3801      	subs	r0, #1
 800107a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800107e:	d20b      	bcs.n	8001098 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001080:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	21f0      	movs	r1, #240	; 0xf0
 800108a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001090:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001092:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001094:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001096:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001098:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001250 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a8:	4a67      	ldr	r2, [pc, #412]	; (8001248 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ac:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80010ae:	2401      	movs	r4, #1
 80010b0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80010b6:	43ac      	bics	r4, r5
 80010b8:	f040 80b1 	bne.w	800121e <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010bc:	684d      	ldr	r5, [r1, #4]
 80010be:	f005 0403 	and.w	r4, r5, #3
 80010c2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c6:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c8:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ca:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d4:	d834      	bhi.n	8001140 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80010d6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010dc:	68cf      	ldr	r7, [r1, #12]
 80010de:	fa07 f708 	lsl.w	r7, r7, r8
 80010e2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80010e6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010e8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ea:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ee:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80010f2:	409f      	lsls	r7, r3
 80010f4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80010f8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80010fa:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010fc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001100:	688f      	ldr	r7, [r1, #8]
 8001102:	fa07 f708 	lsl.w	r7, r7, r8
 8001106:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800110c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110e:	d119      	bne.n	8001144 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001110:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001114:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001118:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800111c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001120:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001124:	f04f 0e0f 	mov.w	lr, #15
 8001128:	fa0e fe0b 	lsl.w	lr, lr, fp
 800112c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001130:	690f      	ldr	r7, [r1, #16]
 8001132:	fa07 f70b 	lsl.w	r7, r7, fp
 8001136:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	f8ca 7020 	str.w	r7, [sl, #32]
 800113e:	e001      	b.n	8001144 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001140:	2c03      	cmp	r4, #3
 8001142:	d1da      	bne.n	80010fa <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001144:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001146:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114c:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800114e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001152:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001154:	d063      	beq.n	800121e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	f04f 0a00 	mov.w	sl, #0
 800115a:	f8cd a004 	str.w	sl, [sp, #4]
 800115e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001162:	4c3a      	ldr	r4, [pc, #232]	; (800124c <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001164:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001168:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800116c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001170:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001174:	9601      	str	r6, [sp, #4]
 8001176:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001178:	f023 0603 	bic.w	r6, r3, #3
 800117c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001180:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001184:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001188:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001190:	270f      	movs	r7, #15
 8001192:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001198:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119c:	d046      	beq.n	800122c <HAL_GPIO_Init+0x18c>
 800119e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011a2:	42a0      	cmp	r0, r4
 80011a4:	d044      	beq.n	8001230 <HAL_GPIO_Init+0x190>
 80011a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011aa:	42a0      	cmp	r0, r4
 80011ac:	d042      	beq.n	8001234 <HAL_GPIO_Init+0x194>
 80011ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011b2:	42a0      	cmp	r0, r4
 80011b4:	d040      	beq.n	8001238 <HAL_GPIO_Init+0x198>
 80011b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011ba:	42a0      	cmp	r0, r4
 80011bc:	d03e      	beq.n	800123c <HAL_GPIO_Init+0x19c>
 80011be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011c2:	42a0      	cmp	r0, r4
 80011c4:	d03c      	beq.n	8001240 <HAL_GPIO_Init+0x1a0>
 80011c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011ca:	42a0      	cmp	r0, r4
 80011cc:	d03a      	beq.n	8001244 <HAL_GPIO_Init+0x1a4>
 80011ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011d2:	42a0      	cmp	r0, r4
 80011d4:	bf0c      	ite	eq
 80011d6:	2407      	moveq	r4, #7
 80011d8:	2408      	movne	r4, #8
 80011da:	fa04 f40e 	lsl.w	r4, r4, lr
 80011de:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e0:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80011e2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e8:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80011ea:	bf54      	ite	pl
 80011ec:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80011ee:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80011f2:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80011f4:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f6:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80011f8:	bf54      	ite	pl
 80011fa:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80011fc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001200:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8001202:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001204:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001206:	bf54      	ite	pl
 8001208:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800120a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800120e:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001210:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001212:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001214:	bf54      	ite	pl
 8001216:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001218:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800121c:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	3301      	adds	r3, #1
 8001220:	2b10      	cmp	r3, #16
 8001222:	f47f af43 	bne.w	80010ac <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001226:	b003      	add	sp, #12
 8001228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122c:	4654      	mov	r4, sl
 800122e:	e7d4      	b.n	80011da <HAL_GPIO_Init+0x13a>
 8001230:	2401      	movs	r4, #1
 8001232:	e7d2      	b.n	80011da <HAL_GPIO_Init+0x13a>
 8001234:	2402      	movs	r4, #2
 8001236:	e7d0      	b.n	80011da <HAL_GPIO_Init+0x13a>
 8001238:	2403      	movs	r4, #3
 800123a:	e7ce      	b.n	80011da <HAL_GPIO_Init+0x13a>
 800123c:	2404      	movs	r4, #4
 800123e:	e7cc      	b.n	80011da <HAL_GPIO_Init+0x13a>
 8001240:	2405      	movs	r4, #5
 8001242:	e7ca      	b.n	80011da <HAL_GPIO_Init+0x13a>
 8001244:	2406      	movs	r4, #6
 8001246:	e7c8      	b.n	80011da <HAL_GPIO_Init+0x13a>
 8001248:	40013c00 	.word	0x40013c00
 800124c:	40020000 	.word	0x40020000
 8001250:	40023800 	.word	0x40023800

08001254 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001254:	b10a      	cbz	r2, 800125a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	6181      	str	r1, [r0, #24]
  }
}
 8001258:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125a:	0409      	lsls	r1, r1, #16
 800125c:	e7fb      	b.n	8001256 <HAL_GPIO_WritePin+0x2>
	...

08001260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001260:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001262:	4604      	mov	r4, r0
 8001264:	b908      	cbnz	r0, 800126a <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8001266:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8001268:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800126a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800126e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001272:	b91b      	cbnz	r3, 800127c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001274:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001278:	f7ff fc1a 	bl	8000ab0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800127c:	2324      	movs	r3, #36	; 0x24
 800127e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	f022 0201 	bic.w	r2, r2, #1
 800128a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800129a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800129c:	f000 fafc 	bl	8001898 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012a0:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <HAL_I2C_Init+0x140>)
 80012a2:	6865      	ldr	r5, [r4, #4]
 80012a4:	429d      	cmp	r5, r3
 80012a6:	bf94      	ite	ls
 80012a8:	4b3e      	ldrls	r3, [pc, #248]	; (80013a4 <HAL_I2C_Init+0x144>)
 80012aa:	4b3f      	ldrhi	r3, [pc, #252]	; (80013a8 <HAL_I2C_Init+0x148>)
 80012ac:	4298      	cmp	r0, r3
 80012ae:	bf8c      	ite	hi
 80012b0:	2300      	movhi	r3, #0
 80012b2:	2301      	movls	r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1d6      	bne.n	8001266 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012b8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012ba:	4e39      	ldr	r6, [pc, #228]	; (80013a0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012bc:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80012be:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <HAL_I2C_Init+0x14c>)
 80012c0:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012c4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80012c8:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012ca:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012cc:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012ce:	bf88      	it	hi
 80012d0:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 80012d4:	6a11      	ldr	r1, [r2, #32]
 80012d6:	bf88      	it	hi
 80012d8:	4373      	mulhi	r3, r6
 80012da:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80012de:	bf84      	itt	hi
 80012e0:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80012e4:	fbb3 f3f6 	udivhi	r3, r3, r6
 80012e8:	3301      	adds	r3, #1
 80012ea:	430b      	orrs	r3, r1
 80012ec:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012ee:	69d1      	ldr	r1, [r2, #28]
 80012f0:	1e43      	subs	r3, r0, #1
 80012f2:	482b      	ldr	r0, [pc, #172]	; (80013a0 <HAL_I2C_Init+0x140>)
 80012f4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80012f8:	4285      	cmp	r5, r0
 80012fa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80012fe:	d832      	bhi.n	8001366 <HAL_I2C_Init+0x106>
 8001300:	006d      	lsls	r5, r5, #1
 8001302:	f640 70fc 	movw	r0, #4092	; 0xffc
 8001306:	fbb3 f3f5 	udiv	r3, r3, r5
 800130a:	3301      	adds	r3, #1
 800130c:	4203      	tst	r3, r0
 800130e:	d042      	beq.n	8001396 <HAL_I2C_Init+0x136>
 8001310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001314:	4319      	orrs	r1, r3
 8001316:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001318:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800131c:	6811      	ldr	r1, [r2, #0]
 800131e:	4303      	orrs	r3, r0
 8001320:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001324:	430b      	orrs	r3, r1
 8001326:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001328:	6891      	ldr	r1, [r2, #8]
 800132a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800132e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001332:	4303      	orrs	r3, r0
 8001334:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001338:	430b      	orrs	r3, r1
 800133a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800133c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001340:	68d1      	ldr	r1, [r2, #12]
 8001342:	4303      	orrs	r3, r0
 8001344:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001348:	430b      	orrs	r3, r1
 800134a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800134c:	6813      	ldr	r3, [r2, #0]
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001354:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001356:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001358:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800135a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800135e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001360:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001364:	e780      	b.n	8001268 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001366:	68a0      	ldr	r0, [r4, #8]
 8001368:	b950      	cbnz	r0, 8001380 <HAL_I2C_Init+0x120>
 800136a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800136e:	fbb3 f3f5 	udiv	r3, r3, r5
 8001372:	3301      	adds	r3, #1
 8001374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001378:	b17b      	cbz	r3, 800139a <HAL_I2C_Init+0x13a>
 800137a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137e:	e7c9      	b.n	8001314 <HAL_I2C_Init+0xb4>
 8001380:	2019      	movs	r0, #25
 8001382:	4368      	muls	r0, r5
 8001384:	fbb3 f3f0 	udiv	r3, r3, r0
 8001388:	3301      	adds	r3, #1
 800138a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138e:	b123      	cbz	r3, 800139a <HAL_I2C_Init+0x13a>
 8001390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001394:	e7be      	b.n	8001314 <HAL_I2C_Init+0xb4>
 8001396:	2304      	movs	r3, #4
 8001398:	e7bc      	b.n	8001314 <HAL_I2C_Init+0xb4>
 800139a:	2301      	movs	r3, #1
 800139c:	e7ba      	b.n	8001314 <HAL_I2C_Init+0xb4>
 800139e:	bf00      	nop
 80013a0:	000186a0 	.word	0x000186a0
 80013a4:	001e847f 	.word	0x001e847f
 80013a8:	003d08ff 	.word	0x003d08ff
 80013ac:	000f4240 	.word	0x000f4240

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	4604      	mov	r4, r0
 80013b6:	b340      	cbz	r0, 800140a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b8:	6803      	ldr	r3, [r0, #0]
 80013ba:	07dd      	lsls	r5, r3, #31
 80013bc:	d410      	bmi.n	80013e0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	0798      	lsls	r0, r3, #30
 80013c2:	d45b      	bmi.n	800147c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	071a      	lsls	r2, r3, #28
 80013c8:	f100 809d 	bmi.w	8001506 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	075b      	lsls	r3, r3, #29
 80013d0:	f100 80bd 	bmi.w	800154e <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d4:	69a0      	ldr	r0, [r4, #24]
 80013d6:	2800      	cmp	r0, #0
 80013d8:	f040 8124 	bne.w	8001624 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80013dc:	2000      	movs	r0, #0
 80013de:	e02c      	b.n	800143a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e0:	4b8d      	ldr	r3, [pc, #564]	; (8001618 <HAL_RCC_OscConfig+0x268>)
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	f002 020c 	and.w	r2, r2, #12
 80013e8:	2a04      	cmp	r2, #4
 80013ea:	d007      	beq.n	80013fc <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013f2:	2a08      	cmp	r2, #8
 80013f4:	d10b      	bne.n	800140e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	0259      	lsls	r1, r3, #9
 80013fa:	d508      	bpl.n	800140e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	4b86      	ldr	r3, [pc, #536]	; (8001618 <HAL_RCC_OscConfig+0x268>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	039a      	lsls	r2, r3, #14
 8001402:	d5dc      	bpl.n	80013be <HAL_RCC_OscConfig+0xe>
 8001404:	6863      	ldr	r3, [r4, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1d9      	bne.n	80013be <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800140a:	2001      	movs	r0, #1
 800140c:	e015      	b.n	800143a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140e:	6863      	ldr	r3, [r4, #4]
 8001410:	4d81      	ldr	r5, [pc, #516]	; (8001618 <HAL_RCC_OscConfig+0x268>)
 8001412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001416:	d113      	bne.n	8001440 <HAL_RCC_OscConfig+0x90>
 8001418:	682b      	ldr	r3, [r5, #0]
 800141a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001420:	f7ff fc88 	bl	8000d34 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001424:	4e7c      	ldr	r6, [pc, #496]	; (8001618 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8001426:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001428:	6833      	ldr	r3, [r6, #0]
 800142a:	039b      	lsls	r3, r3, #14
 800142c:	d4c7      	bmi.n	80013be <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800142e:	f7ff fc81 	bl	8000d34 <HAL_GetTick>
 8001432:	1b40      	subs	r0, r0, r5
 8001434:	2864      	cmp	r0, #100	; 0x64
 8001436:	d9f7      	bls.n	8001428 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8001438:	2003      	movs	r0, #3
}
 800143a:	b002      	add	sp, #8
 800143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001444:	d104      	bne.n	8001450 <HAL_RCC_OscConfig+0xa0>
 8001446:	682b      	ldr	r3, [r5, #0]
 8001448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144c:	602b      	str	r3, [r5, #0]
 800144e:	e7e3      	b.n	8001418 <HAL_RCC_OscConfig+0x68>
 8001450:	682a      	ldr	r2, [r5, #0]
 8001452:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001456:	602a      	str	r2, [r5, #0]
 8001458:	682a      	ldr	r2, [r5, #0]
 800145a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800145e:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1dd      	bne.n	8001420 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8001464:	f7ff fc66 	bl	8000d34 <HAL_GetTick>
 8001468:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146a:	682b      	ldr	r3, [r5, #0]
 800146c:	039f      	lsls	r7, r3, #14
 800146e:	d5a6      	bpl.n	80013be <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fc60 	bl	8000d34 <HAL_GetTick>
 8001474:	1b80      	subs	r0, r0, r6
 8001476:	2864      	cmp	r0, #100	; 0x64
 8001478:	d9f7      	bls.n	800146a <HAL_RCC_OscConfig+0xba>
 800147a:	e7dd      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800147c:	4b66      	ldr	r3, [pc, #408]	; (8001618 <HAL_RCC_OscConfig+0x268>)
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	f012 0f0c 	tst.w	r2, #12
 8001484:	d007      	beq.n	8001496 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148c:	2a08      	cmp	r2, #8
 800148e:	d111      	bne.n	80014b4 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	025e      	lsls	r6, r3, #9
 8001494:	d40e      	bmi.n	80014b4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	4a60      	ldr	r2, [pc, #384]	; (8001618 <HAL_RCC_OscConfig+0x268>)
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	079d      	lsls	r5, r3, #30
 800149c:	d502      	bpl.n	80014a4 <HAL_RCC_OscConfig+0xf4>
 800149e:	68e3      	ldr	r3, [r4, #12]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d1b2      	bne.n	800140a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	6813      	ldr	r3, [r2, #0]
 80014a6:	6921      	ldr	r1, [r4, #16]
 80014a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014b0:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	e787      	b.n	80013c4 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014b4:	68e2      	ldr	r2, [r4, #12]
 80014b6:	4b59      	ldr	r3, [pc, #356]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014b8:	b1b2      	cbz	r2, 80014e8 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014be:	f7ff fc39 	bl	8000d34 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c2:	4d55      	ldr	r5, [pc, #340]	; (8001618 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80014c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	0798      	lsls	r0, r3, #30
 80014ca:	d507      	bpl.n	80014dc <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	682b      	ldr	r3, [r5, #0]
 80014ce:	6922      	ldr	r2, [r4, #16]
 80014d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014d8:	602b      	str	r3, [r5, #0]
 80014da:	e773      	b.n	80013c4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff fc2a 	bl	8000d34 <HAL_GetTick>
 80014e0:	1b80      	subs	r0, r0, r6
 80014e2:	2802      	cmp	r0, #2
 80014e4:	d9ef      	bls.n	80014c6 <HAL_RCC_OscConfig+0x116>
 80014e6:	e7a7      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 80014e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014ea:	f7ff fc23 	bl	8000d34 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	4e4a      	ldr	r6, [pc, #296]	; (8001618 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80014f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	6833      	ldr	r3, [r6, #0]
 80014f4:	0799      	lsls	r1, r3, #30
 80014f6:	f57f af65 	bpl.w	80013c4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fc1b 	bl	8000d34 <HAL_GetTick>
 80014fe:	1b40      	subs	r0, r0, r5
 8001500:	2802      	cmp	r0, #2
 8001502:	d9f6      	bls.n	80014f2 <HAL_RCC_OscConfig+0x142>
 8001504:	e798      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001506:	6962      	ldr	r2, [r4, #20]
 8001508:	4b44      	ldr	r3, [pc, #272]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800150a:	b182      	cbz	r2, 800152e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800150c:	2201      	movs	r2, #1
 800150e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001512:	f7ff fc0f 	bl	8000d34 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	4e40      	ldr	r6, [pc, #256]	; (8001618 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8001518:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800151c:	079f      	lsls	r7, r3, #30
 800151e:	f53f af55 	bmi.w	80013cc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001522:	f7ff fc07 	bl	8000d34 <HAL_GetTick>
 8001526:	1b40      	subs	r0, r0, r5
 8001528:	2802      	cmp	r0, #2
 800152a:	d9f6      	bls.n	800151a <HAL_RCC_OscConfig+0x16a>
 800152c:	e784      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800152e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001532:	f7ff fbff 	bl	8000d34 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001536:	4e38      	ldr	r6, [pc, #224]	; (8001618 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8001538:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800153c:	0798      	lsls	r0, r3, #30
 800153e:	f57f af45 	bpl.w	80013cc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001542:	f7ff fbf7 	bl	8000d34 <HAL_GetTick>
 8001546:	1b40      	subs	r0, r0, r5
 8001548:	2802      	cmp	r0, #2
 800154a:	d9f6      	bls.n	800153a <HAL_RCC_OscConfig+0x18a>
 800154c:	e774      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154e:	4b32      	ldr	r3, [pc, #200]	; (8001618 <HAL_RCC_OscConfig+0x268>)
 8001550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001552:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001556:	d128      	bne.n	80015aa <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001558:	9201      	str	r2, [sp, #4]
 800155a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800155c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800156c:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156e:	4d2c      	ldr	r5, [pc, #176]	; (8001620 <HAL_RCC_OscConfig+0x270>)
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	05d9      	lsls	r1, r3, #23
 8001574:	d51b      	bpl.n	80015ae <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001576:	68a3      	ldr	r3, [r4, #8]
 8001578:	4d27      	ldr	r5, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x268>)
 800157a:	2b01      	cmp	r3, #1
 800157c:	d127      	bne.n	80015ce <HAL_RCC_OscConfig+0x21e>
 800157e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001586:	f7ff fbd5 	bl	8000d34 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	4e23      	ldr	r6, [pc, #140]	; (8001618 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 800158c:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001592:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001594:	079b      	lsls	r3, r3, #30
 8001596:	d539      	bpl.n	800160c <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8001598:	2f00      	cmp	r7, #0
 800159a:	f43f af1b 	beq.w	80013d4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800159e:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <HAL_RCC_OscConfig+0x268>)
 80015a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
 80015a8:	e714      	b.n	80013d4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80015aa:	2700      	movs	r7, #0
 80015ac:	e7df      	b.n	800156e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80015b6:	f7ff fbbd 	bl	8000d34 <HAL_GetTick>
 80015ba:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	05da      	lsls	r2, r3, #23
 80015c0:	d4d9      	bmi.n	8001576 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c2:	f7ff fbb7 	bl	8000d34 <HAL_GetTick>
 80015c6:	1b80      	subs	r0, r0, r6
 80015c8:	2802      	cmp	r0, #2
 80015ca:	d9f7      	bls.n	80015bc <HAL_RCC_OscConfig+0x20c>
 80015cc:	e734      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d104      	bne.n	80015dc <HAL_RCC_OscConfig+0x22c>
 80015d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	672b      	str	r3, [r5, #112]	; 0x70
 80015da:	e7d0      	b.n	800157e <HAL_RCC_OscConfig+0x1ce>
 80015dc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80015de:	f022 0201 	bic.w	r2, r2, #1
 80015e2:	672a      	str	r2, [r5, #112]	; 0x70
 80015e4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80015e6:	f022 0204 	bic.w	r2, r2, #4
 80015ea:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1ca      	bne.n	8001586 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 80015f0:	f7ff fba0 	bl	8000d34 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80015f8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015fc:	0798      	lsls	r0, r3, #30
 80015fe:	d5cb      	bpl.n	8001598 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001600:	f7ff fb98 	bl	8000d34 <HAL_GetTick>
 8001604:	1b80      	subs	r0, r0, r6
 8001606:	4540      	cmp	r0, r8
 8001608:	d9f7      	bls.n	80015fa <HAL_RCC_OscConfig+0x24a>
 800160a:	e715      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff fb92 	bl	8000d34 <HAL_GetTick>
 8001610:	1b40      	subs	r0, r0, r5
 8001612:	4540      	cmp	r0, r8
 8001614:	d9bd      	bls.n	8001592 <HAL_RCC_OscConfig+0x1e2>
 8001616:	e70f      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
 8001618:	40023800 	.word	0x40023800
 800161c:	42470000 	.word	0x42470000
 8001620:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001624:	4d36      	ldr	r5, [pc, #216]	; (8001700 <HAL_RCC_OscConfig+0x350>)
 8001626:	68ab      	ldr	r3, [r5, #8]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d03d      	beq.n	80016ac <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001630:	4b34      	ldr	r3, [pc, #208]	; (8001704 <HAL_RCC_OscConfig+0x354>)
 8001632:	2200      	movs	r2, #0
 8001634:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001636:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001638:	d12b      	bne.n	8001692 <HAL_RCC_OscConfig+0x2e2>
        tickstart = HAL_GetTick();
 800163a:	f7ff fb7b 	bl	8000d34 <HAL_GetTick>
 800163e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001640:	682b      	ldr	r3, [r5, #0]
 8001642:	0199      	lsls	r1, r3, #6
 8001644:	d41f      	bmi.n	8001686 <HAL_RCC_OscConfig+0x2d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001646:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800164a:	4313      	orrs	r3, r2
 800164c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800164e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001652:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001654:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001658:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800165a:	0852      	lsrs	r2, r2, #1
 800165c:	3a01      	subs	r2, #1
 800165e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001662:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001664:	4b27      	ldr	r3, [pc, #156]	; (8001704 <HAL_RCC_OscConfig+0x354>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001666:	4d26      	ldr	r5, [pc, #152]	; (8001700 <HAL_RCC_OscConfig+0x350>)
        __HAL_RCC_PLL_ENABLE();
 8001668:	2201      	movs	r2, #1
 800166a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800166c:	f7ff fb62 	bl	8000d34 <HAL_GetTick>
 8001670:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	682b      	ldr	r3, [r5, #0]
 8001674:	019a      	lsls	r2, r3, #6
 8001676:	f53f aeb1 	bmi.w	80013dc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167a:	f7ff fb5b 	bl	8000d34 <HAL_GetTick>
 800167e:	1b00      	subs	r0, r0, r4
 8001680:	2802      	cmp	r0, #2
 8001682:	d9f6      	bls.n	8001672 <HAL_RCC_OscConfig+0x2c2>
 8001684:	e6d8      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff fb55 	bl	8000d34 <HAL_GetTick>
 800168a:	1b80      	subs	r0, r0, r6
 800168c:	2802      	cmp	r0, #2
 800168e:	d9d7      	bls.n	8001640 <HAL_RCC_OscConfig+0x290>
 8001690:	e6d2      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8001692:	f7ff fb4f 	bl	8000d34 <HAL_GetTick>
 8001696:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	019b      	lsls	r3, r3, #6
 800169c:	f57f ae9e 	bpl.w	80013dc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff fb48 	bl	8000d34 <HAL_GetTick>
 80016a4:	1b00      	subs	r0, r0, r4
 80016a6:	2802      	cmp	r0, #2
 80016a8:	d9f6      	bls.n	8001698 <HAL_RCC_OscConfig+0x2e8>
 80016aa:	e6c5      	b.n	8001438 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ac:	2801      	cmp	r0, #1
 80016ae:	f43f aec4 	beq.w	800143a <HAL_RCC_OscConfig+0x8a>
        pll_config = RCC->PLLCFGR;
 80016b2:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b4:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ba:	4291      	cmp	r1, r2
 80016bc:	f47f aea5 	bne.w	800140a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c0:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	428a      	cmp	r2, r1
 80016c8:	f47f ae9f 	bne.w	800140a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ce:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80016d2:	401a      	ands	r2, r3
 80016d4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80016d8:	f47f ae97 	bne.w	800140a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016de:	0852      	lsrs	r2, r2, #1
 80016e0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80016e4:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80016ea:	f47f ae8e 	bne.w	800140a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016f0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80016f8:	f43f ae70 	beq.w	80013dc <HAL_RCC_OscConfig+0x2c>
 80016fc:	e685      	b.n	800140a <HAL_RCC_OscConfig+0x5a>
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	42470000 	.word	0x42470000

08001708 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001708:	4913      	ldr	r1, [pc, #76]	; (8001758 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800170a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800170c:	688b      	ldr	r3, [r1, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b04      	cmp	r3, #4
 8001714:	d01c      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x48>
 8001716:	2b08      	cmp	r3, #8
 8001718:	d11c      	bne.n	8001754 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800171a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800171c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001720:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001724:	bf14      	ite	ne
 8001726:	480d      	ldrne	r0, [pc, #52]	; (800175c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001728:	480d      	ldreq	r0, [pc, #52]	; (8001760 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800172e:	bf18      	it	ne
 8001730:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001732:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001736:	fba1 0100 	umull	r0, r1, r1, r0
 800173a:	f7fe fda1 	bl	8000280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_RCC_GetSysClockFreq+0x50>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001746:	3301      	adds	r3, #1
 8001748:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800174a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800174e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <HAL_RCC_GetSysClockFreq+0x54>)
 8001752:	e7fc      	b.n	800174e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001756:	e7fa      	b.n	800174e <HAL_RCC_GetSysClockFreq+0x46>
 8001758:	40023800 	.word	0x40023800
 800175c:	017d7840 	.word	0x017d7840
 8001760:	00f42400 	.word	0x00f42400

08001764 <HAL_RCC_ClockConfig>:
{
 8001764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001768:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800176a:	4604      	mov	r4, r0
 800176c:	b910      	cbnz	r0, 8001774 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800176e:	2001      	movs	r0, #1
}
 8001770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_RCC_ClockConfig+0x120>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	f002 0207 	and.w	r2, r2, #7
 800177c:	428a      	cmp	r2, r1
 800177e:	d328      	bcc.n	80017d2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	6821      	ldr	r1, [r4, #0]
 8001782:	078f      	lsls	r7, r1, #30
 8001784:	d42d      	bmi.n	80017e2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001786:	07c8      	lsls	r0, r1, #31
 8001788:	d440      	bmi.n	800180c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800178a:	4b3e      	ldr	r3, [pc, #248]	; (8001884 <HAL_RCC_ClockConfig+0x120>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	f002 0207 	and.w	r2, r2, #7
 8001792:	42aa      	cmp	r2, r5
 8001794:	d865      	bhi.n	8001862 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001796:	6822      	ldr	r2, [r4, #0]
 8001798:	0751      	lsls	r1, r2, #29
 800179a:	d46b      	bmi.n	8001874 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	0713      	lsls	r3, r2, #28
 800179e:	d507      	bpl.n	80017b0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a0:	4a39      	ldr	r2, [pc, #228]	; (8001888 <HAL_RCC_ClockConfig+0x124>)
 80017a2:	6921      	ldr	r1, [r4, #16]
 80017a4:	6893      	ldr	r3, [r2, #8]
 80017a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017ae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017b0:	f7ff ffaa 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 80017b4:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_RCC_ClockConfig+0x124>)
 80017b6:	4a35      	ldr	r2, [pc, #212]	; (800188c <HAL_RCC_ClockConfig+0x128>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017be:	5cd3      	ldrb	r3, [r2, r3]
 80017c0:	40d8      	lsrs	r0, r3
 80017c2:	4b33      	ldr	r3, [pc, #204]	; (8001890 <HAL_RCC_ClockConfig+0x12c>)
 80017c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80017c6:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_RCC_ClockConfig+0x130>)
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	f7ff fa69 	bl	8000ca0 <HAL_InitTick>
  return HAL_OK;
 80017ce:	2000      	movs	r0, #0
 80017d0:	e7ce      	b.n	8001770 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	b2ca      	uxtb	r2, r1
 80017d4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	428b      	cmp	r3, r1
 80017de:	d1c6      	bne.n	800176e <HAL_RCC_ClockConfig+0xa>
 80017e0:	e7ce      	b.n	8001780 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <HAL_RCC_ClockConfig+0x124>)
 80017e4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e8:	bf1e      	ittt	ne
 80017ea:	689a      	ldrne	r2, [r3, #8]
 80017ec:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80017f0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f4:	bf42      	ittt	mi
 80017f6:	689a      	ldrmi	r2, [r3, #8]
 80017f8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80017fc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	68a0      	ldr	r0, [r4, #8]
 8001802:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001806:	4302      	orrs	r2, r0
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	e7bc      	b.n	8001786 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180c:	6862      	ldr	r2, [r4, #4]
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <HAL_RCC_ClockConfig+0x124>)
 8001810:	2a01      	cmp	r2, #1
 8001812:	d11c      	bne.n	800184e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	d0a8      	beq.n	800176e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181c:	4e1a      	ldr	r6, [pc, #104]	; (8001888 <HAL_RCC_ClockConfig+0x124>)
 800181e:	68b3      	ldr	r3, [r6, #8]
 8001820:	f023 0303 	bic.w	r3, r3, #3
 8001824:	4313      	orrs	r3, r2
 8001826:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001828:	f7ff fa84 	bl	8000d34 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001830:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	68b3      	ldr	r3, [r6, #8]
 8001834:	6862      	ldr	r2, [r4, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800183e:	d0a4      	beq.n	800178a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001840:	f7ff fa78 	bl	8000d34 <HAL_GetTick>
 8001844:	1bc0      	subs	r0, r0, r7
 8001846:	4540      	cmp	r0, r8
 8001848:	d9f3      	bls.n	8001832 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800184a:	2003      	movs	r0, #3
 800184c:	e790      	b.n	8001770 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184e:	1e91      	subs	r1, r2, #2
 8001850:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001854:	d802      	bhi.n	800185c <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800185a:	e7de      	b.n	800181a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	f013 0f02 	tst.w	r3, #2
 8001860:	e7db      	b.n	800181a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	b2ea      	uxtb	r2, r5
 8001864:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	42ab      	cmp	r3, r5
 800186e:	f47f af7e 	bne.w	800176e <HAL_RCC_ClockConfig+0xa>
 8001872:	e790      	b.n	8001796 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4904      	ldr	r1, [pc, #16]	; (8001888 <HAL_RCC_ClockConfig+0x124>)
 8001876:	68e0      	ldr	r0, [r4, #12]
 8001878:	688b      	ldr	r3, [r1, #8]
 800187a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800187e:	4303      	orrs	r3, r0
 8001880:	608b      	str	r3, [r1, #8]
 8001882:	e78b      	b.n	800179c <HAL_RCC_ClockConfig+0x38>
 8001884:	40023c00 	.word	0x40023c00
 8001888:	40023800 	.word	0x40023800
 800188c:	08002bbe 	.word	0x08002bbe
 8001890:	20000000 	.word	0x20000000
 8001894:	20000008 	.word	0x20000008

08001898 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018a6:	6810      	ldr	r0, [r2, #0]
}
 80018a8:	40d8      	lsrs	r0, r3
 80018aa:	4770      	bx	lr
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08002bce 	.word	0x08002bce
 80018b4:	20000000 	.word	0x20000000

080018b8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	4a03      	ldr	r2, [pc, #12]	; (80018d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80018c6:	6810      	ldr	r0, [r2, #0]
}
 80018c8:	40d8      	lsrs	r0, r3
 80018ca:	4770      	bx	lr
 80018cc:	40023800 	.word	0x40023800
 80018d0:	08002bce 	.word	0x08002bce
 80018d4:	20000000 	.word	0x20000000

080018d8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80018d8:	6803      	ldr	r3, [r0, #0]
 80018da:	f013 0f05 	tst.w	r3, #5
{
 80018de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018e0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80018e2:	d105      	bne.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	f013 0302 	ands.w	r3, r3, #2
 80018ea:	d12a      	bne.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80018ec:	2000      	movs	r0, #0
 80018ee:	e026      	b.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x66>
    __HAL_RCC_PLLI2S_DISABLE();
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80018f2:	4e43      	ldr	r6, [pc, #268]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_DISABLE();
 80018f4:	2200      	movs	r2, #0
 80018f6:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80018f8:	f7ff fa1c 	bl	8000d34 <HAL_GetTick>
 80018fc:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80018fe:	6833      	ldr	r3, [r6, #0]
 8001900:	011f      	lsls	r7, r3, #4
 8001902:	d416      	bmi.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001904:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001908:	071b      	lsls	r3, r3, #28
 800190a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800190e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001912:	4b3a      	ldr	r3, [pc, #232]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001914:	4e3a      	ldr	r6, [pc, #232]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_ENABLE();
 8001916:	2201      	movs	r2, #1
 8001918:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800191a:	f7ff fa0b 	bl	8000d34 <HAL_GetTick>
 800191e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001920:	6833      	ldr	r3, [r6, #0]
 8001922:	0118      	lsls	r0, r3, #4
 8001924:	d4de      	bmi.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001926:	f7ff fa05 	bl	8000d34 <HAL_GetTick>
 800192a:	1b40      	subs	r0, r0, r5
 800192c:	2802      	cmp	r0, #2
 800192e:	d9f7      	bls.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001930:	e004      	b.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x64>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001932:	f7ff f9ff 	bl	8000d34 <HAL_GetTick>
 8001936:	1b40      	subs	r0, r0, r5
 8001938:	2802      	cmp	r0, #2
 800193a:	d9e0      	bls.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 800193c:	2003      	movs	r0, #3
}
 800193e:	b003      	add	sp, #12
 8001940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    PWR->CR |= PWR_CR_DBP;
 8001948:	4d2e      	ldr	r5, [pc, #184]	; (8001a04 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800194c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001950:	641a      	str	r2, [r3, #64]	; 0x40
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800195c:	682b      	ldr	r3, [r5, #0]
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001964:	f7ff f9e6 	bl	8000d34 <HAL_GetTick>
 8001968:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800196a:	682b      	ldr	r3, [r5, #0]
 800196c:	05d9      	lsls	r1, r3, #23
 800196e:	d51b      	bpl.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001970:	4d23      	ldr	r5, [pc, #140]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001972:	68e2      	ldr	r2, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001974:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001976:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800197a:	d11b      	bne.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800197c:	68e3      	ldr	r3, [r4, #12]
 800197e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001982:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001988:	d134      	bne.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800198a:	6891      	ldr	r1, [r2, #8]
 800198c:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001990:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001994:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001998:	4301      	orrs	r1, r0
 800199a:	6091      	str	r1, [r2, #8]
 800199c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800199e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a2:	430b      	orrs	r3, r1
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
 80019a6:	e7a1      	b.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019a8:	f7ff f9c4 	bl	8000d34 <HAL_GetTick>
 80019ac:	1b80      	subs	r0, r0, r6
 80019ae:	2802      	cmp	r0, #2
 80019b0:	d9db      	bls.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x92>
 80019b2:	e7c3      	b.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x64>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019b4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d0df      	beq.n	800197c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80019be:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80019c0:	2101      	movs	r1, #1
 80019c2:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019ca:	2100      	movs	r1, #0
 80019cc:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 80019d0:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019d4:	07da      	lsls	r2, r3, #31
 80019d6:	d5d1      	bpl.n	800197c <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tickstart = HAL_GetTick();
 80019d8:	f7ff f9ac 	bl	8000d34 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80019e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019e4:	079b      	lsls	r3, r3, #30
 80019e6:	d4c9      	bmi.n	800197c <HAL_RCCEx_PeriphCLKConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e8:	f7ff f9a4 	bl	8000d34 <HAL_GetTick>
 80019ec:	1b80      	subs	r0, r0, r6
 80019ee:	42b8      	cmp	r0, r7
 80019f0:	d9f7      	bls.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 80019f2:	e7a3      	b.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019f4:	6891      	ldr	r1, [r2, #8]
 80019f6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80019fa:	e7ce      	b.n	800199a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80019fc:	42470000 	.word	0x42470000
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40007000 	.word	0x40007000

08001a08 <HAL_RTC_AlarmAEventCallback>:
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001a0c:	6803      	ldr	r3, [r0, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	04d2      	lsls	r2, r2, #19
{
 8001a12:	b510      	push	{r4, lr}
 8001a14:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001a16:	d50a      	bpl.n	8001a2e <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	05d9      	lsls	r1, r3, #23
 8001a1c:	d507      	bpl.n	8001a2e <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001a1e:	f7ff fff3 	bl	8001a08 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	68d3      	ldr	r3, [r2, #12]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8001a2c:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	0492      	lsls	r2, r2, #18
 8001a34:	d50b      	bpl.n	8001a4e <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	059b      	lsls	r3, r3, #22
 8001a3a:	d508      	bpl.n	8001a4e <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f000 f9fd 	bl	8001e3c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001a42:	6822      	ldr	r2, [r4, #0]
 8001a44:	68d3      	ldr	r3, [r2, #12]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f463 7320 	orn	r3, r3, #640	; 0x280
 8001a4c:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001a4e:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_RTC_AlarmIRQHandler+0x50>)
 8001a50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a54:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001a56:	2301      	movs	r3, #1
 8001a58:	7763      	strb	r3, [r4, #29]
}
 8001a5a:	bd10      	pop	{r4, pc}
 8001a5c:	40013c00 	.word	0x40013c00

08001a60 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001a60:	6802      	ldr	r2, [r0, #0]
{
 8001a62:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001a64:	68d3      	ldr	r3, [r2, #12]
 8001a66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a6a:	60d3      	str	r3, [r2, #12]
{
 8001a6c:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a6e:	f7ff f961 	bl	8000d34 <HAL_GetTick>
 8001a72:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	069b      	lsls	r3, r3, #26
 8001a7a:	d501      	bpl.n	8001a80 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001a7c:	2000      	movs	r0, #0
}
 8001a7e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001a80:	f7ff f958 	bl	8000d34 <HAL_GetTick>
 8001a84:	1b40      	subs	r0, r0, r5
 8001a86:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a8a:	d9f3      	bls.n	8001a74 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	e7f6      	b.n	8001a7e <HAL_RTC_WaitForSynchro+0x1e>

08001a90 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001a92:	6803      	ldr	r3, [r0, #0]
 8001a94:	68dc      	ldr	r4, [r3, #12]
 8001a96:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 8001a9a:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001a9c:	d117      	bne.n	8001ace <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aa4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001aa6:	f7ff f945 	bl	8000d34 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001aaa:	2704      	movs	r7, #4
    tickstart = HAL_GetTick();
 8001aac:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001aae:	682b      	ldr	r3, [r5, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	065b      	lsls	r3, r3, #25
 8001ab4:	d400      	bmi.n	8001ab8 <RTC_EnterInitMode+0x28>
 8001ab6:	b10c      	cbz	r4, 8001abc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
}
 8001ab8:	4620      	mov	r0, r4
 8001aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001abc:	f7ff f93a 	bl	8000d34 <HAL_GetTick>
 8001ac0:	1b80      	subs	r0, r0, r6
 8001ac2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ac6:	bf84      	itt	hi
 8001ac8:	776f      	strbhi	r7, [r5, #29]
        status = HAL_ERROR;
 8001aca:	2401      	movhi	r4, #1
 8001acc:	e7ef      	b.n	8001aae <RTC_EnterInitMode+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8001ace:	2400      	movs	r4, #0
 8001ad0:	e7f2      	b.n	8001ab8 <RTC_EnterInitMode+0x28>

08001ad2 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001ad2:	6803      	ldr	r3, [r0, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 8001ada:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001adc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	069b      	lsls	r3, r3, #26
{
 8001ae2:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001ae4:	d501      	bpl.n	8001aea <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8001ae6:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8001ae8:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001aea:	f7ff ffb9 	bl	8001a60 <HAL_RTC_WaitForSynchro>
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d0f9      	beq.n	8001ae6 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001af2:	2304      	movs	r3, #4
 8001af4:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8001af6:	2001      	movs	r0, #1
 8001af8:	e7f6      	b.n	8001ae8 <RTC_ExitInitMode+0x16>

08001afa <HAL_RTC_Init>:
{
 8001afa:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8001afc:	4604      	mov	r4, r0
 8001afe:	2800      	cmp	r0, #0
 8001b00:	d03a      	beq.n	8001b78 <HAL_RTC_Init+0x7e>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001b02:	7f43      	ldrb	r3, [r0, #29]
 8001b04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b08:	b913      	cbnz	r3, 8001b10 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8001b0a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001b0c:	f7ff f806 	bl	8000b1c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b10:	2302      	movs	r3, #2
 8001b12:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b14:	6823      	ldr	r3, [r4, #0]
 8001b16:	22ca      	movs	r2, #202	; 0xca
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24
 8001b1a:	2253      	movs	r2, #83	; 0x53
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f7ff ffb6 	bl	8001a90 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8001b24:	bb20      	cbnz	r0, 8001b70 <HAL_RTC_Init+0x76>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001b26:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001b28:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b34:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001b36:	6862      	ldr	r2, [r4, #4]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	4302      	orrs	r2, r0
 8001b3c:	6960      	ldr	r0, [r4, #20]
 8001b3e:	4302      	orrs	r2, r0
 8001b40:	430a      	orrs	r2, r1
 8001b42:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001b44:	68e2      	ldr	r2, [r4, #12]
 8001b46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	68a1      	ldr	r1, [r4, #8]
 8001b4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b50:	611a      	str	r2, [r3, #16]
    status = RTC_ExitInitMode(hrtc);
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7ff ffbd 	bl	8001ad2 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8001b58:	b950      	cbnz	r0, 8001b70 <HAL_RTC_Init+0x76>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001b5a:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001b5c:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	22ff      	movs	r2, #255	; 0xff
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b76:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b78:	2001      	movs	r0, #1
 8001b7a:	e7fc      	b.n	8001b76 <HAL_RTC_Init+0x7c>

08001b7c <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint8_t bcdhigh = 0U;

  while (number >= 10U)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2809      	cmp	r0, #9
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	f103 0301 	add.w	r3, r3, #1
 8001b86:	d803      	bhi.n	8001b90 <RTC_ByteToBcd2+0x14>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001b88:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
 8001b8c:	b2c0      	uxtb	r0, r0
 8001b8e:	4770      	bx	lr
    number -= 10U;
 8001b90:	380a      	subs	r0, #10
 8001b92:	b2c0      	uxtb	r0, r0
 8001b94:	e7f3      	b.n	8001b7e <RTC_ByteToBcd2+0x2>

08001b96 <HAL_RTC_SetTime>:
{
 8001b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8001b9a:	7f03      	ldrb	r3, [r0, #28]
 8001b9c:	2b01      	cmp	r3, #1
{
 8001b9e:	4606      	mov	r6, r0
 8001ba0:	460f      	mov	r7, r1
 8001ba2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8001ba6:	d041      	beq.n	8001c2c <HAL_RTC_SetTime+0x96>
 8001ba8:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001baa:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8001bac:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001bae:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8001bb0:	7838      	ldrb	r0, [r7, #0]
 8001bb2:	787d      	ldrb	r5, [r7, #1]
 8001bb4:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001bb6:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8001bb8:	2a00      	cmp	r2, #0
 8001bba:	d139      	bne.n	8001c30 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001bbc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8001bc0:	bf08      	it	eq
 8001bc2:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001bc4:	f7ff ffda 	bl	8001b7c <RTC_ByteToBcd2>
 8001bc8:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001bca:	4628      	mov	r0, r5
 8001bcc:	f7ff ffd6 	bl	8001b7c <RTC_ByteToBcd2>
 8001bd0:	4605      	mov	r5, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f7ff ffd2 	bl	8001b7c <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001bda:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8001bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001be2:	ea43 2405 	orr.w	r4, r3, r5, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001be6:	23ca      	movs	r3, #202	; 0xca
 8001be8:	624b      	str	r3, [r1, #36]	; 0x24
 8001bea:	2353      	movs	r3, #83	; 0x53
 8001bec:	624b      	str	r3, [r1, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8001bee:	4630      	mov	r0, r6
 8001bf0:	f7ff ff4e 	bl	8001a90 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8001bf4:	b9a8      	cbnz	r0, 8001c22 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001bf6:	6832      	ldr	r2, [r6, #0]
 8001bf8:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8001bfc:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8001c00:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001c02:	6893      	ldr	r3, [r2, #8]
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c08:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001c0a:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8001c0e:	6891      	ldr	r1, [r2, #8]
 8001c10:	4303      	orrs	r3, r0
 8001c12:	430b      	orrs	r3, r1
 8001c14:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8001c16:	4630      	mov	r0, r6
 8001c18:	f7ff ff5b 	bl	8001ad2 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8001c1c:	b908      	cbnz	r0, 8001c22 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c22:	6833      	ldr	r3, [r6, #0]
 8001c24:	22ff      	movs	r2, #255	; 0xff
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	7733      	strb	r3, [r6, #28]
}
 8001c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001c30:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8001c34:	bf08      	it	eq
 8001c36:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001c38:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001c3a:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001c3c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001c40:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001c44:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 8001c48:	e7cd      	b.n	8001be6 <HAL_RTC_SetTime+0x50>

08001c4a <HAL_RTC_SetDate>:
{
 8001c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001c4c:	7f03      	ldrb	r3, [r0, #28]
 8001c4e:	2b01      	cmp	r3, #1
{
 8001c50:	4605      	mov	r5, r0
 8001c52:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8001c56:	d039      	beq.n	8001ccc <HAL_RTC_SetDate+0x82>
 8001c58:	2001      	movs	r0, #1
 8001c5a:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c5c:	776b      	strb	r3, [r5, #29]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8001c5e:	780c      	ldrb	r4, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001c60:	78c8      	ldrb	r0, [r1, #3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001c62:	784e      	ldrb	r6, [r1, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8001c64:	788f      	ldrb	r7, [r1, #2]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8001c66:	0364      	lsls	r4, r4, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001c68:	bb92      	cbnz	r2, 8001cd0 <HAL_RTC_SetDate+0x86>
 8001c6a:	06f3      	lsls	r3, r6, #27
 8001c6c:	d503      	bpl.n	8001c76 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001c6e:	f026 0610 	bic.w	r6, r6, #16
 8001c72:	360a      	adds	r6, #10
 8001c74:	704e      	strb	r6, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001c76:	f7ff ff81 	bl	8001b7c <RTC_ByteToBcd2>
 8001c7a:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001c7c:	7848      	ldrb	r0, [r1, #1]
 8001c7e:	f7ff ff7d 	bl	8001b7c <RTC_ByteToBcd2>
 8001c82:	4601      	mov	r1, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8001c84:	4638      	mov	r0, r7
 8001c86:	f7ff ff79 	bl	8001b7c <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001c8a:	ea40 0304 	orr.w	r3, r0, r4
 8001c8e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001c92:	ea43 2401 	orr.w	r4, r3, r1, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c96:	682b      	ldr	r3, [r5, #0]
 8001c98:	22ca      	movs	r2, #202	; 0xca
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001c9c:	2253      	movs	r2, #83	; 0x53
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	f7ff fef5 	bl	8001a90 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8001ca6:	b958      	cbnz	r0, 8001cc0 <HAL_RTC_SetDate+0x76>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001ca8:	682a      	ldr	r2, [r5, #0]
 8001caa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8001cae:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8001cb2:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	f7ff ff0c 	bl	8001ad2 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8001cba:	b908      	cbnz	r0, 8001cc0 <HAL_RTC_SetDate+0x76>
    hrtc->State = HAL_RTC_STATE_READY;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	22ff      	movs	r2, #255	; 0xff
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	772b      	strb	r3, [r5, #28]
}
 8001cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8001ccc:	4618      	mov	r0, r3
 8001cce:	e7fc      	b.n	8001cca <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001cd0:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8001cd4:	433c      	orrs	r4, r7
 8001cd6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8001cda:	e7dc      	b.n	8001c96 <HAL_RTC_SetDate+0x4c>

08001cdc <HAL_RTC_SetAlarm_IT>:
{
 8001cdc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8001ce0:	4b54      	ldr	r3, [pc, #336]	; (8001e34 <HAL_RTC_SetAlarm_IT+0x158>)
 8001ce2:	681e      	ldr	r6, [r3, #0]
 8001ce4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8001ce8:	fbb6 f6f3 	udiv	r6, r6, r3
 8001cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf0:	435e      	muls	r6, r3
  __HAL_LOCK(hrtc);
 8001cf2:	7f03      	ldrb	r3, [r0, #28]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8001cf4:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hrtc);
 8001cf6:	2b01      	cmp	r3, #1
{
 8001cf8:	4605      	mov	r5, r0
 8001cfa:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8001cfe:	d04a      	beq.n	8001d96 <HAL_RTC_SetAlarm_IT+0xba>
 8001d00:	2001      	movs	r0, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001d02:	682c      	ldr	r4, [r5, #0]
  __HAL_LOCK(hrtc);
 8001d04:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d06:	776b      	strb	r3, [r5, #29]
  if (Format == RTC_FORMAT_BIN)
 8001d08:	7808      	ldrb	r0, [r1, #0]
 8001d0a:	f891 8001 	ldrb.w	r8, [r1, #1]
 8001d0e:	f891 9002 	ldrb.w	r9, [r1, #2]
 8001d12:	f891 7020 	ldrb.w	r7, [r1, #32]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001d16:	68a3      	ldr	r3, [r4, #8]
  if (Format == RTC_FORMAT_BIN)
 8001d18:	2a00      	cmp	r2, #0
 8001d1a:	d140      	bne.n	8001d9e <HAL_RTC_SetAlarm_IT+0xc2>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001d1c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001d20:	bf08      	it	eq
 8001d22:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001d24:	f7ff ff2a 	bl	8001b7c <RTC_ByteToBcd2>
 8001d28:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001d2a:	4640      	mov	r0, r8
 8001d2c:	f7ff ff26 	bl	8001b7c <RTC_ByteToBcd2>
 8001d30:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8001d32:	4648      	mov	r0, r9
 8001d34:	f7ff ff22 	bl	8001b7c <RTC_ByteToBcd2>
 8001d38:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8001d3a:	4638      	mov	r0, r7
 8001d3c:	f7ff ff1e 	bl	8001b7c <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001d40:	69ca      	ldr	r2, [r1, #28]
 8001d42:	694b      	ldr	r3, [r1, #20]
 8001d44:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8001d46:	78ca      	ldrb	r2, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8001d48:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8001d4c:	ea43 0309 	orr.w	r3, r3, r9
 8001d50:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8001d54:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8001d58:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8001d5c:	698a      	ldr	r2, [r1, #24]
 8001d5e:	6848      	ldr	r0, [r1, #4]
 8001d60:	4310      	orrs	r0, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d62:	22ca      	movs	r2, #202	; 0xca
 8001d64:	6262      	str	r2, [r4, #36]	; 0x24
 8001d66:	2253      	movs	r2, #83	; 0x53
 8001d68:	6262      	str	r2, [r4, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001d6a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001d6c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001d70:	68a2      	ldr	r2, [r4, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001d72:	d144      	bne.n	8001dfe <HAL_RTC_SetAlarm_IT+0x122>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d78:	60a2      	str	r2, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001d7a:	68e2      	ldr	r2, [r4, #12]
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8001d82:	60e2      	str	r2, [r4, #12]
      if (count-- == 0U)
 8001d84:	9a01      	ldr	r2, [sp, #4]
 8001d86:	1e51      	subs	r1, r2, #1
 8001d88:	9101      	str	r1, [sp, #4]
 8001d8a:	b9da      	cbnz	r2, 8001dc4 <HAL_RTC_SetAlarm_IT+0xe8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d8c:	23ff      	movs	r3, #255	; 0xff
 8001d8e:	6263      	str	r3, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 8001d94:	772a      	strb	r2, [r5, #28]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	b002      	add	sp, #8
 8001d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001d9e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8001da2:	694a      	ldr	r2, [r1, #20]
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001da4:	bf08      	it	eq
 8001da6:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8001da8:	69cb      	ldr	r3, [r1, #28]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	ea43 0309 	orr.w	r3, r3, r9
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8001db0:	78ca      	ldrb	r2, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8001db2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001db6:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8001dba:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8001dbe:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8001dc2:	e7cb      	b.n	8001d5c <HAL_RTC_SetAlarm_IT+0x80>
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8001dc4:	68e2      	ldr	r2, [r4, #12]
 8001dc6:	07d1      	lsls	r1, r2, #31
 8001dc8:	d5dc      	bpl.n	8001d84 <HAL_RTC_SetAlarm_IT+0xa8>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001dca:	61e3      	str	r3, [r4, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001dcc:	6460      	str	r0, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001dce:	68a3      	ldr	r3, [r4, #8]
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001dd6:	68a3      	ldr	r3, [r4, #8]
 8001dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001ddc:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001dde:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <HAL_RTC_SetAlarm_IT+0x15c>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001de6:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dee:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001df0:	23ff      	movs	r3, #255	; 0xff
 8001df2:	6263      	str	r3, [r4, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8001df4:	2301      	movs	r3, #1
 8001df6:	776b      	strb	r3, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	772b      	strb	r3, [r5, #28]
  return HAL_OK;
 8001dfc:	e7cb      	b.n	8001d96 <HAL_RTC_SetAlarm_IT+0xba>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001dfe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e02:	60a2      	str	r2, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001e04:	68e2      	ldr	r2, [r4, #12]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f462 7220 	orn	r2, r2, #640	; 0x280
 8001e0c:	60e2      	str	r2, [r4, #12]
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8001e0e:	9601      	str	r6, [sp, #4]
      if (count-- == 0U)
 8001e10:	9a01      	ldr	r2, [sp, #4]
 8001e12:	1e51      	subs	r1, r2, #1
 8001e14:	9101      	str	r1, [sp, #4]
 8001e16:	2a00      	cmp	r2, #0
 8001e18:	d0b8      	beq.n	8001d8c <HAL_RTC_SetAlarm_IT+0xb0>
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8001e1a:	68e2      	ldr	r2, [r4, #12]
 8001e1c:	0792      	lsls	r2, r2, #30
 8001e1e:	d5f7      	bpl.n	8001e10 <HAL_RTC_SetAlarm_IT+0x134>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001e20:	6223      	str	r3, [r4, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001e22:	64a0      	str	r0, [r4, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001e24:	68a3      	ldr	r3, [r4, #8]
 8001e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2a:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001e2c:	68a3      	ldr	r3, [r4, #8]
 8001e2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e32:	e7d3      	b.n	8001ddc <HAL_RTC_SetAlarm_IT+0x100>
 8001e34:	20000000 	.word	0x20000000
 8001e38:	40013c00 	.word	0x40013c00

08001e3c <HAL_RTCEx_AlarmBEventCallback>:
 8001e3c:	4770      	bx	lr
	...

08001e40 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e40:	6802      	ldr	r2, [r0, #0]
 8001e42:	68c1      	ldr	r1, [r0, #12]
 8001e44:	6913      	ldr	r3, [r2, #16]
 8001e46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e4a:	430b      	orrs	r3, r1
{
 8001e4c:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e4e:	6113      	str	r3, [r2, #16]
{
 8001e50:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e52:	6883      	ldr	r3, [r0, #8]
 8001e54:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001e56:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e58:	4303      	orrs	r3, r0
 8001e5a:	6968      	ldr	r0, [r5, #20]
 8001e5c:	4303      	orrs	r3, r0
 8001e5e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001e60:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8001e64:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e68:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e6e:	6953      	ldr	r3, [r2, #20]
 8001e70:	69a9      	ldr	r1, [r5, #24]
 8001e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e76:	430b      	orrs	r3, r1
 8001e78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <UART_SetConfig+0xb8>)
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d003      	beq.n	8001e88 <UART_SetConfig+0x48>
 8001e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d123      	bne.n	8001ed0 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e88:	f7ff fd16 	bl	80018b8 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e8c:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e8e:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e94:	e9d5 4600 	ldrd	r4, r6, [r5]
 8001e98:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e9c:	d11b      	bne.n	8001ed6 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e9e:	19b2      	adds	r2, r6, r6
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	415b      	adcs	r3, r3
 8001ea6:	f7fe f9eb 	bl	8000280 <__aeabi_uldivmod>
 8001eaa:	2264      	movs	r2, #100	; 0x64
 8001eac:	fbb0 f1f2 	udiv	r1, r0, r2
 8001eb0:	fb02 0311 	mls	r3, r2, r1, r0
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	3332      	adds	r3, #50	; 0x32
 8001eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ebc:	f003 0207 	and.w	r2, r3, #7
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001ec6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001eca:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ecc:	60a3      	str	r3, [r4, #8]
  }
}
 8001ece:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ed0:	f7ff fce2 	bl	8001898 <HAL_RCC_GetPCLK1Freq>
 8001ed4:	e7da      	b.n	8001e8c <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ed6:	00b2      	lsls	r2, r6, #2
 8001ed8:	0fb3      	lsrs	r3, r6, #30
 8001eda:	f7fe f9d1 	bl	8000280 <__aeabi_uldivmod>
 8001ede:	2264      	movs	r2, #100	; 0x64
 8001ee0:	fbb0 f1f2 	udiv	r1, r0, r2
 8001ee4:	fb02 0311 	mls	r3, r2, r1, r0
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	3332      	adds	r3, #50	; 0x32
 8001eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ef0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001ef4:	e7ea      	b.n	8001ecc <UART_SetConfig+0x8c>
 8001ef6:	bf00      	nop
 8001ef8:	40011000 	.word	0x40011000

08001efc <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8001efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efe:	4604      	mov	r4, r0
 8001f00:	460e      	mov	r6, r1
 8001f02:	4617      	mov	r7, r2
 8001f04:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	6813      	ldr	r3, [r2, #0]
 8001f0a:	ea36 0303 	bics.w	r3, r6, r3
 8001f0e:	d101      	bne.n	8001f14 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001f10:	2000      	movs	r0, #0
 8001f12:	e028      	b.n	8001f66 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001f14:	1c6b      	adds	r3, r5, #1
 8001f16:	d0f7      	beq.n	8001f08 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f18:	b125      	cbz	r5, 8001f24 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8001f1a:	f7fe ff0b 	bl	8000d34 <HAL_GetTick>
 8001f1e:	1bc0      	subs	r0, r0, r7
 8001f20:	4285      	cmp	r5, r0
 8001f22:	d2f0      	bcs.n	8001f06 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f24:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f26:	f102 030c 	add.w	r3, r2, #12
 8001f2a:	e853 3f00 	ldrex	r3, [r3]
 8001f2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f32:	320c      	adds	r2, #12
 8001f34:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8001f38:	6821      	ldr	r1, [r4, #0]
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d1f2      	bne.n	8001f24 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f3e:	f101 0314 	add.w	r3, r1, #20
 8001f42:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f46:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f4a:	f101 0014 	add.w	r0, r1, #20
 8001f4e:	e840 3200 	strex	r2, r3, [r0]
 8001f52:	2a00      	cmp	r2, #0
 8001f54:	d1f3      	bne.n	8001f3e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8001f56:	2320      	movs	r3, #32
 8001f58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8001f5c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8001f60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8001f64:	2003      	movs	r0, #3
}
 8001f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f68 <HAL_UART_Init>:
{
 8001f68:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	b340      	cbz	r0, 8001fc0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001f6e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f76:	b91b      	cbnz	r3, 8001f80 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001f78:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001f7c:	f7fe fdf6 	bl	8000b6c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001f80:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f82:	2324      	movs	r3, #36	; 0x24
 8001f84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001f88:	68d3      	ldr	r3, [r2, #12]
 8001f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f8e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f90:	4620      	mov	r0, r4
 8001f92:	f7ff ff55 	bl	8001e40 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fa6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fae:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001fb2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb4:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001fbe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	e7fc      	b.n	8001fbe <HAL_UART_Init+0x56>

08001fc4 <HAL_UART_Transmit>:
{
 8001fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fc6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001fc8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8001fcc:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8001fce:	2a20      	cmp	r2, #32
{
 8001fd0:	4604      	mov	r4, r0
 8001fd2:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001fd4:	d149      	bne.n	800206a <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8001fd6:	2900      	cmp	r1, #0
 8001fd8:	d045      	beq.n	8002066 <HAL_UART_Transmit+0xa2>
 8001fda:	2f00      	cmp	r7, #0
 8001fdc:	d043      	beq.n	8002066 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8001fde:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001fe2:	2a01      	cmp	r2, #1
 8001fe4:	d041      	beq.n	800206a <HAL_UART_Transmit+0xa6>
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fec:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fee:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff0:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ff2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8001ff6:	f7fe fe9d 	bl	8000d34 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ffa:	68a1      	ldr	r1, [r4, #8]
 8001ffc:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8001ffe:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002000:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002004:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8002006:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002008:	d103      	bne.n	8002012 <HAL_UART_Transmit+0x4e>
 800200a:	6921      	ldr	r1, [r4, #16]
 800200c:	b909      	cbnz	r1, 8002012 <HAL_UART_Transmit+0x4e>
 800200e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002010:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8002012:	2100      	movs	r1, #0
 8002014:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002018:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800201a:	b289      	uxth	r1, r1
 800201c:	b941      	cbnz	r1, 8002030 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800201e:	2140      	movs	r1, #64	; 0x40
 8002020:	4620      	mov	r0, r4
 8002022:	f7ff ff6b 	bl	8001efc <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002026:	b960      	cbnz	r0, 8002042 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002028:	2320      	movs	r3, #32
 800202a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800202e:	e009      	b.n	8002044 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	4620      	mov	r0, r4
 8002034:	e9cd 2300 	strd	r2, r3, [sp]
 8002038:	f7ff ff60 	bl	8001efc <UART_WaitOnFlagUntilTimeout.constprop.0>
 800203c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002040:	b110      	cbz	r0, 8002048 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002042:	2003      	movs	r0, #3
}
 8002044:	b003      	add	sp, #12
 8002046:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002048:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 800204a:	b94e      	cbnz	r6, 8002060 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800204c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8002050:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002054:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8002056:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002058:	3901      	subs	r1, #1
 800205a:	b289      	uxth	r1, r1
 800205c:	84e1      	strh	r1, [r4, #38]	; 0x26
 800205e:	e7db      	b.n	8002018 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002060:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002064:	e7f6      	b.n	8002054 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002066:	2001      	movs	r0, #1
 8002068:	e7ec      	b.n	8002044 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800206a:	2002      	movs	r0, #2
 800206c:	e7ea      	b.n	8002044 <HAL_UART_Transmit+0x80>

0800206e <_ZdlPvj>:
 800206e:	f000 b800 	b.w	8002072 <_ZdlPv>

08002072 <_ZdlPv>:
 8002072:	f000 b801 	b.w	8002078 <free>
	...

08002078 <free>:
 8002078:	4b02      	ldr	r3, [pc, #8]	; (8002084 <free+0xc>)
 800207a:	4601      	mov	r1, r0
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	f000 b927 	b.w	80022d0 <_free_r>
 8002082:	bf00      	nop
 8002084:	2000005c 	.word	0x2000005c

08002088 <sbrk_aligned>:
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	4e0e      	ldr	r6, [pc, #56]	; (80020c4 <sbrk_aligned+0x3c>)
 800208c:	460c      	mov	r4, r1
 800208e:	6831      	ldr	r1, [r6, #0]
 8002090:	4605      	mov	r5, r0
 8002092:	b911      	cbnz	r1, 800209a <sbrk_aligned+0x12>
 8002094:	f000 f8e0 	bl	8002258 <_sbrk_r>
 8002098:	6030      	str	r0, [r6, #0]
 800209a:	4621      	mov	r1, r4
 800209c:	4628      	mov	r0, r5
 800209e:	f000 f8db 	bl	8002258 <_sbrk_r>
 80020a2:	1c43      	adds	r3, r0, #1
 80020a4:	d00a      	beq.n	80020bc <sbrk_aligned+0x34>
 80020a6:	1cc4      	adds	r4, r0, #3
 80020a8:	f024 0403 	bic.w	r4, r4, #3
 80020ac:	42a0      	cmp	r0, r4
 80020ae:	d007      	beq.n	80020c0 <sbrk_aligned+0x38>
 80020b0:	1a21      	subs	r1, r4, r0
 80020b2:	4628      	mov	r0, r5
 80020b4:	f000 f8d0 	bl	8002258 <_sbrk_r>
 80020b8:	3001      	adds	r0, #1
 80020ba:	d101      	bne.n	80020c0 <sbrk_aligned+0x38>
 80020bc:	f04f 34ff 	mov.w	r4, #4294967295
 80020c0:	4620      	mov	r0, r4
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	20000588 	.word	0x20000588

080020c8 <_malloc_r>:
 80020c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020cc:	1ccd      	adds	r5, r1, #3
 80020ce:	f025 0503 	bic.w	r5, r5, #3
 80020d2:	3508      	adds	r5, #8
 80020d4:	2d0c      	cmp	r5, #12
 80020d6:	bf38      	it	cc
 80020d8:	250c      	movcc	r5, #12
 80020da:	2d00      	cmp	r5, #0
 80020dc:	4607      	mov	r7, r0
 80020de:	db01      	blt.n	80020e4 <_malloc_r+0x1c>
 80020e0:	42a9      	cmp	r1, r5
 80020e2:	d905      	bls.n	80020f0 <_malloc_r+0x28>
 80020e4:	230c      	movs	r3, #12
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	2600      	movs	r6, #0
 80020ea:	4630      	mov	r0, r6
 80020ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80021c4 <_malloc_r+0xfc>
 80020f4:	f000 f868 	bl	80021c8 <__malloc_lock>
 80020f8:	f8d8 3000 	ldr.w	r3, [r8]
 80020fc:	461c      	mov	r4, r3
 80020fe:	bb5c      	cbnz	r4, 8002158 <_malloc_r+0x90>
 8002100:	4629      	mov	r1, r5
 8002102:	4638      	mov	r0, r7
 8002104:	f7ff ffc0 	bl	8002088 <sbrk_aligned>
 8002108:	1c43      	adds	r3, r0, #1
 800210a:	4604      	mov	r4, r0
 800210c:	d155      	bne.n	80021ba <_malloc_r+0xf2>
 800210e:	f8d8 4000 	ldr.w	r4, [r8]
 8002112:	4626      	mov	r6, r4
 8002114:	2e00      	cmp	r6, #0
 8002116:	d145      	bne.n	80021a4 <_malloc_r+0xdc>
 8002118:	2c00      	cmp	r4, #0
 800211a:	d048      	beq.n	80021ae <_malloc_r+0xe6>
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	4631      	mov	r1, r6
 8002120:	4638      	mov	r0, r7
 8002122:	eb04 0903 	add.w	r9, r4, r3
 8002126:	f000 f897 	bl	8002258 <_sbrk_r>
 800212a:	4581      	cmp	r9, r0
 800212c:	d13f      	bne.n	80021ae <_malloc_r+0xe6>
 800212e:	6821      	ldr	r1, [r4, #0]
 8002130:	1a6d      	subs	r5, r5, r1
 8002132:	4629      	mov	r1, r5
 8002134:	4638      	mov	r0, r7
 8002136:	f7ff ffa7 	bl	8002088 <sbrk_aligned>
 800213a:	3001      	adds	r0, #1
 800213c:	d037      	beq.n	80021ae <_malloc_r+0xe6>
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	442b      	add	r3, r5
 8002142:	6023      	str	r3, [r4, #0]
 8002144:	f8d8 3000 	ldr.w	r3, [r8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d038      	beq.n	80021be <_malloc_r+0xf6>
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	42a2      	cmp	r2, r4
 8002150:	d12b      	bne.n	80021aa <_malloc_r+0xe2>
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	e00f      	b.n	8002178 <_malloc_r+0xb0>
 8002158:	6822      	ldr	r2, [r4, #0]
 800215a:	1b52      	subs	r2, r2, r5
 800215c:	d41f      	bmi.n	800219e <_malloc_r+0xd6>
 800215e:	2a0b      	cmp	r2, #11
 8002160:	d917      	bls.n	8002192 <_malloc_r+0xca>
 8002162:	1961      	adds	r1, r4, r5
 8002164:	42a3      	cmp	r3, r4
 8002166:	6025      	str	r5, [r4, #0]
 8002168:	bf18      	it	ne
 800216a:	6059      	strne	r1, [r3, #4]
 800216c:	6863      	ldr	r3, [r4, #4]
 800216e:	bf08      	it	eq
 8002170:	f8c8 1000 	streq.w	r1, [r8]
 8002174:	5162      	str	r2, [r4, r5]
 8002176:	604b      	str	r3, [r1, #4]
 8002178:	4638      	mov	r0, r7
 800217a:	f104 060b 	add.w	r6, r4, #11
 800217e:	f000 f829 	bl	80021d4 <__malloc_unlock>
 8002182:	f026 0607 	bic.w	r6, r6, #7
 8002186:	1d23      	adds	r3, r4, #4
 8002188:	1af2      	subs	r2, r6, r3
 800218a:	d0ae      	beq.n	80020ea <_malloc_r+0x22>
 800218c:	1b9b      	subs	r3, r3, r6
 800218e:	50a3      	str	r3, [r4, r2]
 8002190:	e7ab      	b.n	80020ea <_malloc_r+0x22>
 8002192:	42a3      	cmp	r3, r4
 8002194:	6862      	ldr	r2, [r4, #4]
 8002196:	d1dd      	bne.n	8002154 <_malloc_r+0x8c>
 8002198:	f8c8 2000 	str.w	r2, [r8]
 800219c:	e7ec      	b.n	8002178 <_malloc_r+0xb0>
 800219e:	4623      	mov	r3, r4
 80021a0:	6864      	ldr	r4, [r4, #4]
 80021a2:	e7ac      	b.n	80020fe <_malloc_r+0x36>
 80021a4:	4634      	mov	r4, r6
 80021a6:	6876      	ldr	r6, [r6, #4]
 80021a8:	e7b4      	b.n	8002114 <_malloc_r+0x4c>
 80021aa:	4613      	mov	r3, r2
 80021ac:	e7cc      	b.n	8002148 <_malloc_r+0x80>
 80021ae:	230c      	movs	r3, #12
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4638      	mov	r0, r7
 80021b4:	f000 f80e 	bl	80021d4 <__malloc_unlock>
 80021b8:	e797      	b.n	80020ea <_malloc_r+0x22>
 80021ba:	6025      	str	r5, [r4, #0]
 80021bc:	e7dc      	b.n	8002178 <_malloc_r+0xb0>
 80021be:	605b      	str	r3, [r3, #4]
 80021c0:	deff      	udf	#255	; 0xff
 80021c2:	bf00      	nop
 80021c4:	20000584 	.word	0x20000584

080021c8 <__malloc_lock>:
 80021c8:	4801      	ldr	r0, [pc, #4]	; (80021d0 <__malloc_lock+0x8>)
 80021ca:	f000 b87f 	b.w	80022cc <__retarget_lock_acquire_recursive>
 80021ce:	bf00      	nop
 80021d0:	200006c8 	.word	0x200006c8

080021d4 <__malloc_unlock>:
 80021d4:	4801      	ldr	r0, [pc, #4]	; (80021dc <__malloc_unlock+0x8>)
 80021d6:	f000 b87a 	b.w	80022ce <__retarget_lock_release_recursive>
 80021da:	bf00      	nop
 80021dc:	200006c8 	.word	0x200006c8

080021e0 <sniprintf>:
 80021e0:	b40c      	push	{r2, r3}
 80021e2:	b530      	push	{r4, r5, lr}
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <sniprintf+0x64>)
 80021e6:	1e0c      	subs	r4, r1, #0
 80021e8:	681d      	ldr	r5, [r3, #0]
 80021ea:	b09d      	sub	sp, #116	; 0x74
 80021ec:	da08      	bge.n	8002200 <sniprintf+0x20>
 80021ee:	238b      	movs	r3, #139	; 0x8b
 80021f0:	602b      	str	r3, [r5, #0]
 80021f2:	f04f 30ff 	mov.w	r0, #4294967295
 80021f6:	b01d      	add	sp, #116	; 0x74
 80021f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80021fc:	b002      	add	sp, #8
 80021fe:	4770      	bx	lr
 8002200:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002204:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002208:	bf14      	ite	ne
 800220a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800220e:	4623      	moveq	r3, r4
 8002210:	9304      	str	r3, [sp, #16]
 8002212:	9307      	str	r3, [sp, #28]
 8002214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002218:	9002      	str	r0, [sp, #8]
 800221a:	9006      	str	r0, [sp, #24]
 800221c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002220:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002222:	ab21      	add	r3, sp, #132	; 0x84
 8002224:	a902      	add	r1, sp, #8
 8002226:	4628      	mov	r0, r5
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	f000 f8f7 	bl	800241c <_svfiprintf_r>
 800222e:	1c43      	adds	r3, r0, #1
 8002230:	bfbc      	itt	lt
 8002232:	238b      	movlt	r3, #139	; 0x8b
 8002234:	602b      	strlt	r3, [r5, #0]
 8002236:	2c00      	cmp	r4, #0
 8002238:	d0dd      	beq.n	80021f6 <sniprintf+0x16>
 800223a:	9b02      	ldr	r3, [sp, #8]
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e7d9      	b.n	80021f6 <sniprintf+0x16>
 8002242:	bf00      	nop
 8002244:	2000005c 	.word	0x2000005c

08002248 <memset>:
 8002248:	4402      	add	r2, r0
 800224a:	4603      	mov	r3, r0
 800224c:	4293      	cmp	r3, r2
 800224e:	d100      	bne.n	8002252 <memset+0xa>
 8002250:	4770      	bx	lr
 8002252:	f803 1b01 	strb.w	r1, [r3], #1
 8002256:	e7f9      	b.n	800224c <memset+0x4>

08002258 <_sbrk_r>:
 8002258:	b538      	push	{r3, r4, r5, lr}
 800225a:	4d06      	ldr	r5, [pc, #24]	; (8002274 <_sbrk_r+0x1c>)
 800225c:	2300      	movs	r3, #0
 800225e:	4604      	mov	r4, r0
 8002260:	4608      	mov	r0, r1
 8002262:	602b      	str	r3, [r5, #0]
 8002264:	f7fe fcc8 	bl	8000bf8 <_sbrk>
 8002268:	1c43      	adds	r3, r0, #1
 800226a:	d102      	bne.n	8002272 <_sbrk_r+0x1a>
 800226c:	682b      	ldr	r3, [r5, #0]
 800226e:	b103      	cbz	r3, 8002272 <_sbrk_r+0x1a>
 8002270:	6023      	str	r3, [r4, #0]
 8002272:	bd38      	pop	{r3, r4, r5, pc}
 8002274:	200006c4 	.word	0x200006c4

08002278 <__errno>:
 8002278:	4b01      	ldr	r3, [pc, #4]	; (8002280 <__errno+0x8>)
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	2000005c 	.word	0x2000005c

08002284 <__libc_init_array>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	4d0d      	ldr	r5, [pc, #52]	; (80022bc <__libc_init_array+0x38>)
 8002288:	4c0d      	ldr	r4, [pc, #52]	; (80022c0 <__libc_init_array+0x3c>)
 800228a:	1b64      	subs	r4, r4, r5
 800228c:	10a4      	asrs	r4, r4, #2
 800228e:	2600      	movs	r6, #0
 8002290:	42a6      	cmp	r6, r4
 8002292:	d109      	bne.n	80022a8 <__libc_init_array+0x24>
 8002294:	4d0b      	ldr	r5, [pc, #44]	; (80022c4 <__libc_init_array+0x40>)
 8002296:	4c0c      	ldr	r4, [pc, #48]	; (80022c8 <__libc_init_array+0x44>)
 8002298:	f000 fbae 	bl	80029f8 <_init>
 800229c:	1b64      	subs	r4, r4, r5
 800229e:	10a4      	asrs	r4, r4, #2
 80022a0:	2600      	movs	r6, #0
 80022a2:	42a6      	cmp	r6, r4
 80022a4:	d105      	bne.n	80022b2 <__libc_init_array+0x2e>
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
 80022a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ac:	4798      	blx	r3
 80022ae:	3601      	adds	r6, #1
 80022b0:	e7ee      	b.n	8002290 <__libc_init_array+0xc>
 80022b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b6:	4798      	blx	r3
 80022b8:	3601      	adds	r6, #1
 80022ba:	e7f2      	b.n	80022a2 <__libc_init_array+0x1e>
 80022bc:	08002c14 	.word	0x08002c14
 80022c0:	08002c14 	.word	0x08002c14
 80022c4:	08002c14 	.word	0x08002c14
 80022c8:	08002c18 	.word	0x08002c18

080022cc <__retarget_lock_acquire_recursive>:
 80022cc:	4770      	bx	lr

080022ce <__retarget_lock_release_recursive>:
 80022ce:	4770      	bx	lr

080022d0 <_free_r>:
 80022d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022d2:	2900      	cmp	r1, #0
 80022d4:	d044      	beq.n	8002360 <_free_r+0x90>
 80022d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022da:	9001      	str	r0, [sp, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f1a1 0404 	sub.w	r4, r1, #4
 80022e2:	bfb8      	it	lt
 80022e4:	18e4      	addlt	r4, r4, r3
 80022e6:	f7ff ff6f 	bl	80021c8 <__malloc_lock>
 80022ea:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <_free_r+0x94>)
 80022ec:	9801      	ldr	r0, [sp, #4]
 80022ee:	6813      	ldr	r3, [r2, #0]
 80022f0:	b933      	cbnz	r3, 8002300 <_free_r+0x30>
 80022f2:	6063      	str	r3, [r4, #4]
 80022f4:	6014      	str	r4, [r2, #0]
 80022f6:	b003      	add	sp, #12
 80022f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80022fc:	f7ff bf6a 	b.w	80021d4 <__malloc_unlock>
 8002300:	42a3      	cmp	r3, r4
 8002302:	d908      	bls.n	8002316 <_free_r+0x46>
 8002304:	6825      	ldr	r5, [r4, #0]
 8002306:	1961      	adds	r1, r4, r5
 8002308:	428b      	cmp	r3, r1
 800230a:	bf01      	itttt	eq
 800230c:	6819      	ldreq	r1, [r3, #0]
 800230e:	685b      	ldreq	r3, [r3, #4]
 8002310:	1949      	addeq	r1, r1, r5
 8002312:	6021      	streq	r1, [r4, #0]
 8002314:	e7ed      	b.n	80022f2 <_free_r+0x22>
 8002316:	461a      	mov	r2, r3
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	b10b      	cbz	r3, 8002320 <_free_r+0x50>
 800231c:	42a3      	cmp	r3, r4
 800231e:	d9fa      	bls.n	8002316 <_free_r+0x46>
 8002320:	6811      	ldr	r1, [r2, #0]
 8002322:	1855      	adds	r5, r2, r1
 8002324:	42a5      	cmp	r5, r4
 8002326:	d10b      	bne.n	8002340 <_free_r+0x70>
 8002328:	6824      	ldr	r4, [r4, #0]
 800232a:	4421      	add	r1, r4
 800232c:	1854      	adds	r4, r2, r1
 800232e:	42a3      	cmp	r3, r4
 8002330:	6011      	str	r1, [r2, #0]
 8002332:	d1e0      	bne.n	80022f6 <_free_r+0x26>
 8002334:	681c      	ldr	r4, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	6053      	str	r3, [r2, #4]
 800233a:	440c      	add	r4, r1
 800233c:	6014      	str	r4, [r2, #0]
 800233e:	e7da      	b.n	80022f6 <_free_r+0x26>
 8002340:	d902      	bls.n	8002348 <_free_r+0x78>
 8002342:	230c      	movs	r3, #12
 8002344:	6003      	str	r3, [r0, #0]
 8002346:	e7d6      	b.n	80022f6 <_free_r+0x26>
 8002348:	6825      	ldr	r5, [r4, #0]
 800234a:	1961      	adds	r1, r4, r5
 800234c:	428b      	cmp	r3, r1
 800234e:	bf04      	itt	eq
 8002350:	6819      	ldreq	r1, [r3, #0]
 8002352:	685b      	ldreq	r3, [r3, #4]
 8002354:	6063      	str	r3, [r4, #4]
 8002356:	bf04      	itt	eq
 8002358:	1949      	addeq	r1, r1, r5
 800235a:	6021      	streq	r1, [r4, #0]
 800235c:	6054      	str	r4, [r2, #4]
 800235e:	e7ca      	b.n	80022f6 <_free_r+0x26>
 8002360:	b003      	add	sp, #12
 8002362:	bd30      	pop	{r4, r5, pc}
 8002364:	20000584 	.word	0x20000584

08002368 <__ssputs_r>:
 8002368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800236c:	688e      	ldr	r6, [r1, #8]
 800236e:	461f      	mov	r7, r3
 8002370:	42be      	cmp	r6, r7
 8002372:	680b      	ldr	r3, [r1, #0]
 8002374:	4682      	mov	sl, r0
 8002376:	460c      	mov	r4, r1
 8002378:	4690      	mov	r8, r2
 800237a:	d82c      	bhi.n	80023d6 <__ssputs_r+0x6e>
 800237c:	898a      	ldrh	r2, [r1, #12]
 800237e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002382:	d026      	beq.n	80023d2 <__ssputs_r+0x6a>
 8002384:	6965      	ldr	r5, [r4, #20]
 8002386:	6909      	ldr	r1, [r1, #16]
 8002388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800238c:	eba3 0901 	sub.w	r9, r3, r1
 8002390:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002394:	1c7b      	adds	r3, r7, #1
 8002396:	444b      	add	r3, r9
 8002398:	106d      	asrs	r5, r5, #1
 800239a:	429d      	cmp	r5, r3
 800239c:	bf38      	it	cc
 800239e:	461d      	movcc	r5, r3
 80023a0:	0553      	lsls	r3, r2, #21
 80023a2:	d527      	bpl.n	80023f4 <__ssputs_r+0x8c>
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7ff fe8f 	bl	80020c8 <_malloc_r>
 80023aa:	4606      	mov	r6, r0
 80023ac:	b360      	cbz	r0, 8002408 <__ssputs_r+0xa0>
 80023ae:	6921      	ldr	r1, [r4, #16]
 80023b0:	464a      	mov	r2, r9
 80023b2:	f000 fadb 	bl	800296c <memcpy>
 80023b6:	89a3      	ldrh	r3, [r4, #12]
 80023b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80023bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c0:	81a3      	strh	r3, [r4, #12]
 80023c2:	6126      	str	r6, [r4, #16]
 80023c4:	6165      	str	r5, [r4, #20]
 80023c6:	444e      	add	r6, r9
 80023c8:	eba5 0509 	sub.w	r5, r5, r9
 80023cc:	6026      	str	r6, [r4, #0]
 80023ce:	60a5      	str	r5, [r4, #8]
 80023d0:	463e      	mov	r6, r7
 80023d2:	42be      	cmp	r6, r7
 80023d4:	d900      	bls.n	80023d8 <__ssputs_r+0x70>
 80023d6:	463e      	mov	r6, r7
 80023d8:	6820      	ldr	r0, [r4, #0]
 80023da:	4632      	mov	r2, r6
 80023dc:	4641      	mov	r1, r8
 80023de:	f000 faab 	bl	8002938 <memmove>
 80023e2:	68a3      	ldr	r3, [r4, #8]
 80023e4:	1b9b      	subs	r3, r3, r6
 80023e6:	60a3      	str	r3, [r4, #8]
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	4433      	add	r3, r6
 80023ec:	6023      	str	r3, [r4, #0]
 80023ee:	2000      	movs	r0, #0
 80023f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023f4:	462a      	mov	r2, r5
 80023f6:	f000 fac7 	bl	8002988 <_realloc_r>
 80023fa:	4606      	mov	r6, r0
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d1e0      	bne.n	80023c2 <__ssputs_r+0x5a>
 8002400:	6921      	ldr	r1, [r4, #16]
 8002402:	4650      	mov	r0, sl
 8002404:	f7ff ff64 	bl	80022d0 <_free_r>
 8002408:	230c      	movs	r3, #12
 800240a:	f8ca 3000 	str.w	r3, [sl]
 800240e:	89a3      	ldrh	r3, [r4, #12]
 8002410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002414:	81a3      	strh	r3, [r4, #12]
 8002416:	f04f 30ff 	mov.w	r0, #4294967295
 800241a:	e7e9      	b.n	80023f0 <__ssputs_r+0x88>

0800241c <_svfiprintf_r>:
 800241c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002420:	4698      	mov	r8, r3
 8002422:	898b      	ldrh	r3, [r1, #12]
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	b09d      	sub	sp, #116	; 0x74
 8002428:	4607      	mov	r7, r0
 800242a:	460d      	mov	r5, r1
 800242c:	4614      	mov	r4, r2
 800242e:	d50e      	bpl.n	800244e <_svfiprintf_r+0x32>
 8002430:	690b      	ldr	r3, [r1, #16]
 8002432:	b963      	cbnz	r3, 800244e <_svfiprintf_r+0x32>
 8002434:	2140      	movs	r1, #64	; 0x40
 8002436:	f7ff fe47 	bl	80020c8 <_malloc_r>
 800243a:	6028      	str	r0, [r5, #0]
 800243c:	6128      	str	r0, [r5, #16]
 800243e:	b920      	cbnz	r0, 800244a <_svfiprintf_r+0x2e>
 8002440:	230c      	movs	r3, #12
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	e0d0      	b.n	80025ec <_svfiprintf_r+0x1d0>
 800244a:	2340      	movs	r3, #64	; 0x40
 800244c:	616b      	str	r3, [r5, #20]
 800244e:	2300      	movs	r3, #0
 8002450:	9309      	str	r3, [sp, #36]	; 0x24
 8002452:	2320      	movs	r3, #32
 8002454:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002458:	f8cd 800c 	str.w	r8, [sp, #12]
 800245c:	2330      	movs	r3, #48	; 0x30
 800245e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002604 <_svfiprintf_r+0x1e8>
 8002462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002466:	f04f 0901 	mov.w	r9, #1
 800246a:	4623      	mov	r3, r4
 800246c:	469a      	mov	sl, r3
 800246e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002472:	b10a      	cbz	r2, 8002478 <_svfiprintf_r+0x5c>
 8002474:	2a25      	cmp	r2, #37	; 0x25
 8002476:	d1f9      	bne.n	800246c <_svfiprintf_r+0x50>
 8002478:	ebba 0b04 	subs.w	fp, sl, r4
 800247c:	d00b      	beq.n	8002496 <_svfiprintf_r+0x7a>
 800247e:	465b      	mov	r3, fp
 8002480:	4622      	mov	r2, r4
 8002482:	4629      	mov	r1, r5
 8002484:	4638      	mov	r0, r7
 8002486:	f7ff ff6f 	bl	8002368 <__ssputs_r>
 800248a:	3001      	adds	r0, #1
 800248c:	f000 80a9 	beq.w	80025e2 <_svfiprintf_r+0x1c6>
 8002490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002492:	445a      	add	r2, fp
 8002494:	9209      	str	r2, [sp, #36]	; 0x24
 8002496:	f89a 3000 	ldrb.w	r3, [sl]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80a1 	beq.w	80025e2 <_svfiprintf_r+0x1c6>
 80024a0:	2300      	movs	r3, #0
 80024a2:	f04f 32ff 	mov.w	r2, #4294967295
 80024a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024aa:	f10a 0a01 	add.w	sl, sl, #1
 80024ae:	9304      	str	r3, [sp, #16]
 80024b0:	9307      	str	r3, [sp, #28]
 80024b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024b6:	931a      	str	r3, [sp, #104]	; 0x68
 80024b8:	4654      	mov	r4, sl
 80024ba:	2205      	movs	r2, #5
 80024bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024c0:	4850      	ldr	r0, [pc, #320]	; (8002604 <_svfiprintf_r+0x1e8>)
 80024c2:	f7fd fe8d 	bl	80001e0 <memchr>
 80024c6:	9a04      	ldr	r2, [sp, #16]
 80024c8:	b9d8      	cbnz	r0, 8002502 <_svfiprintf_r+0xe6>
 80024ca:	06d0      	lsls	r0, r2, #27
 80024cc:	bf44      	itt	mi
 80024ce:	2320      	movmi	r3, #32
 80024d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024d4:	0711      	lsls	r1, r2, #28
 80024d6:	bf44      	itt	mi
 80024d8:	232b      	movmi	r3, #43	; 0x2b
 80024da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024de:	f89a 3000 	ldrb.w	r3, [sl]
 80024e2:	2b2a      	cmp	r3, #42	; 0x2a
 80024e4:	d015      	beq.n	8002512 <_svfiprintf_r+0xf6>
 80024e6:	9a07      	ldr	r2, [sp, #28]
 80024e8:	4654      	mov	r4, sl
 80024ea:	2000      	movs	r0, #0
 80024ec:	f04f 0c0a 	mov.w	ip, #10
 80024f0:	4621      	mov	r1, r4
 80024f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024f6:	3b30      	subs	r3, #48	; 0x30
 80024f8:	2b09      	cmp	r3, #9
 80024fa:	d94d      	bls.n	8002598 <_svfiprintf_r+0x17c>
 80024fc:	b1b0      	cbz	r0, 800252c <_svfiprintf_r+0x110>
 80024fe:	9207      	str	r2, [sp, #28]
 8002500:	e014      	b.n	800252c <_svfiprintf_r+0x110>
 8002502:	eba0 0308 	sub.w	r3, r0, r8
 8002506:	fa09 f303 	lsl.w	r3, r9, r3
 800250a:	4313      	orrs	r3, r2
 800250c:	9304      	str	r3, [sp, #16]
 800250e:	46a2      	mov	sl, r4
 8002510:	e7d2      	b.n	80024b8 <_svfiprintf_r+0x9c>
 8002512:	9b03      	ldr	r3, [sp, #12]
 8002514:	1d19      	adds	r1, r3, #4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	9103      	str	r1, [sp, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	bfbb      	ittet	lt
 800251e:	425b      	neglt	r3, r3
 8002520:	f042 0202 	orrlt.w	r2, r2, #2
 8002524:	9307      	strge	r3, [sp, #28]
 8002526:	9307      	strlt	r3, [sp, #28]
 8002528:	bfb8      	it	lt
 800252a:	9204      	strlt	r2, [sp, #16]
 800252c:	7823      	ldrb	r3, [r4, #0]
 800252e:	2b2e      	cmp	r3, #46	; 0x2e
 8002530:	d10c      	bne.n	800254c <_svfiprintf_r+0x130>
 8002532:	7863      	ldrb	r3, [r4, #1]
 8002534:	2b2a      	cmp	r3, #42	; 0x2a
 8002536:	d134      	bne.n	80025a2 <_svfiprintf_r+0x186>
 8002538:	9b03      	ldr	r3, [sp, #12]
 800253a:	1d1a      	adds	r2, r3, #4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	9203      	str	r2, [sp, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	bfb8      	it	lt
 8002544:	f04f 33ff 	movlt.w	r3, #4294967295
 8002548:	3402      	adds	r4, #2
 800254a:	9305      	str	r3, [sp, #20]
 800254c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002614 <_svfiprintf_r+0x1f8>
 8002550:	7821      	ldrb	r1, [r4, #0]
 8002552:	2203      	movs	r2, #3
 8002554:	4650      	mov	r0, sl
 8002556:	f7fd fe43 	bl	80001e0 <memchr>
 800255a:	b138      	cbz	r0, 800256c <_svfiprintf_r+0x150>
 800255c:	9b04      	ldr	r3, [sp, #16]
 800255e:	eba0 000a 	sub.w	r0, r0, sl
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	4082      	lsls	r2, r0
 8002566:	4313      	orrs	r3, r2
 8002568:	3401      	adds	r4, #1
 800256a:	9304      	str	r3, [sp, #16]
 800256c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002570:	4825      	ldr	r0, [pc, #148]	; (8002608 <_svfiprintf_r+0x1ec>)
 8002572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002576:	2206      	movs	r2, #6
 8002578:	f7fd fe32 	bl	80001e0 <memchr>
 800257c:	2800      	cmp	r0, #0
 800257e:	d038      	beq.n	80025f2 <_svfiprintf_r+0x1d6>
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <_svfiprintf_r+0x1f0>)
 8002582:	bb1b      	cbnz	r3, 80025cc <_svfiprintf_r+0x1b0>
 8002584:	9b03      	ldr	r3, [sp, #12]
 8002586:	3307      	adds	r3, #7
 8002588:	f023 0307 	bic.w	r3, r3, #7
 800258c:	3308      	adds	r3, #8
 800258e:	9303      	str	r3, [sp, #12]
 8002590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002592:	4433      	add	r3, r6
 8002594:	9309      	str	r3, [sp, #36]	; 0x24
 8002596:	e768      	b.n	800246a <_svfiprintf_r+0x4e>
 8002598:	fb0c 3202 	mla	r2, ip, r2, r3
 800259c:	460c      	mov	r4, r1
 800259e:	2001      	movs	r0, #1
 80025a0:	e7a6      	b.n	80024f0 <_svfiprintf_r+0xd4>
 80025a2:	2300      	movs	r3, #0
 80025a4:	3401      	adds	r4, #1
 80025a6:	9305      	str	r3, [sp, #20]
 80025a8:	4619      	mov	r1, r3
 80025aa:	f04f 0c0a 	mov.w	ip, #10
 80025ae:	4620      	mov	r0, r4
 80025b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025b4:	3a30      	subs	r2, #48	; 0x30
 80025b6:	2a09      	cmp	r2, #9
 80025b8:	d903      	bls.n	80025c2 <_svfiprintf_r+0x1a6>
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0c6      	beq.n	800254c <_svfiprintf_r+0x130>
 80025be:	9105      	str	r1, [sp, #20]
 80025c0:	e7c4      	b.n	800254c <_svfiprintf_r+0x130>
 80025c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80025c6:	4604      	mov	r4, r0
 80025c8:	2301      	movs	r3, #1
 80025ca:	e7f0      	b.n	80025ae <_svfiprintf_r+0x192>
 80025cc:	ab03      	add	r3, sp, #12
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	462a      	mov	r2, r5
 80025d2:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <_svfiprintf_r+0x1f4>)
 80025d4:	a904      	add	r1, sp, #16
 80025d6:	4638      	mov	r0, r7
 80025d8:	f3af 8000 	nop.w
 80025dc:	1c42      	adds	r2, r0, #1
 80025de:	4606      	mov	r6, r0
 80025e0:	d1d6      	bne.n	8002590 <_svfiprintf_r+0x174>
 80025e2:	89ab      	ldrh	r3, [r5, #12]
 80025e4:	065b      	lsls	r3, r3, #25
 80025e6:	f53f af2d 	bmi.w	8002444 <_svfiprintf_r+0x28>
 80025ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025ec:	b01d      	add	sp, #116	; 0x74
 80025ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f2:	ab03      	add	r3, sp, #12
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	462a      	mov	r2, r5
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <_svfiprintf_r+0x1f4>)
 80025fa:	a904      	add	r1, sp, #16
 80025fc:	4638      	mov	r0, r7
 80025fe:	f000 f879 	bl	80026f4 <_printf_i>
 8002602:	e7eb      	b.n	80025dc <_svfiprintf_r+0x1c0>
 8002604:	08002bd6 	.word	0x08002bd6
 8002608:	08002be0 	.word	0x08002be0
 800260c:	00000000 	.word	0x00000000
 8002610:	08002369 	.word	0x08002369
 8002614:	08002bdc 	.word	0x08002bdc

08002618 <_printf_common>:
 8002618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800261c:	4616      	mov	r6, r2
 800261e:	4699      	mov	r9, r3
 8002620:	688a      	ldr	r2, [r1, #8]
 8002622:	690b      	ldr	r3, [r1, #16]
 8002624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002628:	4293      	cmp	r3, r2
 800262a:	bfb8      	it	lt
 800262c:	4613      	movlt	r3, r2
 800262e:	6033      	str	r3, [r6, #0]
 8002630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002634:	4607      	mov	r7, r0
 8002636:	460c      	mov	r4, r1
 8002638:	b10a      	cbz	r2, 800263e <_printf_common+0x26>
 800263a:	3301      	adds	r3, #1
 800263c:	6033      	str	r3, [r6, #0]
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	0699      	lsls	r1, r3, #26
 8002642:	bf42      	ittt	mi
 8002644:	6833      	ldrmi	r3, [r6, #0]
 8002646:	3302      	addmi	r3, #2
 8002648:	6033      	strmi	r3, [r6, #0]
 800264a:	6825      	ldr	r5, [r4, #0]
 800264c:	f015 0506 	ands.w	r5, r5, #6
 8002650:	d106      	bne.n	8002660 <_printf_common+0x48>
 8002652:	f104 0a19 	add.w	sl, r4, #25
 8002656:	68e3      	ldr	r3, [r4, #12]
 8002658:	6832      	ldr	r2, [r6, #0]
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	42ab      	cmp	r3, r5
 800265e:	dc26      	bgt.n	80026ae <_printf_common+0x96>
 8002660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002664:	1e13      	subs	r3, r2, #0
 8002666:	6822      	ldr	r2, [r4, #0]
 8002668:	bf18      	it	ne
 800266a:	2301      	movne	r3, #1
 800266c:	0692      	lsls	r2, r2, #26
 800266e:	d42b      	bmi.n	80026c8 <_printf_common+0xb0>
 8002670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002674:	4649      	mov	r1, r9
 8002676:	4638      	mov	r0, r7
 8002678:	47c0      	blx	r8
 800267a:	3001      	adds	r0, #1
 800267c:	d01e      	beq.n	80026bc <_printf_common+0xa4>
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	6922      	ldr	r2, [r4, #16]
 8002682:	f003 0306 	and.w	r3, r3, #6
 8002686:	2b04      	cmp	r3, #4
 8002688:	bf02      	ittt	eq
 800268a:	68e5      	ldreq	r5, [r4, #12]
 800268c:	6833      	ldreq	r3, [r6, #0]
 800268e:	1aed      	subeq	r5, r5, r3
 8002690:	68a3      	ldr	r3, [r4, #8]
 8002692:	bf0c      	ite	eq
 8002694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002698:	2500      	movne	r5, #0
 800269a:	4293      	cmp	r3, r2
 800269c:	bfc4      	itt	gt
 800269e:	1a9b      	subgt	r3, r3, r2
 80026a0:	18ed      	addgt	r5, r5, r3
 80026a2:	2600      	movs	r6, #0
 80026a4:	341a      	adds	r4, #26
 80026a6:	42b5      	cmp	r5, r6
 80026a8:	d11a      	bne.n	80026e0 <_printf_common+0xc8>
 80026aa:	2000      	movs	r0, #0
 80026ac:	e008      	b.n	80026c0 <_printf_common+0xa8>
 80026ae:	2301      	movs	r3, #1
 80026b0:	4652      	mov	r2, sl
 80026b2:	4649      	mov	r1, r9
 80026b4:	4638      	mov	r0, r7
 80026b6:	47c0      	blx	r8
 80026b8:	3001      	adds	r0, #1
 80026ba:	d103      	bne.n	80026c4 <_printf_common+0xac>
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c4:	3501      	adds	r5, #1
 80026c6:	e7c6      	b.n	8002656 <_printf_common+0x3e>
 80026c8:	18e1      	adds	r1, r4, r3
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	2030      	movs	r0, #48	; 0x30
 80026ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026d2:	4422      	add	r2, r4
 80026d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026dc:	3302      	adds	r3, #2
 80026de:	e7c7      	b.n	8002670 <_printf_common+0x58>
 80026e0:	2301      	movs	r3, #1
 80026e2:	4622      	mov	r2, r4
 80026e4:	4649      	mov	r1, r9
 80026e6:	4638      	mov	r0, r7
 80026e8:	47c0      	blx	r8
 80026ea:	3001      	adds	r0, #1
 80026ec:	d0e6      	beq.n	80026bc <_printf_common+0xa4>
 80026ee:	3601      	adds	r6, #1
 80026f0:	e7d9      	b.n	80026a6 <_printf_common+0x8e>
	...

080026f4 <_printf_i>:
 80026f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026f8:	7e0f      	ldrb	r7, [r1, #24]
 80026fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026fc:	2f78      	cmp	r7, #120	; 0x78
 80026fe:	4691      	mov	r9, r2
 8002700:	4680      	mov	r8, r0
 8002702:	460c      	mov	r4, r1
 8002704:	469a      	mov	sl, r3
 8002706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800270a:	d807      	bhi.n	800271c <_printf_i+0x28>
 800270c:	2f62      	cmp	r7, #98	; 0x62
 800270e:	d80a      	bhi.n	8002726 <_printf_i+0x32>
 8002710:	2f00      	cmp	r7, #0
 8002712:	f000 80d4 	beq.w	80028be <_printf_i+0x1ca>
 8002716:	2f58      	cmp	r7, #88	; 0x58
 8002718:	f000 80c0 	beq.w	800289c <_printf_i+0x1a8>
 800271c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002724:	e03a      	b.n	800279c <_printf_i+0xa8>
 8002726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800272a:	2b15      	cmp	r3, #21
 800272c:	d8f6      	bhi.n	800271c <_printf_i+0x28>
 800272e:	a101      	add	r1, pc, #4	; (adr r1, 8002734 <_printf_i+0x40>)
 8002730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002734:	0800278d 	.word	0x0800278d
 8002738:	080027a1 	.word	0x080027a1
 800273c:	0800271d 	.word	0x0800271d
 8002740:	0800271d 	.word	0x0800271d
 8002744:	0800271d 	.word	0x0800271d
 8002748:	0800271d 	.word	0x0800271d
 800274c:	080027a1 	.word	0x080027a1
 8002750:	0800271d 	.word	0x0800271d
 8002754:	0800271d 	.word	0x0800271d
 8002758:	0800271d 	.word	0x0800271d
 800275c:	0800271d 	.word	0x0800271d
 8002760:	080028a5 	.word	0x080028a5
 8002764:	080027cd 	.word	0x080027cd
 8002768:	0800285f 	.word	0x0800285f
 800276c:	0800271d 	.word	0x0800271d
 8002770:	0800271d 	.word	0x0800271d
 8002774:	080028c7 	.word	0x080028c7
 8002778:	0800271d 	.word	0x0800271d
 800277c:	080027cd 	.word	0x080027cd
 8002780:	0800271d 	.word	0x0800271d
 8002784:	0800271d 	.word	0x0800271d
 8002788:	08002867 	.word	0x08002867
 800278c:	682b      	ldr	r3, [r5, #0]
 800278e:	1d1a      	adds	r2, r3, #4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	602a      	str	r2, [r5, #0]
 8002794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800279c:	2301      	movs	r3, #1
 800279e:	e09f      	b.n	80028e0 <_printf_i+0x1ec>
 80027a0:	6820      	ldr	r0, [r4, #0]
 80027a2:	682b      	ldr	r3, [r5, #0]
 80027a4:	0607      	lsls	r7, r0, #24
 80027a6:	f103 0104 	add.w	r1, r3, #4
 80027aa:	6029      	str	r1, [r5, #0]
 80027ac:	d501      	bpl.n	80027b2 <_printf_i+0xbe>
 80027ae:	681e      	ldr	r6, [r3, #0]
 80027b0:	e003      	b.n	80027ba <_printf_i+0xc6>
 80027b2:	0646      	lsls	r6, r0, #25
 80027b4:	d5fb      	bpl.n	80027ae <_printf_i+0xba>
 80027b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80027ba:	2e00      	cmp	r6, #0
 80027bc:	da03      	bge.n	80027c6 <_printf_i+0xd2>
 80027be:	232d      	movs	r3, #45	; 0x2d
 80027c0:	4276      	negs	r6, r6
 80027c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027c6:	485a      	ldr	r0, [pc, #360]	; (8002930 <_printf_i+0x23c>)
 80027c8:	230a      	movs	r3, #10
 80027ca:	e012      	b.n	80027f2 <_printf_i+0xfe>
 80027cc:	682b      	ldr	r3, [r5, #0]
 80027ce:	6820      	ldr	r0, [r4, #0]
 80027d0:	1d19      	adds	r1, r3, #4
 80027d2:	6029      	str	r1, [r5, #0]
 80027d4:	0605      	lsls	r5, r0, #24
 80027d6:	d501      	bpl.n	80027dc <_printf_i+0xe8>
 80027d8:	681e      	ldr	r6, [r3, #0]
 80027da:	e002      	b.n	80027e2 <_printf_i+0xee>
 80027dc:	0641      	lsls	r1, r0, #25
 80027de:	d5fb      	bpl.n	80027d8 <_printf_i+0xe4>
 80027e0:	881e      	ldrh	r6, [r3, #0]
 80027e2:	4853      	ldr	r0, [pc, #332]	; (8002930 <_printf_i+0x23c>)
 80027e4:	2f6f      	cmp	r7, #111	; 0x6f
 80027e6:	bf0c      	ite	eq
 80027e8:	2308      	moveq	r3, #8
 80027ea:	230a      	movne	r3, #10
 80027ec:	2100      	movs	r1, #0
 80027ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027f2:	6865      	ldr	r5, [r4, #4]
 80027f4:	60a5      	str	r5, [r4, #8]
 80027f6:	2d00      	cmp	r5, #0
 80027f8:	bfa2      	ittt	ge
 80027fa:	6821      	ldrge	r1, [r4, #0]
 80027fc:	f021 0104 	bicge.w	r1, r1, #4
 8002800:	6021      	strge	r1, [r4, #0]
 8002802:	b90e      	cbnz	r6, 8002808 <_printf_i+0x114>
 8002804:	2d00      	cmp	r5, #0
 8002806:	d04b      	beq.n	80028a0 <_printf_i+0x1ac>
 8002808:	4615      	mov	r5, r2
 800280a:	fbb6 f1f3 	udiv	r1, r6, r3
 800280e:	fb03 6711 	mls	r7, r3, r1, r6
 8002812:	5dc7      	ldrb	r7, [r0, r7]
 8002814:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002818:	4637      	mov	r7, r6
 800281a:	42bb      	cmp	r3, r7
 800281c:	460e      	mov	r6, r1
 800281e:	d9f4      	bls.n	800280a <_printf_i+0x116>
 8002820:	2b08      	cmp	r3, #8
 8002822:	d10b      	bne.n	800283c <_printf_i+0x148>
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	07de      	lsls	r6, r3, #31
 8002828:	d508      	bpl.n	800283c <_printf_i+0x148>
 800282a:	6923      	ldr	r3, [r4, #16]
 800282c:	6861      	ldr	r1, [r4, #4]
 800282e:	4299      	cmp	r1, r3
 8002830:	bfde      	ittt	le
 8002832:	2330      	movle	r3, #48	; 0x30
 8002834:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002838:	f105 35ff 	addle.w	r5, r5, #4294967295
 800283c:	1b52      	subs	r2, r2, r5
 800283e:	6122      	str	r2, [r4, #16]
 8002840:	f8cd a000 	str.w	sl, [sp]
 8002844:	464b      	mov	r3, r9
 8002846:	aa03      	add	r2, sp, #12
 8002848:	4621      	mov	r1, r4
 800284a:	4640      	mov	r0, r8
 800284c:	f7ff fee4 	bl	8002618 <_printf_common>
 8002850:	3001      	adds	r0, #1
 8002852:	d14a      	bne.n	80028ea <_printf_i+0x1f6>
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	b004      	add	sp, #16
 800285a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	f043 0320 	orr.w	r3, r3, #32
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	4833      	ldr	r0, [pc, #204]	; (8002934 <_printf_i+0x240>)
 8002868:	2778      	movs	r7, #120	; 0x78
 800286a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	6829      	ldr	r1, [r5, #0]
 8002872:	061f      	lsls	r7, r3, #24
 8002874:	f851 6b04 	ldr.w	r6, [r1], #4
 8002878:	d402      	bmi.n	8002880 <_printf_i+0x18c>
 800287a:	065f      	lsls	r7, r3, #25
 800287c:	bf48      	it	mi
 800287e:	b2b6      	uxthmi	r6, r6
 8002880:	07df      	lsls	r7, r3, #31
 8002882:	bf48      	it	mi
 8002884:	f043 0320 	orrmi.w	r3, r3, #32
 8002888:	6029      	str	r1, [r5, #0]
 800288a:	bf48      	it	mi
 800288c:	6023      	strmi	r3, [r4, #0]
 800288e:	b91e      	cbnz	r6, 8002898 <_printf_i+0x1a4>
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	f023 0320 	bic.w	r3, r3, #32
 8002896:	6023      	str	r3, [r4, #0]
 8002898:	2310      	movs	r3, #16
 800289a:	e7a7      	b.n	80027ec <_printf_i+0xf8>
 800289c:	4824      	ldr	r0, [pc, #144]	; (8002930 <_printf_i+0x23c>)
 800289e:	e7e4      	b.n	800286a <_printf_i+0x176>
 80028a0:	4615      	mov	r5, r2
 80028a2:	e7bd      	b.n	8002820 <_printf_i+0x12c>
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	6826      	ldr	r6, [r4, #0]
 80028a8:	6961      	ldr	r1, [r4, #20]
 80028aa:	1d18      	adds	r0, r3, #4
 80028ac:	6028      	str	r0, [r5, #0]
 80028ae:	0635      	lsls	r5, r6, #24
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	d501      	bpl.n	80028b8 <_printf_i+0x1c4>
 80028b4:	6019      	str	r1, [r3, #0]
 80028b6:	e002      	b.n	80028be <_printf_i+0x1ca>
 80028b8:	0670      	lsls	r0, r6, #25
 80028ba:	d5fb      	bpl.n	80028b4 <_printf_i+0x1c0>
 80028bc:	8019      	strh	r1, [r3, #0]
 80028be:	2300      	movs	r3, #0
 80028c0:	6123      	str	r3, [r4, #16]
 80028c2:	4615      	mov	r5, r2
 80028c4:	e7bc      	b.n	8002840 <_printf_i+0x14c>
 80028c6:	682b      	ldr	r3, [r5, #0]
 80028c8:	1d1a      	adds	r2, r3, #4
 80028ca:	602a      	str	r2, [r5, #0]
 80028cc:	681d      	ldr	r5, [r3, #0]
 80028ce:	6862      	ldr	r2, [r4, #4]
 80028d0:	2100      	movs	r1, #0
 80028d2:	4628      	mov	r0, r5
 80028d4:	f7fd fc84 	bl	80001e0 <memchr>
 80028d8:	b108      	cbz	r0, 80028de <_printf_i+0x1ea>
 80028da:	1b40      	subs	r0, r0, r5
 80028dc:	6060      	str	r0, [r4, #4]
 80028de:	6863      	ldr	r3, [r4, #4]
 80028e0:	6123      	str	r3, [r4, #16]
 80028e2:	2300      	movs	r3, #0
 80028e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028e8:	e7aa      	b.n	8002840 <_printf_i+0x14c>
 80028ea:	6923      	ldr	r3, [r4, #16]
 80028ec:	462a      	mov	r2, r5
 80028ee:	4649      	mov	r1, r9
 80028f0:	4640      	mov	r0, r8
 80028f2:	47d0      	blx	sl
 80028f4:	3001      	adds	r0, #1
 80028f6:	d0ad      	beq.n	8002854 <_printf_i+0x160>
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	079b      	lsls	r3, r3, #30
 80028fc:	d413      	bmi.n	8002926 <_printf_i+0x232>
 80028fe:	68e0      	ldr	r0, [r4, #12]
 8002900:	9b03      	ldr	r3, [sp, #12]
 8002902:	4298      	cmp	r0, r3
 8002904:	bfb8      	it	lt
 8002906:	4618      	movlt	r0, r3
 8002908:	e7a6      	b.n	8002858 <_printf_i+0x164>
 800290a:	2301      	movs	r3, #1
 800290c:	4632      	mov	r2, r6
 800290e:	4649      	mov	r1, r9
 8002910:	4640      	mov	r0, r8
 8002912:	47d0      	blx	sl
 8002914:	3001      	adds	r0, #1
 8002916:	d09d      	beq.n	8002854 <_printf_i+0x160>
 8002918:	3501      	adds	r5, #1
 800291a:	68e3      	ldr	r3, [r4, #12]
 800291c:	9903      	ldr	r1, [sp, #12]
 800291e:	1a5b      	subs	r3, r3, r1
 8002920:	42ab      	cmp	r3, r5
 8002922:	dcf2      	bgt.n	800290a <_printf_i+0x216>
 8002924:	e7eb      	b.n	80028fe <_printf_i+0x20a>
 8002926:	2500      	movs	r5, #0
 8002928:	f104 0619 	add.w	r6, r4, #25
 800292c:	e7f5      	b.n	800291a <_printf_i+0x226>
 800292e:	bf00      	nop
 8002930:	08002be7 	.word	0x08002be7
 8002934:	08002bf8 	.word	0x08002bf8

08002938 <memmove>:
 8002938:	4288      	cmp	r0, r1
 800293a:	b510      	push	{r4, lr}
 800293c:	eb01 0402 	add.w	r4, r1, r2
 8002940:	d902      	bls.n	8002948 <memmove+0x10>
 8002942:	4284      	cmp	r4, r0
 8002944:	4623      	mov	r3, r4
 8002946:	d807      	bhi.n	8002958 <memmove+0x20>
 8002948:	1e43      	subs	r3, r0, #1
 800294a:	42a1      	cmp	r1, r4
 800294c:	d008      	beq.n	8002960 <memmove+0x28>
 800294e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002952:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002956:	e7f8      	b.n	800294a <memmove+0x12>
 8002958:	4402      	add	r2, r0
 800295a:	4601      	mov	r1, r0
 800295c:	428a      	cmp	r2, r1
 800295e:	d100      	bne.n	8002962 <memmove+0x2a>
 8002960:	bd10      	pop	{r4, pc}
 8002962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800296a:	e7f7      	b.n	800295c <memmove+0x24>

0800296c <memcpy>:
 800296c:	440a      	add	r2, r1
 800296e:	4291      	cmp	r1, r2
 8002970:	f100 33ff 	add.w	r3, r0, #4294967295
 8002974:	d100      	bne.n	8002978 <memcpy+0xc>
 8002976:	4770      	bx	lr
 8002978:	b510      	push	{r4, lr}
 800297a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800297e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002982:	4291      	cmp	r1, r2
 8002984:	d1f9      	bne.n	800297a <memcpy+0xe>
 8002986:	bd10      	pop	{r4, pc}

08002988 <_realloc_r>:
 8002988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800298c:	4680      	mov	r8, r0
 800298e:	4614      	mov	r4, r2
 8002990:	460e      	mov	r6, r1
 8002992:	b921      	cbnz	r1, 800299e <_realloc_r+0x16>
 8002994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002998:	4611      	mov	r1, r2
 800299a:	f7ff bb95 	b.w	80020c8 <_malloc_r>
 800299e:	b92a      	cbnz	r2, 80029ac <_realloc_r+0x24>
 80029a0:	f7ff fc96 	bl	80022d0 <_free_r>
 80029a4:	4625      	mov	r5, r4
 80029a6:	4628      	mov	r0, r5
 80029a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029ac:	f000 f81b 	bl	80029e6 <_malloc_usable_size_r>
 80029b0:	4284      	cmp	r4, r0
 80029b2:	4607      	mov	r7, r0
 80029b4:	d802      	bhi.n	80029bc <_realloc_r+0x34>
 80029b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80029ba:	d812      	bhi.n	80029e2 <_realloc_r+0x5a>
 80029bc:	4621      	mov	r1, r4
 80029be:	4640      	mov	r0, r8
 80029c0:	f7ff fb82 	bl	80020c8 <_malloc_r>
 80029c4:	4605      	mov	r5, r0
 80029c6:	2800      	cmp	r0, #0
 80029c8:	d0ed      	beq.n	80029a6 <_realloc_r+0x1e>
 80029ca:	42bc      	cmp	r4, r7
 80029cc:	4622      	mov	r2, r4
 80029ce:	4631      	mov	r1, r6
 80029d0:	bf28      	it	cs
 80029d2:	463a      	movcs	r2, r7
 80029d4:	f7ff ffca 	bl	800296c <memcpy>
 80029d8:	4631      	mov	r1, r6
 80029da:	4640      	mov	r0, r8
 80029dc:	f7ff fc78 	bl	80022d0 <_free_r>
 80029e0:	e7e1      	b.n	80029a6 <_realloc_r+0x1e>
 80029e2:	4635      	mov	r5, r6
 80029e4:	e7df      	b.n	80029a6 <_realloc_r+0x1e>

080029e6 <_malloc_usable_size_r>:
 80029e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029ea:	1f18      	subs	r0, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bfbc      	itt	lt
 80029f0:	580b      	ldrlt	r3, [r1, r0]
 80029f2:	18c0      	addlt	r0, r0, r3
 80029f4:	4770      	bx	lr
	...

080029f8 <_init>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	bf00      	nop
 80029fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fe:	bc08      	pop	{r3}
 8002a00:	469e      	mov	lr, r3
 8002a02:	4770      	bx	lr

08002a04 <_fini>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr
