
MPPT_Solar_Charge_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004628  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca0  08004ca0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca8  08004ca8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca8  08004ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000007f0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000850  20000850  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00027112  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000049a2  00000000  00000000  000471e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000b96e  00000000  00000000  0004bb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001120  00000000  00000000  000574f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001101  00000000  00000000  00058618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029345  00000000  00000000  00059719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00023175  00000000  00000000  00082a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ec837  00000000  00000000  000a5bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003d08  00000000  00000000  0019240c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000078  00000000  00000000  00196114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047a0 	.word	0x080047a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080047a0 	.word	0x080047a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b970 	b.w	8000d14 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9e08      	ldr	r6, [sp, #32]
 8000a52:	460d      	mov	r5, r1
 8000a54:	4604      	mov	r4, r0
 8000a56:	460f      	mov	r7, r1
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d14a      	bne.n	8000af2 <__udivmoddi4+0xa6>
 8000a5c:	428a      	cmp	r2, r1
 8000a5e:	4694      	mov	ip, r2
 8000a60:	d965      	bls.n	8000b2e <__udivmoddi4+0xe2>
 8000a62:	fab2 f382 	clz	r3, r2
 8000a66:	b143      	cbz	r3, 8000a7a <__udivmoddi4+0x2e>
 8000a68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a6c:	f1c3 0220 	rsb	r2, r3, #32
 8000a70:	409f      	lsls	r7, r3
 8000a72:	fa20 f202 	lsr.w	r2, r0, r2
 8000a76:	4317      	orrs	r7, r2
 8000a78:	409c      	lsls	r4, r3
 8000a7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a7e:	fa1f f58c 	uxth.w	r5, ip
 8000a82:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a86:	0c22      	lsrs	r2, r4, #16
 8000a88:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a90:	fb01 f005 	mul.w	r0, r1, r5
 8000a94:	4290      	cmp	r0, r2
 8000a96:	d90a      	bls.n	8000aae <__udivmoddi4+0x62>
 8000a98:	eb1c 0202 	adds.w	r2, ip, r2
 8000a9c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000aa0:	f080 811c 	bcs.w	8000cdc <__udivmoddi4+0x290>
 8000aa4:	4290      	cmp	r0, r2
 8000aa6:	f240 8119 	bls.w	8000cdc <__udivmoddi4+0x290>
 8000aaa:	3902      	subs	r1, #2
 8000aac:	4462      	add	r2, ip
 8000aae:	1a12      	subs	r2, r2, r0
 8000ab0:	b2a4      	uxth	r4, r4
 8000ab2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ab6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000abe:	fb00 f505 	mul.w	r5, r0, r5
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	d90a      	bls.n	8000adc <__udivmoddi4+0x90>
 8000ac6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aca:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ace:	f080 8107 	bcs.w	8000ce0 <__udivmoddi4+0x294>
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	f240 8104 	bls.w	8000ce0 <__udivmoddi4+0x294>
 8000ad8:	4464      	add	r4, ip
 8000ada:	3802      	subs	r0, #2
 8000adc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ae0:	1b64      	subs	r4, r4, r5
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	b11e      	cbz	r6, 8000aee <__udivmoddi4+0xa2>
 8000ae6:	40dc      	lsrs	r4, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e9c6 4300 	strd	r4, r3, [r6]
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0xbc>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	f000 80ed 	beq.w	8000cd6 <__udivmoddi4+0x28a>
 8000afc:	2100      	movs	r1, #0
 8000afe:	e9c6 0500 	strd	r0, r5, [r6]
 8000b02:	4608      	mov	r0, r1
 8000b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b08:	fab3 f183 	clz	r1, r3
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	d149      	bne.n	8000ba4 <__udivmoddi4+0x158>
 8000b10:	42ab      	cmp	r3, r5
 8000b12:	d302      	bcc.n	8000b1a <__udivmoddi4+0xce>
 8000b14:	4282      	cmp	r2, r0
 8000b16:	f200 80f8 	bhi.w	8000d0a <__udivmoddi4+0x2be>
 8000b1a:	1a84      	subs	r4, r0, r2
 8000b1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b20:	2001      	movs	r0, #1
 8000b22:	4617      	mov	r7, r2
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	d0e2      	beq.n	8000aee <__udivmoddi4+0xa2>
 8000b28:	e9c6 4700 	strd	r4, r7, [r6]
 8000b2c:	e7df      	b.n	8000aee <__udivmoddi4+0xa2>
 8000b2e:	b902      	cbnz	r2, 8000b32 <__udivmoddi4+0xe6>
 8000b30:	deff      	udf	#255	; 0xff
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8090 	bne.w	8000c5c <__udivmoddi4+0x210>
 8000b3c:	1a8a      	subs	r2, r1, r2
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2101      	movs	r1, #1
 8000b48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b50:	0c22      	lsrs	r2, r4, #16
 8000b52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b56:	fb0e f005 	mul.w	r0, lr, r5
 8000b5a:	4290      	cmp	r0, r2
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x124>
 8000b5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x122>
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2b8>
 8000b6e:	4645      	mov	r5, r8
 8000b70:	1a12      	subs	r2, r2, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b78:	fb07 2210 	mls	r2, r7, r0, r2
 8000b7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x14e>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x14c>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2c2>
 8000b98:	4610      	mov	r0, r2
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ba2:	e79f      	b.n	8000ae4 <__udivmoddi4+0x98>
 8000ba4:	f1c1 0720 	rsb	r7, r1, #32
 8000ba8:	408b      	lsls	r3, r1
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bb6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bba:	40fd      	lsrs	r5, r7
 8000bbc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc0:	4323      	orrs	r3, r4
 8000bc2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bc6:	fa1f fe8c 	uxth.w	lr, ip
 8000bca:	fb09 5518 	mls	r5, r9, r8, r5
 8000bce:	0c1c      	lsrs	r4, r3, #16
 8000bd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bd4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	fa02 f201 	lsl.w	r2, r2, r1
 8000bde:	fa00 f001 	lsl.w	r0, r0, r1
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b0>
 8000be4:	eb1c 0404 	adds.w	r4, ip, r4
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2b4>
 8000bf0:	42a5      	cmp	r5, r4
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2b4>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4464      	add	r4, ip
 8000bfc:	1b64      	subs	r4, r4, r5
 8000bfe:	b29d      	uxth	r5, r3
 8000c00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c04:	fb09 4413 	mls	r4, r9, r3, r4
 8000c08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1da>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2ac>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2ac>
 8000c22:	3b02      	subs	r3, #2
 8000c24:	4464      	add	r4, ip
 8000c26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c2e:	eba4 040e 	sub.w	r4, r4, lr
 8000c32:	42ac      	cmp	r4, r5
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46ae      	mov	lr, r5
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x29c>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x298>
 8000c3c:	b156      	cbz	r6, 8000c54 <__udivmoddi4+0x208>
 8000c3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c42:	eb64 040e 	sbc.w	r4, r4, lr
 8000c46:	fa04 f707 	lsl.w	r7, r4, r7
 8000c4a:	40ca      	lsrs	r2, r1
 8000c4c:	40cc      	lsrs	r4, r1
 8000c4e:	4317      	orrs	r7, r2
 8000c50:	e9c6 7400 	strd	r7, r4, [r6]
 8000c54:	4618      	mov	r0, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5c:	f1c3 0120 	rsb	r1, r3, #32
 8000c60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c64:	fa20 f201 	lsr.w	r2, r0, r1
 8000c68:	fa25 f101 	lsr.w	r1, r5, r1
 8000c6c:	409d      	lsls	r5, r3
 8000c6e:	432a      	orrs	r2, r5
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c80:	0c11      	lsrs	r1, r2, #16
 8000c82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c86:	fb00 f50e 	mul.w	r5, r0, lr
 8000c8a:	428d      	cmp	r5, r1
 8000c8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x258>
 8000c92:	eb1c 0101 	adds.w	r1, ip, r1
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b0>
 8000c9c:	428d      	cmp	r5, r1
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b0>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1b49      	subs	r1, r1, r5
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cac:	fb07 1115 	mls	r1, r7, r5, r1
 8000cb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cb8:	4291      	cmp	r1, r2
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x282>
 8000cbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2a8>
 8000cc6:	4291      	cmp	r1, r2
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2a8>
 8000cca:	3d02      	subs	r5, #2
 8000ccc:	4462      	add	r2, ip
 8000cce:	1a52      	subs	r2, r2, r1
 8000cd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0xfc>
 8000cd6:	4631      	mov	r1, r6
 8000cd8:	4630      	mov	r0, r6
 8000cda:	e708      	b.n	8000aee <__udivmoddi4+0xa2>
 8000cdc:	4639      	mov	r1, r7
 8000cde:	e6e6      	b.n	8000aae <__udivmoddi4+0x62>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	e6fb      	b.n	8000adc <__udivmoddi4+0x90>
 8000ce4:	4548      	cmp	r0, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f0>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f0>
 8000cf4:	4645      	mov	r5, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x282>
 8000cf8:	462b      	mov	r3, r5
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1da>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x258>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b0>
 8000d04:	3d02      	subs	r5, #2
 8000d06:	4462      	add	r2, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x124>
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e70a      	b.n	8000b24 <__udivmoddi4+0xd8>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x14e>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <_ZN4blib6AnalogD1Ev>:
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
    {
        sampling();
    }

    Analog::~Analog()
 8000d18:	b510      	push	{r4, lr}
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <_ZN4blib6AnalogD1Ev+0x14>)
 8000d1c:	6003      	str	r3, [r0, #0]
 8000d1e:	4604      	mov	r4, r0
    {
        HAL_ADC_Stop_DMA(mHadc);
 8000d20:	6980      	ldr	r0, [r0, #24]
 8000d22:	f001 f97b 	bl	800201c <HAL_ADC_Stop_DMA>
    }
 8000d26:	4620      	mov	r0, r4
 8000d28:	bd10      	pop	{r4, pc}
 8000d2a:	bf00      	nop
 8000d2c:	08004874 	.word	0x08004874

08000d30 <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8000d30:	b510      	push	{r4, lr}
 8000d32:	4604      	mov	r4, r0
    }
 8000d34:	f7ff fff0 	bl	8000d18 <_ZN4blib6AnalogD1Ev>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	2148      	movs	r1, #72	; 0x48
 8000d3c:	f002 ffff 	bl	8003d3e <_ZdlPvj>
 8000d40:	4620      	mov	r0, r4
 8000d42:	bd10      	pop	{r4, pc}

08000d44 <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 8000d44:	b507      	push	{r0, r1, r2, lr}
 8000d46:	9001      	str	r0, [sp, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8000d48:	f7ff fa42 	bl	80001d0 <strlen>
 8000d4c:	b282      	uxth	r2, r0
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <_ZN4blib6Logger5printEPKc+0x20>)
 8000d50:	9901      	ldr	r1, [sp, #4]
 8000d52:	6800      	ldr	r0, [r0, #0]
 8000d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
            }
 8000d58:	b003      	add	sp, #12
 8000d5a:	f85d eb04 	ldr.w	lr, [sp], #4
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8000d5e:	f002 bf99 	b.w	8003c94 <HAL_UART_Transmit>
 8000d62:	bf00      	nop
 8000d64:	2000000c 	.word	0x2000000c

08000d68 <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 8000d68:	1d01      	adds	r1, r0, #4
 8000d6a:	2205      	movs	r2, #5
 8000d6c:	6980      	ldr	r0, [r0, #24]
 8000d6e:	f001 b8a7 	b.w	8001ec0 <HAL_ADC_Start_DMA>
	...

08000d74 <_ZN4blib6AnalogC1Ev>:
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8000d74:	b510      	push	{r4, lr}
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_ZN4blib6AnalogC1Ev+0x24>)
 8000d78:	4604      	mov	r4, r0
 8000d7a:	2214      	movs	r2, #20
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f840 3b04 	str.w	r3, [r0], #4
 8000d82:	f003 f8f1 	bl	8003f68 <memset>
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <_ZN4blib6AnalogC1Ev+0x28>)
 8000d88:	61a3      	str	r3, [r4, #24]
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <_ZN4blib6AnalogC1Ev+0x2c>)
 8000d8c:	61e3      	str	r3, [r4, #28]
        sampling();
 8000d8e:	4620      	mov	r0, r4
 8000d90:	f7ff ffea 	bl	8000d68 <_ZN4blib6Analog8samplingEv>
    }
 8000d94:	4620      	mov	r0, r4
 8000d96:	bd10      	pop	{r4, pc}
 8000d98:	08004874 	.word	0x08004874
 8000d9c:	20000084 	.word	0x20000084
 8000da0:	200000cc 	.word	0x200000cc

08000da4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8000da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000da8:	ed2d 8b02 	vpush	{d8}
 8000dac:	eeb0 8a40 	vmov.f32	s16, s0
 8000db0:	eef0 8a60 	vmov.f32	s17, s1
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8000db4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8000dfc <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_+0x58>
            static void Log(const char *message, Args ... args)
 8000db8:	b084      	sub	sp, #16
 8000dba:	460d      	mov	r5, r1
 8000dbc:	4616      	mov	r6, r2
 8000dbe:	461f      	mov	r7, r3
 8000dc0:	4604      	mov	r4, r0
                print("[>]  ");
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_+0x50>)
 8000dc4:	f7ff ffbe 	bl	8000d44 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8000dc8:	462b      	mov	r3, r5
 8000dca:	4622      	mov	r2, r4
 8000dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd0:	ed8d 8b02 	vstr	d8, [sp, #8]
 8000dd4:	e9cd 6700 	strd	r6, r7, [sp]
 8000dd8:	4640      	mov	r0, r8
 8000dda:	f003 f891 	bl	8003f00 <sniprintf>
                print(mBuffer);
 8000dde:	4640      	mov	r0, r8
 8000de0:	f7ff ffb0 	bl	8000d44 <_ZN4blib6Logger5printEPKc>
                print("\n");
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_+0x54>)
 8000de6:	f7ff ffad 	bl	8000d44 <_ZN4blib6Logger5printEPKc>
            }
 8000dea:	b004      	add	sp, #16
 8000dec:	ecbd 8b02 	vpop	{d8}
 8000df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000df4:	080047b8 	.word	0x080047b8
 8000df8:	080047be 	.word	0x080047be
 8000dfc:	20000304 	.word	0x20000304

08000e00 <_ZN4blib6Analog10readAnalogEv>:
    {
        return mTemp;
    }

    void Analog::readAnalog()
    {
 8000e00:	b510      	push	{r4, lr}
 8000e02:	4604      	mov	r4, r0
 8000e04:	ed2d 8b02 	vpush	{d8}
        LOGI("mTemp : [%.2f] C", mTemp);
    }

    double Analog::convertAdcChannel1(uint32_t adcValue)    // Convert adcValue -> Vin
    {
        return CHANNEL_1_RATIO * ((double) adcValue / 4095) * 3.3;
 8000e08:	6840      	ldr	r0, [r0, #4]
 8000e0a:	f7ff fb7b 	bl	8000504 <__aeabi_ui2d>
 8000e0e:	a348      	add	r3, pc, #288	; (adr r3, 8000f30 <_ZN4blib6Analog10readAnalogEv+0x130>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	f7ff fd1a 	bl	800084c <__aeabi_ddiv>
 8000e18:	4b47      	ldr	r3, [pc, #284]	; (8000f38 <_ZN4blib6Analog10readAnalogEv+0x138>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f7ff fbec 	bl	80005f8 <__aeabi_dmul>
 8000e20:	a341      	add	r3, pc, #260	; (adr r3, 8000f28 <_ZN4blib6Analog10readAnalogEv+0x128>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	f7ff fbe7 	bl	80005f8 <__aeabi_dmul>
 8000e2a:	ec41 0b18 	vmov	d8, r0, r1
        mVin = convertAdcChannel1(mAdcValues[0]);
 8000e2e:	e9c4 0108 	strd	r0, r1, [r4, #32]
    }

    double Analog::convertAdcChannel2(uint32_t adcValue)    // Convert adcValue -> Iin
    {
        return CHANNEL_2_RATIO * ((double) adcValue / 4095) * 3.3;
 8000e32:	68a0      	ldr	r0, [r4, #8]
 8000e34:	f7ff fb66 	bl	8000504 <__aeabi_ui2d>
 8000e38:	a33d      	add	r3, pc, #244	; (adr r3, 8000f30 <_ZN4blib6Analog10readAnalogEv+0x130>)
 8000e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3e:	f7ff fd05 	bl	800084c <__aeabi_ddiv>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	f7ff fa21 	bl	800028c <__adddf3>
 8000e4a:	a337      	add	r3, pc, #220	; (adr r3, 8000f28 <_ZN4blib6Analog10readAnalogEv+0x128>)
 8000e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e50:	f7ff fbd2 	bl	80005f8 <__aeabi_dmul>
        mIin = convertAdcChannel2(mAdcValues[1]);
 8000e54:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    }
    double Analog::convertAdcChannel3(uint32_t adcValue)    // Convert adcValue -> Vout
    {
        return CHANNEL_3_RATIO * ((double) adcValue / 4095) * 3.3;
 8000e58:	68e0      	ldr	r0, [r4, #12]
 8000e5a:	f7ff fb53 	bl	8000504 <__aeabi_ui2d>
 8000e5e:	a334      	add	r3, pc, #208	; (adr r3, 8000f30 <_ZN4blib6Analog10readAnalogEv+0x130>)
 8000e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e64:	f7ff fcf2 	bl	800084c <__aeabi_ddiv>
 8000e68:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <_ZN4blib6Analog10readAnalogEv+0x13c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f7ff fbc4 	bl	80005f8 <__aeabi_dmul>
 8000e70:	a32d      	add	r3, pc, #180	; (adr r3, 8000f28 <_ZN4blib6Analog10readAnalogEv+0x128>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	f7ff fbbf 	bl	80005f8 <__aeabi_dmul>
        mVout = convertAdcChannel3(mAdcValues[2]);
 8000e7a:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    }
    double Analog::convertAdcChannel4(uint32_t adcValue)    // Convert adcValue -> Iout
    {
        return CHANNEL_4_RATIO * ((double) adcValue / 4095) * 3.3;
 8000e7e:	6920      	ldr	r0, [r4, #16]
 8000e80:	f7ff fb40 	bl	8000504 <__aeabi_ui2d>
 8000e84:	a32a      	add	r3, pc, #168	; (adr r3, 8000f30 <_ZN4blib6Analog10readAnalogEv+0x130>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff fcdf 	bl	800084c <__aeabi_ddiv>
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <_ZN4blib6Analog10readAnalogEv+0x138>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f7ff fbb1 	bl	80005f8 <__aeabi_dmul>
 8000e96:	a324      	add	r3, pc, #144	; (adr r3, 8000f28 <_ZN4blib6Analog10readAnalogEv+0x128>)
 8000e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9c:	f7ff fbac 	bl	80005f8 <__aeabi_dmul>
        mIout = convertAdcChannel4(mAdcValues[3]);
 8000ea0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    }
    double Analog::convertAdcChannel5(uint32_t adcValue)    // Convert adcValue -> Temperature
    {
        return CHANNEL_5_RATIO * ((double) adcValue / 4095) * 3.3;
 8000ea4:	6960      	ldr	r0, [r4, #20]
 8000ea6:	f7ff fb2d 	bl	8000504 <__aeabi_ui2d>
 8000eaa:	a321      	add	r3, pc, #132	; (adr r3, 8000f30 <_ZN4blib6Analog10readAnalogEv+0x130>)
 8000eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb0:	f7ff fccc 	bl	800084c <__aeabi_ddiv>
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <_ZN4blib6Analog10readAnalogEv+0x138>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f7ff fb9e 	bl	80005f8 <__aeabi_dmul>
 8000ebc:	a31a      	add	r3, pc, #104	; (adr r3, 8000f28 <_ZN4blib6Analog10readAnalogEv+0x128>)
 8000ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec2:	f7ff fb99 	bl	80005f8 <__aeabi_dmul>
        LOGI("mVin : [%.2f] V", mVin);
 8000ec6:	eeb0 0a48 	vmov.f32	s0, s16
 8000eca:	eef0 0a68 	vmov.f32	s1, s17
        mTemp = convertAdcChannel5(mAdcValues[4]);
 8000ece:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
        LOGI("mVin : [%.2f] V", mVin);
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <_ZN4blib6Analog10readAnalogEv+0x140>)
 8000ed4:	491b      	ldr	r1, [pc, #108]	; (8000f44 <_ZN4blib6Analog10readAnalogEv+0x144>)
 8000ed6:	481c      	ldr	r0, [pc, #112]	; (8000f48 <_ZN4blib6Analog10readAnalogEv+0x148>)
 8000ed8:	2239      	movs	r2, #57	; 0x39
 8000eda:	f7ff ff63 	bl	8000da4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_>
        LOGI("mIin : [%.2f] A", mIin);
 8000ede:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <_ZN4blib6Analog10readAnalogEv+0x140>)
 8000ee4:	4917      	ldr	r1, [pc, #92]	; (8000f44 <_ZN4blib6Analog10readAnalogEv+0x144>)
 8000ee6:	4819      	ldr	r0, [pc, #100]	; (8000f4c <_ZN4blib6Analog10readAnalogEv+0x14c>)
 8000ee8:	223a      	movs	r2, #58	; 0x3a
 8000eea:	f7ff ff5b 	bl	8000da4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_>
        LOGI("mVout : [%.2f] V", mVout);
 8000eee:	ed94 0b0c 	vldr	d0, [r4, #48]	; 0x30
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <_ZN4blib6Analog10readAnalogEv+0x140>)
 8000ef4:	4913      	ldr	r1, [pc, #76]	; (8000f44 <_ZN4blib6Analog10readAnalogEv+0x144>)
 8000ef6:	4816      	ldr	r0, [pc, #88]	; (8000f50 <_ZN4blib6Analog10readAnalogEv+0x150>)
 8000ef8:	223b      	movs	r2, #59	; 0x3b
 8000efa:	f7ff ff53 	bl	8000da4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_>
        LOGI("mIout : [%.2f] A", mIout);
 8000efe:	ed94 0b0e 	vldr	d0, [r4, #56]	; 0x38
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <_ZN4blib6Analog10readAnalogEv+0x140>)
 8000f04:	490f      	ldr	r1, [pc, #60]	; (8000f44 <_ZN4blib6Analog10readAnalogEv+0x144>)
 8000f06:	4813      	ldr	r0, [pc, #76]	; (8000f54 <_ZN4blib6Analog10readAnalogEv+0x154>)
 8000f08:	223c      	movs	r2, #60	; 0x3c
 8000f0a:	f7ff ff4b 	bl	8000da4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_>
        LOGI("mTemp : [%.2f] C", mTemp);
 8000f0e:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <_ZN4blib6Analog10readAnalogEv+0x140>)
 8000f14:	490b      	ldr	r1, [pc, #44]	; (8000f44 <_ZN4blib6Analog10readAnalogEv+0x144>)
 8000f16:	4810      	ldr	r0, [pc, #64]	; (8000f58 <_ZN4blib6Analog10readAnalogEv+0x158>)
 8000f18:	223d      	movs	r2, #61	; 0x3d
 8000f1a:	f7ff ff43 	bl	8000da4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_>
    }
 8000f1e:	ecbd 8b02 	vpop	{d8}
 8000f22:	bd10      	pop	{r4, pc}
 8000f24:	f3af 8000 	nop.w
 8000f28:	66666666 	.word	0x66666666
 8000f2c:	400a6666 	.word	0x400a6666
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40affe00 	.word	0x40affe00
 8000f38:	40240000 	.word	0x40240000
 8000f3c:	40140000 	.word	0x40140000
 8000f40:	080047c0 	.word	0x080047c0
 8000f44:	080047cb 	.word	0x080047cb
 8000f48:	080047d6 	.word	0x080047d6
 8000f4c:	080047f3 	.word	0x080047f3
 8000f50:	08004810 	.word	0x08004810
 8000f54:	0800482e 	.word	0x0800482e
 8000f58:	0800484c 	.word	0x0800484c

08000f5c <_ZN4blib7MonitorD1Ev>:
        showInit();
    }
    Monitor::~Monitor()
    {

    }
 8000f5c:	4770      	bx	lr

08000f5e <_ZN4blib7MonitorD0Ev>:
    Monitor::~Monitor()
 8000f5e:	b510      	push	{r4, lr}
    }
 8000f60:	2114      	movs	r1, #20
    Monitor::~Monitor()
 8000f62:	4604      	mov	r4, r0
    }
 8000f64:	f002 feeb 	bl	8003d3e <_ZdlPvj>
 8000f68:	4620      	mov	r0, r4
 8000f6a:	bd10      	pop	{r4, pc}

08000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8000f6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8000f70:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8000fb0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>
            static void Log(const char *message, Args ... args)
 8000f74:	460d      	mov	r5, r1
 8000f76:	4616      	mov	r6, r2
 8000f78:	461f      	mov	r7, r3
 8000f7a:	4604      	mov	r4, r0
                print("[>]  ");
 8000f7c:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x3c>)
 8000f7e:	f7ff fee1 	bl	8000d44 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8000f82:	462b      	mov	r3, r5
 8000f84:	4622      	mov	r2, r4
 8000f86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8a:	e9cd 6700 	strd	r6, r7, [sp]
 8000f8e:	4640      	mov	r0, r8
 8000f90:	f002 ffb6 	bl	8003f00 <sniprintf>
                print(mBuffer);
 8000f94:	4640      	mov	r0, r8
 8000f96:	f7ff fed5 	bl	8000d44 <_ZN4blib6Logger5printEPKc>
                print("\n");
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 8000f9c:	f7ff fed2 	bl	8000d44 <_ZN4blib6Logger5printEPKc>
            }
 8000fa0:	b002      	add	sp, #8
 8000fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fa6:	bf00      	nop
 8000fa8:	080047b8 	.word	0x080047b8
 8000fac:	080047be 	.word	0x080047be
 8000fb0:	20000304 	.word	0x20000304

08000fb4 <_ZN4blib7Monitor8showInitEv>:

    // Show when begin
    void Monitor::showInit()
    {
 8000fb4:	b508      	push	{r3, lr}
        LOGI("MPPT INITIALIZED");
 8000fb6:	4906      	ldr	r1, [pc, #24]	; (8000fd0 <_ZN4blib7Monitor8showInitEv+0x1c>)
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <_ZN4blib7Monitor8showInitEv+0x20>)
 8000fba:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <_ZN4blib7Monitor8showInitEv+0x24>)
 8000fbc:	221a      	movs	r2, #26
 8000fbe:	f7ff ffd5 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        LOGI("FIRMWARE V1.00");
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <_ZN4blib7Monitor8showInitEv+0x20>)
 8000fc4:	4902      	ldr	r1, [pc, #8]	; (8000fd0 <_ZN4blib7Monitor8showInitEv+0x1c>)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <_ZN4blib7Monitor8showInitEv+0x28>)
 8000fc8:	221b      	movs	r2, #27
 8000fca:	f7ff ffcf 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
//        HAL_Delay(1500);
    }
 8000fce:	bd08      	pop	{r3, pc}
 8000fd0:	08004885 	.word	0x08004885
 8000fd4:	0800487c 	.word	0x0800487c
 8000fd8:	08004891 	.word	0x08004891
 8000fdc:	080048af 	.word	0x080048af

08000fe0 <_ZN4blib7MonitorC1Ev>:
    Monitor::Monitor()
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <_ZN4blib7MonitorC1Ev+0x1c>)
 8000fe4:	6003      	str	r3, [r0, #0]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	7103      	strb	r3, [r0, #4]
 8000fea:	4604      	mov	r4, r0
 8000fec:	6083      	str	r3, [r0, #8]
 8000fee:	60c3      	str	r3, [r0, #12]
 8000ff0:	7403      	strb	r3, [r0, #16]
 8000ff2:	7443      	strb	r3, [r0, #17]
        showInit();
 8000ff4:	f7ff ffde 	bl	8000fb4 <_ZN4blib7Monitor8showInitEv>
    }
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	08004b20 	.word	0x08004b20

08001000 <_ZN4blib7Monitor17showDisplayLevel1Ev>:
    {
        return mDisplayLevel;
    }

    void Monitor::showDisplayLevel1()
    {
 8001000:	b508      	push	{r3, lr}
        LOGI();
 8001002:	4903      	ldr	r1, [pc, #12]	; (8001010 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x10>)
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x14>)
 8001006:	4804      	ldr	r0, [pc, #16]	; (8001018 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x18>)
 8001008:	22bb      	movs	r2, #187	; 0xbb
 800100a:	f7ff ffaf 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800100e:	bd08      	pop	{r3, pc}
 8001010:	08004885 	.word	0x08004885
 8001014:	080048cb 	.word	0x080048cb
 8001018:	080048dd 	.word	0x080048dd

0800101c <_ZN4blib7Monitor17showDisplayLevel2Ev>:
    void Monitor::showDisplayLevel2()
    {
 800101c:	b508      	push	{r3, lr}
        LOGI();
 800101e:	4903      	ldr	r1, [pc, #12]	; (800102c <_ZN4blib7Monitor17showDisplayLevel2Ev+0x10>)
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <_ZN4blib7Monitor17showDisplayLevel2Ev+0x14>)
 8001022:	4804      	ldr	r0, [pc, #16]	; (8001034 <_ZN4blib7Monitor17showDisplayLevel2Ev+0x18>)
 8001024:	22bf      	movs	r2, #191	; 0xbf
 8001026:	f7ff ffa1 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800102a:	bd08      	pop	{r3, pc}
 800102c:	08004885 	.word	0x08004885
 8001030:	080048eb 	.word	0x080048eb
 8001034:	080048dd 	.word	0x080048dd

08001038 <_ZN4blib7Monitor17showDisplayLevel3Ev>:
    void Monitor::showDisplayLevel3()
    {
 8001038:	b508      	push	{r3, lr}
        LOGI();
 800103a:	4903      	ldr	r1, [pc, #12]	; (8001048 <_ZN4blib7Monitor17showDisplayLevel3Ev+0x10>)
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <_ZN4blib7Monitor17showDisplayLevel3Ev+0x14>)
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <_ZN4blib7Monitor17showDisplayLevel3Ev+0x18>)
 8001040:	22c3      	movs	r2, #195	; 0xc3
 8001042:	f7ff ff93 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001046:	bd08      	pop	{r3, pc}
 8001048:	08004885 	.word	0x08004885
 800104c:	080048fd 	.word	0x080048fd
 8001050:	080048dd 	.word	0x080048dd

08001054 <_ZN4blib7Monitor17showDisplayLevel4Ev>:
    void Monitor::showDisplayLevel4()
    {
 8001054:	b508      	push	{r3, lr}
        LOGI();
 8001056:	4903      	ldr	r1, [pc, #12]	; (8001064 <_ZN4blib7Monitor17showDisplayLevel4Ev+0x10>)
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <_ZN4blib7Monitor17showDisplayLevel4Ev+0x14>)
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <_ZN4blib7Monitor17showDisplayLevel4Ev+0x18>)
 800105c:	22c7      	movs	r2, #199	; 0xc7
 800105e:	f7ff ff85 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001062:	bd08      	pop	{r3, pc}
 8001064:	08004885 	.word	0x08004885
 8001068:	0800490f 	.word	0x0800490f
 800106c:	080048dd 	.word	0x080048dd

08001070 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv>:
    void Monitor::showDisplayChooseSettingMode()
    {
 8001070:	b508      	push	{r3, lr}
        LOGI("SETTINGS MENU");
 8001072:	4906      	ldr	r1, [pc, #24]	; (800108c <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x1c>)
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x20>)
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x24>)
 8001078:	22cb      	movs	r2, #203	; 0xcb
 800107a:	f7ff ff77 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        LOGI("--PRESS SELECT--");
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x20>)
 8001080:	4902      	ldr	r1, [pc, #8]	; (800108c <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x1c>)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x28>)
 8001084:	22cc      	movs	r2, #204	; 0xcc
 8001086:	f7ff ff71 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800108a:	bd08      	pop	{r3, pc}
 800108c:	08004885 	.word	0x08004885
 8001090:	08004921 	.word	0x08004921
 8001094:	0800493e 	.word	0x0800493e
 8001098:	08004959 	.word	0x08004959

0800109c <_ZN4blib7Monitor23showDisplayFactoryResetEv>:
        return mFactoryResetEnable;
 800109c:	7c03      	ldrb	r3, [r0, #16]
    void Monitor::showDisplayFactoryReset()
    {
 800109e:	b510      	push	{r4, lr}
 80010a0:	4604      	mov	r4, r0
        if (getFactoryReset() == false)
 80010a2:	b963      	cbnz	r3, 80010be <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x22>
        {
            LOGI("FACTORY RESET");
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x6c>)
 80010a6:	4919      	ldr	r1, [pc, #100]	; (800110c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x70>)
 80010a8:	4819      	ldr	r0, [pc, #100]	; (8001110 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x74>)
 80010aa:	22d2      	movs	r2, #210	; 0xd2
 80010ac:	f7ff ff5e 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
            LOGI("--PRESS SELECT--");
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x6c>)
 80010b2:	4916      	ldr	r1, [pc, #88]	; (800110c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x70>)
 80010b4:	4817      	ldr	r0, [pc, #92]	; (8001114 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x78>)
 80010b6:	22d3      	movs	r2, #211	; 0xd3
        else
        {
            if (getConfirmFactoryReset() == false)
            {
                LOGI("ARE YOU SURE?");
                LOGI(" >NO   >YES");
 80010b8:	f7ff ff58 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                // Go to setting mode - show supply algorithm screen
                setSettingMode(true);
                setSettingLevel(SettingLevel::SETTING_LEVEL_CONFIG_1);    // TODO: Check correct screen
            }
        }
    }
 80010bc:	bd10      	pop	{r4, pc}
        return mConfirmFactoryReset;
 80010be:	7c43      	ldrb	r3, [r0, #17]
            if (getConfirmFactoryReset() == false)
 80010c0:	b953      	cbnz	r3, 80010d8 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x3c>
                LOGI("ARE YOU SURE?");
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x6c>)
 80010c4:	4911      	ldr	r1, [pc, #68]	; (800110c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x70>)
 80010c6:	4814      	ldr	r0, [pc, #80]	; (8001118 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x7c>)
 80010c8:	22d9      	movs	r2, #217	; 0xd9
 80010ca:	f7ff ff4f 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                LOGI(" >NO   >YES");
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x6c>)
 80010d0:	490e      	ldr	r1, [pc, #56]	; (800110c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x70>)
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x80>)
 80010d4:	22da      	movs	r2, #218	; 0xda
 80010d6:	e7ef      	b.n	80010b8 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x1c>
                LOGI("FACTORY RESET");
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x6c>)
 80010da:	490c      	ldr	r1, [pc, #48]	; (800110c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x70>)
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x74>)
 80010de:	22de      	movs	r2, #222	; 0xde
 80010e0:	f7ff ff44 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                LOGI("SUCCESSFULLY");
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x6c>)
 80010e6:	4909      	ldr	r1, [pc, #36]	; (800110c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x70>)
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x84>)
 80010ea:	22df      	movs	r2, #223	; 0xdf
 80010ec:	f7ff ff3e 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                HAL_Delay(1500);
 80010f0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80010f4:	f000 fe2a 	bl	8001d4c <HAL_Delay>
        mConfirmFactoryReset = val;
 80010f8:	2300      	movs	r3, #0
 80010fa:	7463      	strb	r3, [r4, #17]
        mFactoryResetEnable = val;
 80010fc:	7423      	strb	r3, [r4, #16]
        mSettingMode = val;
 80010fe:	2301      	movs	r3, #1
 8001100:	7123      	strb	r3, [r4, #4]
        mSettingLevel = (SettingLevel) u8SettingLevel;
 8001102:	60a3      	str	r3, [r4, #8]
    }
 8001104:	e7da      	b.n	80010bc <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x20>
 8001106:	bf00      	nop
 8001108:	08004977 	.word	0x08004977
 800110c:	08004885 	.word	0x08004885
 8001110:	0800498f 	.word	0x0800498f
 8001114:	08004959 	.word	0x08004959
 8001118:	080049aa 	.word	0x080049aa
 800111c:	080049c5 	.word	0x080049c5
 8001120:	080049de 	.word	0x080049de

08001124 <_ZN4blib7Monitor11showDisplayEv>:
        return mDisplayLevel;
 8001124:	68c3      	ldr	r3, [r0, #12]
        switch (displayLevel)
 8001126:	3b01      	subs	r3, #1
 8001128:	2b05      	cmp	r3, #5
 800112a:	d810      	bhi.n	800114e <_ZN4blib7Monitor11showDisplayEv+0x2a>
 800112c:	e8df f003 	tbb	[pc, r3]
 8001130:	09070503 	.word	0x09070503
 8001134:	0d0b      	.short	0x0d0b
                showDisplayLevel1();
 8001136:	f7ff bf63 	b.w	8001000 <_ZN4blib7Monitor17showDisplayLevel1Ev>
                showDisplayLevel2();
 800113a:	f7ff bf6f 	b.w	800101c <_ZN4blib7Monitor17showDisplayLevel2Ev>
                showDisplayLevel3();
 800113e:	f7ff bf7b 	b.w	8001038 <_ZN4blib7Monitor17showDisplayLevel3Ev>
                showDisplayLevel4();
 8001142:	f7ff bf87 	b.w	8001054 <_ZN4blib7Monitor17showDisplayLevel4Ev>
                showDisplayChooseSettingMode();
 8001146:	f7ff bf93 	b.w	8001070 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv>
                showDisplayFactoryReset();
 800114a:	f7ff bfa7 	b.w	800109c <_ZN4blib7Monitor23showDisplayFactoryResetEv>
    }
 800114e:	4770      	bx	lr

08001150 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv>:
    void Monitor::showSettingSupplyAlgorithm()
    {
 8001150:	b508      	push	{r3, lr}
        LOGI();
 8001152:	4903      	ldr	r1, [pc, #12]	; (8001160 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x10>)
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x14>)
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x18>)
 8001158:	22ee      	movs	r2, #238	; 0xee
 800115a:	f7ff ff07 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800115e:	bd08      	pop	{r3, pc}
 8001160:	08004885 	.word	0x08004885
 8001164:	080049f8 	.word	0x080049f8
 8001168:	080048dd 	.word	0x080048dd

0800116c <_ZN4blib7Monitor25showSettingChargerPsuModeEv>:
    void Monitor::showSettingChargerPsuMode()
    {
 800116c:	b508      	push	{r3, lr}
        LOGI();
 800116e:	4903      	ldr	r1, [pc, #12]	; (800117c <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x10>)
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x14>)
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x18>)
 8001174:	22f2      	movs	r2, #242	; 0xf2
 8001176:	f7ff fef9 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800117a:	bd08      	pop	{r3, pc}
 800117c:	08004885 	.word	0x08004885
 8001180:	08004a13 	.word	0x08004a13
 8001184:	080048dd 	.word	0x080048dd

08001188 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv>:
    void Monitor::showSettingMaxBatteryVoltage()
    {
 8001188:	b508      	push	{r3, lr}
        LOGI();
 800118a:	4903      	ldr	r1, [pc, #12]	; (8001198 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x10>)
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x14>)
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x18>)
 8001190:	22f6      	movs	r2, #246	; 0xf6
 8001192:	f7ff feeb 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001196:	bd08      	pop	{r3, pc}
 8001198:	08004885 	.word	0x08004885
 800119c:	08004a2d 	.word	0x08004a2d
 80011a0:	080048dd 	.word	0x080048dd

080011a4 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv>:
    void Monitor::showSettingMinBatteryVoltage()
    {
 80011a4:	b508      	push	{r3, lr}
        LOGI();
 80011a6:	4903      	ldr	r1, [pc, #12]	; (80011b4 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x10>)
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x14>)
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x18>)
 80011ac:	22fa      	movs	r2, #250	; 0xfa
 80011ae:	f7ff fedd 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80011b2:	bd08      	pop	{r3, pc}
 80011b4:	08004885 	.word	0x08004885
 80011b8:	08004a4a 	.word	0x08004a4a
 80011bc:	080048dd 	.word	0x080048dd

080011c0 <_ZN4blib7Monitor26showSettingChargingCurrentEv>:
    void Monitor::showSettingChargingCurrent()
    {
 80011c0:	b508      	push	{r3, lr}
        LOGI();
 80011c2:	4903      	ldr	r1, [pc, #12]	; (80011d0 <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x10>)
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x14>)
 80011c6:	4804      	ldr	r0, [pc, #16]	; (80011d8 <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x18>)
 80011c8:	22fe      	movs	r2, #254	; 0xfe
 80011ca:	f7ff fecf 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80011ce:	bd08      	pop	{r3, pc}
 80011d0:	08004885 	.word	0x08004885
 80011d4:	08004a67 	.word	0x08004a67
 80011d8:	080048dd 	.word	0x080048dd

080011dc <_ZN4blib7Monitor21showSettingCoolingFanEv>:
    void Monitor::showSettingCoolingFan()
    {
 80011dc:	b508      	push	{r3, lr}
        LOGI();
 80011de:	4904      	ldr	r1, [pc, #16]	; (80011f0 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x14>)
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x18>)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x1c>)
 80011e4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80011e8:	f7ff fec0 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80011ec:	bd08      	pop	{r3, pc}
 80011ee:	bf00      	nop
 80011f0:	08004885 	.word	0x08004885
 80011f4:	08004a82 	.word	0x08004a82
 80011f8:	080048dd 	.word	0x080048dd

080011fc <_ZN4blib7Monitor25showSettingFanTriggerTempEv>:
    void Monitor::showSettingFanTriggerTemp()
    {
 80011fc:	b508      	push	{r3, lr}
        LOGI();
 80011fe:	4904      	ldr	r1, [pc, #16]	; (8001210 <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x14>)
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x18>)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x1c>)
 8001204:	f44f 7283 	mov.w	r2, #262	; 0x106
 8001208:	f7ff feb0 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800120c:	bd08      	pop	{r3, pc}
 800120e:	bf00      	nop
 8001210:	08004885 	.word	0x08004885
 8001214:	08004a98 	.word	0x08004a98
 8001218:	080048dd 	.word	0x080048dd

0800121c <_ZN4blib7Monitor23showSettingShutdownTempEv>:
    void Monitor::showSettingShutdownTemp()
    {
 800121c:	b508      	push	{r3, lr}
        LOGI();
 800121e:	4904      	ldr	r1, [pc, #16]	; (8001230 <_ZN4blib7Monitor23showSettingShutdownTempEv+0x14>)
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <_ZN4blib7Monitor23showSettingShutdownTempEv+0x18>)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <_ZN4blib7Monitor23showSettingShutdownTempEv+0x1c>)
 8001224:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8001228:	f7ff fea0 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800122c:	bd08      	pop	{r3, pc}
 800122e:	bf00      	nop
 8001230:	08004885 	.word	0x08004885
 8001234:	08004ab2 	.word	0x08004ab2
 8001238:	080048dd 	.word	0x080048dd

0800123c <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv>:
    void Monitor::showSettingAutoLoadFeature()
    {
 800123c:	b508      	push	{r3, lr}
        LOGI();
 800123e:	4904      	ldr	r1, [pc, #16]	; (8001250 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x14>)
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x18>)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x1c>)
 8001244:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001248:	f7ff fe90 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800124c:	bd08      	pop	{r3, pc}
 800124e:	bf00      	nop
 8001250:	08004885 	.word	0x08004885
 8001254:	08004aca 	.word	0x08004aca
 8001258:	080048dd 	.word	0x080048dd

0800125c <_ZN4blib7Monitor25showSettingBackligthSleepEv>:
    void Monitor::showSettingBackligthSleep()
    {
 800125c:	b508      	push	{r3, lr}
        LOGI();
 800125e:	4904      	ldr	r1, [pc, #16]	; (8001270 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x14>)
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x18>)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x1c>)
 8001264:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001268:	f7ff fe80 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800126c:	bd08      	pop	{r3, pc}
 800126e:	bf00      	nop
 8001270:	08004885 	.word	0x08004885
 8001274:	08004ae5 	.word	0x08004ae5
 8001278:	080048dd 	.word	0x080048dd

0800127c <_ZN4blib7Monitor23showSettingFactoryResetEv>:
    void Monitor::showSettingFactoryReset()
    {
 800127c:	b508      	push	{r3, lr}
        LOGI();
 800127e:	4904      	ldr	r1, [pc, #16]	; (8001290 <_ZN4blib7Monitor23showSettingFactoryResetEv+0x14>)
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <_ZN4blib7Monitor23showSettingFactoryResetEv+0x18>)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <_ZN4blib7Monitor23showSettingFactoryResetEv+0x1c>)
 8001284:	f44f 728b 	mov.w	r2, #278	; 0x116
 8001288:	f7ff fe70 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800128c:	bd08      	pop	{r3, pc}
 800128e:	bf00      	nop
 8001290:	08004885 	.word	0x08004885
 8001294:	08004aff 	.word	0x08004aff
 8001298:	080048dd 	.word	0x080048dd

0800129c <_ZN4blib7Monitor11showSettingEv>:
        return mSettingLevel;
 800129c:	6883      	ldr	r3, [r0, #8]
        switch (getSettingLevel())
 800129e:	2b0a      	cmp	r3, #10
 80012a0:	d81d      	bhi.n	80012de <_ZN4blib7Monitor11showSettingEv+0x42>
 80012a2:	e8df f003 	tbb	[pc, r3]
 80012a6:	0806      	.short	0x0806
 80012a8:	100e0c0a 	.word	0x100e0c0a
 80012ac:	18161412 	.word	0x18161412
 80012b0:	1a          	.byte	0x1a
 80012b1:	00          	.byte	0x00
                showSettingSupplyAlgorithm();
 80012b2:	f7ff bf4d 	b.w	8001150 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv>
                showSettingChargerPsuMode();
 80012b6:	f7ff bf59 	b.w	800116c <_ZN4blib7Monitor25showSettingChargerPsuModeEv>
                showSettingMaxBatteryVoltage();
 80012ba:	f7ff bf65 	b.w	8001188 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv>
                showSettingMinBatteryVoltage();
 80012be:	f7ff bf71 	b.w	80011a4 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv>
                showSettingChargingCurrent();
 80012c2:	f7ff bf7d 	b.w	80011c0 <_ZN4blib7Monitor26showSettingChargingCurrentEv>
                showSettingCoolingFan();
 80012c6:	f7ff bf89 	b.w	80011dc <_ZN4blib7Monitor21showSettingCoolingFanEv>
                showSettingFanTriggerTemp();
 80012ca:	f7ff bf97 	b.w	80011fc <_ZN4blib7Monitor25showSettingFanTriggerTempEv>
                showSettingShutdownTemp();
 80012ce:	f7ff bfa5 	b.w	800121c <_ZN4blib7Monitor23showSettingShutdownTempEv>
                showSettingAutoLoadFeature();
 80012d2:	f7ff bfb3 	b.w	800123c <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv>
                showSettingBackligthSleep();
 80012d6:	f7ff bfc1 	b.w	800125c <_ZN4blib7Monitor25showSettingBackligthSleepEv>
                showSettingFactoryReset();
 80012da:	f7ff bfcf 	b.w	800127c <_ZN4blib7Monitor23showSettingFactoryResetEv>
    }
 80012de:	4770      	bx	lr

080012e0 <_ZN4blib7Monitor8showMenuEv>:
        return mSettingMode;
 80012e0:	7903      	ldrb	r3, [r0, #4]
        if (getSetttingMode() == true)
 80012e2:	b10b      	cbz	r3, 80012e8 <_ZN4blib7Monitor8showMenuEv+0x8>
            showSetting();
 80012e4:	f7ff bfda 	b.w	800129c <_ZN4blib7Monitor11showSettingEv>
            showDisplay();
 80012e8:	f7ff bf1c 	b.w	8001124 <_ZN4blib7Monitor11showDisplayEv>

080012ec <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012ec:	b510      	push	{r4, lr}
 80012ee:	b094      	sub	sp, #80	; 0x50
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012f0:	2214      	movs	r2, #20
 80012f2:	2100      	movs	r1, #0
 80012f4:	a809      	add	r0, sp, #36	; 0x24
 80012f6:	f002 fe37 	bl	8003f68 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012fa:	2214      	movs	r2, #20
 80012fc:	2100      	movs	r1, #0
 80012fe:	a803      	add	r0, sp, #12
 8001300:	f002 fe32 	bl	8003f68 <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	4a20      	ldr	r2, [pc, #128]	; (8001388 <_Z18SystemClock_Configv+0x9c>)
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800130c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001310:	6411      	str	r1, [r2, #64]	; 0x40
 8001312:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001314:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <_Z18SystemClock_Configv+0xa0>)
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	6811      	ldr	r1, [r2, #0]
 8001322:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001326:	6011      	str	r1, [r2, #0]
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800132e:	9202      	str	r2, [sp, #8]
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001330:	2402      	movs	r4, #2
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001332:	9a02      	ldr	r2, [sp, #8]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 100;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001334:	9412      	str	r4, [sp, #72]	; 0x48
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 8001336:	2206      	movs	r2, #6
    RCC_OscInitStruct.PLL.PLLN = 100;
 8001338:	2008      	movs	r0, #8
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800133a:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 800133e:	9208      	str	r2, [sp, #32]
    RCC_OscInitStruct.PLL.PLLN = 100;
 8001340:	2364      	movs	r3, #100	; 0x64
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001342:	2201      	movs	r2, #1
    RCC_OscInitStruct.PLL.PLLN = 100;
 8001344:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLQ = 4;
 800134c:	2304      	movs	r3, #4
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134e:	2210      	movs	r2, #16
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001350:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001352:	920c      	str	r2, [sp, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001354:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f001 fb2d 	bl	80029b4 <HAL_RCC_OscConfig>
 800135a:	b108      	cbz	r0, 8001360 <_Z18SystemClock_Configv+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135c:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800135e:	e7fe      	b.n	800135e <_Z18SystemClock_Configv+0x72>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8001360:	230f      	movs	r3, #15
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001362:	e9cd 3403 	strd	r3, r4, [sp, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001366:	9005      	str	r0, [sp, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001368:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001370:	2103      	movs	r1, #3
 8001372:	a803      	add	r0, sp, #12
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001374:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001378:	f001 fcf6 	bl	8002d68 <HAL_RCC_ClockConfig>
 800137c:	b108      	cbz	r0, 8001382 <_Z18SystemClock_Configv+0x96>
 800137e:	b672      	cpsid	i
    while (1)
 8001380:	e7fe      	b.n	8001380 <_Z18SystemClock_Configv+0x94>
}
 8001382:	b014      	add	sp, #80	; 0x50
 8001384:	bd10      	pop	{r4, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <Error_Handler>:
 8001390:	b672      	cpsid	i
    while (1)
 8001392:	e7fe      	b.n	8001392 <Error_Handler+0x2>

08001394 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
    {
        template<typename T>
        class Singleton
        {
            public:
                static T& getInstance()
 8001394:	b538      	push	{r3, r4, r5, lr}
                {
                    if (mInstance == nullptr)
 8001396:	4c06      	ldr	r4, [pc, #24]	; (80013b0 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x1c>)
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	b933      	cbnz	r3, 80013aa <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x16>
                    {
                        mInstance = new T();
 800139c:	2048      	movs	r0, #72	; 0x48
 800139e:	f002 fcd0 	bl	8003d42 <_Znwj>
 80013a2:	4605      	mov	r5, r0
 80013a4:	f7ff fce6 	bl	8000d74 <_ZN4blib6AnalogC1Ev>
 80013a8:	6025      	str	r5, [r4, #0]
                    }

                    return *mInstance;
                }
 80013aa:	6820      	ldr	r0, [r4, #0]
 80013ac:	bd38      	pop	{r3, r4, r5, pc}
 80013ae:	bf00      	nop
 80013b0:	2000007c 	.word	0x2000007c

080013b4 <HAL_ADC_ConvCpltCallback>:
{
 80013b4:	b508      	push	{r3, lr}
    blib::Analog::getInstance().sampling();
 80013b6:	f7ff ffed 	bl	8001394 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
}
 80013ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    blib::Analog::getInstance().sampling();
 80013be:	f7ff bcd3 	b.w	8000d68 <_ZN4blib6Analog8samplingEv>
	...

080013c4 <main>:
{
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	b099      	sub	sp, #100	; 0x64
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	2400      	movs	r4, #0
 80013ca:	4da6      	ldr	r5, [pc, #664]	; (8001664 <main+0x2a0>)
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80013cc:	4fa6      	ldr	r7, [pc, #664]	; (8001668 <main+0x2a4>)
    HAL_Init();
 80013ce:	f000 fc91 	bl	8001cf4 <HAL_Init>
    SystemClock_Config();
 80013d2:	f7ff ff8b 	bl	80012ec <_Z18SystemClock_Configv>
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013d6:	2214      	movs	r2, #20
 80013d8:	2100      	movs	r1, #0
 80013da:	a80e      	add	r0, sp, #56	; 0x38
 80013dc:	f002 fdc4 	bl	8003f68 <memset>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e0:	9402      	str	r4, [sp, #8]
 80013e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_WritePin(GPIOA, LOAD_Pin | ENA_INVERTER_Pin | BCCU_Pin, GPIO_PIN_RESET);
 80013e4:	48a1      	ldr	r0, [pc, #644]	; (800166c <main+0x2a8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	632b      	str	r3, [r5, #48]	; 0x30
 80013ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f6:	9403      	str	r4, [sp, #12]
 80013f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80013fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fe:	632b      	str	r3, [r5, #48]	; 0x30
 8001400:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	9303      	str	r3, [sp, #12]
 8001408:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	9404      	str	r4, [sp, #16]
 800140c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	632b      	str	r3, [r5, #48]	; 0x30
 8001414:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	9304      	str	r3, [sp, #16]
 800141c:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	9405      	str	r4, [sp, #20]
 8001420:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	632b      	str	r3, [r5, #48]	; 0x30
 8001428:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	9305      	str	r3, [sp, #20]
 8001430:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001432:	9406      	str	r4, [sp, #24]
 8001434:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	632b      	str	r3, [r5, #48]	; 0x30
 800143c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	9306      	str	r3, [sp, #24]
    HAL_GPIO_WritePin(GPIOA, LOAD_Pin | ENA_INVERTER_Pin | BCCU_Pin, GPIO_PIN_RESET);
 8001444:	4622      	mov	r2, r4
 8001446:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800144a:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_WritePin(GPIOA, LOAD_Pin | ENA_INVERTER_Pin | BCCU_Pin, GPIO_PIN_RESET);
 800144c:	f001 fa04 	bl	8002858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, LED_INDICATE_Pin | FAN_Pin | BUCK_ENABLE_Pin | ANTI_BACKFLOW_Pin,
 8001450:	4887      	ldr	r0, [pc, #540]	; (8001670 <main+0x2ac>)
 8001452:	4622      	mov	r2, r4
 8001454:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001458:	f001 f9fe 	bl	8002858 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO2_Pin | GPIO15_Pin, GPIO_PIN_RESET);
 800145c:	4622      	mov	r2, r4
 800145e:	4885      	ldr	r0, [pc, #532]	; (8001674 <main+0x2b0>)
 8001460:	21c0      	movs	r1, #192	; 0xc0
 8001462:	f001 f9f9 	bl	8002858 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001466:	260f      	movs	r6, #15
 8001468:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146c:	4881      	ldr	r0, [pc, #516]	; (8001674 <main+0x2b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	9410      	str	r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001470:	a90e      	add	r1, sp, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001472:	e9cd 630e 	strd	r6, r3, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	f001 f915 	bl	80026a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2601      	movs	r6, #1
 800147c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	487a      	ldr	r0, [pc, #488]	; (800166c <main+0x2a8>)
 8001482:	a90e      	add	r1, sp, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f001 f90a 	bl	80026a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_INDICATE_Pin | FAN_Pin | BUCK_ENABLE_Pin | ANTI_BACKFLOW_Pin;
 8001490:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001494:	4876      	ldr	r0, [pc, #472]	; (8001670 <main+0x2ac>)
 8001496:	a90e      	add	r1, sp, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a0:	f001 f900 	bl	80026a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO2_Pin | GPIO15_Pin;
 80014a4:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	4873      	ldr	r0, [pc, #460]	; (8001674 <main+0x2b0>)
 80014a8:	a90e      	add	r1, sp, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f001 f8f7 	bl	80026a4 <HAL_GPIO_Init>
    __HAL_RCC_DMA2_CLK_ENABLE();
 80014b6:	9401      	str	r4, [sp, #4]
 80014b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80014ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014be:	632b      	str	r3, [r5, #48]	; 0x30
 80014c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    hadc1.Instance = ADC1;
 80014c2:	4d6d      	ldr	r5, [pc, #436]	; (8001678 <main+0x2b4>)
    __HAL_RCC_DMA2_CLK_ENABLE();
 80014c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014c8:	4622      	mov	r2, r4
 80014ca:	4621      	mov	r1, r4
    __HAL_RCC_DMA2_CLK_ENABLE();
 80014cc:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014ce:	2038      	movs	r0, #56	; 0x38
    __HAL_RCC_DMA2_CLK_ENABLE();
 80014d0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014d2:	f000 fec7 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014d6:	2038      	movs	r0, #56	; 0x38
 80014d8:	f000 fef6 	bl	80022c8 <HAL_NVIC_EnableIRQ>
    ADC_ChannelConfTypeDef sConfig = { 0 };
 80014dc:	2210      	movs	r2, #16
 80014de:	4621      	mov	r1, r4
 80014e0:	a80e      	add	r0, sp, #56	; 0x38
 80014e2:	f002 fd41 	bl	8003f68 <memset>
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80014e6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80014ea:	e9c5 7300 	strd	r7, r3, [r5]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ee:	4628      	mov	r0, r5
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f0:	4b62      	ldr	r3, [pc, #392]	; (800167c <main+0x2b8>)
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014f2:	60ac      	str	r4, [r5, #8]
    hadc1.Init.NbrOfConversion = 5;
 80014f4:	2705      	movs	r7, #5
    hadc1.Init.ScanConvMode = ENABLE;
 80014f6:	612e      	str	r6, [r5, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80014f8:	762e      	strb	r6, [r5, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fa:	f885 4020 	strb.w	r4, [r5, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014fe:	62ec      	str	r4, [r5, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001500:	62ab      	str	r3, [r5, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001502:	60ec      	str	r4, [r5, #12]
    hadc1.Init.NbrOfConversion = 5;
 8001504:	61ef      	str	r7, [r5, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001506:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800150a:	616e      	str	r6, [r5, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800150c:	f000 fc32 	bl	8001d74 <HAL_ADC_Init>
 8001510:	b108      	cbz	r0, 8001516 <main+0x152>
 8001512:	b672      	cpsid	i
    while (1)
 8001514:	e7fe      	b.n	8001514 <main+0x150>
    sConfig.Rank = 1;
 8001516:	e9cd 060e 	strd	r0, r6, [sp, #56]	; 0x38
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800151a:	2307      	movs	r3, #7
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151c:	a90e      	add	r1, sp, #56	; 0x38
 800151e:	4628      	mov	r0, r5
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001520:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001522:	f000 fdfd 	bl	8002120 <HAL_ADC_ConfigChannel>
 8001526:	b108      	cbz	r0, 800152c <main+0x168>
 8001528:	b672      	cpsid	i
    while (1)
 800152a:	e7fe      	b.n	800152a <main+0x166>
    sConfig.Rank = 2;
 800152c:	2402      	movs	r4, #2
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800152e:	a90e      	add	r1, sp, #56	; 0x38
 8001530:	4628      	mov	r0, r5
    sConfig.Channel = ADC_CHANNEL_1;
 8001532:	960e      	str	r6, [sp, #56]	; 0x38
    sConfig.Rank = 2;
 8001534:	940f      	str	r4, [sp, #60]	; 0x3c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001536:	f000 fdf3 	bl	8002120 <HAL_ADC_ConfigChannel>
 800153a:	b108      	cbz	r0, 8001540 <main+0x17c>
 800153c:	b672      	cpsid	i
    while (1)
 800153e:	e7fe      	b.n	800153e <main+0x17a>
    sConfig.Channel = ADC_CHANNEL_2;
 8001540:	940e      	str	r4, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001542:	a90e      	add	r1, sp, #56	; 0x38
    sConfig.Rank = 3;
 8001544:	2403      	movs	r4, #3
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001546:	4628      	mov	r0, r5
    sConfig.Rank = 3;
 8001548:	940f      	str	r4, [sp, #60]	; 0x3c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154a:	f000 fde9 	bl	8002120 <HAL_ADC_ConfigChannel>
 800154e:	b108      	cbz	r0, 8001554 <main+0x190>
 8001550:	b672      	cpsid	i
    while (1)
 8001552:	e7fe      	b.n	8001552 <main+0x18e>
    sConfig.Channel = ADC_CHANNEL_3;
 8001554:	940e      	str	r4, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001556:	a90e      	add	r1, sp, #56	; 0x38
    sConfig.Rank = 4;
 8001558:	2404      	movs	r4, #4
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155a:	4628      	mov	r0, r5
    sConfig.Rank = 4;
 800155c:	940f      	str	r4, [sp, #60]	; 0x3c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155e:	f000 fddf 	bl	8002120 <HAL_ADC_ConfigChannel>
 8001562:	b108      	cbz	r0, 8001568 <main+0x1a4>
 8001564:	b672      	cpsid	i
    while (1)
 8001566:	e7fe      	b.n	8001566 <main+0x1a2>
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001568:	a90e      	add	r1, sp, #56	; 0x38
 800156a:	4628      	mov	r0, r5
    sConfig.Rank = 5;
 800156c:	e9cd 470e 	strd	r4, r7, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001570:	f000 fdd6 	bl	8002120 <HAL_ADC_ConfigChannel>
 8001574:	b108      	cbz	r0, 800157a <main+0x1b6>
 8001576:	b672      	cpsid	i
    while (1)
 8001578:	e7fe      	b.n	8001578 <main+0x1b4>
    hi2c1.Instance = I2C1;
 800157a:	4b41      	ldr	r3, [pc, #260]	; (8001680 <main+0x2bc>)
    hi2c1.Init.ClockSpeed = 100000;
 800157c:	4a41      	ldr	r2, [pc, #260]	; (8001684 <main+0x2c0>)
 800157e:	4c42      	ldr	r4, [pc, #264]	; (8001688 <main+0x2c4>)
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001580:	6218      	str	r0, [r3, #32]
    hi2c1.Init.ClockSpeed = 100000;
 8001582:	e9c3 4200 	strd	r4, r2, [r3]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hi2c1.Init.OwnAddress1 = 0;
 800158a:	e9c3 0002 	strd	r0, r0, [r3, #8]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158e:	e9c3 2004 	strd	r2, r0, [r3, #16]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001592:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001596:	4618      	mov	r0, r3
 8001598:	f001 f964 	bl	8002864 <HAL_I2C_Init>
 800159c:	4605      	mov	r5, r0
 800159e:	b108      	cbz	r0, 80015a4 <main+0x1e0>
 80015a0:	b672      	cpsid	i
    while (1)
 80015a2:	e7fe      	b.n	80015a2 <main+0x1de>
    RTC_TimeTypeDef sTime = { 0 };
 80015a4:	4601      	mov	r1, r0
 80015a6:	2214      	movs	r2, #20
 80015a8:	a809      	add	r0, sp, #36	; 0x24
 80015aa:	f002 fcdd 	bl	8003f68 <memset>
    RTC_AlarmTypeDef sAlarm = { 0 };
 80015ae:	2228      	movs	r2, #40	; 0x28
 80015b0:	4629      	mov	r1, r5
 80015b2:	a80e      	add	r0, sp, #56	; 0x38
    hrtc.Instance = RTC;
 80015b4:	4c35      	ldr	r4, [pc, #212]	; (800168c <main+0x2c8>)
    RTC_DateTypeDef sDate = { 0 };
 80015b6:	9507      	str	r5, [sp, #28]
    RTC_AlarmTypeDef sAlarm = { 0 };
 80015b8:	f002 fcd6 	bl	8003f68 <memset>
    hrtc.Instance = RTC;
 80015bc:	4b34      	ldr	r3, [pc, #208]	; (8001690 <main+0x2cc>)
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015be:	61a5      	str	r5, [r4, #24]
    hrtc.Init.SynchPrediv = 255;
 80015c0:	207f      	movs	r0, #127	; 0x7f
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015c2:	e9c4 3500 	strd	r3, r5, [r4]
    hrtc.Init.SynchPrediv = 255;
 80015c6:	23ff      	movs	r3, #255	; 0xff
 80015c8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015cc:	4620      	mov	r0, r4
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015ce:	e9c4 5504 	strd	r5, r5, [r4, #16]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015d2:	f001 fd94 	bl	80030fe <HAL_RTC_Init>
 80015d6:	b108      	cbz	r0, 80015dc <main+0x218>
 80015d8:	b672      	cpsid	i
    while (1)
 80015da:	e7fe      	b.n	80015da <main+0x216>
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015dc:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
    sTime.Hours = 0x0;
 80015e0:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    sTime.Seconds = 0x0;
 80015e4:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015e8:	4632      	mov	r2, r6
 80015ea:	a909      	add	r1, sp, #36	; 0x24
 80015ec:	4620      	mov	r0, r4
 80015ee:	f001 fdd4 	bl	800319a <HAL_RTC_SetTime>
 80015f2:	b108      	cbz	r0, 80015f8 <main+0x234>
 80015f4:	b672      	cpsid	i
    while (1)
 80015f6:	e7fe      	b.n	80015f6 <main+0x232>
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <main+0x2d0>)
 80015fa:	9307      	str	r3, [sp, #28]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80015fc:	4632      	mov	r2, r6
 80015fe:	a907      	add	r1, sp, #28
 8001600:	4620      	mov	r0, r4
 8001602:	f001 fe24 	bl	800324e <HAL_RTC_SetDate>
 8001606:	b108      	cbz	r0, 800160c <main+0x248>
 8001608:	b672      	cpsid	i
    while (1)
 800160a:	e7fe      	b.n	800160a <main+0x246>
    sAlarm.AlarmTime.Hours = 0x0;
 800160c:	2300      	movs	r3, #0
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800160e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001612:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    sAlarm.AlarmTime.Hours = 0x0;
 8001616:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    sAlarm.AlarmTime.Seconds = 0x0;
 800161a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    sAlarm.AlarmTime.SubSeconds = 0x0;
 800161e:	930f      	str	r3, [sp, #60]	; 0x3c
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001620:	9315      	str	r3, [sp, #84]	; 0x54
    sAlarm.AlarmDateWeekDay = 0x1;
 8001622:	2201      	movs	r2, #1
    sAlarm.Alarm = RTC_ALARM_A;
 8001624:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001628:	4818      	ldr	r0, [pc, #96]	; (800168c <main+0x2c8>)
    sAlarm.AlarmDateWeekDay = 0x1;
 800162a:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800162e:	a90e      	add	r1, sp, #56	; 0x38
    sAlarm.Alarm = RTC_ALARM_A;
 8001630:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001632:	f001 fe55 	bl	80032e0 <HAL_RTC_SetAlarm_IT>
 8001636:	b108      	cbz	r0, 800163c <main+0x278>
 8001638:	b672      	cpsid	i
    while (1)
 800163a:	e7fe      	b.n	800163a <main+0x276>
    huart2.Instance = USART2;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <main+0x2d4>)
    huart2.Init.BaudRate = 115200;
 800163e:	4a17      	ldr	r2, [pc, #92]	; (800169c <main+0x2d8>)
    huart2.Init.Parity = UART_PARITY_NONE;
 8001640:	6118      	str	r0, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001642:	240c      	movs	r4, #12
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001644:	e9c3 0002 	strd	r0, r0, [r3, #8]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001648:	e9c3 4005 	strd	r4, r0, [r3, #20]
    huart2.Init.BaudRate = 115200;
 800164c:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	61d8      	str	r0, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001652:	4618      	mov	r0, r3
    huart2.Init.BaudRate = 115200;
 8001654:	e9c3 2500 	strd	r2, r5, [r3]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001658:	f002 faee 	bl	8003c38 <HAL_UART_Init>
 800165c:	b300      	cbz	r0, 80016a0 <main+0x2dc>
 800165e:	b672      	cpsid	i
    while (1)
 8001660:	e7fe      	b.n	8001660 <main+0x29c>
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40012000 	.word	0x40012000
 800166c:	40020000 	.word	0x40020000
 8001670:	40020c00 	.word	0x40020c00
 8001674:	40020800 	.word	0x40020800
 8001678:	20000084 	.word	0x20000084
 800167c:	0f000001 	.word	0x0f000001
 8001680:	2000012c 	.word	0x2000012c
 8001684:	000186a0 	.word	0x000186a0
 8001688:	40005400 	.word	0x40005400
 800168c:	20000180 	.word	0x20000180
 8001690:	40002800 	.word	0x40002800
 8001694:	00010101 	.word	0x00010101
 8001698:	20000274 	.word	0x20000274
 800169c:	40004400 	.word	0x40004400
    huart1.Instance = USART1;
 80016a0:	4b57      	ldr	r3, [pc, #348]	; (8001800 <main+0x43c>)
 80016a2:	4a58      	ldr	r2, [pc, #352]	; (8001804 <main+0x440>)
    huart1.Init.StopBits = UART_STOPBITS_1;
 80016a4:	e9c3 0002 	strd	r0, r0, [r3, #8]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80016a8:	e9c3 0404 	strd	r0, r4, [r3, #16]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b0:	4618      	mov	r0, r3
    huart1.Init.BaudRate = 115200;
 80016b2:	e9c3 2500 	strd	r2, r5, [r3]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b6:	f002 fabf 	bl	8003c38 <HAL_UART_Init>
 80016ba:	b108      	cbz	r0, 80016c0 <main+0x2fc>
 80016bc:	b672      	cpsid	i
    while (1)
 80016be:	e7fe      	b.n	80016be <main+0x2fa>
    huart3.Instance = USART3;
 80016c0:	4b51      	ldr	r3, [pc, #324]	; (8001808 <main+0x444>)
 80016c2:	4a52      	ldr	r2, [pc, #328]	; (800180c <main+0x448>)
    huart3.Init.StopBits = UART_STOPBITS_1;
 80016c4:	e9c3 0002 	strd	r0, r0, [r3, #8]
    huart3.Init.Mode = UART_MODE_TX_RX;
 80016c8:	e9c3 0404 	strd	r0, r4, [r3, #16]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 80016d0:	4618      	mov	r0, r3
    huart3.Init.BaudRate = 115200;
 80016d2:	e9c3 2500 	strd	r2, r5, [r3]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 80016d6:	f002 faaf 	bl	8003c38 <HAL_UART_Init>
 80016da:	4605      	mov	r5, r0
 80016dc:	b108      	cbz	r0, 80016e2 <main+0x31e>
 80016de:	b672      	cpsid	i
    while (1)
 80016e0:	e7fe      	b.n	80016e0 <main+0x31c>
    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016e2:	4601      	mov	r1, r0
 80016e4:	2210      	movs	r2, #16
 80016e6:	a809      	add	r0, sp, #36	; 0x24
 80016e8:	f002 fc3e 	bl	8003f68 <memset>
    htim2.Instance = TIM2;
 80016ec:	4c48      	ldr	r4, [pc, #288]	; (8001810 <main+0x44c>)
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016ee:	221c      	movs	r2, #28
 80016f0:	4629      	mov	r1, r5
 80016f2:	a80e      	add	r0, sp, #56	; 0x38
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016f4:	e9cd 5507 	strd	r5, r5, [sp, #28]
    htim2.Init.Prescaler = 49;
 80016f8:	2631      	movs	r6, #49	; 0x31
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016fa:	f002 fc35 	bl	8003f68 <memset>
    htim2.Init.Prescaler = 49;
 80016fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001702:	e9c4 3600 	strd	r3, r6, [r4]
    htim2.Init.Period = 500;
 8001706:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	e9c4 3503 	strd	r3, r5, [r4, #12]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800170e:	4620      	mov	r0, r4
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001710:	2380      	movs	r3, #128	; 0x80
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	60a5      	str	r5, [r4, #8]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001714:	61a3      	str	r3, [r4, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001716:	f002 f831 	bl	800377c <HAL_TIM_Base_Init>
 800171a:	b108      	cbz	r0, 8001720 <main+0x35c>
 800171c:	b672      	cpsid	i
    while (1)
 800171e:	e7fe      	b.n	800171e <main+0x35a>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001724:	a909      	add	r1, sp, #36	; 0x24
 8001726:	4620      	mov	r0, r4
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001728:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800172a:	f002 f918 	bl	800395e <HAL_TIM_ConfigClockSource>
 800172e:	b108      	cbz	r0, 8001734 <main+0x370>
 8001730:	b672      	cpsid	i
    while (1)
 8001732:	e7fe      	b.n	8001732 <main+0x36e>
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001734:	4620      	mov	r0, r4
 8001736:	f002 f84d 	bl	80037d4 <HAL_TIM_PWM_Init>
 800173a:	b108      	cbz	r0, 8001740 <main+0x37c>
 800173c:	b672      	cpsid	i
    while (1)
 800173e:	e7fe      	b.n	800173e <main+0x37a>
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	e9cd 0007 	strd	r0, r0, [sp, #28]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001744:	a907      	add	r1, sp, #28
 8001746:	4620      	mov	r0, r4
 8001748:	f002 f9a2 	bl	8003a90 <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4602      	mov	r2, r0
 800174e:	b108      	cbz	r0, 8001754 <main+0x390>
 8001750:	b672      	cpsid	i
    while (1)
 8001752:	e7fe      	b.n	8001752 <main+0x38e>
    sConfigOC.Pulse = 250;
 8001754:	2160      	movs	r1, #96	; 0x60
 8001756:	23fa      	movs	r3, #250	; 0xfa
 8001758:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175c:	9010      	str	r0, [sp, #64]	; 0x40
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175e:	9012      	str	r0, [sp, #72]	; 0x48
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001760:	a90e      	add	r1, sp, #56	; 0x38
 8001762:	4620      	mov	r0, r4
 8001764:	f002 f898 	bl	8003898 <HAL_TIM_PWM_ConfigChannel>
 8001768:	4605      	mov	r5, r0
 800176a:	b108      	cbz	r0, 8001770 <main+0x3ac>
 800176c:	b672      	cpsid	i
    while (1)
 800176e:	e7fe      	b.n	800176e <main+0x3aa>
    HAL_TIM_MspPostInit(&htim2);
 8001770:	4620      	mov	r0, r4
 8001772:	f000 f963 	bl	8001a3c <HAL_TIM_MspPostInit>
    htim6.Instance = TIM6;
 8001776:	4827      	ldr	r0, [pc, #156]	; (8001814 <main+0x450>)
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <main+0x454>)
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	6085      	str	r5, [r0, #8]
    htim6.Init.Prescaler = 49;
 800177c:	e9c0 3600 	strd	r3, r6, [r0]
    htim6.Init.Period = 999;
 8001780:	f240 33e7 	movw	r3, #999	; 0x3e7
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001784:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
    htim6.Init.Period = 999;
 8001788:	60c3      	str	r3, [r0, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	6185      	str	r5, [r0, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800178c:	f001 fff6 	bl	800377c <HAL_TIM_Base_Init>
 8001790:	b108      	cbz	r0, 8001796 <main+0x3d2>
 8001792:	b672      	cpsid	i
    while (1)
 8001794:	e7fe      	b.n	8001794 <main+0x3d0>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001796:	2300      	movs	r3, #0
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001798:	481e      	ldr	r0, [pc, #120]	; (8001814 <main+0x450>)
 800179a:	a90e      	add	r1, sp, #56	; 0x38
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017a0:	f002 f976 	bl	8003a90 <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	b108      	cbz	r0, 80017aa <main+0x3e6>
 80017a6:	b672      	cpsid	i
    while (1)
 80017a8:	e7fe      	b.n	80017a8 <main+0x3e4>
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <main+0x458>)
 80017ac:	491c      	ldr	r1, [pc, #112]	; (8001820 <main+0x45c>)
 80017ae:	481d      	ldr	r0, [pc, #116]	; (8001824 <main+0x460>)
                    if (mInstance == nullptr)
 80017b0:	4d1d      	ldr	r5, [pc, #116]	; (8001828 <main+0x464>)
 80017b2:	22b2      	movs	r2, #178	; 0xb2
 80017b4:	f7ff fbda 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <main+0x458>)
 80017ba:	4919      	ldr	r1, [pc, #100]	; (8001820 <main+0x45c>)
 80017bc:	481b      	ldr	r0, [pc, #108]	; (800182c <main+0x468>)
 80017be:	22b3      	movs	r2, #179	; 0xb3
 80017c0:	f7ff fbd4 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <main+0x458>)
 80017c6:	4916      	ldr	r1, [pc, #88]	; (8001820 <main+0x45c>)
 80017c8:	4819      	ldr	r0, [pc, #100]	; (8001830 <main+0x46c>)
 80017ca:	22b4      	movs	r2, #180	; 0xb4
 80017cc:	f7ff fbce 	bl	8000f6c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    auto &analog = blib::Analog::getInstance();
 80017d0:	f7ff fde0 	bl	8001394 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 80017d4:	682b      	ldr	r3, [r5, #0]
 80017d6:	4604      	mov	r4, r0
 80017d8:	b933      	cbnz	r3, 80017e8 <main+0x424>
                        mInstance = new T();
 80017da:	2014      	movs	r0, #20
 80017dc:	f002 fab1 	bl	8003d42 <_Znwj>
 80017e0:	4606      	mov	r6, r0
 80017e2:	f7ff fbfd 	bl	8000fe0 <_ZN4blib7MonitorC1Ev>
 80017e6:	602e      	str	r6, [r5, #0]
                    return *mInstance;
 80017e8:	682d      	ldr	r5, [r5, #0]
        analog.readAnalog();
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff fb08 	bl	8000e00 <_ZN4blib6Analog10readAnalogEv>
        monitor.showMenu();
 80017f0:	4628      	mov	r0, r5
 80017f2:	f7ff fd75 	bl	80012e0 <_ZN4blib7Monitor8showMenuEv>
        HAL_Delay(1000);
 80017f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017fa:	f000 faa7 	bl	8001d4c <HAL_Delay>
    while (1)
 80017fe:	e7f4      	b.n	80017ea <main+0x426>
 8001800:	20000230 	.word	0x20000230
 8001804:	40011000 	.word	0x40011000
 8001808:	200002b8 	.word	0x200002b8
 800180c:	40004800 	.word	0x40004800
 8001810:	200001a0 	.word	0x200001a0
 8001814:	200001e8 	.word	0x200001e8
 8001818:	40001000 	.word	0x40001000
 800181c:	08004be2 	.word	0x08004be2
 8001820:	08004b3f 	.word	0x08004b3f
 8001824:	08004be7 	.word	0x08004be7
 8001828:	20000080 	.word	0x20000080
 800182c:	08004c11 	.word	0x08004c11
 8001830:	08004c2b 	.word	0x08004c2b

08001834 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_MspInit+0x34>)
 8001838:	2100      	movs	r1, #0
 800183a:	9100      	str	r1, [sp, #0]
 800183c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800183e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001842:	645a      	str	r2, [r3, #68]	; 0x44
 8001844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001846:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800184a:	9200      	str	r2, [sp, #0]
 800184c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	9101      	str	r1, [sp, #4]
 8001850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001852:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001862:	b002      	add	sp, #8
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800186c:	b570      	push	{r4, r5, r6, lr}
 800186e:	4606      	mov	r6, r0
 8001870:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	2214      	movs	r2, #20
 8001874:	2100      	movs	r1, #0
 8001876:	a803      	add	r0, sp, #12
 8001878:	f002 fb76 	bl	8003f68 <memset>
  if(hadc->Instance==ADC1)
 800187c:	6832      	ldr	r2, [r6, #0]
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_ADC_MspInit+0x94>)
 8001880:	429a      	cmp	r2, r3
 8001882:	d13a      	bne.n	80018fa <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001884:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001888:	2500      	movs	r5, #0
 800188a:	9501      	str	r5, [sp, #4]
 800188c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    */
    GPIO_InitStruct.Pin = VIN_Pin|IIN_Pin|VOUT_Pin|IOUT_Pin
                          |TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	481d      	ldr	r0, [pc, #116]	; (8001904 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001890:	4c1d      	ldr	r4, [pc, #116]	; (8001908 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001896:	645a      	str	r2, [r3, #68]	; 0x44
 8001898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800189a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800189e:	9201      	str	r2, [sp, #4]
 80018a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	9502      	str	r5, [sp, #8]
 80018a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	9302      	str	r3, [sp, #8]
 80018b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b6:	221f      	movs	r2, #31
 80018b8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018bc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f000 fef0 	bl	80026a4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018ca:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018d6:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018de:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018e2:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e4:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e8:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018ec:	f000 fd24 	bl	8002338 <HAL_DMA_Init>
 80018f0:	b108      	cbz	r0, 80018f6 <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 80018f2:	f7ff fd4d 	bl	8001390 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018f6:	63b4      	str	r4, [r6, #56]	; 0x38
 80018f8:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018fa:	b008      	add	sp, #32
 80018fc:	bd70      	pop	{r4, r5, r6, pc}
 80018fe:	bf00      	nop
 8001900:	40012000 	.word	0x40012000
 8001904:	40020000 	.word	0x40020000
 8001908:	200000cc 	.word	0x200000cc
 800190c:	40026410 	.word	0x40026410

08001910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001910:	b530      	push	{r4, r5, lr}
 8001912:	4604      	mov	r4, r0
 8001914:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	2214      	movs	r2, #20
 8001918:	2100      	movs	r1, #0
 800191a:	a803      	add	r0, sp, #12
 800191c:	f002 fb24 	bl	8003f68 <memset>
  if(hi2c->Instance==I2C1)
 8001920:	6822      	ldr	r2, [r4, #0]
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_I2C_MspInit+0x60>)
 8001924:	429a      	cmp	r2, r3
 8001926:	d121      	bne.n	800196c <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001928:	4c12      	ldr	r4, [pc, #72]	; (8001974 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192a:	4813      	ldr	r0, [pc, #76]	; (8001978 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192c:	2500      	movs	r5, #0
 800192e:	9501      	str	r5, [sp, #4]
 8001930:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	6323      	str	r3, [r4, #48]	; 0x30
 8001938:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001942:	22c0      	movs	r2, #192	; 0xc0
 8001944:	2312      	movs	r3, #18
 8001946:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800194a:	2103      	movs	r1, #3
 800194c:	2304      	movs	r3, #4
 800194e:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	a903      	add	r1, sp, #12
 8001954:	f000 fea6 	bl	80026a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001958:	9502      	str	r5, [sp, #8]
 800195a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800195c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001960:	6423      	str	r3, [r4, #64]	; 0x40
 8001962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	9302      	str	r3, [sp, #8]
 800196a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800196c:	b009      	add	sp, #36	; 0x24
 800196e:	bd30      	pop	{r4, r5, pc}
 8001970:	40005400 	.word	0x40005400
 8001974:	40023800 	.word	0x40023800
 8001978:	40020400 	.word	0x40020400

0800197c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800197c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800197e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001980:	2210      	movs	r2, #16
 8001982:	2100      	movs	r1, #0
 8001984:	4668      	mov	r0, sp
 8001986:	f002 faef 	bl	8003f68 <memset>
  if(hrtc->Instance==RTC)
 800198a:	6822      	ldr	r2, [r4, #0]
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_RTC_MspInit+0x48>)
 800198e:	429a      	cmp	r2, r3
 8001990:	d116      	bne.n	80019c0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001992:	2302      	movs	r3, #2
 8001994:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001996:	4668      	mov	r0, sp
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199c:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199e:	f001 fa9d 	bl	8002edc <HAL_RCCEx_PeriphCLKConfig>
 80019a2:	b108      	cbz	r0, 80019a8 <HAL_RTC_MspInit+0x2c>
    {
      Error_Handler();
 80019a4:	f7ff fcf4 	bl	8001390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_RTC_MspInit+0x4c>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2029      	movs	r0, #41	; 0x29
 80019b4:	4611      	mov	r1, r2
 80019b6:	f000 fc55 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80019ba:	2029      	movs	r0, #41	; 0x29
 80019bc:	f000 fc84 	bl	80022c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019c0:	b004      	add	sp, #16
 80019c2:	bd10      	pop	{r4, pc}
 80019c4:	40002800 	.word	0x40002800
 80019c8:	42470000 	.word	0x42470000

080019cc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80019cc:	6803      	ldr	r3, [r0, #0]
 80019ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80019d2:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80019d4:	d116      	bne.n	8001a04 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d6:	2200      	movs	r2, #0
 80019d8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80019dc:	9200      	str	r2, [sp, #0]
 80019de:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80019e0:	f041 0101 	orr.w	r1, r1, #1
 80019e4:	6419      	str	r1, [r3, #64]	; 0x40
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ee:	201c      	movs	r0, #28
 80019f0:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019f4:	f000 fc36 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f8:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80019fa:	b003      	add	sp, #12
 80019fc:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a00:	f000 bc62 	b.w	80022c8 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM6)
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <HAL_TIM_Base_MspInit+0x68>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d111      	bne.n	8001a2e <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_TIM_Base_MspInit+0x6c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	9201      	str	r2, [sp, #4]
 8001a10:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a12:	f041 0110 	orr.w	r1, r1, #16
 8001a16:	6419      	str	r1, [r3, #64]	; 0x40
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a20:	2036      	movs	r0, #54	; 0x36
 8001a22:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a24:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a26:	f000 fc1d 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a2a:	2036      	movs	r0, #54	; 0x36
 8001a2c:	e7e5      	b.n	80019fa <HAL_TIM_Base_MspInit+0x2e>
}
 8001a2e:	b003      	add	sp, #12
 8001a30:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a34:	40001000 	.word	0x40001000
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a3c:	b510      	push	{r4, lr}
 8001a3e:	4604      	mov	r4, r0
 8001a40:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	2214      	movs	r2, #20
 8001a44:	2100      	movs	r1, #0
 8001a46:	a801      	add	r0, sp, #4
 8001a48:	f002 fa8e 	bl	8003f68 <memset>
  if(htim->Instance==TIM2)
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a52:	d115      	bne.n	8001a80 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	480b      	ldr	r0, [pc, #44]	; (8001a88 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	631a      	str	r2, [r3, #48]	; 0x30
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2220      	movs	r2, #32
 8001a70:	2302      	movs	r3, #2
 8001a72:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a76:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	f000 fe12 	bl	80026a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a80:	b006      	add	sp, #24
 8001a82:	bd10      	pop	{r4, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020000 	.word	0x40020000

08001a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a8c:	b510      	push	{r4, lr}
 8001a8e:	4604      	mov	r4, r0
 8001a90:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	2214      	movs	r2, #20
 8001a94:	2100      	movs	r1, #0
 8001a96:	a807      	add	r0, sp, #28
 8001a98:	f002 fa66 	bl	8003f68 <memset>
  if(huart->Instance==USART1)
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	4a39      	ldr	r2, [pc, #228]	; (8001b84 <HAL_UART_MspInit+0xf8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d125      	bne.n	8001af0 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aa4:	4b38      	ldr	r3, [pc, #224]	; (8001b88 <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	4839      	ldr	r0, [pc, #228]	; (8001b8c <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	9101      	str	r1, [sp, #4]
 8001aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aae:	f042 0210 	orr.w	r2, r2, #16
 8001ab2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ab6:	f002 0210 	and.w	r2, r2, #16
 8001aba:	9201      	str	r2, [sp, #4]
 8001abc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	9102      	str	r1, [sp, #8]
 8001ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e9cd c307 	strd	ip, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001adc:	f04f 0e03 	mov.w	lr, #3
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	e9cd e30a 	strd	lr, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae8:	f000 fddc 	bl	80026a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001aec:	b00c      	add	sp, #48	; 0x30
 8001aee:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8001af0:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <HAL_UART_MspInit+0x104>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d120      	bne.n	8001b38 <HAL_UART_MspInit+0xac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_UART_MspInit+0xfc>)
 8001af8:	2100      	movs	r1, #0
 8001afa:	9103      	str	r1, [sp, #12]
 8001afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001afe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
 8001b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b06:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b0a:	9203      	str	r2, [sp, #12]
 8001b0c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0e:	9104      	str	r1, [sp, #16]
 8001b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b12:	f042 0208 	orr.w	r2, r2, #8
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2060      	movs	r0, #96	; 0x60
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b22:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b2a:	2403      	movs	r4, #3
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b32:	4818      	ldr	r0, [pc, #96]	; (8001b94 <HAL_UART_MspInit+0x108>)
 8001b34:	a907      	add	r1, sp, #28
 8001b36:	e7d7      	b.n	8001ae8 <HAL_UART_MspInit+0x5c>
  else if(huart->Instance==USART3)
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_UART_MspInit+0x10c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d1d6      	bne.n	8001aec <HAL_UART_MspInit+0x60>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_UART_MspInit+0xfc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	4816      	ldr	r0, [pc, #88]	; (8001b9c <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b42:	2100      	movs	r1, #0
 8001b44:	9105      	str	r1, [sp, #20]
 8001b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b50:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001b54:	9205      	str	r2, [sp, #20]
 8001b56:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	9106      	str	r1, [sp, #24]
 8001b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b5c:	f042 0202 	orr.w	r2, r2, #2
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	9306      	str	r3, [sp, #24]
 8001b6a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001b70:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b72:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7e:	a907      	add	r1, sp, #28
 8001b80:	e7b2      	b.n	8001ae8 <HAL_UART_MspInit+0x5c>
 8001b82:	bf00      	nop
 8001b84:	40011000 	.word	0x40011000
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40004400 	.word	0x40004400
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40004800 	.word	0x40004800
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <NMI_Handler>

08001ba2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler>

08001ba4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <MemManage_Handler>

08001ba6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <BusFault_Handler>

08001ba8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler>

08001baa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001baa:	4770      	bx	lr

08001bac <DebugMon_Handler>:
 8001bac:	4770      	bx	lr

08001bae <PendSV_Handler>:
 8001bae:	4770      	bx	lr

08001bb0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb0:	f000 b8ba 	b.w	8001d28 <HAL_IncTick>

08001bb4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bb4:	4801      	ldr	r0, [pc, #4]	; (8001bbc <TIM2_IRQHandler+0x8>)
 8001bb6:	f001 bcd9 	b.w	800356c <HAL_TIM_IRQHandler>
 8001bba:	bf00      	nop
 8001bbc:	200001a0 	.word	0x200001a0

08001bc0 <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001bc0:	4801      	ldr	r0, [pc, #4]	; (8001bc8 <RTC_Alarm_IRQHandler+0x8>)
 8001bc2:	f001 ba25 	b.w	8003010 <HAL_RTC_AlarmIRQHandler>
 8001bc6:	bf00      	nop
 8001bc8:	20000180 	.word	0x20000180

08001bcc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bcc:	4801      	ldr	r0, [pc, #4]	; (8001bd4 <TIM6_DAC_IRQHandler+0x8>)
 8001bce:	f001 bccd 	b.w	800356c <HAL_TIM_IRQHandler>
 8001bd2:	bf00      	nop
 8001bd4:	200001e8 	.word	0x200001e8

08001bd8 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bd8:	4801      	ldr	r0, [pc, #4]	; (8001be0 <DMA2_Stream0_IRQHandler+0x8>)
 8001bda:	f000 bca5 	b.w	8002528 <HAL_DMA_IRQHandler>
 8001bde:	bf00      	nop
 8001be0:	200000cc 	.word	0x200000cc

08001be4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001be4:	2001      	movs	r0, #1
 8001be6:	4770      	bx	lr

08001be8 <_kill>:

int _kill(int pid, int sig)
{
 8001be8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bea:	f002 fa19 	bl	8004020 <__errno>
 8001bee:	2316      	movs	r3, #22
 8001bf0:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf6:	bd08      	pop	{r3, pc}

08001bf8 <_exit>:

void _exit (int status)
{
 8001bf8:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001bfa:	f002 fa11 	bl	8004020 <__errno>
 8001bfe:	2316      	movs	r3, #22
 8001c00:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001c02:	e7fe      	b.n	8001c02 <_exit+0xa>

08001c04 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <_sbrk+0x30>)
 8001c06:	6811      	ldr	r1, [r2, #0]
{
 8001c08:	b510      	push	{r4, lr}
 8001c0a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001c0c:	b909      	cbnz	r1, 8001c12 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001c0e:	490a      	ldr	r1, [pc, #40]	; (8001c38 <_sbrk+0x34>)
 8001c10:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	6810      	ldr	r0, [r2, #0]
 8001c14:	4909      	ldr	r1, [pc, #36]	; (8001c3c <_sbrk+0x38>)
 8001c16:	4c0a      	ldr	r4, [pc, #40]	; (8001c40 <_sbrk+0x3c>)
 8001c18:	4403      	add	r3, r0
 8001c1a:	1b09      	subs	r1, r1, r4
 8001c1c:	428b      	cmp	r3, r1
 8001c1e:	d906      	bls.n	8001c2e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001c20:	f002 f9fe 	bl	8004020 <__errno>
 8001c24:	230c      	movs	r3, #12
 8001c26:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001c2c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001c2e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001c30:	e7fc      	b.n	8001c2c <_sbrk+0x28>
 8001c32:	bf00      	nop
 8001c34:	200002fc 	.word	0x200002fc
 8001c38:	20000850 	.word	0x20000850
 8001c3c:	20020000 	.word	0x20020000
 8001c40:	00000400 	.word	0x00000400

08001c44 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c44:	4a03      	ldr	r2, [pc, #12]	; (8001c54 <SystemInit+0x10>)
 8001c46:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001c4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c5e:	490e      	ldr	r1, [pc, #56]	; (8001c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c72:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c74:	4c0b      	ldr	r4, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c82:	f7ff ffdf 	bl	8001c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c86:	f002 f9d1 	bl	800402c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8a:	f7ff fb9b 	bl	80013c4 <main>
  bx  lr    
 8001c8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c9c:	08004cb0 	.word	0x08004cb0
  ldr r2, =_sbss
 8001ca0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ca4:	20000850 	.word	0x20000850

08001ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC_IRQHandler>
	...

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_InitTick+0x3c>)
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cba:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <HAL_InitTick+0x40>)
{
 8001cbc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cbe:	6810      	ldr	r0, [r2, #0]
 8001cc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cc4:	f000 fb0e 	bl	80022e4 <HAL_SYSTICK_Config>
 8001cc8:	4604      	mov	r4, r0
 8001cca:	b958      	cbnz	r0, 8001ce4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ccc:	2d0f      	cmp	r5, #15
 8001cce:	d809      	bhi.n	8001ce4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f000 fac4 	bl	8002264 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <HAL_InitTick+0x44>)
 8001cde:	4620      	mov	r0, r4
 8001ce0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	e7fc      	b.n	8001ce2 <HAL_InitTick+0x36>
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <HAL_Init>:
{
 8001cf4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_Init+0x30>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d06:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d0e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d10:	2003      	movs	r0, #3
 8001d12:	f000 fa95 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d16:	200f      	movs	r0, #15
 8001d18:	f7ff ffc8 	bl	8001cac <HAL_InitTick>
  HAL_MspInit();
 8001d1c:	f7ff fd8a 	bl	8001834 <HAL_MspInit>
}
 8001d20:	2000      	movs	r0, #0
 8001d22:	bd08      	pop	{r3, pc}
 8001d24:	40023c00 	.word	0x40023c00

08001d28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d28:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <HAL_IncTick+0x10>)
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <HAL_IncTick+0x14>)
 8001d2c:	6811      	ldr	r1, [r2, #0]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	440b      	add	r3, r1
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000300 	.word	0x20000300
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d40:	4b01      	ldr	r3, [pc, #4]	; (8001d48 <HAL_GetTick+0x8>)
 8001d42:	6818      	ldr	r0, [r3, #0]
}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000300 	.word	0x20000300

08001d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d4c:	b538      	push	{r3, r4, r5, lr}
 8001d4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d50:	f7ff fff6 	bl	8001d40 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d54:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001d56:	bf1c      	itt	ne
 8001d58:	4b05      	ldrne	r3, [pc, #20]	; (8001d70 <HAL_Delay+0x24>)
 8001d5a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001d5e:	bf18      	it	ne
 8001d60:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d62:	f7ff ffed 	bl	8001d40 <HAL_GetTick>
 8001d66:	1b43      	subs	r3, r0, r5
 8001d68:	42a3      	cmp	r3, r4
 8001d6a:	d3fa      	bcc.n	8001d62 <HAL_Delay+0x16>
  {
  }
}
 8001d6c:	bd38      	pop	{r3, r4, r5, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000004 	.word	0x20000004

08001d74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d74:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d76:	4604      	mov	r4, r0
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	f000 809b 	beq.w	8001eb4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d7e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001d80:	b925      	cbnz	r5, 8001d8c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d82:	f7ff fd73 	bl	800186c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d86:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d88:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d8e:	06db      	lsls	r3, r3, #27
 8001d90:	f100 808e 	bmi.w	8001eb0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d9a:	f023 0302 	bic.w	r3, r3, #2
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001da4:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <HAL_ADC_Init+0x144>)
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001dac:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	6861      	ldr	r1, [r4, #4]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001db6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001db8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001dc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dca:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dcc:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dce:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dd2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dda:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ddc:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dea:	4934      	ldr	r1, [pc, #208]	; (8001ebc <HAL_ADC_Init+0x148>)
 8001dec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001dee:	428a      	cmp	r2, r1
 8001df0:	d052      	beq.n	8001e98 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001df2:	6899      	ldr	r1, [r3, #8]
 8001df4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001df8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dfa:	6899      	ldr	r1, [r3, #8]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e00:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e0e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	f022 0202 	bic.w	r2, r2, #2
 8001e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	7e21      	ldrb	r1, [r4, #24]
 8001e1c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001e20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e22:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001e26:	2a00      	cmp	r2, #0
 8001e28:	d03e      	beq.n	8001ea8 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e2a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	3901      	subs	r1, #1
 8001e40:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e44:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e48:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e52:	3901      	subs	r1, #1
 8001e54:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001e58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001e68:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001e6c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e6e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e70:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e78:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001e7a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e7c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001e80:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001e82:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001e84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e86:	f023 0303 	bic.w	r3, r3, #3
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001e90:	2300      	movs	r3, #0
 8001e92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001e96:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ea6:	e7b2      	b.n	8001e0e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eae:	e7c9      	b.n	8001e44 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	e7ed      	b.n	8001e90 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	e7ee      	b.n	8001e96 <HAL_ADC_Init+0x122>
 8001eb8:	40012300 	.word	0x40012300
 8001ebc:	0f000001 	.word	0x0f000001

08001ec0 <HAL_ADC_Start_DMA>:
{
 8001ec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ec2:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001ec8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001ecc:	2a01      	cmp	r2, #1
{
 8001ece:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001ed0:	f000 8092 	beq.w	8001ff8 <HAL_ADC_Start_DMA+0x138>
 8001ed4:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ed6:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 8001ed8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001edc:	68b2      	ldr	r2, [r6, #8]
 8001ede:	07d4      	lsls	r4, r2, #31
 8001ee0:	d554      	bpl.n	8001f8c <HAL_ADC_Start_DMA+0xcc>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ee2:	68b2      	ldr	r2, [r6, #8]
 8001ee4:	05d0      	lsls	r0, r2, #23
 8001ee6:	d464      	bmi.n	8001fb2 <HAL_ADC_Start_DMA+0xf2>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ee8:	68b4      	ldr	r4, [r6, #8]
 8001eea:	f014 0401 	ands.w	r4, r4, #1
 8001eee:	d079      	beq.n	8001fe4 <HAL_ADC_Start_DMA+0x124>
    ADC_STATE_CLR_SET(hadc->State,
 8001ef0:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8001ef2:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001ef6:	f020 0001 	bic.w	r0, r0, #1
 8001efa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001efe:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f00:	6872      	ldr	r2, [r6, #4]
 8001f02:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f04:	bf41      	itttt	mi
 8001f06:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 8001f08:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001f0c:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001f10:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f12:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f14:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f16:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f1a:	bf1c      	itt	ne
 8001f1c:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 8001f1e:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001f22:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8001f24:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f26:	4a35      	ldr	r2, [pc, #212]	; (8001ffc <HAL_ADC_Start_DMA+0x13c>)
    __HAL_UNLOCK(hadc);   
 8001f28:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f2c:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f2e:	4a34      	ldr	r2, [pc, #208]	; (8002000 <HAL_ADC_Start_DMA+0x140>)
 8001f30:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f32:	4a34      	ldr	r2, [pc, #208]	; (8002004 <HAL_ADC_Start_DMA+0x144>)
 8001f34:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f3a:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f3c:	6872      	ldr	r2, [r6, #4]
 8001f3e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f42:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f44:	68b2      	ldr	r2, [r6, #8]
 8001f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4a:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8001f52:	f000 fa6f 	bl	8002434 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f56:	492c      	ldr	r1, [pc, #176]	; (8002008 <HAL_ADC_Start_DMA+0x148>)
 8001f58:	682b      	ldr	r3, [r5, #0]
 8001f5a:	684a      	ldr	r2, [r1, #4]
 8001f5c:	482b      	ldr	r0, [pc, #172]	; (800200c <HAL_ADC_Start_DMA+0x14c>)
 8001f5e:	f012 021f 	ands.w	r2, r2, #31
 8001f62:	d132      	bne.n	8001fca <HAL_ADC_Start_DMA+0x10a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f64:	4283      	cmp	r3, r0
 8001f66:	d007      	beq.n	8001f78 <HAL_ADC_Start_DMA+0xb8>
 8001f68:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001f6c:	4283      	cmp	r3, r0
 8001f6e:	d125      	bne.n	8001fbc <HAL_ADC_Start_DMA+0xfc>
 8001f70:	6849      	ldr	r1, [r1, #4]
 8001f72:	f011 0f1f 	tst.w	r1, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f76:	d132      	bne.n	8001fde <HAL_ADC_Start_DMA+0x11e>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f78:	6898      	ldr	r0, [r3, #8]
 8001f7a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001f7e:	d103      	bne.n	8001f88 <HAL_ADC_Start_DMA+0xc8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001f88:	2200      	movs	r2, #0
 8001f8a:	e028      	b.n	8001fde <HAL_ADC_Start_DMA+0x11e>
    __HAL_ADC_ENABLE(hadc);
 8001f8c:	68b2      	ldr	r2, [r6, #8]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f94:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <HAL_ADC_Start_DMA+0x150>)
 8001f96:	6810      	ldr	r0, [r2, #0]
 8001f98:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <HAL_ADC_Start_DMA+0x154>)
 8001f9a:	fbb0 f0f2 	udiv	r0, r0, r2
 8001f9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001fa2:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001fa4:	9a01      	ldr	r2, [sp, #4]
 8001fa6:	2a00      	cmp	r2, #0
 8001fa8:	d09b      	beq.n	8001ee2 <HAL_ADC_Start_DMA+0x22>
      counter--;
 8001faa:	9a01      	ldr	r2, [sp, #4]
 8001fac:	3a01      	subs	r2, #1
 8001fae:	9201      	str	r2, [sp, #4]
 8001fb0:	e7f8      	b.n	8001fa4 <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fb2:	68b2      	ldr	r2, [r6, #8]
 8001fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fb8:	60b2      	str	r2, [r6, #8]
 8001fba:	e795      	b.n	8001ee8 <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fbc:	4816      	ldr	r0, [pc, #88]	; (8002018 <HAL_ADC_Start_DMA+0x158>)
 8001fbe:	4283      	cmp	r3, r0
 8001fc0:	d10d      	bne.n	8001fde <HAL_ADC_Start_DMA+0x11e>
 8001fc2:	6849      	ldr	r1, [r1, #4]
 8001fc4:	f011 0f10 	tst.w	r1, #16
 8001fc8:	e7d5      	b.n	8001f76 <HAL_ADC_Start_DMA+0xb6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fca:	4283      	cmp	r3, r0
 8001fcc:	d1dc      	bne.n	8001f88 <HAL_ADC_Start_DMA+0xc8>
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	f012 5240 	ands.w	r2, r2, #805306368	; 0x30000000
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_ADC_Start_DMA+0x134>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fd6:	6899      	ldr	r1, [r3, #8]
 8001fd8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001fdc:	6099      	str	r1, [r3, #8]
}
 8001fde:	4610      	mov	r0, r2
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001fe6:	f043 0310 	orr.w	r3, r3, #16
 8001fea:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fec:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	646b      	str	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8001ff4:	4622      	mov	r2, r4
 8001ff6:	e7f2      	b.n	8001fde <HAL_ADC_Start_DMA+0x11e>
  __HAL_LOCK(hadc);
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	e7f0      	b.n	8001fde <HAL_ADC_Start_DMA+0x11e>
 8001ffc:	080020b3 	.word	0x080020b3
 8002000:	08002091 	.word	0x08002091
 8002004:	0800209d 	.word	0x0800209d
 8002008:	40012300 	.word	0x40012300
 800200c:	40012000 	.word	0x40012000
 8002010:	20000000 	.word	0x20000000
 8002014:	000f4240 	.word	0x000f4240
 8002018:	40012200 	.word	0x40012200

0800201c <HAL_ADC_Stop_DMA>:
{
 800201c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800201e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002022:	2b01      	cmp	r3, #1
{
 8002024:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002026:	d030      	beq.n	800208a <HAL_ADC_Stop_DMA+0x6e>
  __HAL_ADC_DISABLE(hadc);
 8002028:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 800202a:	2301      	movs	r3, #1
 800202c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8002030:	6893      	ldr	r3, [r2, #8]
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002038:	6893      	ldr	r3, [r2, #8]
 800203a:	f013 0301 	ands.w	r3, r3, #1
 800203e:	d122      	bne.n	8002086 <HAL_ADC_Stop_DMA+0x6a>
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002040:	6891      	ldr	r1, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002042:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002044:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002048:	6091      	str	r1, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800204a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800204e:	2a02      	cmp	r2, #2
 8002050:	d117      	bne.n	8002082 <HAL_ADC_Stop_DMA+0x66>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002052:	f000 fa29 	bl	80024a8 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8002056:	b118      	cbz	r0, 8002060 <HAL_ADC_Stop_DMA+0x44>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002058:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800205a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002060:	6822      	ldr	r2, [r4, #0]
 8002062:	6853      	ldr	r3, [r2, #4]
 8002064:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002068:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800206a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800206c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800207a:	2300      	movs	r3, #0
 800207c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002080:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002082:	4618      	mov	r0, r3
 8002084:	e7ec      	b.n	8002060 <HAL_ADC_Stop_DMA+0x44>
 8002086:	2000      	movs	r0, #0
 8002088:	e7f7      	b.n	800207a <HAL_ADC_Stop_DMA+0x5e>
  __HAL_LOCK(hadc);
 800208a:	2002      	movs	r0, #2
 800208c:	e7f8      	b.n	8002080 <HAL_ADC_Stop_DMA+0x64>

0800208e <HAL_ADC_ConvHalfCpltCallback>:
 800208e:	4770      	bx	lr

08002090 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002090:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002092:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002094:	f7ff fffb 	bl	800208e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002098:	bd08      	pop	{r3, pc}

0800209a <HAL_ADC_ErrorCallback>:
 800209a:	4770      	bx	lr

0800209c <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800209c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800209e:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80020a0:	2340      	movs	r3, #64	; 0x40
 80020a2:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020ac:	f7ff fff5 	bl	800209a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020b0:	bd08      	pop	{r3, pc}

080020b2 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b6:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80020ba:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020be:	d123      	bne.n	8002108 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	6891      	ldr	r1, [r2, #8]
 80020ca:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 80020ce:	d117      	bne.n	8002100 <ADC_DMAConvCplt+0x4e>
 80020d0:	7e19      	ldrb	r1, [r3, #24]
 80020d2:	b9a9      	cbnz	r1, 8002100 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020d6:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80020da:	d002      	beq.n	80020e2 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020dc:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020de:	0548      	lsls	r0, r1, #21
 80020e0:	d40e      	bmi.n	8002100 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020e2:	6851      	ldr	r1, [r2, #4]
 80020e4:	f021 0120 	bic.w	r1, r1, #32
 80020e8:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f4:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f6:	bf5e      	ittt	pl
 80020f8:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 80020fa:	f042 0201 	orrpl.w	r2, r2, #1
 80020fe:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f957 	bl	80013b4 <HAL_ADC_ConvCpltCallback>
}
 8002106:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002108:	06d2      	lsls	r2, r2, #27
 800210a:	d503      	bpl.n	8002114 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ffc4 	bl	800209a <HAL_ADC_ErrorCallback>
 8002112:	e7f8      	b.n	8002106 <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	4718      	bx	r3
	...

08002120 <HAL_ADC_ConfigChannel>:
{
 8002120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002126:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800212a:	2b01      	cmp	r3, #1
 800212c:	d064      	beq.n	80021f8 <HAL_ADC_ConfigChannel+0xd8>
 800212e:	2301      	movs	r3, #1
 8002130:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002134:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002136:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002138:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 800213a:	2d09      	cmp	r5, #9
 800213c:	b2ac      	uxth	r4, r5
 800213e:	d931      	bls.n	80021a4 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002140:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002144:	68df      	ldr	r7, [r3, #12]
 8002146:	3a1e      	subs	r2, #30
 8002148:	f04f 0c07 	mov.w	ip, #7
 800214c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002150:	ea27 070c 	bic.w	r7, r7, ip
 8002154:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002156:	68df      	ldr	r7, [r3, #12]
 8002158:	fa06 f202 	lsl.w	r2, r6, r2
 800215c:	433a      	orrs	r2, r7
 800215e:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8002160:	6849      	ldr	r1, [r1, #4]
 8002162:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002164:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8002168:	d82b      	bhi.n	80021c2 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800216a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216c:	3a05      	subs	r2, #5
 800216e:	261f      	movs	r6, #31
 8002170:	4096      	lsls	r6, r2
 8002172:	ea21 0106 	bic.w	r1, r1, r6
 8002176:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002178:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800217a:	fa04 f202 	lsl.w	r2, r4, r2
 800217e:	430a      	orrs	r2, r1
 8002180:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002182:	4a2b      	ldr	r2, [pc, #172]	; (8002230 <HAL_ADC_ConfigChannel+0x110>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d107      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x78>
 8002188:	2d12      	cmp	r5, #18
 800218a:	d137      	bne.n	80021fc <HAL_ADC_ConfigChannel+0xdc>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800218c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8002190:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002194:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8002198:	2300      	movs	r3, #0
 800219a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800219e:	4618      	mov	r0, r3
}
 80021a0:	b003      	add	sp, #12
 80021a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80021aa:	2707      	movs	r7, #7
 80021ac:	fa07 f70c 	lsl.w	r7, r7, ip
 80021b0:	ea22 0207 	bic.w	r2, r2, r7
 80021b4:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	fa06 f60c 	lsl.w	r6, r6, ip
 80021bc:	4316      	orrs	r6, r2
 80021be:	611e      	str	r6, [r3, #16]
 80021c0:	e7ce      	b.n	8002160 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80021c2:	290c      	cmp	r1, #12
 80021c4:	f04f 011f 	mov.w	r1, #31
 80021c8:	d80b      	bhi.n	80021e2 <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021ca:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80021cc:	3a23      	subs	r2, #35	; 0x23
 80021ce:	4091      	lsls	r1, r2
 80021d0:	ea26 0101 	bic.w	r1, r6, r1
 80021d4:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021d8:	fa04 f202 	lsl.w	r2, r4, r2
 80021dc:	430a      	orrs	r2, r1
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
 80021e0:	e7cf      	b.n	8002182 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021e2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80021e4:	3a41      	subs	r2, #65	; 0x41
 80021e6:	4091      	lsls	r1, r2
 80021e8:	ea26 0101 	bic.w	r1, r6, r1
 80021ec:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f0:	4094      	lsls	r4, r2
 80021f2:	430c      	orrs	r4, r1
 80021f4:	62dc      	str	r4, [r3, #44]	; 0x2c
 80021f6:	e7c4      	b.n	8002182 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80021f8:	2002      	movs	r0, #2
 80021fa:	e7d1      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021fc:	f1a5 0310 	sub.w	r3, r5, #16
 8002200:	2b01      	cmp	r3, #1
 8002202:	d8c9      	bhi.n	8002198 <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002204:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <HAL_ADC_ConfigChannel+0x114>)
 8002206:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002208:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800220a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800220e:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002210:	d1c2      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_ADC_ConfigChannel+0x118>)
 8002214:	4a09      	ldr	r2, [pc, #36]	; (800223c <HAL_ADC_ConfigChannel+0x11c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fbb3 f3f2 	udiv	r3, r3, r2
 800221c:	220a      	movs	r2, #10
 800221e:	4353      	muls	r3, r2
        counter--;
 8002220:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002222:	9b01      	ldr	r3, [sp, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0b7      	beq.n	8002198 <HAL_ADC_ConfigChannel+0x78>
        counter--;
 8002228:	9b01      	ldr	r3, [sp, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	e7f8      	b.n	8002220 <HAL_ADC_ConfigChannel+0x100>
 800222e:	bf00      	nop
 8002230:	40012000 	.word	0x40012000
 8002234:	40012300 	.word	0x40012300
 8002238:	20000000 	.word	0x20000000
 800223c:	000f4240 	.word	0x000f4240

08002240 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4907      	ldr	r1, [pc, #28]	; (8002260 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002242:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002244:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002248:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002250:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800225c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002266:	b530      	push	{r4, r5, lr}
 8002268:	68dc      	ldr	r4, [r3, #12]
 800226a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002272:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	2b04      	cmp	r3, #4
 8002276:	bf28      	it	cs
 8002278:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002280:	bf8c      	ite	hi
 8002282:	3c03      	subhi	r4, #3
 8002284:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002286:	fa05 f303 	lsl.w	r3, r5, r3
 800228a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228e:	40a5      	lsls	r5, r4
 8002290:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8002296:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	bfac      	ite	ge
 800229e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	4a08      	ldrlt	r2, [pc, #32]	; (80022c4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	bfb8      	it	lt
 80022aa:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	bfaa      	itet	ge
 80022b2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80022bc:	bd30      	pop	{r4, r5, pc}
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00
 80022c4:	e000ed14 	.word	0xe000ed14

080022c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80022c8:	2800      	cmp	r0, #0
 80022ca:	db07      	blt.n	80022dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022cc:	0941      	lsrs	r1, r0, #5
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_NVIC_EnableIRQ+0x18>)
 80022d0:	f000 001f 	and.w	r0, r0, #31
 80022d4:	2301      	movs	r3, #1
 80022d6:	4083      	lsls	r3, r0
 80022d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e4:	3801      	subs	r0, #1
 80022e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80022ea:	d20b      	bcs.n	8002304 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	4a05      	ldr	r2, [pc, #20]	; (8002308 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	21f0      	movs	r1, #240	; 0xf0
 80022f6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fe:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002300:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002302:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002304:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800230c:	6803      	ldr	r3, [r0, #0]
{
 800230e:	b510      	push	{r4, lr}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002310:	b2da      	uxtb	r2, r3
 8002312:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002314:	4c07      	ldr	r4, [pc, #28]	; (8002334 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002316:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800231a:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 800231e:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002320:	bf88      	it	hi
 8002322:	3304      	addhi	r3, #4
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002324:	2118      	movs	r1, #24
 8002326:	fbb2 f1f1 	udiv	r1, r2, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800232a:	5c61      	ldrb	r1, [r4, r1]
 800232c:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800232e:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd10      	pop	{r4, pc}
 8002334:	08004c63 	.word	0x08004c63

08002338 <HAL_DMA_Init>:
{
 8002338:	b570      	push	{r4, r5, r6, lr}
 800233a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff fd00 	bl	8001d40 <HAL_GetTick>
 8002340:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002342:	2c00      	cmp	r4, #0
 8002344:	d071      	beq.n	800242a <HAL_DMA_Init+0xf2>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002346:	2302      	movs	r3, #2
 8002348:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800234c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800234e:	2300      	movs	r3, #0
 8002350:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002354:	6813      	ldr	r3, [r2, #0]
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235c:	6822      	ldr	r2, [r4, #0]
 800235e:	6813      	ldr	r3, [r2, #0]
 8002360:	07d8      	lsls	r0, r3, #31
 8002362:	d42e      	bmi.n	80023c2 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8002364:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002366:	4832      	ldr	r0, [pc, #200]	; (8002430 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002368:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800236a:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800236c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8002370:	432b      	orrs	r3, r5
 8002372:	68e5      	ldr	r5, [r4, #12]
 8002374:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002376:	6925      	ldr	r5, [r4, #16]
 8002378:	432b      	orrs	r3, r5
 800237a:	6965      	ldr	r5, [r4, #20]
 800237c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237e:	69e5      	ldr	r5, [r4, #28]
 8002380:	430b      	orrs	r3, r1
 8002382:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002384:	6a25      	ldr	r5, [r4, #32]
 8002386:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002388:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800238a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800238c:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800238e:	bf02      	ittt	eq
 8002390:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002394:	4335      	orreq	r5, r6
 8002396:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8002398:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 800239a:	6953      	ldr	r3, [r2, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800239c:	2804      	cmp	r0, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800239e:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80023a2:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023a6:	d132      	bne.n	800240e <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
 80023a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023aa:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80023ac:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023ae:	b375      	cbz	r5, 800240e <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023b0:	b991      	cbnz	r1, 80023d8 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 80023b2:	2801      	cmp	r0, #1
 80023b4:	d020      	beq.n	80023f8 <HAL_DMA_Init+0xc0>
 80023b6:	f030 0102 	bics.w	r1, r0, #2
 80023ba:	d128      	bne.n	800240e <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023bc:	01e9      	lsls	r1, r5, #7
 80023be:	d526      	bpl.n	800240e <HAL_DMA_Init+0xd6>
 80023c0:	e01d      	b.n	80023fe <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023c2:	f7ff fcbd 	bl	8001d40 <HAL_GetTick>
 80023c6:	1b40      	subs	r0, r0, r5
 80023c8:	2805      	cmp	r0, #5
 80023ca:	d9c7      	bls.n	800235c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023cc:	2320      	movs	r3, #32
 80023ce:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d0:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80023d2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023d8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80023dc:	d113      	bne.n	8002406 <HAL_DMA_Init+0xce>
    switch (tmp)
 80023de:	2803      	cmp	r0, #3
 80023e0:	d815      	bhi.n	800240e <HAL_DMA_Init+0xd6>
 80023e2:	a101      	add	r1, pc, #4	; (adr r1, 80023e8 <HAL_DMA_Init+0xb0>)
 80023e4:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80023e8:	080023ff 	.word	0x080023ff
 80023ec:	080023bd 	.word	0x080023bd
 80023f0:	080023ff 	.word	0x080023ff
 80023f4:	080023f9 	.word	0x080023f9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80023fc:	d107      	bne.n	800240e <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023fe:	2340      	movs	r3, #64	; 0x40
 8002400:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002402:	2001      	movs	r0, #1
 8002404:	e7e5      	b.n	80023d2 <HAL_DMA_Init+0x9a>
    switch (tmp)
 8002406:	2802      	cmp	r0, #2
 8002408:	d9f9      	bls.n	80023fe <HAL_DMA_Init+0xc6>
 800240a:	2803      	cmp	r0, #3
 800240c:	d0d6      	beq.n	80023bc <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 800240e:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002410:	4620      	mov	r0, r4
 8002412:	f7ff ff7b 	bl	800230c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002416:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002418:	233f      	movs	r3, #63	; 0x3f
 800241a:	4093      	lsls	r3, r2
 800241c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002420:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002422:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002424:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002428:	e7d5      	b.n	80023d6 <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
 800242a:	2001      	movs	r0, #1
 800242c:	e7d3      	b.n	80023d6 <HAL_DMA_Init+0x9e>
 800242e:	bf00      	nop
 8002430:	f010803f 	.word	0xf010803f

08002434 <HAL_DMA_Start_IT>:
{
 8002434:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002436:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800243c:	2c01      	cmp	r4, #1
 800243e:	d031      	beq.n	80024a4 <HAL_DMA_Start_IT+0x70>
 8002440:	2401      	movs	r4, #1
 8002442:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002446:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800244a:	2c01      	cmp	r4, #1
 800244c:	f04f 0500 	mov.w	r5, #0
 8002450:	f04f 0402 	mov.w	r4, #2
 8002454:	d124      	bne.n	80024a0 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002456:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800245a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800245c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800245e:	6825      	ldr	r5, [r4, #0]
 8002460:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002464:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002466:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002468:	6883      	ldr	r3, [r0, #8]
 800246a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800246c:	bf0e      	itee	eq
 800246e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002470:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002472:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002474:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8002476:	bf08      	it	eq
 8002478:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247a:	233f      	movs	r3, #63	; 0x3f
 800247c:	4093      	lsls	r3, r2
 800247e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	f043 0316 	orr.w	r3, r3, #22
 8002486:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002488:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800248a:	b11b      	cbz	r3, 8002494 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	f043 0308 	orr.w	r3, r3, #8
 8002492:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249c:	2000      	movs	r0, #0
}
 800249e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80024a0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80024a4:	2002      	movs	r0, #2
 80024a6:	e7fa      	b.n	800249e <HAL_DMA_Start_IT+0x6a>

080024a8 <HAL_DMA_Abort>:
{
 80024a8:	b570      	push	{r4, r5, r6, lr}
 80024aa:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ac:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80024ae:	f7ff fc47 	bl	8001d40 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80024b6:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 80024b8:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ba:	d006      	beq.n	80024ca <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 80024c0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80024c2:	2300      	movs	r3, #0
 80024c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80024c8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	f022 0216 	bic.w	r2, r2, #22
 80024d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024da:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024de:	b90a      	cbnz	r2, 80024e4 <HAL_DMA_Abort+0x3c>
 80024e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80024e2:	b11a      	cbz	r2, 80024ec <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	f022 0208 	bic.w	r2, r2, #8
 80024ea:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f013 0301 	ands.w	r3, r3, #1
 80024fc:	d108      	bne.n	8002510 <HAL_DMA_Abort+0x68>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024fe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002500:	223f      	movs	r2, #63	; 0x3f
 8002502:	408a      	lsls	r2, r1
 8002504:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002506:	2201      	movs	r2, #1
 8002508:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 800250c:	4618      	mov	r0, r3
 800250e:	e7d8      	b.n	80024c2 <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002510:	f7ff fc16 	bl	8001d40 <HAL_GetTick>
 8002514:	1b40      	subs	r0, r0, r5
 8002516:	2805      	cmp	r0, #5
 8002518:	d9ec      	bls.n	80024f4 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800251a:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800251c:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800251e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002520:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8002524:	e7cd      	b.n	80024c2 <HAL_DMA_Abort+0x1a>
	...

08002528 <HAL_DMA_IRQHandler>:
{
 8002528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800252e:	4b5c      	ldr	r3, [pc, #368]	; (80026a0 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002530:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8002532:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002534:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002536:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002538:	2208      	movs	r2, #8
 800253a:	409a      	lsls	r2, r3
 800253c:	4232      	tst	r2, r6
{
 800253e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002540:	d00c      	beq.n	800255c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002542:	6801      	ldr	r1, [r0, #0]
 8002544:	6808      	ldr	r0, [r1, #0]
 8002546:	0740      	lsls	r0, r0, #29
 8002548:	d508      	bpl.n	800255c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800254a:	6808      	ldr	r0, [r1, #0]
 800254c:	f020 0004 	bic.w	r0, r0, #4
 8002550:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002552:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002554:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800255c:	2201      	movs	r2, #1
 800255e:	409a      	lsls	r2, r3
 8002560:	4232      	tst	r2, r6
 8002562:	d008      	beq.n	8002576 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002564:	6821      	ldr	r1, [r4, #0]
 8002566:	6949      	ldr	r1, [r1, #20]
 8002568:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800256a:	bf41      	itttt	mi
 800256c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800256e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002570:	f042 0202 	orrmi.w	r2, r2, #2
 8002574:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002576:	2204      	movs	r2, #4
 8002578:	409a      	lsls	r2, r3
 800257a:	4232      	tst	r2, r6
 800257c:	d008      	beq.n	8002590 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800257e:	6821      	ldr	r1, [r4, #0]
 8002580:	6809      	ldr	r1, [r1, #0]
 8002582:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002584:	bf41      	itttt	mi
 8002586:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002588:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800258a:	f042 0204 	orrmi.w	r2, r2, #4
 800258e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002590:	2210      	movs	r2, #16
 8002592:	409a      	lsls	r2, r3
 8002594:	4232      	tst	r2, r6
 8002596:	d010      	beq.n	80025ba <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	6819      	ldr	r1, [r3, #0]
 800259c:	0709      	lsls	r1, r1, #28
 800259e:	d50c      	bpl.n	80025ba <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025a0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	0350      	lsls	r0, r2, #13
 80025a6:	d537      	bpl.n	8002618 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	0319      	lsls	r1, r3, #12
 80025ac:	d401      	bmi.n	80025b2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80025ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b0:	e000      	b.n	80025b4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80025b4:	b10b      	cbz	r3, 80025ba <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80025b6:	4620      	mov	r0, r4
 80025b8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025ba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80025bc:	2220      	movs	r2, #32
 80025be:	408a      	lsls	r2, r1
 80025c0:	4232      	tst	r2, r6
 80025c2:	d03a      	beq.n	800263a <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	06c6      	lsls	r6, r0, #27
 80025ca:	d536      	bpl.n	800263a <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025cc:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ce:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80025d2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025d6:	d127      	bne.n	8002628 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d8:	f022 0216 	bic.w	r2, r2, #22
 80025dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025de:	695a      	ldr	r2, [r3, #20]
 80025e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025e4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80025e8:	b90a      	cbnz	r2, 80025ee <HAL_DMA_IRQHandler+0xc6>
 80025ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80025ec:	b11a      	cbz	r2, 80025f6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	f022 0208 	bic.w	r2, r2, #8
 80025f4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f6:	233f      	movs	r3, #63	; 0x3f
 80025f8:	408b      	lsls	r3, r1
 80025fa:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002602:	2300      	movs	r3, #0
 8002604:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002608:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800260a:	2b00      	cmp	r3, #0
 800260c:	d045      	beq.n	800269a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800260e:	4620      	mov	r0, r4
}
 8002610:	b003      	add	sp, #12
 8002612:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002616:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800261c:	bf5e      	ittt	pl
 800261e:	681a      	ldrpl	r2, [r3, #0]
 8002620:	f022 0208 	bicpl.w	r2, r2, #8
 8002624:	601a      	strpl	r2, [r3, #0]
 8002626:	e7c2      	b.n	80025ae <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002628:	0350      	lsls	r0, r2, #13
 800262a:	d527      	bpl.n	800267c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	0319      	lsls	r1, r3, #12
 8002630:	d431      	bmi.n	8002696 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8002632:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8002634:	b10b      	cbz	r3, 800263a <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8002636:	4620      	mov	r0, r4
 8002638:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800263a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800263c:	b36b      	cbz	r3, 800269a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800263e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002640:	07da      	lsls	r2, r3, #31
 8002642:	d519      	bpl.n	8002678 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8002644:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002646:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800264a:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 800264e:	2305      	movs	r3, #5
 8002650:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002654:	6813      	ldr	r3, [r2, #0]
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800265c:	9b01      	ldr	r3, [sp, #4]
 800265e:	3301      	adds	r3, #1
 8002660:	42bb      	cmp	r3, r7
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	d802      	bhi.n	800266c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002666:	6813      	ldr	r3, [r2, #0]
 8002668:	07db      	lsls	r3, r3, #31
 800266a:	d4f7      	bmi.n	800265c <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 800266c:	2301      	movs	r3, #1
 800266e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002672:	2300      	movs	r3, #0
 8002674:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002678:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800267a:	e7c6      	b.n	800260a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002682:	d108      	bne.n	8002696 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	f021 0110 	bic.w	r1, r1, #16
 800268a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800268c:	2301      	movs	r3, #1
 800268e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002692:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002698:	e7cc      	b.n	8002634 <HAL_DMA_IRQHandler+0x10c>
}
 800269a:	b003      	add	sp, #12
 800269c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000000 	.word	0x20000000

080026a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a8:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8002854 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ac:	4a67      	ldr	r2, [pc, #412]	; (800284c <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ae:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b0:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80026b2:	2401      	movs	r4, #1
 80026b4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b6:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80026ba:	43ac      	bics	r4, r5
 80026bc:	f040 80b1 	bne.w	8002822 <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c0:	684d      	ldr	r5, [r1, #4]
 80026c2:	f005 0403 	and.w	r4, r5, #3
 80026c6:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ca:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026cc:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ce:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d4:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d8:	d834      	bhi.n	8002744 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80026da:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026dc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e0:	68cf      	ldr	r7, [r1, #12]
 80026e2:	fa07 f708 	lsl.w	r7, r7, r8
 80026e6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80026ea:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80026ec:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ee:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80026f6:	409f      	lsls	r7, r3
 80026f8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80026fc:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80026fe:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002700:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002704:	688f      	ldr	r7, [r1, #8]
 8002706:	fa07 f708 	lsl.w	r7, r7, r8
 800270a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002710:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002712:	d119      	bne.n	8002748 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002714:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002718:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800271c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002720:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002724:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002728:	f04f 0e0f 	mov.w	lr, #15
 800272c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002730:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002734:	690f      	ldr	r7, [r1, #16]
 8002736:	fa07 f70b 	lsl.w	r7, r7, fp
 800273a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800273e:	f8ca 7020 	str.w	r7, [sl, #32]
 8002742:	e001      	b.n	8002748 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002744:	2c03      	cmp	r4, #3
 8002746:	d1da      	bne.n	80026fe <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002748:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800274a:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002750:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002752:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002756:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002758:	d063      	beq.n	8002822 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	f04f 0a00 	mov.w	sl, #0
 800275e:	f8cd a004 	str.w	sl, [sp, #4]
 8002762:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002766:	4c3a      	ldr	r4, [pc, #232]	; (8002850 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002768:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800276c:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002770:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002774:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002778:	9601      	str	r6, [sp, #4]
 800277a:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800277c:	f023 0603 	bic.w	r6, r3, #3
 8002780:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002784:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002788:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800278c:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002790:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002794:	270f      	movs	r7, #15
 8002796:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800279a:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800279c:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027a0:	d046      	beq.n	8002830 <HAL_GPIO_Init+0x18c>
 80027a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027a6:	42a0      	cmp	r0, r4
 80027a8:	d044      	beq.n	8002834 <HAL_GPIO_Init+0x190>
 80027aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027ae:	42a0      	cmp	r0, r4
 80027b0:	d042      	beq.n	8002838 <HAL_GPIO_Init+0x194>
 80027b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027b6:	42a0      	cmp	r0, r4
 80027b8:	d040      	beq.n	800283c <HAL_GPIO_Init+0x198>
 80027ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027be:	42a0      	cmp	r0, r4
 80027c0:	d03e      	beq.n	8002840 <HAL_GPIO_Init+0x19c>
 80027c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027c6:	42a0      	cmp	r0, r4
 80027c8:	d03c      	beq.n	8002844 <HAL_GPIO_Init+0x1a0>
 80027ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027ce:	42a0      	cmp	r0, r4
 80027d0:	d03a      	beq.n	8002848 <HAL_GPIO_Init+0x1a4>
 80027d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80027d6:	42a0      	cmp	r0, r4
 80027d8:	bf0c      	ite	eq
 80027da:	2407      	moveq	r4, #7
 80027dc:	2408      	movne	r4, #8
 80027de:	fa04 f40e 	lsl.w	r4, r4, lr
 80027e2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027e4:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80027e6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ec:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80027ee:	bf54      	ite	pl
 80027f0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80027f2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80027f6:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80027f8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027fa:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80027fc:	bf54      	ite	pl
 80027fe:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002800:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002804:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8002806:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002808:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800280a:	bf54      	ite	pl
 800280c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800280e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002812:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002814:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002816:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002818:	bf54      	ite	pl
 800281a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800281c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002820:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002822:	3301      	adds	r3, #1
 8002824:	2b10      	cmp	r3, #16
 8002826:	f47f af43 	bne.w	80026b0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800282a:	b003      	add	sp, #12
 800282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002830:	4654      	mov	r4, sl
 8002832:	e7d4      	b.n	80027de <HAL_GPIO_Init+0x13a>
 8002834:	2401      	movs	r4, #1
 8002836:	e7d2      	b.n	80027de <HAL_GPIO_Init+0x13a>
 8002838:	2402      	movs	r4, #2
 800283a:	e7d0      	b.n	80027de <HAL_GPIO_Init+0x13a>
 800283c:	2403      	movs	r4, #3
 800283e:	e7ce      	b.n	80027de <HAL_GPIO_Init+0x13a>
 8002840:	2404      	movs	r4, #4
 8002842:	e7cc      	b.n	80027de <HAL_GPIO_Init+0x13a>
 8002844:	2405      	movs	r4, #5
 8002846:	e7ca      	b.n	80027de <HAL_GPIO_Init+0x13a>
 8002848:	2406      	movs	r4, #6
 800284a:	e7c8      	b.n	80027de <HAL_GPIO_Init+0x13a>
 800284c:	40013c00 	.word	0x40013c00
 8002850:	40020000 	.word	0x40020000
 8002854:	40023800 	.word	0x40023800

08002858 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002858:	b10a      	cbz	r2, 800285e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285a:	6181      	str	r1, [r0, #24]
  }
}
 800285c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285e:	0409      	lsls	r1, r1, #16
 8002860:	e7fb      	b.n	800285a <HAL_GPIO_WritePin+0x2>
	...

08002864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002864:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002866:	4604      	mov	r4, r0
 8002868:	b908      	cbnz	r0, 800286e <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 800286a:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 800286c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800286e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002872:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002876:	b91b      	cbnz	r3, 8002880 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002878:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800287c:	f7ff f848 	bl	8001910 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002880:	2324      	movs	r3, #36	; 0x24
 8002882:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800289e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028a0:	f000 fafc 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028a4:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <HAL_I2C_Init+0x140>)
 80028a6:	6865      	ldr	r5, [r4, #4]
 80028a8:	429d      	cmp	r5, r3
 80028aa:	bf94      	ite	ls
 80028ac:	4b3e      	ldrls	r3, [pc, #248]	; (80029a8 <HAL_I2C_Init+0x144>)
 80028ae:	4b3f      	ldrhi	r3, [pc, #252]	; (80029ac <HAL_I2C_Init+0x148>)
 80028b0:	4298      	cmp	r0, r3
 80028b2:	bf8c      	ite	hi
 80028b4:	2300      	movhi	r3, #0
 80028b6:	2301      	movls	r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1d6      	bne.n	800286a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028bc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028be:	4e39      	ldr	r6, [pc, #228]	; (80029a4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028c0:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80028c2:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_I2C_Init+0x14c>)
 80028c4:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028c8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80028cc:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ce:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028d0:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028d2:	bf88      	it	hi
 80028d4:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 80028d8:	6a11      	ldr	r1, [r2, #32]
 80028da:	bf88      	it	hi
 80028dc:	4373      	mulhi	r3, r6
 80028de:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80028e2:	bf84      	itt	hi
 80028e4:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80028e8:	fbb3 f3f6 	udivhi	r3, r3, r6
 80028ec:	3301      	adds	r3, #1
 80028ee:	430b      	orrs	r3, r1
 80028f0:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028f2:	69d1      	ldr	r1, [r2, #28]
 80028f4:	1e43      	subs	r3, r0, #1
 80028f6:	482b      	ldr	r0, [pc, #172]	; (80029a4 <HAL_I2C_Init+0x140>)
 80028f8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80028fc:	4285      	cmp	r5, r0
 80028fe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002902:	d832      	bhi.n	800296a <HAL_I2C_Init+0x106>
 8002904:	006d      	lsls	r5, r5, #1
 8002906:	f640 70fc 	movw	r0, #4092	; 0xffc
 800290a:	fbb3 f3f5 	udiv	r3, r3, r5
 800290e:	3301      	adds	r3, #1
 8002910:	4203      	tst	r3, r0
 8002912:	d042      	beq.n	800299a <HAL_I2C_Init+0x136>
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	4319      	orrs	r1, r3
 800291a:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800291c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002920:	6811      	ldr	r1, [r2, #0]
 8002922:	4303      	orrs	r3, r0
 8002924:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002928:	430b      	orrs	r3, r1
 800292a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800292c:	6891      	ldr	r1, [r2, #8]
 800292e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002932:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002936:	4303      	orrs	r3, r0
 8002938:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800293c:	430b      	orrs	r3, r1
 800293e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002940:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002944:	68d1      	ldr	r1, [r2, #12]
 8002946:	4303      	orrs	r3, r0
 8002948:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800294c:	430b      	orrs	r3, r1
 800294e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002950:	6813      	ldr	r3, [r2, #0]
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002958:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800295a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800295c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800295e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002962:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002968:	e780      	b.n	800286c <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800296a:	68a0      	ldr	r0, [r4, #8]
 800296c:	b950      	cbnz	r0, 8002984 <HAL_I2C_Init+0x120>
 800296e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002972:	fbb3 f3f5 	udiv	r3, r3, r5
 8002976:	3301      	adds	r3, #1
 8002978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297c:	b17b      	cbz	r3, 800299e <HAL_I2C_Init+0x13a>
 800297e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002982:	e7c9      	b.n	8002918 <HAL_I2C_Init+0xb4>
 8002984:	2019      	movs	r0, #25
 8002986:	4368      	muls	r0, r5
 8002988:	fbb3 f3f0 	udiv	r3, r3, r0
 800298c:	3301      	adds	r3, #1
 800298e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002992:	b123      	cbz	r3, 800299e <HAL_I2C_Init+0x13a>
 8002994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002998:	e7be      	b.n	8002918 <HAL_I2C_Init+0xb4>
 800299a:	2304      	movs	r3, #4
 800299c:	e7bc      	b.n	8002918 <HAL_I2C_Init+0xb4>
 800299e:	2301      	movs	r3, #1
 80029a0:	e7ba      	b.n	8002918 <HAL_I2C_Init+0xb4>
 80029a2:	bf00      	nop
 80029a4:	000186a0 	.word	0x000186a0
 80029a8:	001e847f 	.word	0x001e847f
 80029ac:	003d08ff 	.word	0x003d08ff
 80029b0:	000f4240 	.word	0x000f4240

080029b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b8:	4604      	mov	r4, r0
 80029ba:	b340      	cbz	r0, 8002a0e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029bc:	6803      	ldr	r3, [r0, #0]
 80029be:	07dd      	lsls	r5, r3, #31
 80029c0:	d410      	bmi.n	80029e4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	0798      	lsls	r0, r3, #30
 80029c6:	d45b      	bmi.n	8002a80 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	071a      	lsls	r2, r3, #28
 80029cc:	f100 809d 	bmi.w	8002b0a <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	075b      	lsls	r3, r3, #29
 80029d4:	f100 80bd 	bmi.w	8002b52 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d8:	69a0      	ldr	r0, [r4, #24]
 80029da:	2800      	cmp	r0, #0
 80029dc:	f040 8124 	bne.w	8002c28 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80029e0:	2000      	movs	r0, #0
 80029e2:	e02c      	b.n	8002a3e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029e4:	4b8d      	ldr	r3, [pc, #564]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	f002 020c 	and.w	r2, r2, #12
 80029ec:	2a04      	cmp	r2, #4
 80029ee:	d007      	beq.n	8002a00 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029f6:	2a08      	cmp	r2, #8
 80029f8:	d10b      	bne.n	8002a12 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	0259      	lsls	r1, r3, #9
 80029fe:	d508      	bpl.n	8002a12 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	4b86      	ldr	r3, [pc, #536]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	039a      	lsls	r2, r3, #14
 8002a06:	d5dc      	bpl.n	80029c2 <HAL_RCC_OscConfig+0xe>
 8002a08:	6863      	ldr	r3, [r4, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1d9      	bne.n	80029c2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002a0e:	2001      	movs	r0, #1
 8002a10:	e015      	b.n	8002a3e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a12:	6863      	ldr	r3, [r4, #4]
 8002a14:	4d81      	ldr	r5, [pc, #516]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
 8002a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1a:	d113      	bne.n	8002a44 <HAL_RCC_OscConfig+0x90>
 8002a1c:	682b      	ldr	r3, [r5, #0]
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a22:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a24:	f7ff f98c 	bl	8001d40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a28:	4e7c      	ldr	r6, [pc, #496]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8002a2a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2c:	6833      	ldr	r3, [r6, #0]
 8002a2e:	039b      	lsls	r3, r3, #14
 8002a30:	d4c7      	bmi.n	80029c2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a32:	f7ff f985 	bl	8001d40 <HAL_GetTick>
 8002a36:	1b40      	subs	r0, r0, r5
 8002a38:	2864      	cmp	r0, #100	; 0x64
 8002a3a:	d9f7      	bls.n	8002a2c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8002a3c:	2003      	movs	r0, #3
}
 8002a3e:	b002      	add	sp, #8
 8002a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a48:	d104      	bne.n	8002a54 <HAL_RCC_OscConfig+0xa0>
 8002a4a:	682b      	ldr	r3, [r5, #0]
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a50:	602b      	str	r3, [r5, #0]
 8002a52:	e7e3      	b.n	8002a1c <HAL_RCC_OscConfig+0x68>
 8002a54:	682a      	ldr	r2, [r5, #0]
 8002a56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a5a:	602a      	str	r2, [r5, #0]
 8002a5c:	682a      	ldr	r2, [r5, #0]
 8002a5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a62:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1dd      	bne.n	8002a24 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8002a68:	f7ff f96a 	bl	8001d40 <HAL_GetTick>
 8002a6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	682b      	ldr	r3, [r5, #0]
 8002a70:	039f      	lsls	r7, r3, #14
 8002a72:	d5a6      	bpl.n	80029c2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff f964 	bl	8001d40 <HAL_GetTick>
 8002a78:	1b80      	subs	r0, r0, r6
 8002a7a:	2864      	cmp	r0, #100	; 0x64
 8002a7c:	d9f7      	bls.n	8002a6e <HAL_RCC_OscConfig+0xba>
 8002a7e:	e7dd      	b.n	8002a3c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a80:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	f012 0f0c 	tst.w	r2, #12
 8002a88:	d007      	beq.n	8002a9a <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a90:	2a08      	cmp	r2, #8
 8002a92:	d111      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	025e      	lsls	r6, r3, #9
 8002a98:	d40e      	bmi.n	8002ab8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	4a60      	ldr	r2, [pc, #384]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
 8002a9c:	6813      	ldr	r3, [r2, #0]
 8002a9e:	079d      	lsls	r5, r3, #30
 8002aa0:	d502      	bpl.n	8002aa8 <HAL_RCC_OscConfig+0xf4>
 8002aa2:	68e3      	ldr	r3, [r4, #12]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d1b2      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa8:	6813      	ldr	r3, [r2, #0]
 8002aaa:	6921      	ldr	r1, [r4, #16]
 8002aac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ab0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ab4:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	e787      	b.n	80029c8 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab8:	68e2      	ldr	r2, [r4, #12]
 8002aba:	4b59      	ldr	r3, [pc, #356]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	b1b2      	cbz	r2, 8002aec <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ac2:	f7ff f93d 	bl	8001d40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	4d55      	ldr	r5, [pc, #340]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8002ac8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aca:	682b      	ldr	r3, [r5, #0]
 8002acc:	0798      	lsls	r0, r3, #30
 8002ace:	d507      	bpl.n	8002ae0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	682b      	ldr	r3, [r5, #0]
 8002ad2:	6922      	ldr	r2, [r4, #16]
 8002ad4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ad8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002adc:	602b      	str	r3, [r5, #0]
 8002ade:	e773      	b.n	80029c8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae0:	f7ff f92e 	bl	8001d40 <HAL_GetTick>
 8002ae4:	1b80      	subs	r0, r0, r6
 8002ae6:	2802      	cmp	r0, #2
 8002ae8:	d9ef      	bls.n	8002aca <HAL_RCC_OscConfig+0x116>
 8002aea:	e7a7      	b.n	8002a3c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8002aec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002aee:	f7ff f927 	bl	8001d40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	4e4a      	ldr	r6, [pc, #296]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8002af4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	6833      	ldr	r3, [r6, #0]
 8002af8:	0799      	lsls	r1, r3, #30
 8002afa:	f57f af65 	bpl.w	80029c8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afe:	f7ff f91f 	bl	8001d40 <HAL_GetTick>
 8002b02:	1b40      	subs	r0, r0, r5
 8002b04:	2802      	cmp	r0, #2
 8002b06:	d9f6      	bls.n	8002af6 <HAL_RCC_OscConfig+0x142>
 8002b08:	e798      	b.n	8002a3c <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b0a:	6962      	ldr	r2, [r4, #20]
 8002b0c:	4b44      	ldr	r3, [pc, #272]	; (8002c20 <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	b182      	cbz	r2, 8002b32 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002b10:	2201      	movs	r2, #1
 8002b12:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002b16:	f7ff f913 	bl	8001d40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4e40      	ldr	r6, [pc, #256]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8002b1c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002b20:	079f      	lsls	r7, r3, #30
 8002b22:	f53f af55 	bmi.w	80029d0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b26:	f7ff f90b 	bl	8001d40 <HAL_GetTick>
 8002b2a:	1b40      	subs	r0, r0, r5
 8002b2c:	2802      	cmp	r0, #2
 8002b2e:	d9f6      	bls.n	8002b1e <HAL_RCC_OscConfig+0x16a>
 8002b30:	e784      	b.n	8002a3c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8002b32:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002b36:	f7ff f903 	bl	8001d40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3a:	4e38      	ldr	r6, [pc, #224]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8002b3c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002b40:	0798      	lsls	r0, r3, #30
 8002b42:	f57f af45 	bpl.w	80029d0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b46:	f7ff f8fb 	bl	8001d40 <HAL_GetTick>
 8002b4a:	1b40      	subs	r0, r0, r5
 8002b4c:	2802      	cmp	r0, #2
 8002b4e:	d9f6      	bls.n	8002b3e <HAL_RCC_OscConfig+0x18a>
 8002b50:	e774      	b.n	8002a3c <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b52:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
 8002b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b56:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002b5a:	d128      	bne.n	8002bae <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	9201      	str	r2, [sp, #4]
 8002b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b70:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b72:	4d2c      	ldr	r5, [pc, #176]	; (8002c24 <HAL_RCC_OscConfig+0x270>)
 8002b74:	682b      	ldr	r3, [r5, #0]
 8002b76:	05d9      	lsls	r1, r3, #23
 8002b78:	d51b      	bpl.n	8002bb2 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7a:	68a3      	ldr	r3, [r4, #8]
 8002b7c:	4d27      	ldr	r5, [pc, #156]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d127      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x21e>
 8002b82:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002b8a:	f7ff f8d9 	bl	8001d40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	4e23      	ldr	r6, [pc, #140]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8002b90:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b92:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002b98:	079b      	lsls	r3, r3, #30
 8002b9a:	d539      	bpl.n	8002c10 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8002b9c:	2f00      	cmp	r7, #0
 8002b9e:	f43f af1b 	beq.w	80029d8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba2:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <HAL_RCC_OscConfig+0x268>)
 8002ba4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6413      	str	r3, [r2, #64]	; 0x40
 8002bac:	e714      	b.n	80029d8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002bae:	2700      	movs	r7, #0
 8002bb0:	e7df      	b.n	8002b72 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb2:	682b      	ldr	r3, [r5, #0]
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002bba:	f7ff f8c1 	bl	8001d40 <HAL_GetTick>
 8002bbe:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	05da      	lsls	r2, r3, #23
 8002bc4:	d4d9      	bmi.n	8002b7a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc6:	f7ff f8bb 	bl	8001d40 <HAL_GetTick>
 8002bca:	1b80      	subs	r0, r0, r6
 8002bcc:	2802      	cmp	r0, #2
 8002bce:	d9f7      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x20c>
 8002bd0:	e734      	b.n	8002a3c <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d104      	bne.n	8002be0 <HAL_RCC_OscConfig+0x22c>
 8002bd6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	672b      	str	r3, [r5, #112]	; 0x70
 8002bde:	e7d0      	b.n	8002b82 <HAL_RCC_OscConfig+0x1ce>
 8002be0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	672a      	str	r2, [r5, #112]	; 0x70
 8002be8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002bea:	f022 0204 	bic.w	r2, r2, #4
 8002bee:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ca      	bne.n	8002b8a <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8002bf4:	f7ff f8a4 	bl	8001d40 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002bfc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c00:	0798      	lsls	r0, r3, #30
 8002c02:	d5cb      	bpl.n	8002b9c <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c04:	f7ff f89c 	bl	8001d40 <HAL_GetTick>
 8002c08:	1b80      	subs	r0, r0, r6
 8002c0a:	4540      	cmp	r0, r8
 8002c0c:	d9f7      	bls.n	8002bfe <HAL_RCC_OscConfig+0x24a>
 8002c0e:	e715      	b.n	8002a3c <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7ff f896 	bl	8001d40 <HAL_GetTick>
 8002c14:	1b40      	subs	r0, r0, r5
 8002c16:	4540      	cmp	r0, r8
 8002c18:	d9bd      	bls.n	8002b96 <HAL_RCC_OscConfig+0x1e2>
 8002c1a:	e70f      	b.n	8002a3c <HAL_RCC_OscConfig+0x88>
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	42470000 	.word	0x42470000
 8002c24:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c28:	4d36      	ldr	r5, [pc, #216]	; (8002d04 <HAL_RCC_OscConfig+0x350>)
 8002c2a:	68ab      	ldr	r3, [r5, #8]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d03d      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c34:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_OscConfig+0x354>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3c:	d12b      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2e2>
        tickstart = HAL_GetTick();
 8002c3e:	f7ff f87f 	bl	8001d40 <HAL_GetTick>
 8002c42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	0199      	lsls	r1, r3, #6
 8002c48:	d41f      	bmi.n	8002c8a <HAL_RCC_OscConfig+0x2d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c4a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c52:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c5e:	0852      	lsrs	r2, r2, #1
 8002c60:	3a01      	subs	r2, #1
 8002c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c66:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_OscConfig+0x354>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	4d26      	ldr	r5, [pc, #152]	; (8002d04 <HAL_RCC_OscConfig+0x350>)
        __HAL_RCC_PLL_ENABLE();
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002c70:	f7ff f866 	bl	8001d40 <HAL_GetTick>
 8002c74:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	682b      	ldr	r3, [r5, #0]
 8002c78:	019a      	lsls	r2, r3, #6
 8002c7a:	f53f aeb1 	bmi.w	80029e0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7ff f85f 	bl	8001d40 <HAL_GetTick>
 8002c82:	1b00      	subs	r0, r0, r4
 8002c84:	2802      	cmp	r0, #2
 8002c86:	d9f6      	bls.n	8002c76 <HAL_RCC_OscConfig+0x2c2>
 8002c88:	e6d8      	b.n	8002a3c <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7ff f859 	bl	8001d40 <HAL_GetTick>
 8002c8e:	1b80      	subs	r0, r0, r6
 8002c90:	2802      	cmp	r0, #2
 8002c92:	d9d7      	bls.n	8002c44 <HAL_RCC_OscConfig+0x290>
 8002c94:	e6d2      	b.n	8002a3c <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8002c96:	f7ff f853 	bl	8001d40 <HAL_GetTick>
 8002c9a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	019b      	lsls	r3, r3, #6
 8002ca0:	f57f ae9e 	bpl.w	80029e0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7ff f84c 	bl	8001d40 <HAL_GetTick>
 8002ca8:	1b00      	subs	r0, r0, r4
 8002caa:	2802      	cmp	r0, #2
 8002cac:	d9f6      	bls.n	8002c9c <HAL_RCC_OscConfig+0x2e8>
 8002cae:	e6c5      	b.n	8002a3c <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb0:	2801      	cmp	r0, #1
 8002cb2:	f43f aec4 	beq.w	8002a3e <HAL_RCC_OscConfig+0x8a>
        pll_config = RCC->PLLCFGR;
 8002cb6:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb8:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbe:	4291      	cmp	r1, r2
 8002cc0:	f47f aea5 	bne.w	8002a0e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	428a      	cmp	r2, r1
 8002ccc:	f47f ae9f 	bne.w	8002a0e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002cdc:	f47f ae97 	bne.w	8002a0e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ce2:	0852      	lsrs	r2, r2, #1
 8002ce4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002ce8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cea:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002cee:	f47f ae8e 	bne.w	8002a0e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cf2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cf4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002cfc:	f43f ae70 	beq.w	80029e0 <HAL_RCC_OscConfig+0x2c>
 8002d00:	e685      	b.n	8002a0e <HAL_RCC_OscConfig+0x5a>
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	42470000 	.word	0x42470000

08002d0c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d0c:	4913      	ldr	r1, [pc, #76]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002d0e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d10:	688b      	ldr	r3, [r1, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d01c      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x48>
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d11c      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d1e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d20:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d24:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d28:	bf14      	ite	ne
 8002d2a:	480d      	ldrne	r0, [pc, #52]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2c:	480d      	ldreq	r0, [pc, #52]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002d32:	bf18      	it	ne
 8002d34:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3a:	fba1 0100 	umull	r0, r1, r1, r0
 8002d3e:	f7fd fe6d 	bl	8000a1c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x50>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002d4e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002d52:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x54>)
 8002d56:	e7fc      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002d5a:	e7fa      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x46>
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	017d7840 	.word	0x017d7840
 8002d64:	00f42400 	.word	0x00f42400

08002d68 <HAL_RCC_ClockConfig>:
{
 8002d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002d6e:	4604      	mov	r4, r0
 8002d70:	b910      	cbnz	r0, 8002d78 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002d72:	2001      	movs	r0, #1
}
 8002d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b43      	ldr	r3, [pc, #268]	; (8002e88 <HAL_RCC_ClockConfig+0x120>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	f002 0207 	and.w	r2, r2, #7
 8002d80:	428a      	cmp	r2, r1
 8002d82:	d328      	bcc.n	8002dd6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d84:	6821      	ldr	r1, [r4, #0]
 8002d86:	078f      	lsls	r7, r1, #30
 8002d88:	d42d      	bmi.n	8002de6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8a:	07c8      	lsls	r0, r1, #31
 8002d8c:	d440      	bmi.n	8002e10 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d8e:	4b3e      	ldr	r3, [pc, #248]	; (8002e88 <HAL_RCC_ClockConfig+0x120>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	f002 0207 	and.w	r2, r2, #7
 8002d96:	42aa      	cmp	r2, r5
 8002d98:	d865      	bhi.n	8002e66 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9a:	6822      	ldr	r2, [r4, #0]
 8002d9c:	0751      	lsls	r1, r2, #29
 8002d9e:	d46b      	bmi.n	8002e78 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da0:	0713      	lsls	r3, r2, #28
 8002da2:	d507      	bpl.n	8002db4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da4:	4a39      	ldr	r2, [pc, #228]	; (8002e8c <HAL_RCC_ClockConfig+0x124>)
 8002da6:	6921      	ldr	r1, [r4, #16]
 8002da8:	6893      	ldr	r3, [r2, #8]
 8002daa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002dae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002db2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002db4:	f7ff ffaa 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 8002db8:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <HAL_RCC_ClockConfig+0x124>)
 8002dba:	4a35      	ldr	r2, [pc, #212]	; (8002e90 <HAL_RCC_ClockConfig+0x128>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002dc2:	5cd3      	ldrb	r3, [r2, r3]
 8002dc4:	40d8      	lsrs	r0, r3
 8002dc6:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_RCC_ClockConfig+0x12c>)
 8002dc8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002dca:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <HAL_RCC_ClockConfig+0x130>)
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	f7fe ff6d 	bl	8001cac <HAL_InitTick>
  return HAL_OK;
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	e7ce      	b.n	8002d74 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	b2ca      	uxtb	r2, r1
 8002dd8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d1c6      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xa>
 8002de4:	e7ce      	b.n	8002d84 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de6:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <HAL_RCC_ClockConfig+0x124>)
 8002de8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dec:	bf1e      	ittt	ne
 8002dee:	689a      	ldrne	r2, [r3, #8]
 8002df0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002df4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df8:	bf42      	ittt	mi
 8002dfa:	689a      	ldrmi	r2, [r3, #8]
 8002dfc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002e00:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	68a0      	ldr	r0, [r4, #8]
 8002e06:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e0a:	4302      	orrs	r2, r0
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	e7bc      	b.n	8002d8a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e10:	6862      	ldr	r2, [r4, #4]
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_RCC_ClockConfig+0x124>)
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	d11c      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1e:	d0a8      	beq.n	8002d72 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e20:	4e1a      	ldr	r6, [pc, #104]	; (8002e8c <HAL_RCC_ClockConfig+0x124>)
 8002e22:	68b3      	ldr	r3, [r6, #8]
 8002e24:	f023 0303 	bic.w	r3, r3, #3
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002e2c:	f7fe ff88 	bl	8001d40 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002e34:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	68b3      	ldr	r3, [r6, #8]
 8002e38:	6862      	ldr	r2, [r4, #4]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002e42:	d0a4      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e44:	f7fe ff7c 	bl	8001d40 <HAL_GetTick>
 8002e48:	1bc0      	subs	r0, r0, r7
 8002e4a:	4540      	cmp	r0, r8
 8002e4c:	d9f3      	bls.n	8002e36 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002e4e:	2003      	movs	r0, #3
 8002e50:	e790      	b.n	8002d74 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e52:	1e91      	subs	r1, r2, #2
 8002e54:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e58:	d802      	bhi.n	8002e60 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e5e:	e7de      	b.n	8002e1e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e60:	f013 0f02 	tst.w	r3, #2
 8002e64:	e7db      	b.n	8002e1e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	b2ea      	uxtb	r2, r5
 8002e68:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	42ab      	cmp	r3, r5
 8002e72:	f47f af7e 	bne.w	8002d72 <HAL_RCC_ClockConfig+0xa>
 8002e76:	e790      	b.n	8002d9a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e78:	4904      	ldr	r1, [pc, #16]	; (8002e8c <HAL_RCC_ClockConfig+0x124>)
 8002e7a:	68e0      	ldr	r0, [r4, #12]
 8002e7c:	688b      	ldr	r3, [r1, #8]
 8002e7e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002e82:	4303      	orrs	r3, r0
 8002e84:	608b      	str	r3, [r1, #8]
 8002e86:	e78b      	b.n	8002da0 <HAL_RCC_ClockConfig+0x38>
 8002e88:	40023c00 	.word	0x40023c00
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	08004c4b 	.word	0x08004c4b
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000008 	.word	0x20000008

08002e9c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002e9e:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002ea6:	5cd3      	ldrb	r3, [r2, r3]
 8002ea8:	4a03      	ldr	r2, [pc, #12]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002eaa:	6810      	ldr	r0, [r2, #0]
}
 8002eac:	40d8      	lsrs	r0, r3
 8002eae:	4770      	bx	lr
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	08004c5b 	.word	0x08004c5b
 8002eb8:	20000000 	.word	0x20000000

08002ebc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002ebe:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002ec6:	5cd3      	ldrb	r3, [r2, r3]
 8002ec8:	4a03      	ldr	r2, [pc, #12]	; (8002ed8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002eca:	6810      	ldr	r0, [r2, #0]
}
 8002ecc:	40d8      	lsrs	r0, r3
 8002ece:	4770      	bx	lr
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	08004c5b 	.word	0x08004c5b
 8002ed8:	20000000 	.word	0x20000000

08002edc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002edc:	6803      	ldr	r3, [r0, #0]
 8002ede:	f013 0f05 	tst.w	r3, #5
{
 8002ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ee4:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	f013 0302 	ands.w	r3, r3, #2
 8002eee:	d12a      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	e026      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x66>
    __HAL_RCC_PLLI2S_DISABLE();
 8002ef4:	4b42      	ldr	r3, [pc, #264]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ef6:	4e43      	ldr	r6, [pc, #268]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002ef8:	2200      	movs	r2, #0
 8002efa:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002efc:	f7fe ff20 	bl	8001d40 <HAL_GetTick>
 8002f00:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f02:	6833      	ldr	r3, [r6, #0]
 8002f04:	011f      	lsls	r7, r3, #4
 8002f06:	d416      	bmi.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f08:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002f0c:	071b      	lsls	r3, r3, #28
 8002f0e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f12:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002f16:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f18:	4e3a      	ldr	r6, [pc, #232]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_ENABLE();
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002f1e:	f7fe ff0f 	bl	8001d40 <HAL_GetTick>
 8002f22:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f24:	6833      	ldr	r3, [r6, #0]
 8002f26:	0118      	lsls	r0, r3, #4
 8002f28:	d4de      	bmi.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f2a:	f7fe ff09 	bl	8001d40 <HAL_GetTick>
 8002f2e:	1b40      	subs	r0, r0, r5
 8002f30:	2802      	cmp	r0, #2
 8002f32:	d9f7      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002f34:	e004      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x64>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f36:	f7fe ff03 	bl	8001d40 <HAL_GetTick>
 8002f3a:	1b40      	subs	r0, r0, r5
 8002f3c:	2802      	cmp	r0, #2
 8002f3e:	d9e0      	bls.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8002f40:	2003      	movs	r0, #3
}
 8002f42:	b003      	add	sp, #12
 8002f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    PWR->CR |= PWR_CR_DBP;
 8002f4c:	4d2e      	ldr	r5, [pc, #184]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002f60:	682b      	ldr	r3, [r5, #0]
 8002f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f66:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002f68:	f7fe feea 	bl	8001d40 <HAL_GetTick>
 8002f6c:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f6e:	682b      	ldr	r3, [r5, #0]
 8002f70:	05d9      	lsls	r1, r3, #23
 8002f72:	d51b      	bpl.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xd0>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f74:	4d23      	ldr	r5, [pc, #140]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f76:	68e2      	ldr	r2, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f7a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f80:	68e3      	ldr	r3, [r4, #12]
 8002f82:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002f86:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002f8a:	4a1e      	ldr	r2, [pc, #120]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002f8c:	d134      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002f8e:	6891      	ldr	r1, [r2, #8]
 8002f90:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002f94:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002f98:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002f9c:	4301      	orrs	r1, r0
 8002f9e:	6091      	str	r1, [r2, #8]
 8002fa0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	e7a1      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002fac:	f7fe fec8 	bl	8001d40 <HAL_GetTick>
 8002fb0:	1b80      	subs	r0, r0, r6
 8002fb2:	2802      	cmp	r0, #2
 8002fb4:	d9db      	bls.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8002fb6:	e7c3      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x64>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fb8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d0df      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fc2:	4a0f      	ldr	r2, [pc, #60]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fce:	2100      	movs	r1, #0
 8002fd0:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8002fd4:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fd6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002fd8:	07da      	lsls	r2, r3, #31
 8002fda:	d5d1      	bpl.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tickstart = HAL_GetTick();
 8002fdc:	f7fe feb0 	bl	8001d40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002fe4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002fe8:	079b      	lsls	r3, r3, #30
 8002fea:	d4c9      	bmi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7fe fea8 	bl	8001d40 <HAL_GetTick>
 8002ff0:	1b80      	subs	r0, r0, r6
 8002ff2:	42b8      	cmp	r0, r7
 8002ff4:	d9f7      	bls.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8002ff6:	e7a3      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff8:	6891      	ldr	r1, [r2, #8]
 8002ffa:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002ffe:	e7ce      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003000:	42470000 	.word	0x42470000
 8003004:	40023800 	.word	0x40023800
 8003008:	40007000 	.word	0x40007000

0800300c <HAL_RTC_AlarmAEventCallback>:
 800300c:	4770      	bx	lr
	...

08003010 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003010:	6803      	ldr	r3, [r0, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	04d2      	lsls	r2, r2, #19
{
 8003016:	b510      	push	{r4, lr}
 8003018:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800301a:	d50a      	bpl.n	8003032 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	05d9      	lsls	r1, r3, #23
 8003020:	d507      	bpl.n	8003032 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003022:	f7ff fff3 	bl	800300c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003026:	6822      	ldr	r2, [r4, #0]
 8003028:	68d3      	ldr	r3, [r2, #12]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8003030:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	0492      	lsls	r2, r2, #18
 8003038:	d50b      	bpl.n	8003052 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	059b      	lsls	r3, r3, #22
 800303e:	d508      	bpl.n	8003052 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003040:	4620      	mov	r0, r4
 8003042:	f000 f9fd 	bl	8003440 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003046:	6822      	ldr	r2, [r4, #0]
 8003048:	68d3      	ldr	r3, [r2, #12]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f463 7320 	orn	r3, r3, #640	; 0x280
 8003050:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003052:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003054:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003058:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800305a:	2301      	movs	r3, #1
 800305c:	7763      	strb	r3, [r4, #29]
}
 800305e:	bd10      	pop	{r4, pc}
 8003060:	40013c00 	.word	0x40013c00

08003064 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003064:	6802      	ldr	r2, [r0, #0]
{
 8003066:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003068:	68d3      	ldr	r3, [r2, #12]
 800306a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800306e:	60d3      	str	r3, [r2, #12]
{
 8003070:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8003072:	f7fe fe65 	bl	8001d40 <HAL_GetTick>
 8003076:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	069b      	lsls	r3, r3, #26
 800307e:	d501      	bpl.n	8003084 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8003080:	2000      	movs	r0, #0
}
 8003082:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003084:	f7fe fe5c 	bl	8001d40 <HAL_GetTick>
 8003088:	1b40      	subs	r0, r0, r5
 800308a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800308e:	d9f3      	bls.n	8003078 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8003090:	2003      	movs	r0, #3
 8003092:	e7f6      	b.n	8003082 <HAL_RTC_WaitForSynchro+0x1e>

08003094 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003096:	6803      	ldr	r3, [r0, #0]
 8003098:	68dc      	ldr	r4, [r3, #12]
 800309a:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 800309e:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80030a0:	d117      	bne.n	80030d2 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030aa:	f7fe fe49 	bl	8001d40 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80030ae:	2704      	movs	r7, #4
    tickstart = HAL_GetTick();
 80030b0:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80030b2:	682b      	ldr	r3, [r5, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	065b      	lsls	r3, r3, #25
 80030b8:	d400      	bmi.n	80030bc <RTC_EnterInitMode+0x28>
 80030ba:	b10c      	cbz	r4, 80030c0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
}
 80030bc:	4620      	mov	r0, r4
 80030be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030c0:	f7fe fe3e 	bl	8001d40 <HAL_GetTick>
 80030c4:	1b80      	subs	r0, r0, r6
 80030c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 80030ca:	bf84      	itt	hi
 80030cc:	776f      	strbhi	r7, [r5, #29]
        status = HAL_ERROR;
 80030ce:	2401      	movhi	r4, #1
 80030d0:	e7ef      	b.n	80030b2 <RTC_EnterInitMode+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2400      	movs	r4, #0
 80030d4:	e7f2      	b.n	80030bc <RTC_EnterInitMode+0x28>

080030d6 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80030d6:	6803      	ldr	r3, [r0, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 80030de:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80030e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	069b      	lsls	r3, r3, #26
{
 80030e6:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80030e8:	d501      	bpl.n	80030ee <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 80030ec:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030ee:	f7ff ffb9 	bl	8003064 <HAL_RTC_WaitForSynchro>
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d0f9      	beq.n	80030ea <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030f6:	2304      	movs	r3, #4
 80030f8:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80030fa:	2001      	movs	r0, #1
 80030fc:	e7f6      	b.n	80030ec <RTC_ExitInitMode+0x16>

080030fe <HAL_RTC_Init>:
{
 80030fe:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8003100:	4604      	mov	r4, r0
 8003102:	2800      	cmp	r0, #0
 8003104:	d03a      	beq.n	800317c <HAL_RTC_Init+0x7e>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003106:	7f43      	ldrb	r3, [r0, #29]
 8003108:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800310c:	b913      	cbnz	r3, 8003114 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 800310e:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003110:	f7fe fc34 	bl	800197c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003114:	2302      	movs	r3, #2
 8003116:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	22ca      	movs	r2, #202	; 0xca
 800311c:	625a      	str	r2, [r3, #36]	; 0x24
 800311e:	2253      	movs	r2, #83	; 0x53
 8003120:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8003122:	4620      	mov	r0, r4
 8003124:	f7ff ffb6 	bl	8003094 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8003128:	bb20      	cbnz	r0, 8003174 <HAL_RTC_Init+0x76>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800312a:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800312c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8003134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003138:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800313a:	6862      	ldr	r2, [r4, #4]
 800313c:	6899      	ldr	r1, [r3, #8]
 800313e:	4302      	orrs	r2, r0
 8003140:	6960      	ldr	r0, [r4, #20]
 8003142:	4302      	orrs	r2, r0
 8003144:	430a      	orrs	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003148:	68e2      	ldr	r2, [r4, #12]
 800314a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	68a1      	ldr	r1, [r4, #8]
 8003150:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003154:	611a      	str	r2, [r3, #16]
    status = RTC_ExitInitMode(hrtc);
 8003156:	4620      	mov	r0, r4
 8003158:	f7ff ffbd 	bl	80030d6 <RTC_ExitInitMode>
  if (status == HAL_OK)
 800315c:	b950      	cbnz	r0, 8003174 <HAL_RTC_Init+0x76>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800315e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003160:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003164:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800316a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316c:	430a      	orrs	r2, r1
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 8003170:	2301      	movs	r3, #1
 8003172:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	22ff      	movs	r2, #255	; 0xff
 8003178:	625a      	str	r2, [r3, #36]	; 0x24
}
 800317a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800317c:	2001      	movs	r0, #1
 800317e:	e7fc      	b.n	800317a <HAL_RTC_Init+0x7c>

08003180 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint8_t bcdhigh = 0U;

  while (number >= 10U)
 8003180:	2300      	movs	r3, #0
 8003182:	2809      	cmp	r0, #9
 8003184:	b2da      	uxtb	r2, r3
 8003186:	f103 0301 	add.w	r3, r3, #1
 800318a:	d803      	bhi.n	8003194 <RTC_ByteToBcd2+0x14>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800318c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
 8003190:	b2c0      	uxtb	r0, r0
 8003192:	4770      	bx	lr
    number -= 10U;
 8003194:	380a      	subs	r0, #10
 8003196:	b2c0      	uxtb	r0, r0
 8003198:	e7f3      	b.n	8003182 <RTC_ByteToBcd2+0x2>

0800319a <HAL_RTC_SetTime>:
{
 800319a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 800319e:	7f03      	ldrb	r3, [r0, #28]
 80031a0:	2b01      	cmp	r3, #1
{
 80031a2:	4606      	mov	r6, r0
 80031a4:	460f      	mov	r7, r1
 80031a6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 80031aa:	d041      	beq.n	8003230 <HAL_RTC_SetTime+0x96>
 80031ac:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031ae:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 80031b0:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80031b2:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 80031b4:	7838      	ldrb	r0, [r7, #0]
 80031b6:	787d      	ldrb	r5, [r7, #1]
 80031b8:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031ba:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 80031bc:	2a00      	cmp	r2, #0
 80031be:	d139      	bne.n	8003234 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031c0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 80031c4:	bf08      	it	eq
 80031c6:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031c8:	f7ff ffda 	bl	8003180 <RTC_ByteToBcd2>
 80031cc:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031ce:	4628      	mov	r0, r5
 80031d0:	f7ff ffd6 	bl	8003180 <RTC_ByteToBcd2>
 80031d4:	4605      	mov	r5, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80031d6:	4620      	mov	r0, r4
 80031d8:	f7ff ffd2 	bl	8003180 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80031dc:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80031de:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 80031e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80031e6:	ea43 2405 	orr.w	r4, r3, r5, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031ea:	23ca      	movs	r3, #202	; 0xca
 80031ec:	624b      	str	r3, [r1, #36]	; 0x24
 80031ee:	2353      	movs	r3, #83	; 0x53
 80031f0:	624b      	str	r3, [r1, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80031f2:	4630      	mov	r0, r6
 80031f4:	f7ff ff4e 	bl	8003094 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80031f8:	b9a8      	cbnz	r0, 8003226 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031fa:	6832      	ldr	r2, [r6, #0]
 80031fc:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8003200:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8003204:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003206:	6893      	ldr	r3, [r2, #8]
 8003208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800320e:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8003212:	6891      	ldr	r1, [r2, #8]
 8003214:	4303      	orrs	r3, r0
 8003216:	430b      	orrs	r3, r1
 8003218:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 800321a:	4630      	mov	r0, r6
 800321c:	f7ff ff5b 	bl	80030d6 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8003220:	b908      	cbnz	r0, 8003226 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8003222:	2301      	movs	r3, #1
 8003224:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003226:	6833      	ldr	r3, [r6, #0]
 8003228:	22ff      	movs	r2, #255	; 0xff
 800322a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 800322c:	2300      	movs	r3, #0
 800322e:	7733      	strb	r3, [r6, #28]
}
 8003230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003234:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8003238:	bf08      	it	eq
 800323a:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800323c:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800323e:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003240:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003244:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003248:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 800324c:	e7cd      	b.n	80031ea <HAL_RTC_SetTime+0x50>

0800324e <HAL_RTC_SetDate>:
{
 800324e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003250:	7f03      	ldrb	r3, [r0, #28]
 8003252:	2b01      	cmp	r3, #1
{
 8003254:	4605      	mov	r5, r0
 8003256:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 800325a:	d039      	beq.n	80032d0 <HAL_RTC_SetDate+0x82>
 800325c:	2001      	movs	r0, #1
 800325e:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003260:	776b      	strb	r3, [r5, #29]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003262:	780c      	ldrb	r4, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003264:	78c8      	ldrb	r0, [r1, #3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003266:	784e      	ldrb	r6, [r1, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003268:	788f      	ldrb	r7, [r1, #2]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800326a:	0364      	lsls	r4, r4, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800326c:	bb92      	cbnz	r2, 80032d4 <HAL_RTC_SetDate+0x86>
 800326e:	06f3      	lsls	r3, r6, #27
 8003270:	d503      	bpl.n	800327a <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003272:	f026 0610 	bic.w	r6, r6, #16
 8003276:	360a      	adds	r6, #10
 8003278:	704e      	strb	r6, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800327a:	f7ff ff81 	bl	8003180 <RTC_ByteToBcd2>
 800327e:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003280:	7848      	ldrb	r0, [r1, #1]
 8003282:	f7ff ff7d 	bl	8003180 <RTC_ByteToBcd2>
 8003286:	4601      	mov	r1, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003288:	4638      	mov	r0, r7
 800328a:	f7ff ff79 	bl	8003180 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800328e:	ea40 0304 	orr.w	r3, r0, r4
 8003292:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003296:	ea43 2401 	orr.w	r4, r3, r1, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800329a:	682b      	ldr	r3, [r5, #0]
 800329c:	22ca      	movs	r2, #202	; 0xca
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
 80032a0:	2253      	movs	r2, #83	; 0x53
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80032a4:	4628      	mov	r0, r5
 80032a6:	f7ff fef5 	bl	8003094 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80032aa:	b958      	cbnz	r0, 80032c4 <HAL_RTC_SetDate+0x76>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80032ac:	682a      	ldr	r2, [r5, #0]
 80032ae:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80032b2:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80032b6:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 80032b8:	4628      	mov	r0, r5
 80032ba:	f7ff ff0c 	bl	80030d6 <RTC_ExitInitMode>
  if (status == HAL_OK)
 80032be:	b908      	cbnz	r0, 80032c4 <HAL_RTC_SetDate+0x76>
    hrtc->State = HAL_RTC_STATE_READY;
 80032c0:	2301      	movs	r3, #1
 80032c2:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032c4:	682b      	ldr	r3, [r5, #0]
 80032c6:	22ff      	movs	r2, #255	; 0xff
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 80032ca:	2300      	movs	r3, #0
 80032cc:	772b      	strb	r3, [r5, #28]
}
 80032ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 80032d0:	4618      	mov	r0, r3
 80032d2:	e7fc      	b.n	80032ce <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80032d4:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 80032d8:	433c      	orrs	r4, r7
 80032da:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80032de:	e7dc      	b.n	800329a <HAL_RTC_SetDate+0x4c>

080032e0 <HAL_RTC_SetAlarm_IT>:
{
 80032e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80032e4:	4b54      	ldr	r3, [pc, #336]	; (8003438 <HAL_RTC_SetAlarm_IT+0x158>)
 80032e6:	681e      	ldr	r6, [r3, #0]
 80032e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80032ec:	fbb6 f6f3 	udiv	r6, r6, r3
 80032f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f4:	435e      	muls	r6, r3
  __HAL_LOCK(hrtc);
 80032f6:	7f03      	ldrb	r3, [r0, #28]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80032f8:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hrtc);
 80032fa:	2b01      	cmp	r3, #1
{
 80032fc:	4605      	mov	r5, r0
 80032fe:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8003302:	d04a      	beq.n	800339a <HAL_RTC_SetAlarm_IT+0xba>
 8003304:	2001      	movs	r0, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003306:	682c      	ldr	r4, [r5, #0]
  __HAL_LOCK(hrtc);
 8003308:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800330a:	776b      	strb	r3, [r5, #29]
  if (Format == RTC_FORMAT_BIN)
 800330c:	7808      	ldrb	r0, [r1, #0]
 800330e:	f891 8001 	ldrb.w	r8, [r1, #1]
 8003312:	f891 9002 	ldrb.w	r9, [r1, #2]
 8003316:	f891 7020 	ldrb.w	r7, [r1, #32]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800331a:	68a3      	ldr	r3, [r4, #8]
  if (Format == RTC_FORMAT_BIN)
 800331c:	2a00      	cmp	r2, #0
 800331e:	d140      	bne.n	80033a2 <HAL_RTC_SetAlarm_IT+0xc2>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003320:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003324:	bf08      	it	eq
 8003326:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003328:	f7ff ff2a 	bl	8003180 <RTC_ByteToBcd2>
 800332c:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800332e:	4640      	mov	r0, r8
 8003330:	f7ff ff26 	bl	8003180 <RTC_ByteToBcd2>
 8003334:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003336:	4648      	mov	r0, r9
 8003338:	f7ff ff22 	bl	8003180 <RTC_ByteToBcd2>
 800333c:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800333e:	4638      	mov	r0, r7
 8003340:	f7ff ff1e 	bl	8003180 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003344:	69ca      	ldr	r2, [r1, #28]
 8003346:	694b      	ldr	r3, [r1, #20]
 8003348:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800334a:	78ca      	ldrb	r2, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800334c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8003350:	ea43 0309 	orr.w	r3, r3, r9
 8003354:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8003358:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 800335c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003360:	698a      	ldr	r2, [r1, #24]
 8003362:	6848      	ldr	r0, [r1, #4]
 8003364:	4310      	orrs	r0, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003366:	22ca      	movs	r2, #202	; 0xca
 8003368:	6262      	str	r2, [r4, #36]	; 0x24
 800336a:	2253      	movs	r2, #83	; 0x53
 800336c:	6262      	str	r2, [r4, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800336e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003370:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003374:	68a2      	ldr	r2, [r4, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003376:	d144      	bne.n	8003402 <HAL_RTC_SetAlarm_IT+0x122>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800337c:	60a2      	str	r2, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800337e:	68e2      	ldr	r2, [r4, #12]
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003386:	60e2      	str	r2, [r4, #12]
      if (count-- == 0U)
 8003388:	9a01      	ldr	r2, [sp, #4]
 800338a:	1e51      	subs	r1, r2, #1
 800338c:	9101      	str	r1, [sp, #4]
 800338e:	b9da      	cbnz	r2, 80033c8 <HAL_RTC_SetAlarm_IT+0xe8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003390:	23ff      	movs	r3, #255	; 0xff
 8003392:	6263      	str	r3, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 8003398:	772a      	strb	r2, [r5, #28]
}
 800339a:	4618      	mov	r0, r3
 800339c:	b002      	add	sp, #8
 800339e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80033a2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80033a6:	694a      	ldr	r2, [r1, #20]
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80033a8:	bf08      	it	eq
 80033aa:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80033ac:	69cb      	ldr	r3, [r1, #28]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	ea43 0309 	orr.w	r3, r3, r9
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80033b4:	78ca      	ldrb	r2, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80033b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80033ba:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 80033be:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 80033c2:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80033c6:	e7cb      	b.n	8003360 <HAL_RTC_SetAlarm_IT+0x80>
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80033c8:	68e2      	ldr	r2, [r4, #12]
 80033ca:	07d1      	lsls	r1, r2, #31
 80033cc:	d5dc      	bpl.n	8003388 <HAL_RTC_SetAlarm_IT+0xa8>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80033ce:	61e3      	str	r3, [r4, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80033d0:	6460      	str	r0, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80033d2:	68a3      	ldr	r3, [r4, #8]
 80033d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d8:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80033da:	68a3      	ldr	r3, [r4, #8]
 80033dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80033e0:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <HAL_RTC_SetAlarm_IT+0x15c>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80033ea:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80033f2:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033f4:	23ff      	movs	r3, #255	; 0xff
 80033f6:	6263      	str	r3, [r4, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80033f8:	2301      	movs	r3, #1
 80033fa:	776b      	strb	r3, [r5, #29]
  __HAL_UNLOCK(hrtc);
 80033fc:	2300      	movs	r3, #0
 80033fe:	772b      	strb	r3, [r5, #28]
  return HAL_OK;
 8003400:	e7cb      	b.n	800339a <HAL_RTC_SetAlarm_IT+0xba>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003402:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003406:	60a2      	str	r2, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003408:	68e2      	ldr	r2, [r4, #12]
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003410:	60e2      	str	r2, [r4, #12]
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003412:	9601      	str	r6, [sp, #4]
      if (count-- == 0U)
 8003414:	9a01      	ldr	r2, [sp, #4]
 8003416:	1e51      	subs	r1, r2, #1
 8003418:	9101      	str	r1, [sp, #4]
 800341a:	2a00      	cmp	r2, #0
 800341c:	d0b8      	beq.n	8003390 <HAL_RTC_SetAlarm_IT+0xb0>
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800341e:	68e2      	ldr	r2, [r4, #12]
 8003420:	0792      	lsls	r2, r2, #30
 8003422:	d5f7      	bpl.n	8003414 <HAL_RTC_SetAlarm_IT+0x134>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003424:	6223      	str	r3, [r4, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003426:	64a0      	str	r0, [r4, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003428:	68a3      	ldr	r3, [r4, #8]
 800342a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800342e:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003430:	68a3      	ldr	r3, [r4, #8]
 8003432:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003436:	e7d3      	b.n	80033e0 <HAL_RTC_SetAlarm_IT+0x100>
 8003438:	20000000 	.word	0x20000000
 800343c:	40013c00 	.word	0x40013c00

08003440 <HAL_RTCEx_AlarmBEventCallback>:
 8003440:	4770      	bx	lr
	...

08003444 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003444:	6a03      	ldr	r3, [r0, #32]
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344c:	6a03      	ldr	r3, [r0, #32]
{
 800344e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003450:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003452:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003454:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003456:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800345a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800345c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800345e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003462:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003464:	4d0e      	ldr	r5, [pc, #56]	; (80034a0 <TIM_OC1_SetConfig+0x5c>)
 8003466:	42a8      	cmp	r0, r5
 8003468:	d002      	beq.n	8003470 <TIM_OC1_SetConfig+0x2c>
 800346a:	4e0e      	ldr	r6, [pc, #56]	; (80034a4 <TIM_OC1_SetConfig+0x60>)
 800346c:	42b0      	cmp	r0, r6
 800346e:	d110      	bne.n	8003492 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003470:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003472:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003476:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003478:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800347a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347e:	d002      	beq.n	8003486 <TIM_OC1_SetConfig+0x42>
 8003480:	4d08      	ldr	r5, [pc, #32]	; (80034a4 <TIM_OC1_SetConfig+0x60>)
 8003482:	42a8      	cmp	r0, r5
 8003484:	d105      	bne.n	8003492 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003486:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800348a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800348e:	4335      	orrs	r5, r6
 8003490:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003492:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003494:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003496:	684a      	ldr	r2, [r1, #4]
 8003498:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800349a:	6203      	str	r3, [r0, #32]
}
 800349c:	bd70      	pop	{r4, r5, r6, pc}
 800349e:	bf00      	nop
 80034a0:	40010000 	.word	0x40010000
 80034a4:	40010400 	.word	0x40010400

080034a8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034a8:	6a03      	ldr	r3, [r0, #32]
 80034aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b0:	6a03      	ldr	r3, [r0, #32]
{
 80034b2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034b6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034ba:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80034be:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034c0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80034c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ca:	4d11      	ldr	r5, [pc, #68]	; (8003510 <TIM_OC3_SetConfig+0x68>)
 80034cc:	42a8      	cmp	r0, r5
 80034ce:	d003      	beq.n	80034d8 <TIM_OC3_SetConfig+0x30>
 80034d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034d4:	42a8      	cmp	r0, r5
 80034d6:	d114      	bne.n	8003502 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034d8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80034da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	4d0b      	ldr	r5, [pc, #44]	; (8003510 <TIM_OC3_SetConfig+0x68>)
 80034e4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80034e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ea:	d003      	beq.n	80034f4 <TIM_OC3_SetConfig+0x4c>
 80034ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034f0:	42a8      	cmp	r0, r5
 80034f2:	d106      	bne.n	8003502 <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034f4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034f8:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034fc:	4335      	orrs	r5, r6
 80034fe:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003502:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003504:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003506:	684a      	ldr	r2, [r1, #4]
 8003508:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350a:	6203      	str	r3, [r0, #32]
}
 800350c:	bd70      	pop	{r4, r5, r6, pc}
 800350e:	bf00      	nop
 8003510:	40010000 	.word	0x40010000

08003514 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003514:	6a03      	ldr	r3, [r0, #32]
 8003516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800351a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351c:	6a03      	ldr	r3, [r0, #32]
{
 800351e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003520:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003522:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003524:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003526:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800352a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800352e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003534:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003538:	4d08      	ldr	r5, [pc, #32]	; (800355c <TIM_OC4_SetConfig+0x48>)
 800353a:	42a8      	cmp	r0, r5
 800353c:	d003      	beq.n	8003546 <TIM_OC4_SetConfig+0x32>
 800353e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003542:	42a8      	cmp	r0, r5
 8003544:	d104      	bne.n	8003550 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003546:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003548:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800354c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003550:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003552:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003554:	684a      	ldr	r2, [r1, #4]
 8003556:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003558:	6203      	str	r3, [r0, #32]
}
 800355a:	bd30      	pop	{r4, r5, pc}
 800355c:	40010000 	.word	0x40010000

08003560 <HAL_TIM_PWM_MspInit>:
 8003560:	4770      	bx	lr

08003562 <HAL_TIM_PeriodElapsedCallback>:
 8003562:	4770      	bx	lr

08003564 <HAL_TIM_OC_DelayElapsedCallback>:
 8003564:	4770      	bx	lr

08003566 <HAL_TIM_IC_CaptureCallback>:
 8003566:	4770      	bx	lr

08003568 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003568:	4770      	bx	lr

0800356a <HAL_TIM_TriggerCallback>:
 800356a:	4770      	bx	lr

0800356c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800356c:	6803      	ldr	r3, [r0, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	0791      	lsls	r1, r2, #30
{
 8003572:	b510      	push	{r4, lr}
 8003574:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003576:	d50e      	bpl.n	8003596 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	0792      	lsls	r2, r2, #30
 800357c:	d50b      	bpl.n	8003596 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800357e:	f06f 0202 	mvn.w	r2, #2
 8003582:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003584:	2201      	movs	r2, #1
 8003586:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	079b      	lsls	r3, r3, #30
 800358c:	d077      	beq.n	800367e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800358e:	f7ff ffea 	bl	8003566 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	2300      	movs	r3, #0
 8003594:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	0750      	lsls	r0, r2, #29
 800359c:	d510      	bpl.n	80035c0 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	0751      	lsls	r1, r2, #29
 80035a2:	d50d      	bpl.n	80035c0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a4:	f06f 0204 	mvn.w	r2, #4
 80035a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035aa:	2202      	movs	r2, #2
 80035ac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80035b4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b6:	d068      	beq.n	800368a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80035b8:	f7ff ffd5 	bl	8003566 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035bc:	2300      	movs	r3, #0
 80035be:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	0712      	lsls	r2, r2, #28
 80035c6:	d50f      	bpl.n	80035e8 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	0710      	lsls	r0, r2, #28
 80035cc:	d50c      	bpl.n	80035e8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035ce:	f06f 0208 	mvn.w	r2, #8
 80035d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035d4:	2204      	movs	r2, #4
 80035d6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80035dc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035de:	d05a      	beq.n	8003696 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80035e0:	f7ff ffc1 	bl	8003566 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e4:	2300      	movs	r3, #0
 80035e6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	06d2      	lsls	r2, r2, #27
 80035ee:	d510      	bpl.n	8003612 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	06d0      	lsls	r0, r2, #27
 80035f4:	d50d      	bpl.n	8003612 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f6:	f06f 0210 	mvn.w	r2, #16
 80035fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035fc:	2208      	movs	r2, #8
 80035fe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003606:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003608:	d04b      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800360a:	f7ff ffac 	bl	8003566 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	2300      	movs	r3, #0
 8003610:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	07d1      	lsls	r1, r2, #31
 8003618:	d508      	bpl.n	800362c <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	07d2      	lsls	r2, r2, #31
 800361e:	d505      	bpl.n	800362c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003620:	f06f 0201 	mvn.w	r2, #1
 8003624:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003626:	4620      	mov	r0, r4
 8003628:	f7ff ff9b 	bl	8003562 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	0610      	lsls	r0, r2, #24
 8003632:	d508      	bpl.n	8003646 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	0611      	lsls	r1, r2, #24
 8003638:	d505      	bpl.n	8003646 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800363a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800363e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003640:	4620      	mov	r0, r4
 8003642:	f000 fa64 	bl	8003b0e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	0652      	lsls	r2, r2, #25
 800364c:	d508      	bpl.n	8003660 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	0650      	lsls	r0, r2, #25
 8003652:	d505      	bpl.n	8003660 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003654:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003658:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800365a:	4620      	mov	r0, r4
 800365c:	f7ff ff85 	bl	800356a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	0691      	lsls	r1, r2, #26
 8003666:	d522      	bpl.n	80036ae <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	0692      	lsls	r2, r2, #26
 800366c:	d51f      	bpl.n	80036ae <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800366e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003672:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003674:	611a      	str	r2, [r3, #16]
}
 8003676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800367a:	f000 ba47 	b.w	8003b0c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800367e:	f7ff ff71 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003682:	4620      	mov	r0, r4
 8003684:	f7ff ff70 	bl	8003568 <HAL_TIM_PWM_PulseFinishedCallback>
 8003688:	e783      	b.n	8003592 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368a:	f7ff ff6b 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368e:	4620      	mov	r0, r4
 8003690:	f7ff ff6a 	bl	8003568 <HAL_TIM_PWM_PulseFinishedCallback>
 8003694:	e792      	b.n	80035bc <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	f7ff ff65 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369a:	4620      	mov	r0, r4
 800369c:	f7ff ff64 	bl	8003568 <HAL_TIM_PWM_PulseFinishedCallback>
 80036a0:	e7a0      	b.n	80035e4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	f7ff ff5f 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a6:	4620      	mov	r0, r4
 80036a8:	f7ff ff5e 	bl	8003568 <HAL_TIM_PWM_PulseFinishedCallback>
 80036ac:	e7af      	b.n	800360e <HAL_TIM_IRQHandler+0xa2>
}
 80036ae:	bd10      	pop	{r4, pc}

080036b0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b0:	4a30      	ldr	r2, [pc, #192]	; (8003774 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80036b2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b4:	4290      	cmp	r0, r2
 80036b6:	d012      	beq.n	80036de <TIM_Base_SetConfig+0x2e>
 80036b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80036bc:	d00f      	beq.n	80036de <TIM_Base_SetConfig+0x2e>
 80036be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80036c2:	4290      	cmp	r0, r2
 80036c4:	d00b      	beq.n	80036de <TIM_Base_SetConfig+0x2e>
 80036c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036ca:	4290      	cmp	r0, r2
 80036cc:	d007      	beq.n	80036de <TIM_Base_SetConfig+0x2e>
 80036ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036d2:	4290      	cmp	r0, r2
 80036d4:	d003      	beq.n	80036de <TIM_Base_SetConfig+0x2e>
 80036d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80036da:	4290      	cmp	r0, r2
 80036dc:	d119      	bne.n	8003712 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80036de:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80036e4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e6:	4a23      	ldr	r2, [pc, #140]	; (8003774 <TIM_Base_SetConfig+0xc4>)
 80036e8:	4290      	cmp	r0, r2
 80036ea:	d029      	beq.n	8003740 <TIM_Base_SetConfig+0x90>
 80036ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80036f0:	d026      	beq.n	8003740 <TIM_Base_SetConfig+0x90>
 80036f2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80036f6:	4290      	cmp	r0, r2
 80036f8:	d022      	beq.n	8003740 <TIM_Base_SetConfig+0x90>
 80036fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036fe:	4290      	cmp	r0, r2
 8003700:	d01e      	beq.n	8003740 <TIM_Base_SetConfig+0x90>
 8003702:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003706:	4290      	cmp	r0, r2
 8003708:	d01a      	beq.n	8003740 <TIM_Base_SetConfig+0x90>
 800370a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800370e:	4290      	cmp	r0, r2
 8003710:	d016      	beq.n	8003740 <TIM_Base_SetConfig+0x90>
 8003712:	4a19      	ldr	r2, [pc, #100]	; (8003778 <TIM_Base_SetConfig+0xc8>)
 8003714:	4290      	cmp	r0, r2
 8003716:	d013      	beq.n	8003740 <TIM_Base_SetConfig+0x90>
 8003718:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800371c:	4290      	cmp	r0, r2
 800371e:	d00f      	beq.n	8003740 <TIM_Base_SetConfig+0x90>
 8003720:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003724:	4290      	cmp	r0, r2
 8003726:	d00b      	beq.n	8003740 <TIM_Base_SetConfig+0x90>
 8003728:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800372c:	4290      	cmp	r0, r2
 800372e:	d007      	beq.n	8003740 <TIM_Base_SetConfig+0x90>
 8003730:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003734:	4290      	cmp	r0, r2
 8003736:	d003      	beq.n	8003740 <TIM_Base_SetConfig+0x90>
 8003738:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800373c:	4290      	cmp	r0, r2
 800373e:	d103      	bne.n	8003748 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003740:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003746:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003748:	694a      	ldr	r2, [r1, #20]
 800374a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800374e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003750:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003752:	688b      	ldr	r3, [r1, #8]
 8003754:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003756:	680b      	ldr	r3, [r1, #0]
 8003758:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <TIM_Base_SetConfig+0xc4>)
 800375c:	4298      	cmp	r0, r3
 800375e:	d003      	beq.n	8003768 <TIM_Base_SetConfig+0xb8>
 8003760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003764:	4298      	cmp	r0, r3
 8003766:	d101      	bne.n	800376c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8003768:	690b      	ldr	r3, [r1, #16]
 800376a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800376c:	2301      	movs	r3, #1
 800376e:	6143      	str	r3, [r0, #20]
}
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	40014000 	.word	0x40014000

0800377c <HAL_TIM_Base_Init>:
{
 800377c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800377e:	4604      	mov	r4, r0
 8003780:	b330      	cbz	r0, 80037d0 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003782:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003786:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800378a:	b91b      	cbnz	r3, 8003794 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800378c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003790:	f7fe f91c 	bl	80019cc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003796:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800379c:	1d21      	adds	r1, r4, #4
 800379e:	f7ff ff87 	bl	80036b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 80037a8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80037ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80037b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80037b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80037c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80037ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80037ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80037d0:	2001      	movs	r0, #1
 80037d2:	e7fc      	b.n	80037ce <HAL_TIM_Base_Init+0x52>

080037d4 <HAL_TIM_PWM_Init>:
{
 80037d4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80037d6:	4604      	mov	r4, r0
 80037d8:	b330      	cbz	r0, 8003828 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80037da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037e2:	b91b      	cbnz	r3, 80037ec <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80037e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80037e8:	f7ff feba 	bl	8003560 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ee:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80037f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f4:	1d21      	adds	r1, r4, #4
 80037f6:	f7ff ff5b 	bl	80036b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8003800:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003802:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003806:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800380a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800380e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800381a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800381e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003822:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003826:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003828:	2001      	movs	r0, #1
 800382a:	e7fc      	b.n	8003826 <HAL_TIM_PWM_Init+0x52>

0800382c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800382c:	6a03      	ldr	r3, [r0, #32]
 800382e:	f023 0310 	bic.w	r3, r3, #16
 8003832:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003834:	6a03      	ldr	r3, [r0, #32]
{
 8003836:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8003838:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800383a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800383c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800383e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003842:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003846:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003848:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800384c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003850:	4d10      	ldr	r5, [pc, #64]	; (8003894 <TIM_OC2_SetConfig+0x68>)
 8003852:	42a8      	cmp	r0, r5
 8003854:	d003      	beq.n	800385e <TIM_OC2_SetConfig+0x32>
 8003856:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800385a:	42a8      	cmp	r0, r5
 800385c:	d114      	bne.n	8003888 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800385e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003864:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	4d0a      	ldr	r5, [pc, #40]	; (8003894 <TIM_OC2_SetConfig+0x68>)
 800386a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800386c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003870:	d003      	beq.n	800387a <TIM_OC2_SetConfig+0x4e>
 8003872:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003876:	42a8      	cmp	r0, r5
 8003878:	d106      	bne.n	8003888 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800387a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800387e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003882:	4335      	orrs	r5, r6
 8003884:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003888:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800388a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800388c:	684a      	ldr	r2, [r1, #4]
 800388e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003890:	6203      	str	r3, [r0, #32]
}
 8003892:	bd70      	pop	{r4, r5, r6, pc}
 8003894:	40010000 	.word	0x40010000

08003898 <HAL_TIM_PWM_ConfigChannel>:
{
 8003898:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800389a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800389e:	2b01      	cmp	r3, #1
{
 80038a0:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 80038a2:	d050      	beq.n	8003946 <HAL_TIM_PWM_ConfigChannel+0xae>
 80038a4:	2301      	movs	r3, #1
  switch (Channel)
 80038a6:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80038a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80038ac:	d03b      	beq.n	8003926 <HAL_TIM_PWM_ConfigChannel+0x8e>
 80038ae:	d807      	bhi.n	80038c0 <HAL_TIM_PWM_ConfigChannel+0x28>
 80038b0:	b1c2      	cbz	r2, 80038e4 <HAL_TIM_PWM_ConfigChannel+0x4c>
 80038b2:	2a04      	cmp	r2, #4
 80038b4:	d027      	beq.n	8003906 <HAL_TIM_PWM_ConfigChannel+0x6e>
 80038b6:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 80038b8:	2300      	movs	r3, #0
 80038ba:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80038be:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80038c0:	2a0c      	cmp	r2, #12
 80038c2:	d1f8      	bne.n	80038b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038c4:	6800      	ldr	r0, [r0, #0]
 80038c6:	f7ff fe25 	bl	8003514 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ca:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038cc:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038d2:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038d4:	69c3      	ldr	r3, [r0, #28]
 80038d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038da:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038dc:	69c3      	ldr	r3, [r0, #28]
 80038de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80038e2:	e02e      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038e4:	6800      	ldr	r0, [r0, #0]
 80038e6:	f7ff fdad 	bl	8003444 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038ea:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038ec:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038ee:	f043 0308 	orr.w	r3, r3, #8
 80038f2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038f4:	6983      	ldr	r3, [r0, #24]
 80038f6:	f023 0304 	bic.w	r3, r3, #4
 80038fa:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038fc:	6983      	ldr	r3, [r0, #24]
 80038fe:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003900:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2000      	movs	r0, #0
      break;
 8003904:	e7d8      	b.n	80038b8 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003906:	6800      	ldr	r0, [r0, #0]
 8003908:	f7ff ff90 	bl	800382c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800390c:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800390e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003910:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003914:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003916:	6983      	ldr	r3, [r0, #24]
 8003918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800391c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800391e:	6983      	ldr	r3, [r0, #24]
 8003920:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003924:	e7ec      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003926:	6800      	ldr	r0, [r0, #0]
 8003928:	f7ff fdbe 	bl	80034a8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800392c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800392e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003930:	f043 0308 	orr.w	r3, r3, #8
 8003934:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003936:	69c3      	ldr	r3, [r0, #28]
 8003938:	f023 0304 	bic.w	r3, r3, #4
 800393c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800393e:	69c3      	ldr	r3, [r0, #28]
 8003940:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003942:	61c3      	str	r3, [r0, #28]
 8003944:	e7dd      	b.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 8003946:	2002      	movs	r0, #2
 8003948:	e7b9      	b.n	80038be <HAL_TIM_PWM_ConfigChannel+0x26>

0800394a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800394a:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800394c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800394e:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003950:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003954:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8003958:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395a:	6083      	str	r3, [r0, #8]
}
 800395c:	bd10      	pop	{r4, pc}

0800395e <HAL_TIM_ConfigClockSource>:
{
 800395e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003960:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003964:	2b01      	cmp	r3, #1
{
 8003966:	4604      	mov	r4, r0
 8003968:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800396c:	f000 808e 	beq.w	8003a8c <HAL_TIM_ConfigClockSource+0x12e>
 8003970:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003972:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003976:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800397e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003982:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003986:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003988:	680b      	ldr	r3, [r1, #0]
 800398a:	2b60      	cmp	r3, #96	; 0x60
 800398c:	d04f      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0xd0>
 800398e:	d832      	bhi.n	80039f6 <HAL_TIM_ConfigClockSource+0x98>
 8003990:	2b40      	cmp	r3, #64	; 0x40
 8003992:	d064      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x100>
 8003994:	d816      	bhi.n	80039c4 <HAL_TIM_ConfigClockSource+0x66>
 8003996:	2b20      	cmp	r3, #32
 8003998:	d00d      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0x58>
 800399a:	d80a      	bhi.n	80039b2 <HAL_TIM_ConfigClockSource+0x54>
 800399c:	f033 0110 	bics.w	r1, r3, #16
 80039a0:	d009      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80039a8:	2300      	movs	r3, #0
 80039aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80039ae:	4610      	mov	r0, r2
 80039b0:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80039b2:	2b30      	cmp	r3, #48	; 0x30
 80039b4:	d1f5      	bne.n	80039a2 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80039b6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039bc:	4313      	orrs	r3, r2
 80039be:	f043 0307 	orr.w	r3, r3, #7
 80039c2:	e028      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80039c4:	2b50      	cmp	r3, #80	; 0x50
 80039c6:	d1ec      	bne.n	80039a2 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c8:	684a      	ldr	r2, [r1, #4]
 80039ca:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80039cc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ce:	6a03      	ldr	r3, [r0, #32]
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d6:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80039e4:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80039e6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80039e8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80039ea:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039f0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80039f4:	e00f      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80039f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fa:	d00d      	beq.n	8003a18 <HAL_TIM_ConfigClockSource+0xba>
 80039fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a00:	d00c      	beq.n	8003a1c <HAL_TIM_ConfigClockSource+0xbe>
 8003a02:	2b70      	cmp	r3, #112	; 0x70
 8003a04:	d1cd      	bne.n	80039a2 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003a06:	68cb      	ldr	r3, [r1, #12]
 8003a08:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a0c:	f7ff ff9d 	bl	800394a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a10:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8003a16:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a18:	2200      	movs	r2, #0
 8003a1a:	e7c2      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003a1c:	68cb      	ldr	r3, [r1, #12]
 8003a1e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a22:	f7ff ff92 	bl	800394a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a26:	6883      	ldr	r3, [r0, #8]
 8003a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2c:	e7f3      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0xb8>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a2e:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a30:	684d      	ldr	r5, [r1, #4]
 8003a32:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a34:	f023 0310 	bic.w	r3, r3, #16
 8003a38:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a3a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003a3c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a3e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a46:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a4a:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003a4e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a50:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a52:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a58:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003a5c:	e7db      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5e:	684a      	ldr	r2, [r1, #4]
 8003a60:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003a62:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a64:	6a03      	ldr	r3, [r0, #32]
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a6e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a76:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003a7a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003a7c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a7e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a80:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a86:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003a8a:	e7c4      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	e78e      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x50>

08003a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a90:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a92:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	f04f 0302 	mov.w	r3, #2
 8003a9c:	d032      	beq.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aa2:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8003aa6:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003aa8:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aaa:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aae:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ab0:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab2:	4c15      	ldr	r4, [pc, #84]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003ab4:	42a3      	cmp	r3, r4
 8003ab6:	d01a      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abc:	d017      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003abe:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8003ac2:	42a3      	cmp	r3, r4
 8003ac4:	d013      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ac6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003aca:	42a3      	cmp	r3, r4
 8003acc:	d00f      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ace:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ad2:	42a3      	cmp	r3, r4
 8003ad4:	d00b      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ad6:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003ada:	42a3      	cmp	r3, r4
 8003adc:	d007      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ade:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8003ae2:	42a3      	cmp	r3, r4
 8003ae4:	d003      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ae6:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003aea:	42a3      	cmp	r3, r4
 8003aec:	d104      	bne.n	8003af8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aee:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af4:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003afe:	2300      	movs	r3, #0
 8003b00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003b04:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003b06:	bd30      	pop	{r4, r5, pc}
 8003b08:	40010000 	.word	0x40010000

08003b0c <HAL_TIMEx_CommutCallback>:
 8003b0c:	4770      	bx	lr

08003b0e <HAL_TIMEx_BreakCallback>:
 8003b0e:	4770      	bx	lr

08003b10 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b10:	6802      	ldr	r2, [r0, #0]
 8003b12:	68c1      	ldr	r1, [r0, #12]
 8003b14:	6913      	ldr	r3, [r2, #16]
 8003b16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b1a:	430b      	orrs	r3, r1
{
 8003b1c:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b1e:	6113      	str	r3, [r2, #16]
{
 8003b20:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b22:	6883      	ldr	r3, [r0, #8]
 8003b24:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003b26:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b28:	4303      	orrs	r3, r0
 8003b2a:	6968      	ldr	r0, [r5, #20]
 8003b2c:	4303      	orrs	r3, r0
 8003b2e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003b30:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003b34:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b38:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b3e:	6953      	ldr	r3, [r2, #20]
 8003b40:	69a9      	ldr	r1, [r5, #24]
 8003b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b46:	430b      	orrs	r3, r1
 8003b48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b4a:	4b1f      	ldr	r3, [pc, #124]	; (8003bc8 <UART_SetConfig+0xb8>)
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d003      	beq.n	8003b58 <UART_SetConfig+0x48>
 8003b50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d123      	bne.n	8003ba0 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b58:	f7ff f9b0 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b5c:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b5e:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b64:	e9d5 4600 	ldrd	r4, r6, [r5]
 8003b68:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6c:	d11b      	bne.n	8003ba6 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b6e:	19b2      	adds	r2, r6, r6
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	415b      	adcs	r3, r3
 8003b76:	f7fc ff51 	bl	8000a1c <__aeabi_uldivmod>
 8003b7a:	2264      	movs	r2, #100	; 0x64
 8003b7c:	fbb0 f1f2 	udiv	r1, r0, r2
 8003b80:	fb02 0311 	mls	r3, r2, r1, r0
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	3332      	adds	r3, #50	; 0x32
 8003b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b8c:	f003 0207 	and.w	r2, r3, #7
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003b96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b9a:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b9c:	60a3      	str	r3, [r4, #8]
  }
}
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ba0:	f7ff f97c 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
 8003ba4:	e7da      	b.n	8003b5c <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ba6:	00b2      	lsls	r2, r6, #2
 8003ba8:	0fb3      	lsrs	r3, r6, #30
 8003baa:	f7fc ff37 	bl	8000a1c <__aeabi_uldivmod>
 8003bae:	2264      	movs	r2, #100	; 0x64
 8003bb0:	fbb0 f1f2 	udiv	r1, r0, r2
 8003bb4:	fb02 0311 	mls	r3, r2, r1, r0
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	3332      	adds	r3, #50	; 0x32
 8003bbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bc0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003bc4:	e7ea      	b.n	8003b9c <UART_SetConfig+0x8c>
 8003bc6:	bf00      	nop
 8003bc8:	40011000 	.word	0x40011000

08003bcc <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8003bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bce:	4604      	mov	r4, r0
 8003bd0:	460e      	mov	r6, r1
 8003bd2:	4617      	mov	r7, r2
 8003bd4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	6813      	ldr	r3, [r2, #0]
 8003bda:	ea36 0303 	bics.w	r3, r6, r3
 8003bde:	d101      	bne.n	8003be4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003be0:	2000      	movs	r0, #0
 8003be2:	e028      	b.n	8003c36 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8003be4:	1c6b      	adds	r3, r5, #1
 8003be6:	d0f7      	beq.n	8003bd8 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003be8:	b125      	cbz	r5, 8003bf4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8003bea:	f7fe f8a9 	bl	8001d40 <HAL_GetTick>
 8003bee:	1bc0      	subs	r0, r0, r7
 8003bf0:	4285      	cmp	r5, r0
 8003bf2:	d2f0      	bcs.n	8003bd6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf4:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	f102 030c 	add.w	r3, r2, #12
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	320c      	adds	r2, #12
 8003c04:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8003c08:	6821      	ldr	r1, [r4, #0]
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d1f2      	bne.n	8003bf4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	f101 0314 	add.w	r3, r1, #20
 8003c12:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	f101 0014 	add.w	r0, r1, #20
 8003c1e:	e840 3200 	strex	r2, r3, [r0]
 8003c22:	2a00      	cmp	r2, #0
 8003c24:	d1f3      	bne.n	8003c0e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8003c26:	2320      	movs	r3, #32
 8003c28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8003c2c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8003c30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8003c34:	2003      	movs	r0, #3
}
 8003c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c38 <HAL_UART_Init>:
{
 8003c38:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	b340      	cbz	r0, 8003c90 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c46:	b91b      	cbnz	r3, 8003c50 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003c48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003c4c:	f7fd ff1e 	bl	8001a8c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003c50:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c52:	2324      	movs	r3, #36	; 0x24
 8003c54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003c58:	68d3      	ldr	r3, [r2, #12]
 8003c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c5e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003c60:	4620      	mov	r0, r4
 8003c62:	f7ff ff55 	bl	8003b10 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c76:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c7e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003c82:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c8a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003c8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c90:	2001      	movs	r0, #1
 8003c92:	e7fc      	b.n	8003c8e <HAL_UART_Init+0x56>

08003c94 <HAL_UART_Transmit>:
{
 8003c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c96:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003c98:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8003c9c:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8003c9e:	2a20      	cmp	r2, #32
{
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca4:	d149      	bne.n	8003d3a <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8003ca6:	2900      	cmp	r1, #0
 8003ca8:	d045      	beq.n	8003d36 <HAL_UART_Transmit+0xa2>
 8003caa:	2f00      	cmp	r7, #0
 8003cac:	d043      	beq.n	8003d36 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8003cae:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003cb2:	2a01      	cmp	r2, #1
 8003cb4:	d041      	beq.n	8003d3a <HAL_UART_Transmit+0xa6>
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cbe:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc0:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cc2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8003cc6:	f7fe f83b 	bl	8001d40 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cca:	68a1      	ldr	r1, [r4, #8]
 8003ccc:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8003cce:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003cd4:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8003cd6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd8:	d103      	bne.n	8003ce2 <HAL_UART_Transmit+0x4e>
 8003cda:	6921      	ldr	r1, [r4, #16]
 8003cdc:	b909      	cbnz	r1, 8003ce2 <HAL_UART_Transmit+0x4e>
 8003cde:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003ce0:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003ce8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003cea:	b289      	uxth	r1, r1
 8003cec:	b941      	cbnz	r1, 8003d00 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cee:	2140      	movs	r1, #64	; 0x40
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f7ff ff6b 	bl	8003bcc <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003cf6:	b960      	cbnz	r0, 8003d12 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8003cf8:	2320      	movs	r3, #32
 8003cfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8003cfe:	e009      	b.n	8003d14 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d00:	2180      	movs	r1, #128	; 0x80
 8003d02:	4620      	mov	r0, r4
 8003d04:	e9cd 2300 	strd	r2, r3, [sp]
 8003d08:	f7ff ff60 	bl	8003bcc <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003d0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d10:	b110      	cbz	r0, 8003d18 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8003d12:	2003      	movs	r0, #3
}
 8003d14:	b003      	add	sp, #12
 8003d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d18:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8003d1a:	b94e      	cbnz	r6, 8003d30 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d1c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8003d20:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d24:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8003d26:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003d28:	3901      	subs	r1, #1
 8003d2a:	b289      	uxth	r1, r1
 8003d2c:	84e1      	strh	r1, [r4, #38]	; 0x26
 8003d2e:	e7db      	b.n	8003ce8 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d30:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003d34:	e7f6      	b.n	8003d24 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8003d36:	2001      	movs	r0, #1
 8003d38:	e7ec      	b.n	8003d14 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8003d3a:	2002      	movs	r0, #2
 8003d3c:	e7ea      	b.n	8003d14 <HAL_UART_Transmit+0x80>

08003d3e <_ZdlPvj>:
 8003d3e:	f000 b811 	b.w	8003d64 <_ZdlPv>

08003d42 <_Znwj>:
 8003d42:	2801      	cmp	r0, #1
 8003d44:	bf38      	it	cc
 8003d46:	2001      	movcc	r0, #1
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	f000 f81b 	bl	8003d88 <malloc>
 8003d52:	b100      	cbz	r0, 8003d56 <_Znwj+0x14>
 8003d54:	bd10      	pop	{r4, pc}
 8003d56:	f000 f807 	bl	8003d68 <_ZSt15get_new_handlerv>
 8003d5a:	b908      	cbnz	r0, 8003d60 <_Znwj+0x1e>
 8003d5c:	f000 f80c 	bl	8003d78 <abort>
 8003d60:	4780      	blx	r0
 8003d62:	e7f3      	b.n	8003d4c <_Znwj+0xa>

08003d64 <_ZdlPv>:
 8003d64:	f000 b818 	b.w	8003d98 <free>

08003d68 <_ZSt15get_new_handlerv>:
 8003d68:	4b02      	ldr	r3, [pc, #8]	; (8003d74 <_ZSt15get_new_handlerv+0xc>)
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	f3bf 8f5b 	dmb	ish
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000704 	.word	0x20000704

08003d78 <abort>:
 8003d78:	b508      	push	{r3, lr}
 8003d7a:	2006      	movs	r0, #6
 8003d7c:	f000 f924 	bl	8003fc8 <raise>
 8003d80:	2001      	movs	r0, #1
 8003d82:	f7fd ff39 	bl	8001bf8 <_exit>
	...

08003d88 <malloc>:
 8003d88:	4b02      	ldr	r3, [pc, #8]	; (8003d94 <malloc+0xc>)
 8003d8a:	4601      	mov	r1, r0
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	f000 b82b 	b.w	8003de8 <_malloc_r>
 8003d92:	bf00      	nop
 8003d94:	2000005c 	.word	0x2000005c

08003d98 <free>:
 8003d98:	4b02      	ldr	r3, [pc, #8]	; (8003da4 <free+0xc>)
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	f000 b96b 	b.w	8004078 <_free_r>
 8003da2:	bf00      	nop
 8003da4:	2000005c 	.word	0x2000005c

08003da8 <sbrk_aligned>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	4e0e      	ldr	r6, [pc, #56]	; (8003de4 <sbrk_aligned+0x3c>)
 8003dac:	460c      	mov	r4, r1
 8003dae:	6831      	ldr	r1, [r6, #0]
 8003db0:	4605      	mov	r5, r0
 8003db2:	b911      	cbnz	r1, 8003dba <sbrk_aligned+0x12>
 8003db4:	f000 f924 	bl	8004000 <_sbrk_r>
 8003db8:	6030      	str	r0, [r6, #0]
 8003dba:	4621      	mov	r1, r4
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 f91f 	bl	8004000 <_sbrk_r>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d00a      	beq.n	8003ddc <sbrk_aligned+0x34>
 8003dc6:	1cc4      	adds	r4, r0, #3
 8003dc8:	f024 0403 	bic.w	r4, r4, #3
 8003dcc:	42a0      	cmp	r0, r4
 8003dce:	d007      	beq.n	8003de0 <sbrk_aligned+0x38>
 8003dd0:	1a21      	subs	r1, r4, r0
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f000 f914 	bl	8004000 <_sbrk_r>
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d101      	bne.n	8003de0 <sbrk_aligned+0x38>
 8003ddc:	f04f 34ff 	mov.w	r4, #4294967295
 8003de0:	4620      	mov	r0, r4
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	2000070c 	.word	0x2000070c

08003de8 <_malloc_r>:
 8003de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dec:	1ccd      	adds	r5, r1, #3
 8003dee:	f025 0503 	bic.w	r5, r5, #3
 8003df2:	3508      	adds	r5, #8
 8003df4:	2d0c      	cmp	r5, #12
 8003df6:	bf38      	it	cc
 8003df8:	250c      	movcc	r5, #12
 8003dfa:	2d00      	cmp	r5, #0
 8003dfc:	4607      	mov	r7, r0
 8003dfe:	db01      	blt.n	8003e04 <_malloc_r+0x1c>
 8003e00:	42a9      	cmp	r1, r5
 8003e02:	d905      	bls.n	8003e10 <_malloc_r+0x28>
 8003e04:	230c      	movs	r3, #12
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	2600      	movs	r6, #0
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ee4 <_malloc_r+0xfc>
 8003e14:	f000 f868 	bl	8003ee8 <__malloc_lock>
 8003e18:	f8d8 3000 	ldr.w	r3, [r8]
 8003e1c:	461c      	mov	r4, r3
 8003e1e:	bb5c      	cbnz	r4, 8003e78 <_malloc_r+0x90>
 8003e20:	4629      	mov	r1, r5
 8003e22:	4638      	mov	r0, r7
 8003e24:	f7ff ffc0 	bl	8003da8 <sbrk_aligned>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	d155      	bne.n	8003eda <_malloc_r+0xf2>
 8003e2e:	f8d8 4000 	ldr.w	r4, [r8]
 8003e32:	4626      	mov	r6, r4
 8003e34:	2e00      	cmp	r6, #0
 8003e36:	d145      	bne.n	8003ec4 <_malloc_r+0xdc>
 8003e38:	2c00      	cmp	r4, #0
 8003e3a:	d048      	beq.n	8003ece <_malloc_r+0xe6>
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	4631      	mov	r1, r6
 8003e40:	4638      	mov	r0, r7
 8003e42:	eb04 0903 	add.w	r9, r4, r3
 8003e46:	f000 f8db 	bl	8004000 <_sbrk_r>
 8003e4a:	4581      	cmp	r9, r0
 8003e4c:	d13f      	bne.n	8003ece <_malloc_r+0xe6>
 8003e4e:	6821      	ldr	r1, [r4, #0]
 8003e50:	1a6d      	subs	r5, r5, r1
 8003e52:	4629      	mov	r1, r5
 8003e54:	4638      	mov	r0, r7
 8003e56:	f7ff ffa7 	bl	8003da8 <sbrk_aligned>
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d037      	beq.n	8003ece <_malloc_r+0xe6>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	442b      	add	r3, r5
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	f8d8 3000 	ldr.w	r3, [r8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d038      	beq.n	8003ede <_malloc_r+0xf6>
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	42a2      	cmp	r2, r4
 8003e70:	d12b      	bne.n	8003eca <_malloc_r+0xe2>
 8003e72:	2200      	movs	r2, #0
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	e00f      	b.n	8003e98 <_malloc_r+0xb0>
 8003e78:	6822      	ldr	r2, [r4, #0]
 8003e7a:	1b52      	subs	r2, r2, r5
 8003e7c:	d41f      	bmi.n	8003ebe <_malloc_r+0xd6>
 8003e7e:	2a0b      	cmp	r2, #11
 8003e80:	d917      	bls.n	8003eb2 <_malloc_r+0xca>
 8003e82:	1961      	adds	r1, r4, r5
 8003e84:	42a3      	cmp	r3, r4
 8003e86:	6025      	str	r5, [r4, #0]
 8003e88:	bf18      	it	ne
 8003e8a:	6059      	strne	r1, [r3, #4]
 8003e8c:	6863      	ldr	r3, [r4, #4]
 8003e8e:	bf08      	it	eq
 8003e90:	f8c8 1000 	streq.w	r1, [r8]
 8003e94:	5162      	str	r2, [r4, r5]
 8003e96:	604b      	str	r3, [r1, #4]
 8003e98:	4638      	mov	r0, r7
 8003e9a:	f104 060b 	add.w	r6, r4, #11
 8003e9e:	f000 f829 	bl	8003ef4 <__malloc_unlock>
 8003ea2:	f026 0607 	bic.w	r6, r6, #7
 8003ea6:	1d23      	adds	r3, r4, #4
 8003ea8:	1af2      	subs	r2, r6, r3
 8003eaa:	d0ae      	beq.n	8003e0a <_malloc_r+0x22>
 8003eac:	1b9b      	subs	r3, r3, r6
 8003eae:	50a3      	str	r3, [r4, r2]
 8003eb0:	e7ab      	b.n	8003e0a <_malloc_r+0x22>
 8003eb2:	42a3      	cmp	r3, r4
 8003eb4:	6862      	ldr	r2, [r4, #4]
 8003eb6:	d1dd      	bne.n	8003e74 <_malloc_r+0x8c>
 8003eb8:	f8c8 2000 	str.w	r2, [r8]
 8003ebc:	e7ec      	b.n	8003e98 <_malloc_r+0xb0>
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	6864      	ldr	r4, [r4, #4]
 8003ec2:	e7ac      	b.n	8003e1e <_malloc_r+0x36>
 8003ec4:	4634      	mov	r4, r6
 8003ec6:	6876      	ldr	r6, [r6, #4]
 8003ec8:	e7b4      	b.n	8003e34 <_malloc_r+0x4c>
 8003eca:	4613      	mov	r3, r2
 8003ecc:	e7cc      	b.n	8003e68 <_malloc_r+0x80>
 8003ece:	230c      	movs	r3, #12
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	f000 f80e 	bl	8003ef4 <__malloc_unlock>
 8003ed8:	e797      	b.n	8003e0a <_malloc_r+0x22>
 8003eda:	6025      	str	r5, [r4, #0]
 8003edc:	e7dc      	b.n	8003e98 <_malloc_r+0xb0>
 8003ede:	605b      	str	r3, [r3, #4]
 8003ee0:	deff      	udf	#255	; 0xff
 8003ee2:	bf00      	nop
 8003ee4:	20000708 	.word	0x20000708

08003ee8 <__malloc_lock>:
 8003ee8:	4801      	ldr	r0, [pc, #4]	; (8003ef0 <__malloc_lock+0x8>)
 8003eea:	f000 b8c3 	b.w	8004074 <__retarget_lock_acquire_recursive>
 8003eee:	bf00      	nop
 8003ef0:	2000084c 	.word	0x2000084c

08003ef4 <__malloc_unlock>:
 8003ef4:	4801      	ldr	r0, [pc, #4]	; (8003efc <__malloc_unlock+0x8>)
 8003ef6:	f000 b8be 	b.w	8004076 <__retarget_lock_release_recursive>
 8003efa:	bf00      	nop
 8003efc:	2000084c 	.word	0x2000084c

08003f00 <sniprintf>:
 8003f00:	b40c      	push	{r2, r3}
 8003f02:	b530      	push	{r4, r5, lr}
 8003f04:	4b17      	ldr	r3, [pc, #92]	; (8003f64 <sniprintf+0x64>)
 8003f06:	1e0c      	subs	r4, r1, #0
 8003f08:	681d      	ldr	r5, [r3, #0]
 8003f0a:	b09d      	sub	sp, #116	; 0x74
 8003f0c:	da08      	bge.n	8003f20 <sniprintf+0x20>
 8003f0e:	238b      	movs	r3, #139	; 0x8b
 8003f10:	602b      	str	r3, [r5, #0]
 8003f12:	f04f 30ff 	mov.w	r0, #4294967295
 8003f16:	b01d      	add	sp, #116	; 0x74
 8003f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f1c:	b002      	add	sp, #8
 8003f1e:	4770      	bx	lr
 8003f20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003f24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f28:	bf14      	ite	ne
 8003f2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f2e:	4623      	moveq	r3, r4
 8003f30:	9304      	str	r3, [sp, #16]
 8003f32:	9307      	str	r3, [sp, #28]
 8003f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f38:	9002      	str	r0, [sp, #8]
 8003f3a:	9006      	str	r0, [sp, #24]
 8003f3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f42:	ab21      	add	r3, sp, #132	; 0x84
 8003f44:	a902      	add	r1, sp, #8
 8003f46:	4628      	mov	r0, r5
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	f000 f93b 	bl	80041c4 <_svfiprintf_r>
 8003f4e:	1c43      	adds	r3, r0, #1
 8003f50:	bfbc      	itt	lt
 8003f52:	238b      	movlt	r3, #139	; 0x8b
 8003f54:	602b      	strlt	r3, [r5, #0]
 8003f56:	2c00      	cmp	r4, #0
 8003f58:	d0dd      	beq.n	8003f16 <sniprintf+0x16>
 8003f5a:	9b02      	ldr	r3, [sp, #8]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	e7d9      	b.n	8003f16 <sniprintf+0x16>
 8003f62:	bf00      	nop
 8003f64:	2000005c 	.word	0x2000005c

08003f68 <memset>:
 8003f68:	4402      	add	r2, r0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d100      	bne.n	8003f72 <memset+0xa>
 8003f70:	4770      	bx	lr
 8003f72:	f803 1b01 	strb.w	r1, [r3], #1
 8003f76:	e7f9      	b.n	8003f6c <memset+0x4>

08003f78 <_raise_r>:
 8003f78:	291f      	cmp	r1, #31
 8003f7a:	b538      	push	{r3, r4, r5, lr}
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	460d      	mov	r5, r1
 8003f80:	d904      	bls.n	8003f8c <_raise_r+0x14>
 8003f82:	2316      	movs	r3, #22
 8003f84:	6003      	str	r3, [r0, #0]
 8003f86:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8a:	bd38      	pop	{r3, r4, r5, pc}
 8003f8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003f8e:	b112      	cbz	r2, 8003f96 <_raise_r+0x1e>
 8003f90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003f94:	b94b      	cbnz	r3, 8003faa <_raise_r+0x32>
 8003f96:	4620      	mov	r0, r4
 8003f98:	f000 f830 	bl	8003ffc <_getpid_r>
 8003f9c:	462a      	mov	r2, r5
 8003f9e:	4601      	mov	r1, r0
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fa6:	f000 b817 	b.w	8003fd8 <_kill_r>
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d00a      	beq.n	8003fc4 <_raise_r+0x4c>
 8003fae:	1c59      	adds	r1, r3, #1
 8003fb0:	d103      	bne.n	8003fba <_raise_r+0x42>
 8003fb2:	2316      	movs	r3, #22
 8003fb4:	6003      	str	r3, [r0, #0]
 8003fb6:	2001      	movs	r0, #1
 8003fb8:	e7e7      	b.n	8003f8a <_raise_r+0x12>
 8003fba:	2400      	movs	r4, #0
 8003fbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	4798      	blx	r3
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	e7e0      	b.n	8003f8a <_raise_r+0x12>

08003fc8 <raise>:
 8003fc8:	4b02      	ldr	r3, [pc, #8]	; (8003fd4 <raise+0xc>)
 8003fca:	4601      	mov	r1, r0
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	f7ff bfd3 	b.w	8003f78 <_raise_r>
 8003fd2:	bf00      	nop
 8003fd4:	2000005c 	.word	0x2000005c

08003fd8 <_kill_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4d07      	ldr	r5, [pc, #28]	; (8003ff8 <_kill_r+0x20>)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	4604      	mov	r4, r0
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	602b      	str	r3, [r5, #0]
 8003fe6:	f7fd fdff 	bl	8001be8 <_kill>
 8003fea:	1c43      	adds	r3, r0, #1
 8003fec:	d102      	bne.n	8003ff4 <_kill_r+0x1c>
 8003fee:	682b      	ldr	r3, [r5, #0]
 8003ff0:	b103      	cbz	r3, 8003ff4 <_kill_r+0x1c>
 8003ff2:	6023      	str	r3, [r4, #0]
 8003ff4:	bd38      	pop	{r3, r4, r5, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000848 	.word	0x20000848

08003ffc <_getpid_r>:
 8003ffc:	f7fd bdf2 	b.w	8001be4 <_getpid>

08004000 <_sbrk_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4d06      	ldr	r5, [pc, #24]	; (800401c <_sbrk_r+0x1c>)
 8004004:	2300      	movs	r3, #0
 8004006:	4604      	mov	r4, r0
 8004008:	4608      	mov	r0, r1
 800400a:	602b      	str	r3, [r5, #0]
 800400c:	f7fd fdfa 	bl	8001c04 <_sbrk>
 8004010:	1c43      	adds	r3, r0, #1
 8004012:	d102      	bne.n	800401a <_sbrk_r+0x1a>
 8004014:	682b      	ldr	r3, [r5, #0]
 8004016:	b103      	cbz	r3, 800401a <_sbrk_r+0x1a>
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	20000848 	.word	0x20000848

08004020 <__errno>:
 8004020:	4b01      	ldr	r3, [pc, #4]	; (8004028 <__errno+0x8>)
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2000005c 	.word	0x2000005c

0800402c <__libc_init_array>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	4d0d      	ldr	r5, [pc, #52]	; (8004064 <__libc_init_array+0x38>)
 8004030:	4c0d      	ldr	r4, [pc, #52]	; (8004068 <__libc_init_array+0x3c>)
 8004032:	1b64      	subs	r4, r4, r5
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	2600      	movs	r6, #0
 8004038:	42a6      	cmp	r6, r4
 800403a:	d109      	bne.n	8004050 <__libc_init_array+0x24>
 800403c:	4d0b      	ldr	r5, [pc, #44]	; (800406c <__libc_init_array+0x40>)
 800403e:	4c0c      	ldr	r4, [pc, #48]	; (8004070 <__libc_init_array+0x44>)
 8004040:	f000 fbae 	bl	80047a0 <_init>
 8004044:	1b64      	subs	r4, r4, r5
 8004046:	10a4      	asrs	r4, r4, #2
 8004048:	2600      	movs	r6, #0
 800404a:	42a6      	cmp	r6, r4
 800404c:	d105      	bne.n	800405a <__libc_init_array+0x2e>
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	f855 3b04 	ldr.w	r3, [r5], #4
 8004054:	4798      	blx	r3
 8004056:	3601      	adds	r6, #1
 8004058:	e7ee      	b.n	8004038 <__libc_init_array+0xc>
 800405a:	f855 3b04 	ldr.w	r3, [r5], #4
 800405e:	4798      	blx	r3
 8004060:	3601      	adds	r6, #1
 8004062:	e7f2      	b.n	800404a <__libc_init_array+0x1e>
 8004064:	08004ca8 	.word	0x08004ca8
 8004068:	08004ca8 	.word	0x08004ca8
 800406c:	08004ca8 	.word	0x08004ca8
 8004070:	08004cac 	.word	0x08004cac

08004074 <__retarget_lock_acquire_recursive>:
 8004074:	4770      	bx	lr

08004076 <__retarget_lock_release_recursive>:
 8004076:	4770      	bx	lr

08004078 <_free_r>:
 8004078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800407a:	2900      	cmp	r1, #0
 800407c:	d044      	beq.n	8004108 <_free_r+0x90>
 800407e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004082:	9001      	str	r0, [sp, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	f1a1 0404 	sub.w	r4, r1, #4
 800408a:	bfb8      	it	lt
 800408c:	18e4      	addlt	r4, r4, r3
 800408e:	f7ff ff2b 	bl	8003ee8 <__malloc_lock>
 8004092:	4a1e      	ldr	r2, [pc, #120]	; (800410c <_free_r+0x94>)
 8004094:	9801      	ldr	r0, [sp, #4]
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	b933      	cbnz	r3, 80040a8 <_free_r+0x30>
 800409a:	6063      	str	r3, [r4, #4]
 800409c:	6014      	str	r4, [r2, #0]
 800409e:	b003      	add	sp, #12
 80040a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040a4:	f7ff bf26 	b.w	8003ef4 <__malloc_unlock>
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	d908      	bls.n	80040be <_free_r+0x46>
 80040ac:	6825      	ldr	r5, [r4, #0]
 80040ae:	1961      	adds	r1, r4, r5
 80040b0:	428b      	cmp	r3, r1
 80040b2:	bf01      	itttt	eq
 80040b4:	6819      	ldreq	r1, [r3, #0]
 80040b6:	685b      	ldreq	r3, [r3, #4]
 80040b8:	1949      	addeq	r1, r1, r5
 80040ba:	6021      	streq	r1, [r4, #0]
 80040bc:	e7ed      	b.n	800409a <_free_r+0x22>
 80040be:	461a      	mov	r2, r3
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	b10b      	cbz	r3, 80040c8 <_free_r+0x50>
 80040c4:	42a3      	cmp	r3, r4
 80040c6:	d9fa      	bls.n	80040be <_free_r+0x46>
 80040c8:	6811      	ldr	r1, [r2, #0]
 80040ca:	1855      	adds	r5, r2, r1
 80040cc:	42a5      	cmp	r5, r4
 80040ce:	d10b      	bne.n	80040e8 <_free_r+0x70>
 80040d0:	6824      	ldr	r4, [r4, #0]
 80040d2:	4421      	add	r1, r4
 80040d4:	1854      	adds	r4, r2, r1
 80040d6:	42a3      	cmp	r3, r4
 80040d8:	6011      	str	r1, [r2, #0]
 80040da:	d1e0      	bne.n	800409e <_free_r+0x26>
 80040dc:	681c      	ldr	r4, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	6053      	str	r3, [r2, #4]
 80040e2:	440c      	add	r4, r1
 80040e4:	6014      	str	r4, [r2, #0]
 80040e6:	e7da      	b.n	800409e <_free_r+0x26>
 80040e8:	d902      	bls.n	80040f0 <_free_r+0x78>
 80040ea:	230c      	movs	r3, #12
 80040ec:	6003      	str	r3, [r0, #0]
 80040ee:	e7d6      	b.n	800409e <_free_r+0x26>
 80040f0:	6825      	ldr	r5, [r4, #0]
 80040f2:	1961      	adds	r1, r4, r5
 80040f4:	428b      	cmp	r3, r1
 80040f6:	bf04      	itt	eq
 80040f8:	6819      	ldreq	r1, [r3, #0]
 80040fa:	685b      	ldreq	r3, [r3, #4]
 80040fc:	6063      	str	r3, [r4, #4]
 80040fe:	bf04      	itt	eq
 8004100:	1949      	addeq	r1, r1, r5
 8004102:	6021      	streq	r1, [r4, #0]
 8004104:	6054      	str	r4, [r2, #4]
 8004106:	e7ca      	b.n	800409e <_free_r+0x26>
 8004108:	b003      	add	sp, #12
 800410a:	bd30      	pop	{r4, r5, pc}
 800410c:	20000708 	.word	0x20000708

08004110 <__ssputs_r>:
 8004110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004114:	688e      	ldr	r6, [r1, #8]
 8004116:	461f      	mov	r7, r3
 8004118:	42be      	cmp	r6, r7
 800411a:	680b      	ldr	r3, [r1, #0]
 800411c:	4682      	mov	sl, r0
 800411e:	460c      	mov	r4, r1
 8004120:	4690      	mov	r8, r2
 8004122:	d82c      	bhi.n	800417e <__ssputs_r+0x6e>
 8004124:	898a      	ldrh	r2, [r1, #12]
 8004126:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800412a:	d026      	beq.n	800417a <__ssputs_r+0x6a>
 800412c:	6965      	ldr	r5, [r4, #20]
 800412e:	6909      	ldr	r1, [r1, #16]
 8004130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004134:	eba3 0901 	sub.w	r9, r3, r1
 8004138:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800413c:	1c7b      	adds	r3, r7, #1
 800413e:	444b      	add	r3, r9
 8004140:	106d      	asrs	r5, r5, #1
 8004142:	429d      	cmp	r5, r3
 8004144:	bf38      	it	cc
 8004146:	461d      	movcc	r5, r3
 8004148:	0553      	lsls	r3, r2, #21
 800414a:	d527      	bpl.n	800419c <__ssputs_r+0x8c>
 800414c:	4629      	mov	r1, r5
 800414e:	f7ff fe4b 	bl	8003de8 <_malloc_r>
 8004152:	4606      	mov	r6, r0
 8004154:	b360      	cbz	r0, 80041b0 <__ssputs_r+0xa0>
 8004156:	6921      	ldr	r1, [r4, #16]
 8004158:	464a      	mov	r2, r9
 800415a:	f000 fadb 	bl	8004714 <memcpy>
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	6126      	str	r6, [r4, #16]
 800416c:	6165      	str	r5, [r4, #20]
 800416e:	444e      	add	r6, r9
 8004170:	eba5 0509 	sub.w	r5, r5, r9
 8004174:	6026      	str	r6, [r4, #0]
 8004176:	60a5      	str	r5, [r4, #8]
 8004178:	463e      	mov	r6, r7
 800417a:	42be      	cmp	r6, r7
 800417c:	d900      	bls.n	8004180 <__ssputs_r+0x70>
 800417e:	463e      	mov	r6, r7
 8004180:	6820      	ldr	r0, [r4, #0]
 8004182:	4632      	mov	r2, r6
 8004184:	4641      	mov	r1, r8
 8004186:	f000 faab 	bl	80046e0 <memmove>
 800418a:	68a3      	ldr	r3, [r4, #8]
 800418c:	1b9b      	subs	r3, r3, r6
 800418e:	60a3      	str	r3, [r4, #8]
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	4433      	add	r3, r6
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	2000      	movs	r0, #0
 8004198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800419c:	462a      	mov	r2, r5
 800419e:	f000 fac7 	bl	8004730 <_realloc_r>
 80041a2:	4606      	mov	r6, r0
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d1e0      	bne.n	800416a <__ssputs_r+0x5a>
 80041a8:	6921      	ldr	r1, [r4, #16]
 80041aa:	4650      	mov	r0, sl
 80041ac:	f7ff ff64 	bl	8004078 <_free_r>
 80041b0:	230c      	movs	r3, #12
 80041b2:	f8ca 3000 	str.w	r3, [sl]
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041bc:	81a3      	strh	r3, [r4, #12]
 80041be:	f04f 30ff 	mov.w	r0, #4294967295
 80041c2:	e7e9      	b.n	8004198 <__ssputs_r+0x88>

080041c4 <_svfiprintf_r>:
 80041c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c8:	4698      	mov	r8, r3
 80041ca:	898b      	ldrh	r3, [r1, #12]
 80041cc:	061b      	lsls	r3, r3, #24
 80041ce:	b09d      	sub	sp, #116	; 0x74
 80041d0:	4607      	mov	r7, r0
 80041d2:	460d      	mov	r5, r1
 80041d4:	4614      	mov	r4, r2
 80041d6:	d50e      	bpl.n	80041f6 <_svfiprintf_r+0x32>
 80041d8:	690b      	ldr	r3, [r1, #16]
 80041da:	b963      	cbnz	r3, 80041f6 <_svfiprintf_r+0x32>
 80041dc:	2140      	movs	r1, #64	; 0x40
 80041de:	f7ff fe03 	bl	8003de8 <_malloc_r>
 80041e2:	6028      	str	r0, [r5, #0]
 80041e4:	6128      	str	r0, [r5, #16]
 80041e6:	b920      	cbnz	r0, 80041f2 <_svfiprintf_r+0x2e>
 80041e8:	230c      	movs	r3, #12
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	e0d0      	b.n	8004394 <_svfiprintf_r+0x1d0>
 80041f2:	2340      	movs	r3, #64	; 0x40
 80041f4:	616b      	str	r3, [r5, #20]
 80041f6:	2300      	movs	r3, #0
 80041f8:	9309      	str	r3, [sp, #36]	; 0x24
 80041fa:	2320      	movs	r3, #32
 80041fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004200:	f8cd 800c 	str.w	r8, [sp, #12]
 8004204:	2330      	movs	r3, #48	; 0x30
 8004206:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80043ac <_svfiprintf_r+0x1e8>
 800420a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800420e:	f04f 0901 	mov.w	r9, #1
 8004212:	4623      	mov	r3, r4
 8004214:	469a      	mov	sl, r3
 8004216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800421a:	b10a      	cbz	r2, 8004220 <_svfiprintf_r+0x5c>
 800421c:	2a25      	cmp	r2, #37	; 0x25
 800421e:	d1f9      	bne.n	8004214 <_svfiprintf_r+0x50>
 8004220:	ebba 0b04 	subs.w	fp, sl, r4
 8004224:	d00b      	beq.n	800423e <_svfiprintf_r+0x7a>
 8004226:	465b      	mov	r3, fp
 8004228:	4622      	mov	r2, r4
 800422a:	4629      	mov	r1, r5
 800422c:	4638      	mov	r0, r7
 800422e:	f7ff ff6f 	bl	8004110 <__ssputs_r>
 8004232:	3001      	adds	r0, #1
 8004234:	f000 80a9 	beq.w	800438a <_svfiprintf_r+0x1c6>
 8004238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800423a:	445a      	add	r2, fp
 800423c:	9209      	str	r2, [sp, #36]	; 0x24
 800423e:	f89a 3000 	ldrb.w	r3, [sl]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80a1 	beq.w	800438a <_svfiprintf_r+0x1c6>
 8004248:	2300      	movs	r3, #0
 800424a:	f04f 32ff 	mov.w	r2, #4294967295
 800424e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004252:	f10a 0a01 	add.w	sl, sl, #1
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	9307      	str	r3, [sp, #28]
 800425a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800425e:	931a      	str	r3, [sp, #104]	; 0x68
 8004260:	4654      	mov	r4, sl
 8004262:	2205      	movs	r2, #5
 8004264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004268:	4850      	ldr	r0, [pc, #320]	; (80043ac <_svfiprintf_r+0x1e8>)
 800426a:	f7fb ffb9 	bl	80001e0 <memchr>
 800426e:	9a04      	ldr	r2, [sp, #16]
 8004270:	b9d8      	cbnz	r0, 80042aa <_svfiprintf_r+0xe6>
 8004272:	06d0      	lsls	r0, r2, #27
 8004274:	bf44      	itt	mi
 8004276:	2320      	movmi	r3, #32
 8004278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800427c:	0711      	lsls	r1, r2, #28
 800427e:	bf44      	itt	mi
 8004280:	232b      	movmi	r3, #43	; 0x2b
 8004282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004286:	f89a 3000 	ldrb.w	r3, [sl]
 800428a:	2b2a      	cmp	r3, #42	; 0x2a
 800428c:	d015      	beq.n	80042ba <_svfiprintf_r+0xf6>
 800428e:	9a07      	ldr	r2, [sp, #28]
 8004290:	4654      	mov	r4, sl
 8004292:	2000      	movs	r0, #0
 8004294:	f04f 0c0a 	mov.w	ip, #10
 8004298:	4621      	mov	r1, r4
 800429a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800429e:	3b30      	subs	r3, #48	; 0x30
 80042a0:	2b09      	cmp	r3, #9
 80042a2:	d94d      	bls.n	8004340 <_svfiprintf_r+0x17c>
 80042a4:	b1b0      	cbz	r0, 80042d4 <_svfiprintf_r+0x110>
 80042a6:	9207      	str	r2, [sp, #28]
 80042a8:	e014      	b.n	80042d4 <_svfiprintf_r+0x110>
 80042aa:	eba0 0308 	sub.w	r3, r0, r8
 80042ae:	fa09 f303 	lsl.w	r3, r9, r3
 80042b2:	4313      	orrs	r3, r2
 80042b4:	9304      	str	r3, [sp, #16]
 80042b6:	46a2      	mov	sl, r4
 80042b8:	e7d2      	b.n	8004260 <_svfiprintf_r+0x9c>
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	1d19      	adds	r1, r3, #4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	9103      	str	r1, [sp, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bfbb      	ittet	lt
 80042c6:	425b      	neglt	r3, r3
 80042c8:	f042 0202 	orrlt.w	r2, r2, #2
 80042cc:	9307      	strge	r3, [sp, #28]
 80042ce:	9307      	strlt	r3, [sp, #28]
 80042d0:	bfb8      	it	lt
 80042d2:	9204      	strlt	r2, [sp, #16]
 80042d4:	7823      	ldrb	r3, [r4, #0]
 80042d6:	2b2e      	cmp	r3, #46	; 0x2e
 80042d8:	d10c      	bne.n	80042f4 <_svfiprintf_r+0x130>
 80042da:	7863      	ldrb	r3, [r4, #1]
 80042dc:	2b2a      	cmp	r3, #42	; 0x2a
 80042de:	d134      	bne.n	800434a <_svfiprintf_r+0x186>
 80042e0:	9b03      	ldr	r3, [sp, #12]
 80042e2:	1d1a      	adds	r2, r3, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	9203      	str	r2, [sp, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bfb8      	it	lt
 80042ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80042f0:	3402      	adds	r4, #2
 80042f2:	9305      	str	r3, [sp, #20]
 80042f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80043bc <_svfiprintf_r+0x1f8>
 80042f8:	7821      	ldrb	r1, [r4, #0]
 80042fa:	2203      	movs	r2, #3
 80042fc:	4650      	mov	r0, sl
 80042fe:	f7fb ff6f 	bl	80001e0 <memchr>
 8004302:	b138      	cbz	r0, 8004314 <_svfiprintf_r+0x150>
 8004304:	9b04      	ldr	r3, [sp, #16]
 8004306:	eba0 000a 	sub.w	r0, r0, sl
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	4082      	lsls	r2, r0
 800430e:	4313      	orrs	r3, r2
 8004310:	3401      	adds	r4, #1
 8004312:	9304      	str	r3, [sp, #16]
 8004314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004318:	4825      	ldr	r0, [pc, #148]	; (80043b0 <_svfiprintf_r+0x1ec>)
 800431a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800431e:	2206      	movs	r2, #6
 8004320:	f7fb ff5e 	bl	80001e0 <memchr>
 8004324:	2800      	cmp	r0, #0
 8004326:	d038      	beq.n	800439a <_svfiprintf_r+0x1d6>
 8004328:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <_svfiprintf_r+0x1f0>)
 800432a:	bb1b      	cbnz	r3, 8004374 <_svfiprintf_r+0x1b0>
 800432c:	9b03      	ldr	r3, [sp, #12]
 800432e:	3307      	adds	r3, #7
 8004330:	f023 0307 	bic.w	r3, r3, #7
 8004334:	3308      	adds	r3, #8
 8004336:	9303      	str	r3, [sp, #12]
 8004338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800433a:	4433      	add	r3, r6
 800433c:	9309      	str	r3, [sp, #36]	; 0x24
 800433e:	e768      	b.n	8004212 <_svfiprintf_r+0x4e>
 8004340:	fb0c 3202 	mla	r2, ip, r2, r3
 8004344:	460c      	mov	r4, r1
 8004346:	2001      	movs	r0, #1
 8004348:	e7a6      	b.n	8004298 <_svfiprintf_r+0xd4>
 800434a:	2300      	movs	r3, #0
 800434c:	3401      	adds	r4, #1
 800434e:	9305      	str	r3, [sp, #20]
 8004350:	4619      	mov	r1, r3
 8004352:	f04f 0c0a 	mov.w	ip, #10
 8004356:	4620      	mov	r0, r4
 8004358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800435c:	3a30      	subs	r2, #48	; 0x30
 800435e:	2a09      	cmp	r2, #9
 8004360:	d903      	bls.n	800436a <_svfiprintf_r+0x1a6>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0c6      	beq.n	80042f4 <_svfiprintf_r+0x130>
 8004366:	9105      	str	r1, [sp, #20]
 8004368:	e7c4      	b.n	80042f4 <_svfiprintf_r+0x130>
 800436a:	fb0c 2101 	mla	r1, ip, r1, r2
 800436e:	4604      	mov	r4, r0
 8004370:	2301      	movs	r3, #1
 8004372:	e7f0      	b.n	8004356 <_svfiprintf_r+0x192>
 8004374:	ab03      	add	r3, sp, #12
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	462a      	mov	r2, r5
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <_svfiprintf_r+0x1f4>)
 800437c:	a904      	add	r1, sp, #16
 800437e:	4638      	mov	r0, r7
 8004380:	f3af 8000 	nop.w
 8004384:	1c42      	adds	r2, r0, #1
 8004386:	4606      	mov	r6, r0
 8004388:	d1d6      	bne.n	8004338 <_svfiprintf_r+0x174>
 800438a:	89ab      	ldrh	r3, [r5, #12]
 800438c:	065b      	lsls	r3, r3, #25
 800438e:	f53f af2d 	bmi.w	80041ec <_svfiprintf_r+0x28>
 8004392:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004394:	b01d      	add	sp, #116	; 0x74
 8004396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439a:	ab03      	add	r3, sp, #12
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	462a      	mov	r2, r5
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <_svfiprintf_r+0x1f4>)
 80043a2:	a904      	add	r1, sp, #16
 80043a4:	4638      	mov	r0, r7
 80043a6:	f000 f879 	bl	800449c <_printf_i>
 80043aa:	e7eb      	b.n	8004384 <_svfiprintf_r+0x1c0>
 80043ac:	08004c6b 	.word	0x08004c6b
 80043b0:	08004c75 	.word	0x08004c75
 80043b4:	00000000 	.word	0x00000000
 80043b8:	08004111 	.word	0x08004111
 80043bc:	08004c71 	.word	0x08004c71

080043c0 <_printf_common>:
 80043c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	4616      	mov	r6, r2
 80043c6:	4699      	mov	r9, r3
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	690b      	ldr	r3, [r1, #16]
 80043cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bfb8      	it	lt
 80043d4:	4613      	movlt	r3, r2
 80043d6:	6033      	str	r3, [r6, #0]
 80043d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043dc:	4607      	mov	r7, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	b10a      	cbz	r2, 80043e6 <_printf_common+0x26>
 80043e2:	3301      	adds	r3, #1
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	0699      	lsls	r1, r3, #26
 80043ea:	bf42      	ittt	mi
 80043ec:	6833      	ldrmi	r3, [r6, #0]
 80043ee:	3302      	addmi	r3, #2
 80043f0:	6033      	strmi	r3, [r6, #0]
 80043f2:	6825      	ldr	r5, [r4, #0]
 80043f4:	f015 0506 	ands.w	r5, r5, #6
 80043f8:	d106      	bne.n	8004408 <_printf_common+0x48>
 80043fa:	f104 0a19 	add.w	sl, r4, #25
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	6832      	ldr	r2, [r6, #0]
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	42ab      	cmp	r3, r5
 8004406:	dc26      	bgt.n	8004456 <_printf_common+0x96>
 8004408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800440c:	1e13      	subs	r3, r2, #0
 800440e:	6822      	ldr	r2, [r4, #0]
 8004410:	bf18      	it	ne
 8004412:	2301      	movne	r3, #1
 8004414:	0692      	lsls	r2, r2, #26
 8004416:	d42b      	bmi.n	8004470 <_printf_common+0xb0>
 8004418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800441c:	4649      	mov	r1, r9
 800441e:	4638      	mov	r0, r7
 8004420:	47c0      	blx	r8
 8004422:	3001      	adds	r0, #1
 8004424:	d01e      	beq.n	8004464 <_printf_common+0xa4>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	6922      	ldr	r2, [r4, #16]
 800442a:	f003 0306 	and.w	r3, r3, #6
 800442e:	2b04      	cmp	r3, #4
 8004430:	bf02      	ittt	eq
 8004432:	68e5      	ldreq	r5, [r4, #12]
 8004434:	6833      	ldreq	r3, [r6, #0]
 8004436:	1aed      	subeq	r5, r5, r3
 8004438:	68a3      	ldr	r3, [r4, #8]
 800443a:	bf0c      	ite	eq
 800443c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004440:	2500      	movne	r5, #0
 8004442:	4293      	cmp	r3, r2
 8004444:	bfc4      	itt	gt
 8004446:	1a9b      	subgt	r3, r3, r2
 8004448:	18ed      	addgt	r5, r5, r3
 800444a:	2600      	movs	r6, #0
 800444c:	341a      	adds	r4, #26
 800444e:	42b5      	cmp	r5, r6
 8004450:	d11a      	bne.n	8004488 <_printf_common+0xc8>
 8004452:	2000      	movs	r0, #0
 8004454:	e008      	b.n	8004468 <_printf_common+0xa8>
 8004456:	2301      	movs	r3, #1
 8004458:	4652      	mov	r2, sl
 800445a:	4649      	mov	r1, r9
 800445c:	4638      	mov	r0, r7
 800445e:	47c0      	blx	r8
 8004460:	3001      	adds	r0, #1
 8004462:	d103      	bne.n	800446c <_printf_common+0xac>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446c:	3501      	adds	r5, #1
 800446e:	e7c6      	b.n	80043fe <_printf_common+0x3e>
 8004470:	18e1      	adds	r1, r4, r3
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	2030      	movs	r0, #48	; 0x30
 8004476:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800447a:	4422      	add	r2, r4
 800447c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004484:	3302      	adds	r3, #2
 8004486:	e7c7      	b.n	8004418 <_printf_common+0x58>
 8004488:	2301      	movs	r3, #1
 800448a:	4622      	mov	r2, r4
 800448c:	4649      	mov	r1, r9
 800448e:	4638      	mov	r0, r7
 8004490:	47c0      	blx	r8
 8004492:	3001      	adds	r0, #1
 8004494:	d0e6      	beq.n	8004464 <_printf_common+0xa4>
 8004496:	3601      	adds	r6, #1
 8004498:	e7d9      	b.n	800444e <_printf_common+0x8e>
	...

0800449c <_printf_i>:
 800449c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	7e0f      	ldrb	r7, [r1, #24]
 80044a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044a4:	2f78      	cmp	r7, #120	; 0x78
 80044a6:	4691      	mov	r9, r2
 80044a8:	4680      	mov	r8, r0
 80044aa:	460c      	mov	r4, r1
 80044ac:	469a      	mov	sl, r3
 80044ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044b2:	d807      	bhi.n	80044c4 <_printf_i+0x28>
 80044b4:	2f62      	cmp	r7, #98	; 0x62
 80044b6:	d80a      	bhi.n	80044ce <_printf_i+0x32>
 80044b8:	2f00      	cmp	r7, #0
 80044ba:	f000 80d4 	beq.w	8004666 <_printf_i+0x1ca>
 80044be:	2f58      	cmp	r7, #88	; 0x58
 80044c0:	f000 80c0 	beq.w	8004644 <_printf_i+0x1a8>
 80044c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044cc:	e03a      	b.n	8004544 <_printf_i+0xa8>
 80044ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044d2:	2b15      	cmp	r3, #21
 80044d4:	d8f6      	bhi.n	80044c4 <_printf_i+0x28>
 80044d6:	a101      	add	r1, pc, #4	; (adr r1, 80044dc <_printf_i+0x40>)
 80044d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044dc:	08004535 	.word	0x08004535
 80044e0:	08004549 	.word	0x08004549
 80044e4:	080044c5 	.word	0x080044c5
 80044e8:	080044c5 	.word	0x080044c5
 80044ec:	080044c5 	.word	0x080044c5
 80044f0:	080044c5 	.word	0x080044c5
 80044f4:	08004549 	.word	0x08004549
 80044f8:	080044c5 	.word	0x080044c5
 80044fc:	080044c5 	.word	0x080044c5
 8004500:	080044c5 	.word	0x080044c5
 8004504:	080044c5 	.word	0x080044c5
 8004508:	0800464d 	.word	0x0800464d
 800450c:	08004575 	.word	0x08004575
 8004510:	08004607 	.word	0x08004607
 8004514:	080044c5 	.word	0x080044c5
 8004518:	080044c5 	.word	0x080044c5
 800451c:	0800466f 	.word	0x0800466f
 8004520:	080044c5 	.word	0x080044c5
 8004524:	08004575 	.word	0x08004575
 8004528:	080044c5 	.word	0x080044c5
 800452c:	080044c5 	.word	0x080044c5
 8004530:	0800460f 	.word	0x0800460f
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	602a      	str	r2, [r5, #0]
 800453c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004544:	2301      	movs	r3, #1
 8004546:	e09f      	b.n	8004688 <_printf_i+0x1ec>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	682b      	ldr	r3, [r5, #0]
 800454c:	0607      	lsls	r7, r0, #24
 800454e:	f103 0104 	add.w	r1, r3, #4
 8004552:	6029      	str	r1, [r5, #0]
 8004554:	d501      	bpl.n	800455a <_printf_i+0xbe>
 8004556:	681e      	ldr	r6, [r3, #0]
 8004558:	e003      	b.n	8004562 <_printf_i+0xc6>
 800455a:	0646      	lsls	r6, r0, #25
 800455c:	d5fb      	bpl.n	8004556 <_printf_i+0xba>
 800455e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004562:	2e00      	cmp	r6, #0
 8004564:	da03      	bge.n	800456e <_printf_i+0xd2>
 8004566:	232d      	movs	r3, #45	; 0x2d
 8004568:	4276      	negs	r6, r6
 800456a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800456e:	485a      	ldr	r0, [pc, #360]	; (80046d8 <_printf_i+0x23c>)
 8004570:	230a      	movs	r3, #10
 8004572:	e012      	b.n	800459a <_printf_i+0xfe>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	6820      	ldr	r0, [r4, #0]
 8004578:	1d19      	adds	r1, r3, #4
 800457a:	6029      	str	r1, [r5, #0]
 800457c:	0605      	lsls	r5, r0, #24
 800457e:	d501      	bpl.n	8004584 <_printf_i+0xe8>
 8004580:	681e      	ldr	r6, [r3, #0]
 8004582:	e002      	b.n	800458a <_printf_i+0xee>
 8004584:	0641      	lsls	r1, r0, #25
 8004586:	d5fb      	bpl.n	8004580 <_printf_i+0xe4>
 8004588:	881e      	ldrh	r6, [r3, #0]
 800458a:	4853      	ldr	r0, [pc, #332]	; (80046d8 <_printf_i+0x23c>)
 800458c:	2f6f      	cmp	r7, #111	; 0x6f
 800458e:	bf0c      	ite	eq
 8004590:	2308      	moveq	r3, #8
 8004592:	230a      	movne	r3, #10
 8004594:	2100      	movs	r1, #0
 8004596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800459a:	6865      	ldr	r5, [r4, #4]
 800459c:	60a5      	str	r5, [r4, #8]
 800459e:	2d00      	cmp	r5, #0
 80045a0:	bfa2      	ittt	ge
 80045a2:	6821      	ldrge	r1, [r4, #0]
 80045a4:	f021 0104 	bicge.w	r1, r1, #4
 80045a8:	6021      	strge	r1, [r4, #0]
 80045aa:	b90e      	cbnz	r6, 80045b0 <_printf_i+0x114>
 80045ac:	2d00      	cmp	r5, #0
 80045ae:	d04b      	beq.n	8004648 <_printf_i+0x1ac>
 80045b0:	4615      	mov	r5, r2
 80045b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80045b6:	fb03 6711 	mls	r7, r3, r1, r6
 80045ba:	5dc7      	ldrb	r7, [r0, r7]
 80045bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045c0:	4637      	mov	r7, r6
 80045c2:	42bb      	cmp	r3, r7
 80045c4:	460e      	mov	r6, r1
 80045c6:	d9f4      	bls.n	80045b2 <_printf_i+0x116>
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d10b      	bne.n	80045e4 <_printf_i+0x148>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	07de      	lsls	r6, r3, #31
 80045d0:	d508      	bpl.n	80045e4 <_printf_i+0x148>
 80045d2:	6923      	ldr	r3, [r4, #16]
 80045d4:	6861      	ldr	r1, [r4, #4]
 80045d6:	4299      	cmp	r1, r3
 80045d8:	bfde      	ittt	le
 80045da:	2330      	movle	r3, #48	; 0x30
 80045dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045e4:	1b52      	subs	r2, r2, r5
 80045e6:	6122      	str	r2, [r4, #16]
 80045e8:	f8cd a000 	str.w	sl, [sp]
 80045ec:	464b      	mov	r3, r9
 80045ee:	aa03      	add	r2, sp, #12
 80045f0:	4621      	mov	r1, r4
 80045f2:	4640      	mov	r0, r8
 80045f4:	f7ff fee4 	bl	80043c0 <_printf_common>
 80045f8:	3001      	adds	r0, #1
 80045fa:	d14a      	bne.n	8004692 <_printf_i+0x1f6>
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	b004      	add	sp, #16
 8004602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	f043 0320 	orr.w	r3, r3, #32
 800460c:	6023      	str	r3, [r4, #0]
 800460e:	4833      	ldr	r0, [pc, #204]	; (80046dc <_printf_i+0x240>)
 8004610:	2778      	movs	r7, #120	; 0x78
 8004612:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	6829      	ldr	r1, [r5, #0]
 800461a:	061f      	lsls	r7, r3, #24
 800461c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004620:	d402      	bmi.n	8004628 <_printf_i+0x18c>
 8004622:	065f      	lsls	r7, r3, #25
 8004624:	bf48      	it	mi
 8004626:	b2b6      	uxthmi	r6, r6
 8004628:	07df      	lsls	r7, r3, #31
 800462a:	bf48      	it	mi
 800462c:	f043 0320 	orrmi.w	r3, r3, #32
 8004630:	6029      	str	r1, [r5, #0]
 8004632:	bf48      	it	mi
 8004634:	6023      	strmi	r3, [r4, #0]
 8004636:	b91e      	cbnz	r6, 8004640 <_printf_i+0x1a4>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	f023 0320 	bic.w	r3, r3, #32
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	2310      	movs	r3, #16
 8004642:	e7a7      	b.n	8004594 <_printf_i+0xf8>
 8004644:	4824      	ldr	r0, [pc, #144]	; (80046d8 <_printf_i+0x23c>)
 8004646:	e7e4      	b.n	8004612 <_printf_i+0x176>
 8004648:	4615      	mov	r5, r2
 800464a:	e7bd      	b.n	80045c8 <_printf_i+0x12c>
 800464c:	682b      	ldr	r3, [r5, #0]
 800464e:	6826      	ldr	r6, [r4, #0]
 8004650:	6961      	ldr	r1, [r4, #20]
 8004652:	1d18      	adds	r0, r3, #4
 8004654:	6028      	str	r0, [r5, #0]
 8004656:	0635      	lsls	r5, r6, #24
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	d501      	bpl.n	8004660 <_printf_i+0x1c4>
 800465c:	6019      	str	r1, [r3, #0]
 800465e:	e002      	b.n	8004666 <_printf_i+0x1ca>
 8004660:	0670      	lsls	r0, r6, #25
 8004662:	d5fb      	bpl.n	800465c <_printf_i+0x1c0>
 8004664:	8019      	strh	r1, [r3, #0]
 8004666:	2300      	movs	r3, #0
 8004668:	6123      	str	r3, [r4, #16]
 800466a:	4615      	mov	r5, r2
 800466c:	e7bc      	b.n	80045e8 <_printf_i+0x14c>
 800466e:	682b      	ldr	r3, [r5, #0]
 8004670:	1d1a      	adds	r2, r3, #4
 8004672:	602a      	str	r2, [r5, #0]
 8004674:	681d      	ldr	r5, [r3, #0]
 8004676:	6862      	ldr	r2, [r4, #4]
 8004678:	2100      	movs	r1, #0
 800467a:	4628      	mov	r0, r5
 800467c:	f7fb fdb0 	bl	80001e0 <memchr>
 8004680:	b108      	cbz	r0, 8004686 <_printf_i+0x1ea>
 8004682:	1b40      	subs	r0, r0, r5
 8004684:	6060      	str	r0, [r4, #4]
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	2300      	movs	r3, #0
 800468c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004690:	e7aa      	b.n	80045e8 <_printf_i+0x14c>
 8004692:	6923      	ldr	r3, [r4, #16]
 8004694:	462a      	mov	r2, r5
 8004696:	4649      	mov	r1, r9
 8004698:	4640      	mov	r0, r8
 800469a:	47d0      	blx	sl
 800469c:	3001      	adds	r0, #1
 800469e:	d0ad      	beq.n	80045fc <_printf_i+0x160>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	079b      	lsls	r3, r3, #30
 80046a4:	d413      	bmi.n	80046ce <_printf_i+0x232>
 80046a6:	68e0      	ldr	r0, [r4, #12]
 80046a8:	9b03      	ldr	r3, [sp, #12]
 80046aa:	4298      	cmp	r0, r3
 80046ac:	bfb8      	it	lt
 80046ae:	4618      	movlt	r0, r3
 80046b0:	e7a6      	b.n	8004600 <_printf_i+0x164>
 80046b2:	2301      	movs	r3, #1
 80046b4:	4632      	mov	r2, r6
 80046b6:	4649      	mov	r1, r9
 80046b8:	4640      	mov	r0, r8
 80046ba:	47d0      	blx	sl
 80046bc:	3001      	adds	r0, #1
 80046be:	d09d      	beq.n	80045fc <_printf_i+0x160>
 80046c0:	3501      	adds	r5, #1
 80046c2:	68e3      	ldr	r3, [r4, #12]
 80046c4:	9903      	ldr	r1, [sp, #12]
 80046c6:	1a5b      	subs	r3, r3, r1
 80046c8:	42ab      	cmp	r3, r5
 80046ca:	dcf2      	bgt.n	80046b2 <_printf_i+0x216>
 80046cc:	e7eb      	b.n	80046a6 <_printf_i+0x20a>
 80046ce:	2500      	movs	r5, #0
 80046d0:	f104 0619 	add.w	r6, r4, #25
 80046d4:	e7f5      	b.n	80046c2 <_printf_i+0x226>
 80046d6:	bf00      	nop
 80046d8:	08004c7c 	.word	0x08004c7c
 80046dc:	08004c8d 	.word	0x08004c8d

080046e0 <memmove>:
 80046e0:	4288      	cmp	r0, r1
 80046e2:	b510      	push	{r4, lr}
 80046e4:	eb01 0402 	add.w	r4, r1, r2
 80046e8:	d902      	bls.n	80046f0 <memmove+0x10>
 80046ea:	4284      	cmp	r4, r0
 80046ec:	4623      	mov	r3, r4
 80046ee:	d807      	bhi.n	8004700 <memmove+0x20>
 80046f0:	1e43      	subs	r3, r0, #1
 80046f2:	42a1      	cmp	r1, r4
 80046f4:	d008      	beq.n	8004708 <memmove+0x28>
 80046f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046fe:	e7f8      	b.n	80046f2 <memmove+0x12>
 8004700:	4402      	add	r2, r0
 8004702:	4601      	mov	r1, r0
 8004704:	428a      	cmp	r2, r1
 8004706:	d100      	bne.n	800470a <memmove+0x2a>
 8004708:	bd10      	pop	{r4, pc}
 800470a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800470e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004712:	e7f7      	b.n	8004704 <memmove+0x24>

08004714 <memcpy>:
 8004714:	440a      	add	r2, r1
 8004716:	4291      	cmp	r1, r2
 8004718:	f100 33ff 	add.w	r3, r0, #4294967295
 800471c:	d100      	bne.n	8004720 <memcpy+0xc>
 800471e:	4770      	bx	lr
 8004720:	b510      	push	{r4, lr}
 8004722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800472a:	4291      	cmp	r1, r2
 800472c:	d1f9      	bne.n	8004722 <memcpy+0xe>
 800472e:	bd10      	pop	{r4, pc}

08004730 <_realloc_r>:
 8004730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004734:	4680      	mov	r8, r0
 8004736:	4614      	mov	r4, r2
 8004738:	460e      	mov	r6, r1
 800473a:	b921      	cbnz	r1, 8004746 <_realloc_r+0x16>
 800473c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004740:	4611      	mov	r1, r2
 8004742:	f7ff bb51 	b.w	8003de8 <_malloc_r>
 8004746:	b92a      	cbnz	r2, 8004754 <_realloc_r+0x24>
 8004748:	f7ff fc96 	bl	8004078 <_free_r>
 800474c:	4625      	mov	r5, r4
 800474e:	4628      	mov	r0, r5
 8004750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004754:	f000 f81b 	bl	800478e <_malloc_usable_size_r>
 8004758:	4284      	cmp	r4, r0
 800475a:	4607      	mov	r7, r0
 800475c:	d802      	bhi.n	8004764 <_realloc_r+0x34>
 800475e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004762:	d812      	bhi.n	800478a <_realloc_r+0x5a>
 8004764:	4621      	mov	r1, r4
 8004766:	4640      	mov	r0, r8
 8004768:	f7ff fb3e 	bl	8003de8 <_malloc_r>
 800476c:	4605      	mov	r5, r0
 800476e:	2800      	cmp	r0, #0
 8004770:	d0ed      	beq.n	800474e <_realloc_r+0x1e>
 8004772:	42bc      	cmp	r4, r7
 8004774:	4622      	mov	r2, r4
 8004776:	4631      	mov	r1, r6
 8004778:	bf28      	it	cs
 800477a:	463a      	movcs	r2, r7
 800477c:	f7ff ffca 	bl	8004714 <memcpy>
 8004780:	4631      	mov	r1, r6
 8004782:	4640      	mov	r0, r8
 8004784:	f7ff fc78 	bl	8004078 <_free_r>
 8004788:	e7e1      	b.n	800474e <_realloc_r+0x1e>
 800478a:	4635      	mov	r5, r6
 800478c:	e7df      	b.n	800474e <_realloc_r+0x1e>

0800478e <_malloc_usable_size_r>:
 800478e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004792:	1f18      	subs	r0, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	bfbc      	itt	lt
 8004798:	580b      	ldrlt	r3, [r1, r0]
 800479a:	18c0      	addlt	r0, r0, r3
 800479c:	4770      	bx	lr
	...

080047a0 <_init>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr

080047ac <_fini>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	bf00      	nop
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr
