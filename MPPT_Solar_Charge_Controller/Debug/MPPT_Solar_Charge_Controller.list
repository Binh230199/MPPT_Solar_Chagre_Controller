
MPPT_Solar_Charge_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800482c  0800482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c68  08004c68  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c70  08004c70  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000007f0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000850  20000850  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002986d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004f60  00000000  00000000  00049940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000bca5  00000000  00000000  0004e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001190  00000000  00000000  0005a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001177  00000000  00000000  0005b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000299ea  00000000  00000000  0005c84f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000248c8  00000000  00000000  00086239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ecccc  00000000  00000000  000aab01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003e00  00000000  00000000  001977d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000078  00000000  00000000  0019b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004814 	.word	0x08004814

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004814 	.word	0x08004814

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b970 	b.w	8000db4 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	460d      	mov	r5, r1
 8000af4:	4604      	mov	r4, r0
 8000af6:	460f      	mov	r7, r1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d14a      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4694      	mov	ip, r2
 8000b00:	d965      	bls.n	8000bce <__udivmoddi4+0xe2>
 8000b02:	fab2 f382 	clz	r3, r2
 8000b06:	b143      	cbz	r3, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b0c:	f1c3 0220 	rsb	r2, r3, #32
 8000b10:	409f      	lsls	r7, r3
 8000b12:	fa20 f202 	lsr.w	r2, r0, r2
 8000b16:	4317      	orrs	r7, r2
 8000b18:	409c      	lsls	r4, r3
 8000b1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b1e:	fa1f f58c 	uxth.w	r5, ip
 8000b22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b26:	0c22      	lsrs	r2, r4, #16
 8000b28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b30:	fb01 f005 	mul.w	r0, r1, r5
 8000b34:	4290      	cmp	r0, r2
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x62>
 8000b38:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b40:	f080 811c 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b44:	4290      	cmp	r0, r2
 8000b46:	f240 8119 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b4a:	3902      	subs	r1, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a12      	subs	r2, r2, r0
 8000b50:	b2a4      	uxth	r4, r4
 8000b52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b5e:	fb00 f505 	mul.w	r5, r0, r5
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	d90a      	bls.n	8000b7c <__udivmoddi4+0x90>
 8000b66:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b6e:	f080 8107 	bcs.w	8000d80 <__udivmoddi4+0x294>
 8000b72:	42a5      	cmp	r5, r4
 8000b74:	f240 8104 	bls.w	8000d80 <__udivmoddi4+0x294>
 8000b78:	4464      	add	r4, ip
 8000b7a:	3802      	subs	r0, #2
 8000b7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b80:	1b64      	subs	r4, r4, r5
 8000b82:	2100      	movs	r1, #0
 8000b84:	b11e      	cbz	r6, 8000b8e <__udivmoddi4+0xa2>
 8000b86:	40dc      	lsrs	r4, r3
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0xbc>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80ed 	beq.w	8000d76 <__udivmoddi4+0x28a>
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba8:	fab3 f183 	clz	r1, r3
 8000bac:	2900      	cmp	r1, #0
 8000bae:	d149      	bne.n	8000c44 <__udivmoddi4+0x158>
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	d302      	bcc.n	8000bba <__udivmoddi4+0xce>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	f200 80f8 	bhi.w	8000daa <__udivmoddi4+0x2be>
 8000bba:	1a84      	subs	r4, r0, r2
 8000bbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d0e2      	beq.n	8000b8e <__udivmoddi4+0xa2>
 8000bc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bcc:	e7df      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000bce:	b902      	cbnz	r2, 8000bd2 <__udivmoddi4+0xe6>
 8000bd0:	deff      	udf	#255	; 0xff
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 8090 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bdc:	1a8a      	subs	r2, r1, r2
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	2101      	movs	r1, #1
 8000be8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bec:	fb07 2015 	mls	r0, r7, r5, r2
 8000bf0:	0c22      	lsrs	r2, r4, #16
 8000bf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bf6:	fb0e f005 	mul.w	r0, lr, r5
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000bfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000c02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	f200 80cb 	bhi.w	8000da4 <__udivmoddi4+0x2b8>
 8000c0e:	4645      	mov	r5, r8
 8000c10:	1a12      	subs	r2, r2, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c18:	fb07 2210 	mls	r2, r7, r0, r2
 8000c1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c20:	fb0e fe00 	mul.w	lr, lr, r0
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x14e>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x14c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f200 80bb 	bhi.w	8000dae <__udivmoddi4+0x2c2>
 8000c38:	4610      	mov	r0, r2
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c42:	e79f      	b.n	8000b84 <__udivmoddi4+0x98>
 8000c44:	f1c1 0720 	rsb	r7, r1, #32
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa05 f401 	lsl.w	r4, r5, r1
 8000c56:	fa20 f307 	lsr.w	r3, r0, r7
 8000c5a:	40fd      	lsrs	r5, r7
 8000c5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c60:	4323      	orrs	r3, r4
 8000c62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c66:	fa1f fe8c 	uxth.w	lr, ip
 8000c6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c6e:	0c1c      	lsrs	r4, r3, #16
 8000c70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c74:	fb08 f50e 	mul.w	r5, r8, lr
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c8c:	f080 8088 	bcs.w	8000da0 <__udivmoddi4+0x2b4>
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	f240 8085 	bls.w	8000da0 <__udivmoddi4+0x2b4>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	4464      	add	r4, ip
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	b29d      	uxth	r5, r3
 8000ca0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ca4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ca8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cbc:	d26c      	bcs.n	8000d98 <__udivmoddi4+0x2ac>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	d96a      	bls.n	8000d98 <__udivmoddi4+0x2ac>
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	4464      	add	r4, ip
 8000cc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cca:	fba3 9502 	umull	r9, r5, r3, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	42ac      	cmp	r4, r5
 8000cd4:	46c8      	mov	r8, r9
 8000cd6:	46ae      	mov	lr, r5
 8000cd8:	d356      	bcc.n	8000d88 <__udivmoddi4+0x29c>
 8000cda:	d053      	beq.n	8000d84 <__udivmoddi4+0x298>
 8000cdc:	b156      	cbz	r6, 8000cf4 <__udivmoddi4+0x208>
 8000cde:	ebb0 0208 	subs.w	r2, r0, r8
 8000ce2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ce6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cea:	40ca      	lsrs	r2, r1
 8000cec:	40cc      	lsrs	r4, r1
 8000cee:	4317      	orrs	r7, r2
 8000cf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfc:	f1c3 0120 	rsb	r1, r3, #32
 8000d00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d04:	fa20 f201 	lsr.w	r2, r0, r1
 8000d08:	fa25 f101 	lsr.w	r1, r5, r1
 8000d0c:	409d      	lsls	r5, r3
 8000d0e:	432a      	orrs	r2, r5
 8000d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d20:	0c11      	lsrs	r1, r2, #16
 8000d22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d26:	fb00 f50e 	mul.w	r5, r0, lr
 8000d2a:	428d      	cmp	r5, r1
 8000d2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x258>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d3a:	d22f      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d3c:	428d      	cmp	r5, r1
 8000d3e:	d92d      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4461      	add	r1, ip
 8000d44:	1b49      	subs	r1, r1, r5
 8000d46:	b292      	uxth	r2, r2
 8000d48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d54:	fb05 f10e 	mul.w	r1, r5, lr
 8000d58:	4291      	cmp	r1, r2
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x282>
 8000d5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d64:	d216      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d66:	4291      	cmp	r1, r2
 8000d68:	d914      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d6a:	3d02      	subs	r5, #2
 8000d6c:	4462      	add	r2, ip
 8000d6e:	1a52      	subs	r2, r2, r1
 8000d70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d74:	e738      	b.n	8000be8 <__udivmoddi4+0xfc>
 8000d76:	4631      	mov	r1, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e708      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	e6e6      	b.n	8000b4e <__udivmoddi4+0x62>
 8000d80:	4610      	mov	r0, r2
 8000d82:	e6fb      	b.n	8000b7c <__udivmoddi4+0x90>
 8000d84:	4548      	cmp	r0, r9
 8000d86:	d2a9      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d88:	ebb9 0802 	subs.w	r8, r9, r2
 8000d8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d90:	3b01      	subs	r3, #1
 8000d92:	e7a3      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d94:	4645      	mov	r5, r8
 8000d96:	e7ea      	b.n	8000d6e <__udivmoddi4+0x282>
 8000d98:	462b      	mov	r3, r5
 8000d9a:	e794      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7d1      	b.n	8000d44 <__udivmoddi4+0x258>
 8000da0:	46d0      	mov	r8, sl
 8000da2:	e77b      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da4:	3d02      	subs	r5, #2
 8000da6:	4462      	add	r2, ip
 8000da8:	e732      	b.n	8000c10 <__udivmoddi4+0x124>
 8000daa:	4608      	mov	r0, r1
 8000dac:	e70a      	b.n	8000bc4 <__udivmoddi4+0xd8>
 8000dae:	4464      	add	r4, ip
 8000db0:	3802      	subs	r0, #2
 8000db2:	e742      	b.n	8000c3a <__udivmoddi4+0x14e>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <_ZN4blib6AnalogD1Ev>:
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
    {
        sampling();
    }

    Analog::~Analog()
 8000db8:	b510      	push	{r4, lr}
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <_ZN4blib6AnalogD1Ev+0x14>)
 8000dbc:	6003      	str	r3, [r0, #0]
 8000dbe:	4604      	mov	r4, r0
    {
        HAL_ADC_Stop_DMA(mHadc);
 8000dc0:	6980      	ldr	r0, [r0, #24]
 8000dc2:	f001 f965 	bl	8002090 <HAL_ADC_Stop_DMA>
    }
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	bd10      	pop	{r4, pc}
 8000dca:	bf00      	nop
 8000dcc:	08004834 	.word	0x08004834

08000dd0 <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	4604      	mov	r4, r0
    }
 8000dd4:	f7ff fff0 	bl	8000db8 <_ZN4blib6AnalogD1Ev>
 8000dd8:	4620      	mov	r0, r4
 8000dda:	2134      	movs	r1, #52	; 0x34
 8000ddc:	f002 ffe9 	bl	8003db2 <_ZdlPvj>
 8000de0:	4620      	mov	r0, r4
 8000de2:	bd10      	pop	{r4, pc}

08000de4 <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 8000de4:	1d01      	adds	r1, r0, #4
 8000de6:	2205      	movs	r2, #5
 8000de8:	6980      	ldr	r0, [r0, #24]
 8000dea:	f001 b8a3 	b.w	8001f34 <HAL_ADC_Start_DMA>
	...

08000df0 <_ZN4blib6AnalogC1Ev>:
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8000df0:	b510      	push	{r4, lr}
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_ZN4blib6AnalogC1Ev+0x24>)
 8000df4:	4604      	mov	r4, r0
 8000df6:	2214      	movs	r2, #20
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f840 3b04 	str.w	r3, [r0], #4
 8000dfe:	f003 f8ed 	bl	8003fdc <memset>
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <_ZN4blib6AnalogC1Ev+0x28>)
 8000e04:	61a3      	str	r3, [r4, #24]
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <_ZN4blib6AnalogC1Ev+0x2c>)
 8000e08:	61e3      	str	r3, [r4, #28]
        sampling();
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f7ff ffea 	bl	8000de4 <_ZN4blib6Analog8samplingEv>
    }
 8000e10:	4620      	mov	r0, r4
 8000e12:	bd10      	pop	{r4, pc}
 8000e14:	08004834 	.word	0x08004834
 8000e18:	20000084 	.word	0x20000084
 8000e1c:	200000cc 	.word	0x200000cc

08000e20 <_ZN4blib6Analog18convertAdcChannel2Em>:
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
    }

    float Analog::convertAdcChannel2(uint32_t adcValue)    // Convert adcValue -> Iin
    {
        float voltage = CHANNEL_2_RATIO * ((float) adcValue / 4095) * 3.3;
 8000e20:	ee07 1a90 	vmov	s15, r1
 8000e24:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000e80 <_ZN4blib6Analog18convertAdcChannel2Em+0x60>
 8000e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
    {
 8000e2c:	b508      	push	{r3, lr}
        float voltage = CHANNEL_2_RATIO * ((float) adcValue / 4095) * 3.3;
 8000e2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e32:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8000e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e3a:	ee17 0a90 	vmov	r0, s15
 8000e3e:	f7ff fb83 	bl	8000548 <__aeabi_f2d>
 8000e42:	a30b      	add	r3, pc, #44	; (adr r3, 8000e70 <_ZN4blib6Analog18convertAdcChannel2Em+0x50>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	f7ff fbd6 	bl	80005f8 <__aeabi_dmul>
 8000e4c:	f7ff fde6 	bl	8000a1c <__aeabi_d2f>
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8000e50:	f7ff fb7a 	bl	8000548 <__aeabi_f2d>
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <_ZN4blib6Analog18convertAdcChannel2Em+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	f7ff fa16 	bl	8000288 <__aeabi_dsub>
 8000e5c:	a306      	add	r3, pc, #24	; (adr r3, 8000e78 <_ZN4blib6Analog18convertAdcChannel2Em+0x58>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f7ff fcf3 	bl	800084c <__aeabi_ddiv>
 8000e66:	f7ff fdd9 	bl	8000a1c <__aeabi_d2f>

        return current;
    }
 8000e6a:	ee00 0a10 	vmov	s0, r0
 8000e6e:	bd08      	pop	{r3, pc}
 8000e70:	66666666 	.word	0x66666666
 8000e74:	400a6666 	.word	0x400a6666
 8000e78:	a0000000 	.word	0xa0000000
 8000e7c:	3fb99999 	.word	0x3fb99999
 8000e80:	457ff000 	.word	0x457ff000
 8000e84:	40040000 	.word	0x40040000

08000e88 <_ZN4blib6Analog18convertAdcChannel4Em>:
    {
        return CHANNEL_3_RATIO * ((float) adcValue / 4095) * 3.3;
    }
    float Analog::convertAdcChannel4(uint32_t adcValue)    // Convert adcValue -> Iout
    {
        float voltage = CHANNEL_4_RATIO * ((float) adcValue / 4095) * 3.3;
 8000e88:	ee07 1a90 	vmov	s15, r1
 8000e8c:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000ee8 <_ZN4blib6Analog18convertAdcChannel4Em+0x60>
 8000e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
    {
 8000e94:	b508      	push	{r3, lr}
        float voltage = CHANNEL_4_RATIO * ((float) adcValue / 4095) * 3.3;
 8000e96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e9a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8000e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea2:	ee17 0a90 	vmov	r0, s15
 8000ea6:	f7ff fb4f 	bl	8000548 <__aeabi_f2d>
 8000eaa:	a30b      	add	r3, pc, #44	; (adr r3, 8000ed8 <_ZN4blib6Analog18convertAdcChannel4Em+0x50>)
 8000eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb0:	f7ff fba2 	bl	80005f8 <__aeabi_dmul>
 8000eb4:	f7ff fdb2 	bl	8000a1c <__aeabi_d2f>
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8000eb8:	f7ff fb46 	bl	8000548 <__aeabi_f2d>
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <_ZN4blib6Analog18convertAdcChannel4Em+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f7ff f9e2 	bl	8000288 <__aeabi_dsub>
 8000ec4:	a306      	add	r3, pc, #24	; (adr r3, 8000ee0 <_ZN4blib6Analog18convertAdcChannel4Em+0x58>)
 8000ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eca:	f7ff fcbf 	bl	800084c <__aeabi_ddiv>
 8000ece:	f7ff fda5 	bl	8000a1c <__aeabi_d2f>

        return current;
    }
 8000ed2:	ee00 0a10 	vmov	s0, r0
 8000ed6:	bd08      	pop	{r3, pc}
 8000ed8:	66666666 	.word	0x66666666
 8000edc:	400a6666 	.word	0x400a6666
 8000ee0:	a0000000 	.word	0xa0000000
 8000ee4:	3fb99999 	.word	0x3fb99999
 8000ee8:	457ff000 	.word	0x457ff000
 8000eec:	40040000 	.word	0x40040000

08000ef0 <_ZN4blib6Analog10readAnalogEv>:
    {
 8000ef0:	b510      	push	{r4, lr}
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
 8000ef2:	edd0 7a01 	vldr	s15, [r0, #4]
    {
 8000ef6:	ed2d 8b02 	vpush	{d8}
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
 8000efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000efe:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 8000fa8 <_ZN4blib6Analog10readAnalogEv+0xb8>
 8000f02:	ee87 7a88 	vdiv.f32	s14, s15, s16
    {
 8000f06:	4604      	mov	r4, r0
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
 8000f08:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
 8000f0c:	ee67 7a28 	vmul.f32	s15, s14, s17
 8000f10:	ee17 0a90 	vmov	r0, s15
 8000f14:	f7ff fb18 	bl	8000548 <__aeabi_f2d>
 8000f18:	a321      	add	r3, pc, #132	; (adr r3, 8000fa0 <_ZN4blib6Analog10readAnalogEv+0xb0>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f7ff fb6b 	bl	80005f8 <__aeabi_dmul>
 8000f22:	f7ff fd7b 	bl	8000a1c <__aeabi_d2f>
        mIin = convertAdcChannel2(mAdcValues[1]);
 8000f26:	68a1      	ldr	r1, [r4, #8]
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
 8000f28:	6220      	str	r0, [r4, #32]
        mIin = convertAdcChannel2(mAdcValues[1]);
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f7ff ff78 	bl	8000e20 <_ZN4blib6Analog18convertAdcChannel2Em>
        return CHANNEL_3_RATIO * ((float) adcValue / 4095) * 3.3;
 8000f30:	edd4 7a03 	vldr	s15, [r4, #12]
        mIin = convertAdcChannel2(mAdcValues[1]);
 8000f34:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        return CHANNEL_3_RATIO * ((float) adcValue / 4095) * 3.3;
 8000f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8000f40:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8000f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f48:	ee17 0a90 	vmov	r0, s15
 8000f4c:	f7ff fafc 	bl	8000548 <__aeabi_f2d>
 8000f50:	a313      	add	r3, pc, #76	; (adr r3, 8000fa0 <_ZN4blib6Analog10readAnalogEv+0xb0>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	f7ff fb4f 	bl	80005f8 <__aeabi_dmul>
 8000f5a:	f7ff fd5f 	bl	8000a1c <__aeabi_d2f>
        mIout = convertAdcChannel4(mAdcValues[3]);
 8000f5e:	6921      	ldr	r1, [r4, #16]
        return CHANNEL_3_RATIO * ((float) adcValue / 4095) * 3.3;
 8000f60:	62a0      	str	r0, [r4, #40]	; 0x28
        mIout = convertAdcChannel4(mAdcValues[3]);
 8000f62:	4620      	mov	r0, r4
 8000f64:	f7ff ff90 	bl	8000e88 <_ZN4blib6Analog18convertAdcChannel4Em>
    float Analog::convertAdcChannel5(uint32_t adcValue)    // Convert adcValue -> Temperature NTC 10k
    {
        return CHANNEL_5_RATIO * ((float) adcValue / 4095) * 3.3;
 8000f68:	edd4 7a05 	vldr	s15, [r4, #20]
        mIout = convertAdcChannel4(mAdcValues[3]);
 8000f6c:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
        return CHANNEL_5_RATIO * ((float) adcValue / 4095) * 3.3;
 8000f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f74:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8000f78:	ee67 7a28 	vmul.f32	s15, s14, s17
 8000f7c:	ee17 0a90 	vmov	r0, s15
 8000f80:	f7ff fae2 	bl	8000548 <__aeabi_f2d>
 8000f84:	a306      	add	r3, pc, #24	; (adr r3, 8000fa0 <_ZN4blib6Analog10readAnalogEv+0xb0>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff fb35 	bl	80005f8 <__aeabi_dmul>
 8000f8e:	f7ff fd45 	bl	8000a1c <__aeabi_d2f>
    }
 8000f92:	ecbd 8b02 	vpop	{d8}
        return CHANNEL_5_RATIO * ((float) adcValue / 4095) * 3.3;
 8000f96:	6320      	str	r0, [r4, #48]	; 0x30
    }
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	bf00      	nop
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	66666666 	.word	0x66666666
 8000fa4:	400a6666 	.word	0x400a6666
 8000fa8:	457ff000 	.word	0x457ff000

08000fac <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 8000fac:	b507      	push	{r0, r1, r2, lr}
 8000fae:	9001      	str	r0, [sp, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8000fb0:	f7ff f90e 	bl	80001d0 <strlen>
 8000fb4:	b282      	uxth	r2, r0
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <_ZN4blib6Logger5printEPKc+0x20>)
 8000fb8:	9901      	ldr	r1, [sp, #4]
 8000fba:	6800      	ldr	r0, [r0, #0]
 8000fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
            }
 8000fc0:	b003      	add	sp, #12
 8000fc2:	f85d eb04 	ldr.w	lr, [sp], #4
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8000fc6:	f002 be9f 	b.w	8003d08 <HAL_UART_Transmit>
 8000fca:	bf00      	nop
 8000fcc:	2000000c 	.word	0x2000000c

08000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8000fd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8000fd4:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8001014 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>
            static void Log(const char *message, Args ... args)
 8000fd8:	460d      	mov	r5, r1
 8000fda:	4616      	mov	r6, r2
 8000fdc:	461f      	mov	r7, r3
 8000fde:	4604      	mov	r4, r0
                print("[>]  ");
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x3c>)
 8000fe2:	f7ff ffe3 	bl	8000fac <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8000fe6:	462b      	mov	r3, r5
 8000fe8:	4622      	mov	r2, r4
 8000fea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fee:	e9cd 6700 	strd	r6, r7, [sp]
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	f002 ffbe 	bl	8003f74 <sniprintf>
                print(mBuffer);
 8000ff8:	4640      	mov	r0, r8
 8000ffa:	f7ff ffd7 	bl	8000fac <_ZN4blib6Logger5printEPKc>
                print("\n");
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 8001000:	f7ff ffd4 	bl	8000fac <_ZN4blib6Logger5printEPKc>
            }
 8001004:	b002      	add	sp, #8
 8001006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800100a:	bf00      	nop
 800100c:	0800483c 	.word	0x0800483c
 8001010:	08004842 	.word	0x08004842
 8001014:	20000304 	.word	0x20000304

08001018 <_ZN4blib7MonitorD1Ev>:
        showInit();
    }
    Monitor::~Monitor()
    {

    }
 8001018:	4770      	bx	lr

0800101a <_ZN4blib7MonitorD0Ev>:
    Monitor::~Monitor()
 800101a:	b510      	push	{r4, lr}
    }
 800101c:	2114      	movs	r1, #20
    Monitor::~Monitor()
 800101e:	4604      	mov	r4, r0
    }
 8001020:	f002 fec7 	bl	8003db2 <_ZdlPvj>
 8001024:	4620      	mov	r0, r4
 8001026:	bd10      	pop	{r4, pc}

08001028 <_ZN4blib7Monitor8showInitEv>:

    // Show when begin
    void Monitor::showInit()
    {
 8001028:	b508      	push	{r3, lr}
        LOGI("MPPT INITIALIZED");
 800102a:	4906      	ldr	r1, [pc, #24]	; (8001044 <_ZN4blib7Monitor8showInitEv+0x1c>)
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <_ZN4blib7Monitor8showInitEv+0x20>)
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <_ZN4blib7Monitor8showInitEv+0x24>)
 8001030:	221a      	movs	r2, #26
 8001032:	f7ff ffcd 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        LOGI("FIRMWARE V1.00");
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <_ZN4blib7Monitor8showInitEv+0x20>)
 8001038:	4902      	ldr	r1, [pc, #8]	; (8001044 <_ZN4blib7Monitor8showInitEv+0x1c>)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <_ZN4blib7Monitor8showInitEv+0x28>)
 800103c:	221b      	movs	r2, #27
 800103e:	f7ff ffc7 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
//        HAL_Delay(1500);
    }
 8001042:	bd08      	pop	{r3, pc}
 8001044:	0800484d 	.word	0x0800484d
 8001048:	08004844 	.word	0x08004844
 800104c:	08004859 	.word	0x08004859
 8001050:	08004877 	.word	0x08004877

08001054 <_ZN4blib7MonitorC1Ev>:
    Monitor::Monitor()
 8001054:	b510      	push	{r4, lr}
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <_ZN4blib7MonitorC1Ev+0x1c>)
 8001058:	6003      	str	r3, [r0, #0]
 800105a:	2300      	movs	r3, #0
 800105c:	7103      	strb	r3, [r0, #4]
 800105e:	4604      	mov	r4, r0
 8001060:	6083      	str	r3, [r0, #8]
 8001062:	60c3      	str	r3, [r0, #12]
 8001064:	7403      	strb	r3, [r0, #16]
 8001066:	7443      	strb	r3, [r0, #17]
        showInit();
 8001068:	f7ff ffde 	bl	8001028 <_ZN4blib7Monitor8showInitEv>
    }
 800106c:	4620      	mov	r0, r4
 800106e:	bd10      	pop	{r4, pc}
 8001070:	08004ae8 	.word	0x08004ae8

08001074 <_ZN4blib7Monitor17showDisplayLevel1Ev>:
    {
        return mDisplayLevel;
    }

    void Monitor::showDisplayLevel1()
    {
 8001074:	b508      	push	{r3, lr}
        LOGI();
 8001076:	4903      	ldr	r1, [pc, #12]	; (8001084 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x10>)
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x14>)
 800107a:	4804      	ldr	r0, [pc, #16]	; (800108c <_ZN4blib7Monitor17showDisplayLevel1Ev+0x18>)
 800107c:	22bb      	movs	r2, #187	; 0xbb
 800107e:	f7ff ffa7 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001082:	bd08      	pop	{r3, pc}
 8001084:	0800484d 	.word	0x0800484d
 8001088:	08004893 	.word	0x08004893
 800108c:	080048a5 	.word	0x080048a5

08001090 <_ZN4blib7Monitor17showDisplayLevel2Ev>:
    void Monitor::showDisplayLevel2()
    {
 8001090:	b508      	push	{r3, lr}
        LOGI();
 8001092:	4903      	ldr	r1, [pc, #12]	; (80010a0 <_ZN4blib7Monitor17showDisplayLevel2Ev+0x10>)
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <_ZN4blib7Monitor17showDisplayLevel2Ev+0x14>)
 8001096:	4804      	ldr	r0, [pc, #16]	; (80010a8 <_ZN4blib7Monitor17showDisplayLevel2Ev+0x18>)
 8001098:	22bf      	movs	r2, #191	; 0xbf
 800109a:	f7ff ff99 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800109e:	bd08      	pop	{r3, pc}
 80010a0:	0800484d 	.word	0x0800484d
 80010a4:	080048b3 	.word	0x080048b3
 80010a8:	080048a5 	.word	0x080048a5

080010ac <_ZN4blib7Monitor17showDisplayLevel3Ev>:
    void Monitor::showDisplayLevel3()
    {
 80010ac:	b508      	push	{r3, lr}
        LOGI();
 80010ae:	4903      	ldr	r1, [pc, #12]	; (80010bc <_ZN4blib7Monitor17showDisplayLevel3Ev+0x10>)
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <_ZN4blib7Monitor17showDisplayLevel3Ev+0x14>)
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <_ZN4blib7Monitor17showDisplayLevel3Ev+0x18>)
 80010b4:	22c3      	movs	r2, #195	; 0xc3
 80010b6:	f7ff ff8b 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80010ba:	bd08      	pop	{r3, pc}
 80010bc:	0800484d 	.word	0x0800484d
 80010c0:	080048c5 	.word	0x080048c5
 80010c4:	080048a5 	.word	0x080048a5

080010c8 <_ZN4blib7Monitor17showDisplayLevel4Ev>:
    void Monitor::showDisplayLevel4()
    {
 80010c8:	b508      	push	{r3, lr}
        LOGI();
 80010ca:	4903      	ldr	r1, [pc, #12]	; (80010d8 <_ZN4blib7Monitor17showDisplayLevel4Ev+0x10>)
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <_ZN4blib7Monitor17showDisplayLevel4Ev+0x14>)
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <_ZN4blib7Monitor17showDisplayLevel4Ev+0x18>)
 80010d0:	22c7      	movs	r2, #199	; 0xc7
 80010d2:	f7ff ff7d 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80010d6:	bd08      	pop	{r3, pc}
 80010d8:	0800484d 	.word	0x0800484d
 80010dc:	080048d7 	.word	0x080048d7
 80010e0:	080048a5 	.word	0x080048a5

080010e4 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv>:
    void Monitor::showDisplayChooseSettingMode()
    {
 80010e4:	b508      	push	{r3, lr}
        LOGI("SETTINGS MENU");
 80010e6:	4906      	ldr	r1, [pc, #24]	; (8001100 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x1c>)
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x20>)
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x24>)
 80010ec:	22cb      	movs	r2, #203	; 0xcb
 80010ee:	f7ff ff6f 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        LOGI("--PRESS SELECT--");
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x20>)
 80010f4:	4902      	ldr	r1, [pc, #8]	; (8001100 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x1c>)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x28>)
 80010f8:	22cc      	movs	r2, #204	; 0xcc
 80010fa:	f7ff ff69 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80010fe:	bd08      	pop	{r3, pc}
 8001100:	0800484d 	.word	0x0800484d
 8001104:	080048e9 	.word	0x080048e9
 8001108:	08004906 	.word	0x08004906
 800110c:	08004921 	.word	0x08004921

08001110 <_ZN4blib7Monitor23showDisplayFactoryResetEv>:
        return mFactoryResetEnable;
 8001110:	7c03      	ldrb	r3, [r0, #16]
    void Monitor::showDisplayFactoryReset()
    {
 8001112:	b510      	push	{r4, lr}
 8001114:	4604      	mov	r4, r0
        if (getFactoryReset() == false)
 8001116:	b963      	cbnz	r3, 8001132 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x22>
        {
            LOGI("FACTORY RESET");
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x6c>)
 800111a:	4919      	ldr	r1, [pc, #100]	; (8001180 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x70>)
 800111c:	4819      	ldr	r0, [pc, #100]	; (8001184 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x74>)
 800111e:	22d2      	movs	r2, #210	; 0xd2
 8001120:	f7ff ff56 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
            LOGI("--PRESS SELECT--");
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x6c>)
 8001126:	4916      	ldr	r1, [pc, #88]	; (8001180 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x70>)
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x78>)
 800112a:	22d3      	movs	r2, #211	; 0xd3
        else
        {
            if (getConfirmFactoryReset() == false)
            {
                LOGI("ARE YOU SURE?");
                LOGI(" >NO   >YES");
 800112c:	f7ff ff50 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                // Go to setting mode - show supply algorithm screen
                setSettingMode(true);
                setSettingLevel(SettingLevel::SETTING_LEVEL_CONFIG_1);    // TODO: Check correct screen
            }
        }
    }
 8001130:	bd10      	pop	{r4, pc}
        return mConfirmFactoryReset;
 8001132:	7c43      	ldrb	r3, [r0, #17]
            if (getConfirmFactoryReset() == false)
 8001134:	b953      	cbnz	r3, 800114c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x3c>
                LOGI("ARE YOU SURE?");
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x6c>)
 8001138:	4911      	ldr	r1, [pc, #68]	; (8001180 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x70>)
 800113a:	4814      	ldr	r0, [pc, #80]	; (800118c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x7c>)
 800113c:	22d9      	movs	r2, #217	; 0xd9
 800113e:	f7ff ff47 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                LOGI(" >NO   >YES");
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x6c>)
 8001144:	490e      	ldr	r1, [pc, #56]	; (8001180 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x70>)
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x80>)
 8001148:	22da      	movs	r2, #218	; 0xda
 800114a:	e7ef      	b.n	800112c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x1c>
                LOGI("FACTORY RESET");
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x6c>)
 800114e:	490c      	ldr	r1, [pc, #48]	; (8001180 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x70>)
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x74>)
 8001152:	22de      	movs	r2, #222	; 0xde
 8001154:	f7ff ff3c 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                LOGI("SUCCESSFULLY");
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x6c>)
 800115a:	4909      	ldr	r1, [pc, #36]	; (8001180 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x70>)
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x84>)
 800115e:	22df      	movs	r2, #223	; 0xdf
 8001160:	f7ff ff36 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                HAL_Delay(1500);
 8001164:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001168:	f000 fe2a 	bl	8001dc0 <HAL_Delay>
        mConfirmFactoryReset = val;
 800116c:	2300      	movs	r3, #0
 800116e:	7463      	strb	r3, [r4, #17]
        mFactoryResetEnable = val;
 8001170:	7423      	strb	r3, [r4, #16]
        mSettingMode = val;
 8001172:	2301      	movs	r3, #1
 8001174:	7123      	strb	r3, [r4, #4]
        mSettingLevel = (SettingLevel) u8SettingLevel;
 8001176:	60a3      	str	r3, [r4, #8]
    }
 8001178:	e7da      	b.n	8001130 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x20>
 800117a:	bf00      	nop
 800117c:	0800493f 	.word	0x0800493f
 8001180:	0800484d 	.word	0x0800484d
 8001184:	08004957 	.word	0x08004957
 8001188:	08004921 	.word	0x08004921
 800118c:	08004972 	.word	0x08004972
 8001190:	0800498d 	.word	0x0800498d
 8001194:	080049a6 	.word	0x080049a6

08001198 <_ZN4blib7Monitor11showDisplayEv>:
        return mDisplayLevel;
 8001198:	68c3      	ldr	r3, [r0, #12]
        switch (displayLevel)
 800119a:	3b01      	subs	r3, #1
 800119c:	2b05      	cmp	r3, #5
 800119e:	d810      	bhi.n	80011c2 <_ZN4blib7Monitor11showDisplayEv+0x2a>
 80011a0:	e8df f003 	tbb	[pc, r3]
 80011a4:	09070503 	.word	0x09070503
 80011a8:	0d0b      	.short	0x0d0b
                showDisplayLevel1();
 80011aa:	f7ff bf63 	b.w	8001074 <_ZN4blib7Monitor17showDisplayLevel1Ev>
                showDisplayLevel2();
 80011ae:	f7ff bf6f 	b.w	8001090 <_ZN4blib7Monitor17showDisplayLevel2Ev>
                showDisplayLevel3();
 80011b2:	f7ff bf7b 	b.w	80010ac <_ZN4blib7Monitor17showDisplayLevel3Ev>
                showDisplayLevel4();
 80011b6:	f7ff bf87 	b.w	80010c8 <_ZN4blib7Monitor17showDisplayLevel4Ev>
                showDisplayChooseSettingMode();
 80011ba:	f7ff bf93 	b.w	80010e4 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv>
                showDisplayFactoryReset();
 80011be:	f7ff bfa7 	b.w	8001110 <_ZN4blib7Monitor23showDisplayFactoryResetEv>
    }
 80011c2:	4770      	bx	lr

080011c4 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv>:
    void Monitor::showSettingSupplyAlgorithm()
    {
 80011c4:	b508      	push	{r3, lr}
        LOGI();
 80011c6:	4903      	ldr	r1, [pc, #12]	; (80011d4 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x10>)
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x14>)
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x18>)
 80011cc:	22ee      	movs	r2, #238	; 0xee
 80011ce:	f7ff feff 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80011d2:	bd08      	pop	{r3, pc}
 80011d4:	0800484d 	.word	0x0800484d
 80011d8:	080049c0 	.word	0x080049c0
 80011dc:	080048a5 	.word	0x080048a5

080011e0 <_ZN4blib7Monitor25showSettingChargerPsuModeEv>:
    void Monitor::showSettingChargerPsuMode()
    {
 80011e0:	b508      	push	{r3, lr}
        LOGI();
 80011e2:	4903      	ldr	r1, [pc, #12]	; (80011f0 <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x10>)
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x14>)
 80011e6:	4804      	ldr	r0, [pc, #16]	; (80011f8 <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x18>)
 80011e8:	22f2      	movs	r2, #242	; 0xf2
 80011ea:	f7ff fef1 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80011ee:	bd08      	pop	{r3, pc}
 80011f0:	0800484d 	.word	0x0800484d
 80011f4:	080049db 	.word	0x080049db
 80011f8:	080048a5 	.word	0x080048a5

080011fc <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv>:
    void Monitor::showSettingMaxBatteryVoltage()
    {
 80011fc:	b508      	push	{r3, lr}
        LOGI();
 80011fe:	4903      	ldr	r1, [pc, #12]	; (800120c <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x10>)
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x14>)
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x18>)
 8001204:	22f6      	movs	r2, #246	; 0xf6
 8001206:	f7ff fee3 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800120a:	bd08      	pop	{r3, pc}
 800120c:	0800484d 	.word	0x0800484d
 8001210:	080049f5 	.word	0x080049f5
 8001214:	080048a5 	.word	0x080048a5

08001218 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv>:
    void Monitor::showSettingMinBatteryVoltage()
    {
 8001218:	b508      	push	{r3, lr}
        LOGI();
 800121a:	4903      	ldr	r1, [pc, #12]	; (8001228 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x10>)
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x14>)
 800121e:	4804      	ldr	r0, [pc, #16]	; (8001230 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x18>)
 8001220:	22fa      	movs	r2, #250	; 0xfa
 8001222:	f7ff fed5 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001226:	bd08      	pop	{r3, pc}
 8001228:	0800484d 	.word	0x0800484d
 800122c:	08004a12 	.word	0x08004a12
 8001230:	080048a5 	.word	0x080048a5

08001234 <_ZN4blib7Monitor26showSettingChargingCurrentEv>:
    void Monitor::showSettingChargingCurrent()
    {
 8001234:	b508      	push	{r3, lr}
        LOGI();
 8001236:	4903      	ldr	r1, [pc, #12]	; (8001244 <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x10>)
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x14>)
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x18>)
 800123c:	22fe      	movs	r2, #254	; 0xfe
 800123e:	f7ff fec7 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001242:	bd08      	pop	{r3, pc}
 8001244:	0800484d 	.word	0x0800484d
 8001248:	08004a2f 	.word	0x08004a2f
 800124c:	080048a5 	.word	0x080048a5

08001250 <_ZN4blib7Monitor21showSettingCoolingFanEv>:
    void Monitor::showSettingCoolingFan()
    {
 8001250:	b508      	push	{r3, lr}
        LOGI();
 8001252:	4904      	ldr	r1, [pc, #16]	; (8001264 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x14>)
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x18>)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <_ZN4blib7Monitor21showSettingCoolingFanEv+0x1c>)
 8001258:	f44f 7281 	mov.w	r2, #258	; 0x102
 800125c:	f7ff feb8 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001260:	bd08      	pop	{r3, pc}
 8001262:	bf00      	nop
 8001264:	0800484d 	.word	0x0800484d
 8001268:	08004a4a 	.word	0x08004a4a
 800126c:	080048a5 	.word	0x080048a5

08001270 <_ZN4blib7Monitor25showSettingFanTriggerTempEv>:
    void Monitor::showSettingFanTriggerTemp()
    {
 8001270:	b508      	push	{r3, lr}
        LOGI();
 8001272:	4904      	ldr	r1, [pc, #16]	; (8001284 <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x14>)
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x18>)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x1c>)
 8001278:	f44f 7283 	mov.w	r2, #262	; 0x106
 800127c:	f7ff fea8 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001280:	bd08      	pop	{r3, pc}
 8001282:	bf00      	nop
 8001284:	0800484d 	.word	0x0800484d
 8001288:	08004a60 	.word	0x08004a60
 800128c:	080048a5 	.word	0x080048a5

08001290 <_ZN4blib7Monitor23showSettingShutdownTempEv>:
    void Monitor::showSettingShutdownTemp()
    {
 8001290:	b508      	push	{r3, lr}
        LOGI();
 8001292:	4904      	ldr	r1, [pc, #16]	; (80012a4 <_ZN4blib7Monitor23showSettingShutdownTempEv+0x14>)
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <_ZN4blib7Monitor23showSettingShutdownTempEv+0x18>)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <_ZN4blib7Monitor23showSettingShutdownTempEv+0x1c>)
 8001298:	f44f 7285 	mov.w	r2, #266	; 0x10a
 800129c:	f7ff fe98 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80012a0:	bd08      	pop	{r3, pc}
 80012a2:	bf00      	nop
 80012a4:	0800484d 	.word	0x0800484d
 80012a8:	08004a7a 	.word	0x08004a7a
 80012ac:	080048a5 	.word	0x080048a5

080012b0 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv>:
    void Monitor::showSettingAutoLoadFeature()
    {
 80012b0:	b508      	push	{r3, lr}
        LOGI();
 80012b2:	4904      	ldr	r1, [pc, #16]	; (80012c4 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x14>)
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x18>)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x1c>)
 80012b8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80012bc:	f7ff fe88 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80012c0:	bd08      	pop	{r3, pc}
 80012c2:	bf00      	nop
 80012c4:	0800484d 	.word	0x0800484d
 80012c8:	08004a92 	.word	0x08004a92
 80012cc:	080048a5 	.word	0x080048a5

080012d0 <_ZN4blib7Monitor25showSettingBackligthSleepEv>:
    void Monitor::showSettingBackligthSleep()
    {
 80012d0:	b508      	push	{r3, lr}
        LOGI();
 80012d2:	4904      	ldr	r1, [pc, #16]	; (80012e4 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x14>)
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x18>)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x1c>)
 80012d8:	f44f 7289 	mov.w	r2, #274	; 0x112
 80012dc:	f7ff fe78 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80012e0:	bd08      	pop	{r3, pc}
 80012e2:	bf00      	nop
 80012e4:	0800484d 	.word	0x0800484d
 80012e8:	08004aad 	.word	0x08004aad
 80012ec:	080048a5 	.word	0x080048a5

080012f0 <_ZN4blib7Monitor23showSettingFactoryResetEv>:
    void Monitor::showSettingFactoryReset()
    {
 80012f0:	b508      	push	{r3, lr}
        LOGI();
 80012f2:	4904      	ldr	r1, [pc, #16]	; (8001304 <_ZN4blib7Monitor23showSettingFactoryResetEv+0x14>)
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <_ZN4blib7Monitor23showSettingFactoryResetEv+0x18>)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <_ZN4blib7Monitor23showSettingFactoryResetEv+0x1c>)
 80012f8:	f44f 728b 	mov.w	r2, #278	; 0x116
 80012fc:	f7ff fe68 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001300:	bd08      	pop	{r3, pc}
 8001302:	bf00      	nop
 8001304:	0800484d 	.word	0x0800484d
 8001308:	08004ac7 	.word	0x08004ac7
 800130c:	080048a5 	.word	0x080048a5

08001310 <_ZN4blib7Monitor11showSettingEv>:
        return mSettingLevel;
 8001310:	6883      	ldr	r3, [r0, #8]
        switch (getSettingLevel())
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d81d      	bhi.n	8001352 <_ZN4blib7Monitor11showSettingEv+0x42>
 8001316:	e8df f003 	tbb	[pc, r3]
 800131a:	0806      	.short	0x0806
 800131c:	100e0c0a 	.word	0x100e0c0a
 8001320:	18161412 	.word	0x18161412
 8001324:	1a          	.byte	0x1a
 8001325:	00          	.byte	0x00
                showSettingSupplyAlgorithm();
 8001326:	f7ff bf4d 	b.w	80011c4 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv>
                showSettingChargerPsuMode();
 800132a:	f7ff bf59 	b.w	80011e0 <_ZN4blib7Monitor25showSettingChargerPsuModeEv>
                showSettingMaxBatteryVoltage();
 800132e:	f7ff bf65 	b.w	80011fc <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv>
                showSettingMinBatteryVoltage();
 8001332:	f7ff bf71 	b.w	8001218 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv>
                showSettingChargingCurrent();
 8001336:	f7ff bf7d 	b.w	8001234 <_ZN4blib7Monitor26showSettingChargingCurrentEv>
                showSettingCoolingFan();
 800133a:	f7ff bf89 	b.w	8001250 <_ZN4blib7Monitor21showSettingCoolingFanEv>
                showSettingFanTriggerTemp();
 800133e:	f7ff bf97 	b.w	8001270 <_ZN4blib7Monitor25showSettingFanTriggerTempEv>
                showSettingShutdownTemp();
 8001342:	f7ff bfa5 	b.w	8001290 <_ZN4blib7Monitor23showSettingShutdownTempEv>
                showSettingAutoLoadFeature();
 8001346:	f7ff bfb3 	b.w	80012b0 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv>
                showSettingBackligthSleep();
 800134a:	f7ff bfc1 	b.w	80012d0 <_ZN4blib7Monitor25showSettingBackligthSleepEv>
                showSettingFactoryReset();
 800134e:	f7ff bfcf 	b.w	80012f0 <_ZN4blib7Monitor23showSettingFactoryResetEv>
    }
 8001352:	4770      	bx	lr

08001354 <_ZN4blib7Monitor8showMenuEv>:
        return mSettingMode;
 8001354:	7903      	ldrb	r3, [r0, #4]
        if (getSetttingMode() == true)
 8001356:	b10b      	cbz	r3, 800135c <_ZN4blib7Monitor8showMenuEv+0x8>
            showSetting();
 8001358:	f7ff bfda 	b.w	8001310 <_ZN4blib7Monitor11showSettingEv>
            showDisplay();
 800135c:	f7ff bf1c 	b.w	8001198 <_ZN4blib7Monitor11showDisplayEv>

08001360 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001360:	b510      	push	{r4, lr}
 8001362:	b094      	sub	sp, #80	; 0x50
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001364:	2214      	movs	r2, #20
 8001366:	2100      	movs	r1, #0
 8001368:	a809      	add	r0, sp, #36	; 0x24
 800136a:	f002 fe37 	bl	8003fdc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800136e:	2214      	movs	r2, #20
 8001370:	2100      	movs	r1, #0
 8001372:	a803      	add	r0, sp, #12
 8001374:	f002 fe32 	bl	8003fdc <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	4a20      	ldr	r2, [pc, #128]	; (80013fc <_Z18SystemClock_Configv+0x9c>)
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001380:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001384:	6411      	str	r1, [r2, #64]	; 0x40
 8001386:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001388:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800138c:	9201      	str	r2, [sp, #4]
 800138e:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001390:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <_Z18SystemClock_Configv+0xa0>)
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	6811      	ldr	r1, [r2, #0]
 8001396:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800139a:	6011      	str	r1, [r2, #0]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80013a2:	9202      	str	r2, [sp, #8]
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a4:	2402      	movs	r4, #2
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a6:	9a02      	ldr	r2, [sp, #8]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 100;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a8:	9412      	str	r4, [sp, #72]	; 0x48
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 80013aa:	2206      	movs	r2, #6
    RCC_OscInitStruct.PLL.PLLN = 100;
 80013ac:	2008      	movs	r0, #8
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ae:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 80013b2:	9208      	str	r2, [sp, #32]
    RCC_OscInitStruct.PLL.PLLN = 100;
 80013b4:	2364      	movs	r3, #100	; 0x64
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013b6:	2201      	movs	r2, #1
    RCC_OscInitStruct.PLL.PLLN = 100;
 80013b8:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013bc:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80013c0:	2304      	movs	r3, #4
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c2:	2210      	movs	r2, #16
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c4:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c6:	920c      	str	r2, [sp, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80013c8:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ca:	f001 fb2d 	bl	8002a28 <HAL_RCC_OscConfig>
 80013ce:	b108      	cbz	r0, 80013d4 <_Z18SystemClock_Configv+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80013d2:	e7fe      	b.n	80013d2 <_Z18SystemClock_Configv+0x72>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 80013d4:	230f      	movs	r3, #15
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013da:	9005      	str	r0, [sp, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013dc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013e4:	2103      	movs	r1, #3
 80013e6:	a803      	add	r0, sp, #12
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013ec:	f001 fcf6 	bl	8002ddc <HAL_RCC_ClockConfig>
 80013f0:	b108      	cbz	r0, 80013f6 <_Z18SystemClock_Configv+0x96>
 80013f2:	b672      	cpsid	i
    while (1)
 80013f4:	e7fe      	b.n	80013f4 <_Z18SystemClock_Configv+0x94>
}
 80013f6:	b014      	add	sp, #80	; 0x50
 80013f8:	bd10      	pop	{r4, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000

08001404 <Error_Handler>:
 8001404:	b672      	cpsid	i
    while (1)
 8001406:	e7fe      	b.n	8001406 <Error_Handler+0x2>

08001408 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
    {
        template<typename T>
        class Singleton
        {
            public:
                static T& getInstance()
 8001408:	b538      	push	{r3, r4, r5, lr}
                {
                    if (mInstance == nullptr)
 800140a:	4c06      	ldr	r4, [pc, #24]	; (8001424 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x1c>)
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	b933      	cbnz	r3, 800141e <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x16>
                    {
                        mInstance = new T();
 8001410:	2034      	movs	r0, #52	; 0x34
 8001412:	f002 fcd0 	bl	8003db6 <_Znwj>
 8001416:	4605      	mov	r5, r0
 8001418:	f7ff fcea 	bl	8000df0 <_ZN4blib6AnalogC1Ev>
 800141c:	6025      	str	r5, [r4, #0]
                    }

                    return *mInstance;
                }
 800141e:	6820      	ldr	r0, [r4, #0]
 8001420:	bd38      	pop	{r3, r4, r5, pc}
 8001422:	bf00      	nop
 8001424:	2000007c 	.word	0x2000007c

08001428 <HAL_ADC_ConvCpltCallback>:
{
 8001428:	b508      	push	{r3, lr}
    blib::Analog::getInstance().sampling();
 800142a:	f7ff ffed 	bl	8001408 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
}
 800142e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    blib::Analog::getInstance().sampling();
 8001432:	f7ff bcd7 	b.w	8000de4 <_ZN4blib6Analog8samplingEv>
	...

08001438 <main>:
{
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143a:	b099      	sub	sp, #100	; 0x64
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	2400      	movs	r4, #0
 800143e:	4da6      	ldr	r5, [pc, #664]	; (80016d8 <main+0x2a0>)
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001440:	4fa6      	ldr	r7, [pc, #664]	; (80016dc <main+0x2a4>)
    HAL_Init();
 8001442:	f000 fc91 	bl	8001d68 <HAL_Init>
    SystemClock_Config();
 8001446:	f7ff ff8b 	bl	8001360 <_Z18SystemClock_Configv>
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800144a:	2214      	movs	r2, #20
 800144c:	2100      	movs	r1, #0
 800144e:	a80e      	add	r0, sp, #56	; 0x38
 8001450:	f002 fdc4 	bl	8003fdc <memset>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001454:	9402      	str	r4, [sp, #8]
 8001456:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_WritePin(GPIOA, LOAD_Pin | ENA_INVERTER_Pin | BCCU_Pin, GPIO_PIN_RESET);
 8001458:	48a1      	ldr	r0, [pc, #644]	; (80016e0 <main+0x2a8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	632b      	str	r3, [r5, #48]	; 0x30
 8001460:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	9403      	str	r4, [sp, #12]
 800146c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800146e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001472:	632b      	str	r3, [r5, #48]	; 0x30
 8001474:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	9303      	str	r3, [sp, #12]
 800147c:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	9404      	str	r4, [sp, #16]
 8001480:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	632b      	str	r3, [r5, #48]	; 0x30
 8001488:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	9304      	str	r3, [sp, #16]
 8001490:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	9405      	str	r4, [sp, #20]
 8001494:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	632b      	str	r3, [r5, #48]	; 0x30
 800149c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	9305      	str	r3, [sp, #20]
 80014a4:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a6:	9406      	str	r4, [sp, #24]
 80014a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	632b      	str	r3, [r5, #48]	; 0x30
 80014b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_WritePin(GPIOA, LOAD_Pin | ENA_INVERTER_Pin | BCCU_Pin, GPIO_PIN_RESET);
 80014b8:	4622      	mov	r2, r4
 80014ba:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_WritePin(GPIOA, LOAD_Pin | ENA_INVERTER_Pin | BCCU_Pin, GPIO_PIN_RESET);
 80014c0:	f001 fa04 	bl	80028cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, LED_INDICATE_Pin | FAN_Pin | BUCK_ENABLE_Pin | ANTI_BACKFLOW_Pin,
 80014c4:	4887      	ldr	r0, [pc, #540]	; (80016e4 <main+0x2ac>)
 80014c6:	4622      	mov	r2, r4
 80014c8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80014cc:	f001 f9fe 	bl	80028cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO2_Pin | GPIO15_Pin, GPIO_PIN_RESET);
 80014d0:	4622      	mov	r2, r4
 80014d2:	4885      	ldr	r0, [pc, #532]	; (80016e8 <main+0x2b0>)
 80014d4:	21c0      	movs	r1, #192	; 0xc0
 80014d6:	f001 f9f9 	bl	80028cc <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014da:	260f      	movs	r6, #15
 80014dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e0:	4881      	ldr	r0, [pc, #516]	; (80016e8 <main+0x2b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	9410      	str	r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e4:	a90e      	add	r1, sp, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e6:	e9cd 630e 	strd	r6, r3, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ea:	f001 f915 	bl	8002718 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2601      	movs	r6, #1
 80014f0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	487a      	ldr	r0, [pc, #488]	; (80016e0 <main+0x2a8>)
 80014f6:	a90e      	add	r1, sp, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f001 f90a 	bl	8002718 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_INDICATE_Pin | FAN_Pin | BUCK_ENABLE_Pin | ANTI_BACKFLOW_Pin;
 8001504:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001508:	4876      	ldr	r0, [pc, #472]	; (80016e4 <main+0x2ac>)
 800150a:	a90e      	add	r1, sp, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001514:	f001 f900 	bl	8002718 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO2_Pin | GPIO15_Pin;
 8001518:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151a:	4873      	ldr	r0, [pc, #460]	; (80016e8 <main+0x2b0>)
 800151c:	a90e      	add	r1, sp, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f001 f8f7 	bl	8002718 <HAL_GPIO_Init>
    __HAL_RCC_DMA2_CLK_ENABLE();
 800152a:	9401      	str	r4, [sp, #4]
 800152c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800152e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001532:	632b      	str	r3, [r5, #48]	; 0x30
 8001534:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    hadc1.Instance = ADC1;
 8001536:	4d6d      	ldr	r5, [pc, #436]	; (80016ec <main+0x2b4>)
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800153c:	4622      	mov	r2, r4
 800153e:	4621      	mov	r1, r4
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001540:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001542:	2038      	movs	r0, #56	; 0x38
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001544:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001546:	f000 fec7 	bl	80022d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800154a:	2038      	movs	r0, #56	; 0x38
 800154c:	f000 fef6 	bl	800233c <HAL_NVIC_EnableIRQ>
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8001550:	2210      	movs	r2, #16
 8001552:	4621      	mov	r1, r4
 8001554:	a80e      	add	r0, sp, #56	; 0x38
 8001556:	f002 fd41 	bl	8003fdc <memset>
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800155a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800155e:	e9c5 7300 	strd	r7, r3, [r5]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001562:	4628      	mov	r0, r5
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001564:	4b62      	ldr	r3, [pc, #392]	; (80016f0 <main+0x2b8>)
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001566:	60ac      	str	r4, [r5, #8]
    hadc1.Init.NbrOfConversion = 5;
 8001568:	2705      	movs	r7, #5
    hadc1.Init.ScanConvMode = ENABLE;
 800156a:	612e      	str	r6, [r5, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 800156c:	762e      	strb	r6, [r5, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800156e:	f885 4020 	strb.w	r4, [r5, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001572:	62ec      	str	r4, [r5, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001574:	62ab      	str	r3, [r5, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001576:	60ec      	str	r4, [r5, #12]
    hadc1.Init.NbrOfConversion = 5;
 8001578:	61ef      	str	r7, [r5, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800157a:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800157e:	616e      	str	r6, [r5, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001580:	f000 fc32 	bl	8001de8 <HAL_ADC_Init>
 8001584:	b108      	cbz	r0, 800158a <main+0x152>
 8001586:	b672      	cpsid	i
    while (1)
 8001588:	e7fe      	b.n	8001588 <main+0x150>
    sConfig.Rank = 1;
 800158a:	e9cd 060e 	strd	r0, r6, [sp, #56]	; 0x38
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800158e:	2307      	movs	r3, #7
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001590:	a90e      	add	r1, sp, #56	; 0x38
 8001592:	4628      	mov	r0, r5
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001594:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001596:	f000 fdfd 	bl	8002194 <HAL_ADC_ConfigChannel>
 800159a:	b108      	cbz	r0, 80015a0 <main+0x168>
 800159c:	b672      	cpsid	i
    while (1)
 800159e:	e7fe      	b.n	800159e <main+0x166>
    sConfig.Rank = 2;
 80015a0:	2402      	movs	r4, #2
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a2:	a90e      	add	r1, sp, #56	; 0x38
 80015a4:	4628      	mov	r0, r5
    sConfig.Channel = ADC_CHANNEL_1;
 80015a6:	960e      	str	r6, [sp, #56]	; 0x38
    sConfig.Rank = 2;
 80015a8:	940f      	str	r4, [sp, #60]	; 0x3c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015aa:	f000 fdf3 	bl	8002194 <HAL_ADC_ConfigChannel>
 80015ae:	b108      	cbz	r0, 80015b4 <main+0x17c>
 80015b0:	b672      	cpsid	i
    while (1)
 80015b2:	e7fe      	b.n	80015b2 <main+0x17a>
    sConfig.Channel = ADC_CHANNEL_2;
 80015b4:	940e      	str	r4, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b6:	a90e      	add	r1, sp, #56	; 0x38
    sConfig.Rank = 3;
 80015b8:	2403      	movs	r4, #3
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ba:	4628      	mov	r0, r5
    sConfig.Rank = 3;
 80015bc:	940f      	str	r4, [sp, #60]	; 0x3c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015be:	f000 fde9 	bl	8002194 <HAL_ADC_ConfigChannel>
 80015c2:	b108      	cbz	r0, 80015c8 <main+0x190>
 80015c4:	b672      	cpsid	i
    while (1)
 80015c6:	e7fe      	b.n	80015c6 <main+0x18e>
    sConfig.Channel = ADC_CHANNEL_3;
 80015c8:	940e      	str	r4, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ca:	a90e      	add	r1, sp, #56	; 0x38
    sConfig.Rank = 4;
 80015cc:	2404      	movs	r4, #4
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ce:	4628      	mov	r0, r5
    sConfig.Rank = 4;
 80015d0:	940f      	str	r4, [sp, #60]	; 0x3c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d2:	f000 fddf 	bl	8002194 <HAL_ADC_ConfigChannel>
 80015d6:	b108      	cbz	r0, 80015dc <main+0x1a4>
 80015d8:	b672      	cpsid	i
    while (1)
 80015da:	e7fe      	b.n	80015da <main+0x1a2>
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015dc:	a90e      	add	r1, sp, #56	; 0x38
 80015de:	4628      	mov	r0, r5
    sConfig.Rank = 5;
 80015e0:	e9cd 470e 	strd	r4, r7, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e4:	f000 fdd6 	bl	8002194 <HAL_ADC_ConfigChannel>
 80015e8:	b108      	cbz	r0, 80015ee <main+0x1b6>
 80015ea:	b672      	cpsid	i
    while (1)
 80015ec:	e7fe      	b.n	80015ec <main+0x1b4>
    hi2c1.Instance = I2C1;
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <main+0x2bc>)
    hi2c1.Init.ClockSpeed = 100000;
 80015f0:	4a41      	ldr	r2, [pc, #260]	; (80016f8 <main+0x2c0>)
 80015f2:	4c42      	ldr	r4, [pc, #264]	; (80016fc <main+0x2c4>)
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f4:	6218      	str	r0, [r3, #32]
    hi2c1.Init.ClockSpeed = 100000;
 80015f6:	e9c3 4200 	strd	r4, r2, [r3]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hi2c1.Init.OwnAddress1 = 0;
 80015fe:	e9c3 0002 	strd	r0, r0, [r3, #8]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001602:	e9c3 2004 	strd	r2, r0, [r3, #16]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001606:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160a:	4618      	mov	r0, r3
 800160c:	f001 f964 	bl	80028d8 <HAL_I2C_Init>
 8001610:	4605      	mov	r5, r0
 8001612:	b108      	cbz	r0, 8001618 <main+0x1e0>
 8001614:	b672      	cpsid	i
    while (1)
 8001616:	e7fe      	b.n	8001616 <main+0x1de>
    RTC_TimeTypeDef sTime = { 0 };
 8001618:	4601      	mov	r1, r0
 800161a:	2214      	movs	r2, #20
 800161c:	a809      	add	r0, sp, #36	; 0x24
 800161e:	f002 fcdd 	bl	8003fdc <memset>
    RTC_AlarmTypeDef sAlarm = { 0 };
 8001622:	2228      	movs	r2, #40	; 0x28
 8001624:	4629      	mov	r1, r5
 8001626:	a80e      	add	r0, sp, #56	; 0x38
    hrtc.Instance = RTC;
 8001628:	4c35      	ldr	r4, [pc, #212]	; (8001700 <main+0x2c8>)
    RTC_DateTypeDef sDate = { 0 };
 800162a:	9507      	str	r5, [sp, #28]
    RTC_AlarmTypeDef sAlarm = { 0 };
 800162c:	f002 fcd6 	bl	8003fdc <memset>
    hrtc.Instance = RTC;
 8001630:	4b34      	ldr	r3, [pc, #208]	; (8001704 <main+0x2cc>)
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001632:	61a5      	str	r5, [r4, #24]
    hrtc.Init.SynchPrediv = 255;
 8001634:	207f      	movs	r0, #127	; 0x7f
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001636:	e9c4 3500 	strd	r3, r5, [r4]
    hrtc.Init.SynchPrediv = 255;
 800163a:	23ff      	movs	r3, #255	; 0xff
 800163c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001640:	4620      	mov	r0, r4
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001642:	e9c4 5504 	strd	r5, r5, [r4, #16]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001646:	f001 fd94 	bl	8003172 <HAL_RTC_Init>
 800164a:	b108      	cbz	r0, 8001650 <main+0x218>
 800164c:	b672      	cpsid	i
    while (1)
 800164e:	e7fe      	b.n	800164e <main+0x216>
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001650:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
    sTime.Hours = 0x0;
 8001654:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    sTime.Seconds = 0x0;
 8001658:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800165c:	4632      	mov	r2, r6
 800165e:	a909      	add	r1, sp, #36	; 0x24
 8001660:	4620      	mov	r0, r4
 8001662:	f001 fdd4 	bl	800320e <HAL_RTC_SetTime>
 8001666:	b108      	cbz	r0, 800166c <main+0x234>
 8001668:	b672      	cpsid	i
    while (1)
 800166a:	e7fe      	b.n	800166a <main+0x232>
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <main+0x2d0>)
 800166e:	9307      	str	r3, [sp, #28]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001670:	4632      	mov	r2, r6
 8001672:	a907      	add	r1, sp, #28
 8001674:	4620      	mov	r0, r4
 8001676:	f001 fe24 	bl	80032c2 <HAL_RTC_SetDate>
 800167a:	b108      	cbz	r0, 8001680 <main+0x248>
 800167c:	b672      	cpsid	i
    while (1)
 800167e:	e7fe      	b.n	800167e <main+0x246>
    sAlarm.AlarmTime.Hours = 0x0;
 8001680:	2300      	movs	r3, #0
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001682:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001686:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    sAlarm.AlarmTime.Hours = 0x0;
 800168a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    sAlarm.AlarmTime.Seconds = 0x0;
 800168e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    sAlarm.AlarmTime.SubSeconds = 0x0;
 8001692:	930f      	str	r3, [sp, #60]	; 0x3c
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001694:	9315      	str	r3, [sp, #84]	; 0x54
    sAlarm.AlarmDateWeekDay = 0x1;
 8001696:	2201      	movs	r2, #1
    sAlarm.Alarm = RTC_ALARM_A;
 8001698:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800169c:	4818      	ldr	r0, [pc, #96]	; (8001700 <main+0x2c8>)
    sAlarm.AlarmDateWeekDay = 0x1;
 800169e:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016a2:	a90e      	add	r1, sp, #56	; 0x38
    sAlarm.Alarm = RTC_ALARM_A;
 80016a4:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80016a6:	f001 fe55 	bl	8003354 <HAL_RTC_SetAlarm_IT>
 80016aa:	b108      	cbz	r0, 80016b0 <main+0x278>
 80016ac:	b672      	cpsid	i
    while (1)
 80016ae:	e7fe      	b.n	80016ae <main+0x276>
    huart2.Instance = USART2;
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <main+0x2d4>)
    huart2.Init.BaudRate = 115200;
 80016b2:	4a17      	ldr	r2, [pc, #92]	; (8001710 <main+0x2d8>)
    huart2.Init.Parity = UART_PARITY_NONE;
 80016b4:	6118      	str	r0, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80016b6:	240c      	movs	r4, #12
    huart2.Init.StopBits = UART_STOPBITS_1;
 80016b8:	e9c3 0002 	strd	r0, r0, [r3, #8]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016bc:	e9c3 4005 	strd	r4, r0, [r3, #20]
    huart2.Init.BaudRate = 115200;
 80016c0:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	61d8      	str	r0, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c6:	4618      	mov	r0, r3
    huart2.Init.BaudRate = 115200;
 80016c8:	e9c3 2500 	strd	r2, r5, [r3]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80016cc:	f002 faee 	bl	8003cac <HAL_UART_Init>
 80016d0:	b300      	cbz	r0, 8001714 <main+0x2dc>
 80016d2:	b672      	cpsid	i
    while (1)
 80016d4:	e7fe      	b.n	80016d4 <main+0x29c>
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40012000 	.word	0x40012000
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	40020800 	.word	0x40020800
 80016ec:	20000084 	.word	0x20000084
 80016f0:	0f000001 	.word	0x0f000001
 80016f4:	2000012c 	.word	0x2000012c
 80016f8:	000186a0 	.word	0x000186a0
 80016fc:	40005400 	.word	0x40005400
 8001700:	20000180 	.word	0x20000180
 8001704:	40002800 	.word	0x40002800
 8001708:	00010101 	.word	0x00010101
 800170c:	20000274 	.word	0x20000274
 8001710:	40004400 	.word	0x40004400
    huart1.Instance = USART1;
 8001714:	4b57      	ldr	r3, [pc, #348]	; (8001874 <main+0x43c>)
 8001716:	4a58      	ldr	r2, [pc, #352]	; (8001878 <main+0x440>)
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001718:	e9c3 0002 	strd	r0, r0, [r3, #8]
    huart1.Init.Mode = UART_MODE_TX_RX;
 800171c:	e9c3 0404 	strd	r0, r4, [r3, #16]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8001724:	4618      	mov	r0, r3
    huart1.Init.BaudRate = 115200;
 8001726:	e9c3 2500 	strd	r2, r5, [r3]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 800172a:	f002 fabf 	bl	8003cac <HAL_UART_Init>
 800172e:	b108      	cbz	r0, 8001734 <main+0x2fc>
 8001730:	b672      	cpsid	i
    while (1)
 8001732:	e7fe      	b.n	8001732 <main+0x2fa>
    huart3.Instance = USART3;
 8001734:	4b51      	ldr	r3, [pc, #324]	; (800187c <main+0x444>)
 8001736:	4a52      	ldr	r2, [pc, #328]	; (8001880 <main+0x448>)
    huart3.Init.StopBits = UART_STOPBITS_1;
 8001738:	e9c3 0002 	strd	r0, r0, [r3, #8]
    huart3.Init.Mode = UART_MODE_TX_RX;
 800173c:	e9c3 0404 	strd	r0, r4, [r3, #16]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 8001744:	4618      	mov	r0, r3
    huart3.Init.BaudRate = 115200;
 8001746:	e9c3 2500 	strd	r2, r5, [r3]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 800174a:	f002 faaf 	bl	8003cac <HAL_UART_Init>
 800174e:	4605      	mov	r5, r0
 8001750:	b108      	cbz	r0, 8001756 <main+0x31e>
 8001752:	b672      	cpsid	i
    while (1)
 8001754:	e7fe      	b.n	8001754 <main+0x31c>
    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001756:	4601      	mov	r1, r0
 8001758:	2210      	movs	r2, #16
 800175a:	a809      	add	r0, sp, #36	; 0x24
 800175c:	f002 fc3e 	bl	8003fdc <memset>
    htim2.Instance = TIM2;
 8001760:	4c48      	ldr	r4, [pc, #288]	; (8001884 <main+0x44c>)
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001762:	221c      	movs	r2, #28
 8001764:	4629      	mov	r1, r5
 8001766:	a80e      	add	r0, sp, #56	; 0x38
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001768:	e9cd 5507 	strd	r5, r5, [sp, #28]
    htim2.Init.Prescaler = 49;
 800176c:	2631      	movs	r6, #49	; 0x31
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 800176e:	f002 fc35 	bl	8003fdc <memset>
    htim2.Init.Prescaler = 49;
 8001772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001776:	e9c4 3600 	strd	r3, r6, [r4]
    htim2.Init.Period = 500;
 800177a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177e:	e9c4 3503 	strd	r3, r5, [r4, #12]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001782:	4620      	mov	r0, r4
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001784:	2380      	movs	r3, #128	; 0x80
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001786:	60a5      	str	r5, [r4, #8]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001788:	61a3      	str	r3, [r4, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800178a:	f002 f831 	bl	80037f0 <HAL_TIM_Base_Init>
 800178e:	b108      	cbz	r0, 8001794 <main+0x35c>
 8001790:	b672      	cpsid	i
    while (1)
 8001792:	e7fe      	b.n	8001792 <main+0x35a>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001798:	a909      	add	r1, sp, #36	; 0x24
 800179a:	4620      	mov	r0, r4
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179c:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179e:	f002 f918 	bl	80039d2 <HAL_TIM_ConfigClockSource>
 80017a2:	b108      	cbz	r0, 80017a8 <main+0x370>
 80017a4:	b672      	cpsid	i
    while (1)
 80017a6:	e7fe      	b.n	80017a6 <main+0x36e>
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017a8:	4620      	mov	r0, r4
 80017aa:	f002 f84d 	bl	8003848 <HAL_TIM_PWM_Init>
 80017ae:	b108      	cbz	r0, 80017b4 <main+0x37c>
 80017b0:	b672      	cpsid	i
    while (1)
 80017b2:	e7fe      	b.n	80017b2 <main+0x37a>
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	e9cd 0007 	strd	r0, r0, [sp, #28]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b8:	a907      	add	r1, sp, #28
 80017ba:	4620      	mov	r0, r4
 80017bc:	f002 f9a2 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 80017c0:	4602      	mov	r2, r0
 80017c2:	b108      	cbz	r0, 80017c8 <main+0x390>
 80017c4:	b672      	cpsid	i
    while (1)
 80017c6:	e7fe      	b.n	80017c6 <main+0x38e>
    sConfigOC.Pulse = 250;
 80017c8:	2160      	movs	r1, #96	; 0x60
 80017ca:	23fa      	movs	r3, #250	; 0xfa
 80017cc:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d0:	9010      	str	r0, [sp, #64]	; 0x40
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d2:	9012      	str	r0, [sp, #72]	; 0x48
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d4:	a90e      	add	r1, sp, #56	; 0x38
 80017d6:	4620      	mov	r0, r4
 80017d8:	f002 f898 	bl	800390c <HAL_TIM_PWM_ConfigChannel>
 80017dc:	4605      	mov	r5, r0
 80017de:	b108      	cbz	r0, 80017e4 <main+0x3ac>
 80017e0:	b672      	cpsid	i
    while (1)
 80017e2:	e7fe      	b.n	80017e2 <main+0x3aa>
    HAL_TIM_MspPostInit(&htim2);
 80017e4:	4620      	mov	r0, r4
 80017e6:	f000 f963 	bl	8001ab0 <HAL_TIM_MspPostInit>
    htim6.Instance = TIM6;
 80017ea:	4827      	ldr	r0, [pc, #156]	; (8001888 <main+0x450>)
 80017ec:	4b27      	ldr	r3, [pc, #156]	; (800188c <main+0x454>)
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	6085      	str	r5, [r0, #8]
    htim6.Init.Prescaler = 49;
 80017f0:	e9c0 3600 	strd	r3, r6, [r0]
    htim6.Init.Period = 999;
 80017f4:	f240 33e7 	movw	r3, #999	; 0x3e7
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017f8:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
    htim6.Init.Period = 999;
 80017fc:	60c3      	str	r3, [r0, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	6185      	str	r5, [r0, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001800:	f001 fff6 	bl	80037f0 <HAL_TIM_Base_Init>
 8001804:	b108      	cbz	r0, 800180a <main+0x3d2>
 8001806:	b672      	cpsid	i
    while (1)
 8001808:	e7fe      	b.n	8001808 <main+0x3d0>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180a:	2300      	movs	r3, #0
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800180c:	481e      	ldr	r0, [pc, #120]	; (8001888 <main+0x450>)
 800180e:	a90e      	add	r1, sp, #56	; 0x38
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001814:	f002 f976 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	b108      	cbz	r0, 800181e <main+0x3e6>
 800181a:	b672      	cpsid	i
    while (1)
 800181c:	e7fe      	b.n	800181c <main+0x3e4>
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <main+0x458>)
 8001820:	491c      	ldr	r1, [pc, #112]	; (8001894 <main+0x45c>)
 8001822:	481d      	ldr	r0, [pc, #116]	; (8001898 <main+0x460>)
                    if (mInstance == nullptr)
 8001824:	4d1d      	ldr	r5, [pc, #116]	; (800189c <main+0x464>)
 8001826:	22b2      	movs	r2, #178	; 0xb2
 8001828:	f7ff fbd2 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <main+0x458>)
 800182e:	4919      	ldr	r1, [pc, #100]	; (8001894 <main+0x45c>)
 8001830:	481b      	ldr	r0, [pc, #108]	; (80018a0 <main+0x468>)
 8001832:	22b3      	movs	r2, #179	; 0xb3
 8001834:	f7ff fbcc 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <main+0x458>)
 800183a:	4916      	ldr	r1, [pc, #88]	; (8001894 <main+0x45c>)
 800183c:	4819      	ldr	r0, [pc, #100]	; (80018a4 <main+0x46c>)
 800183e:	22b4      	movs	r2, #180	; 0xb4
 8001840:	f7ff fbc6 	bl	8000fd0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    auto &analog = blib::Analog::getInstance();
 8001844:	f7ff fde0 	bl	8001408 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	4604      	mov	r4, r0
 800184c:	b933      	cbnz	r3, 800185c <main+0x424>
                        mInstance = new T();
 800184e:	2014      	movs	r0, #20
 8001850:	f002 fab1 	bl	8003db6 <_Znwj>
 8001854:	4606      	mov	r6, r0
 8001856:	f7ff fbfd 	bl	8001054 <_ZN4blib7MonitorC1Ev>
 800185a:	602e      	str	r6, [r5, #0]
                    return *mInstance;
 800185c:	682d      	ldr	r5, [r5, #0]
        analog.readAnalog();
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff fb46 	bl	8000ef0 <_ZN4blib6Analog10readAnalogEv>
        monitor.showMenu();
 8001864:	4628      	mov	r0, r5
 8001866:	f7ff fd75 	bl	8001354 <_ZN4blib7Monitor8showMenuEv>
        HAL_Delay(1000);
 800186a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800186e:	f000 faa7 	bl	8001dc0 <HAL_Delay>
    while (1)
 8001872:	e7f4      	b.n	800185e <main+0x426>
 8001874:	20000230 	.word	0x20000230
 8001878:	40011000 	.word	0x40011000
 800187c:	200002b8 	.word	0x200002b8
 8001880:	40004800 	.word	0x40004800
 8001884:	200001a0 	.word	0x200001a0
 8001888:	200001e8 	.word	0x200001e8
 800188c:	40001000 	.word	0x40001000
 8001890:	08004baa 	.word	0x08004baa
 8001894:	08004b07 	.word	0x08004b07
 8001898:	08004baf 	.word	0x08004baf
 800189c:	20000080 	.word	0x20000080
 80018a0:	08004bd9 	.word	0x08004bd9
 80018a4:	08004bf3 	.word	0x08004bf3

080018a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_MspInit+0x34>)
 80018ac:	2100      	movs	r1, #0
 80018ae:	9100      	str	r1, [sp, #0]
 80018b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018b6:	645a      	str	r2, [r3, #68]	; 0x44
 80018b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80018be:	9200      	str	r2, [sp, #0]
 80018c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	9101      	str	r1, [sp, #4]
 80018c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d6:	b002      	add	sp, #8
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e0:	b570      	push	{r4, r5, r6, lr}
 80018e2:	4606      	mov	r6, r0
 80018e4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e6:	2214      	movs	r2, #20
 80018e8:	2100      	movs	r1, #0
 80018ea:	a803      	add	r0, sp, #12
 80018ec:	f002 fb76 	bl	8003fdc <memset>
  if(hadc->Instance==ADC1)
 80018f0:	6832      	ldr	r2, [r6, #0]
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_ADC_MspInit+0x94>)
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d13a      	bne.n	800196e <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018f8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80018fc:	2500      	movs	r5, #0
 80018fe:	9501      	str	r5, [sp, #4]
 8001900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    */
    GPIO_InitStruct.Pin = VIN_Pin|IIN_Pin|VOUT_Pin|IOUT_Pin
                          |TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	481d      	ldr	r0, [pc, #116]	; (8001978 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001904:	4c1d      	ldr	r4, [pc, #116]	; (800197c <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800190a:	645a      	str	r2, [r3, #68]	; 0x44
 800190c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800190e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001912:	9201      	str	r2, [sp, #4]
 8001914:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	9502      	str	r5, [sp, #8]
 8001918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	631a      	str	r2, [r3, #48]	; 0x30
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800192a:	221f      	movs	r2, #31
 800192c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001930:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f000 fef0 	bl	8002718 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800193a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800193e:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001946:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800194a:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800194e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001952:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001956:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001958:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800195c:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001960:	f000 fd24 	bl	80023ac <HAL_DMA_Init>
 8001964:	b108      	cbz	r0, 800196a <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 8001966:	f7ff fd4d 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800196a:	63b4      	str	r4, [r6, #56]	; 0x38
 800196c:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800196e:	b008      	add	sp, #32
 8001970:	bd70      	pop	{r4, r5, r6, pc}
 8001972:	bf00      	nop
 8001974:	40012000 	.word	0x40012000
 8001978:	40020000 	.word	0x40020000
 800197c:	200000cc 	.word	0x200000cc
 8001980:	40026410 	.word	0x40026410

08001984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b530      	push	{r4, r5, lr}
 8001986:	4604      	mov	r4, r0
 8001988:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	2214      	movs	r2, #20
 800198c:	2100      	movs	r1, #0
 800198e:	a803      	add	r0, sp, #12
 8001990:	f002 fb24 	bl	8003fdc <memset>
  if(hi2c->Instance==I2C1)
 8001994:	6822      	ldr	r2, [r4, #0]
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <HAL_I2C_MspInit+0x60>)
 8001998:	429a      	cmp	r2, r3
 800199a:	d121      	bne.n	80019e0 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199c:	4c12      	ldr	r4, [pc, #72]	; (80019e8 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	4813      	ldr	r0, [pc, #76]	; (80019ec <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	2500      	movs	r5, #0
 80019a2:	9501      	str	r5, [sp, #4]
 80019a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	6323      	str	r3, [r4, #48]	; 0x30
 80019ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b6:	22c0      	movs	r2, #192	; 0xc0
 80019b8:	2312      	movs	r3, #18
 80019ba:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019be:	2103      	movs	r1, #3
 80019c0:	2304      	movs	r3, #4
 80019c2:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	a903      	add	r1, sp, #12
 80019c8:	f000 fea6 	bl	8002718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019cc:	9502      	str	r5, [sp, #8]
 80019ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d4:	6423      	str	r3, [r4, #64]	; 0x40
 80019d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019e0:	b009      	add	sp, #36	; 0x24
 80019e2:	bd30      	pop	{r4, r5, pc}
 80019e4:	40005400 	.word	0x40005400
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020400 	.word	0x40020400

080019f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80019f2:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f4:	2210      	movs	r2, #16
 80019f6:	2100      	movs	r1, #0
 80019f8:	4668      	mov	r0, sp
 80019fa:	f002 faef 	bl	8003fdc <memset>
  if(hrtc->Instance==RTC)
 80019fe:	6822      	ldr	r2, [r4, #0]
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_RTC_MspInit+0x48>)
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d116      	bne.n	8001a34 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a06:	2302      	movs	r3, #2
 8001a08:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0a:	4668      	mov	r0, sp
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a10:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a12:	f001 fa9d 	bl	8002f50 <HAL_RCCEx_PeriphCLKConfig>
 8001a16:	b108      	cbz	r0, 8001a1c <HAL_RTC_MspInit+0x2c>
    {
      Error_Handler();
 8001a18:	f7ff fcf4 	bl	8001404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_RTC_MspInit+0x4c>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2029      	movs	r0, #41	; 0x29
 8001a28:	4611      	mov	r1, r2
 8001a2a:	f000 fc55 	bl	80022d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a2e:	2029      	movs	r0, #41	; 0x29
 8001a30:	f000 fc84 	bl	800233c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a34:	b004      	add	sp, #16
 8001a36:	bd10      	pop	{r4, pc}
 8001a38:	40002800 	.word	0x40002800
 8001a3c:	42470000 	.word	0x42470000

08001a40 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001a40:	6803      	ldr	r3, [r0, #0]
 8001a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001a46:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001a48:	d116      	bne.n	8001a78 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001a50:	9200      	str	r2, [sp, #0]
 8001a52:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a54:	f041 0101 	orr.w	r1, r1, #1
 8001a58:	6419      	str	r1, [r3, #64]	; 0x40
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a62:	201c      	movs	r0, #28
 8001a64:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a66:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a68:	f000 fc36 	bl	80022d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a6c:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a6e:	b003      	add	sp, #12
 8001a70:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a74:	f000 bc62 	b.w	800233c <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM6)
 8001a78:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_TIM_Base_MspInit+0x68>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d111      	bne.n	8001aa2 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_TIM_Base_MspInit+0x6c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	9201      	str	r2, [sp, #4]
 8001a84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a86:	f041 0110 	orr.w	r1, r1, #16
 8001a8a:	6419      	str	r1, [r3, #64]	; 0x40
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a94:	2036      	movs	r0, #54	; 0x36
 8001a96:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a98:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a9a:	f000 fc1d 	bl	80022d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a9e:	2036      	movs	r0, #54	; 0x36
 8001aa0:	e7e5      	b.n	8001a6e <HAL_TIM_Base_MspInit+0x2e>
}
 8001aa2:	b003      	add	sp, #12
 8001aa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aa8:	40001000 	.word	0x40001000
 8001aac:	40023800 	.word	0x40023800

08001ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab0:	b510      	push	{r4, lr}
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	2214      	movs	r2, #20
 8001ab8:	2100      	movs	r1, #0
 8001aba:	a801      	add	r0, sp, #4
 8001abc:	f002 fa8e 	bl	8003fdc <memset>
  if(htim->Instance==TIM2)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac6:	d115      	bne.n	8001af4 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001ace:	480b      	ldr	r0, [pc, #44]	; (8001afc <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001aea:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aec:	2301      	movs	r3, #1
 8001aee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f000 fe12 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001af4:	b006      	add	sp, #24
 8001af6:	bd10      	pop	{r4, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b00:	b510      	push	{r4, lr}
 8001b02:	4604      	mov	r4, r0
 8001b04:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	2214      	movs	r2, #20
 8001b08:	2100      	movs	r1, #0
 8001b0a:	a807      	add	r0, sp, #28
 8001b0c:	f002 fa66 	bl	8003fdc <memset>
  if(huart->Instance==USART1)
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	4a39      	ldr	r2, [pc, #228]	; (8001bf8 <HAL_UART_MspInit+0xf8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d125      	bne.n	8001b64 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b18:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	4839      	ldr	r0, [pc, #228]	; (8001c00 <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	9101      	str	r1, [sp, #4]
 8001b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b22:	f042 0210 	orr.w	r2, r2, #16
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44
 8001b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b2a:	f002 0210 	and.w	r2, r2, #16
 8001b2e:	9201      	str	r2, [sp, #4]
 8001b30:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	9102      	str	r1, [sp, #8]
 8001b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e9cd c307 	strd	ip, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b50:	f04f 0e03 	mov.w	lr, #3
 8001b54:	2307      	movs	r3, #7
 8001b56:	e9cd e30a 	strd	lr, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f000 fddc 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b60:	b00c      	add	sp, #48	; 0x30
 8001b62:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <HAL_UART_MspInit+0x104>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d120      	bne.n	8001bac <HAL_UART_MspInit+0xac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_UART_MspInit+0xfc>)
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	9103      	str	r1, [sp, #12]
 8001b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
 8001b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b7a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b7e:	9203      	str	r2, [sp, #12]
 8001b80:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b82:	9104      	str	r1, [sp, #16]
 8001b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b86:	f042 0208 	orr.w	r2, r2, #8
 8001b8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2060      	movs	r0, #96	; 0x60
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b96:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9e:	2403      	movs	r4, #3
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba6:	4818      	ldr	r0, [pc, #96]	; (8001c08 <HAL_UART_MspInit+0x108>)
 8001ba8:	a907      	add	r1, sp, #28
 8001baa:	e7d7      	b.n	8001b5c <HAL_UART_MspInit+0x5c>
  else if(huart->Instance==USART3)
 8001bac:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_UART_MspInit+0x10c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d1d6      	bne.n	8001b60 <HAL_UART_MspInit+0x60>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_UART_MspInit+0xfc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	4816      	ldr	r0, [pc, #88]	; (8001c10 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	9105      	str	r1, [sp, #20]
 8001bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bbc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001bc8:	9205      	str	r2, [sp, #20]
 8001bca:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	9106      	str	r1, [sp, #24]
 8001bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd0:	f042 0202 	orr.w	r2, r2, #2
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	9306      	str	r3, [sp, #24]
 8001bde:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001be4:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001be6:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bec:	2307      	movs	r3, #7
 8001bee:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	a907      	add	r1, sp, #28
 8001bf4:	e7b2      	b.n	8001b5c <HAL_UART_MspInit+0x5c>
 8001bf6:	bf00      	nop
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40004400 	.word	0x40004400
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40004800 	.word	0x40004800
 8001c10:	40020400 	.word	0x40020400

08001c14 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <NMI_Handler>

08001c16 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <HardFault_Handler>

08001c18 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler>

08001c1a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <BusFault_Handler>

08001c1c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <UsageFault_Handler>

08001c1e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1e:	4770      	bx	lr

08001c20 <DebugMon_Handler>:
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:
 8001c22:	4770      	bx	lr

08001c24 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c24:	f000 b8ba 	b.w	8001d9c <HAL_IncTick>

08001c28 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c28:	4801      	ldr	r0, [pc, #4]	; (8001c30 <TIM2_IRQHandler+0x8>)
 8001c2a:	f001 bcd9 	b.w	80035e0 <HAL_TIM_IRQHandler>
 8001c2e:	bf00      	nop
 8001c30:	200001a0 	.word	0x200001a0

08001c34 <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c34:	4801      	ldr	r0, [pc, #4]	; (8001c3c <RTC_Alarm_IRQHandler+0x8>)
 8001c36:	f001 ba25 	b.w	8003084 <HAL_RTC_AlarmIRQHandler>
 8001c3a:	bf00      	nop
 8001c3c:	20000180 	.word	0x20000180

08001c40 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c40:	4801      	ldr	r0, [pc, #4]	; (8001c48 <TIM6_DAC_IRQHandler+0x8>)
 8001c42:	f001 bccd 	b.w	80035e0 <HAL_TIM_IRQHandler>
 8001c46:	bf00      	nop
 8001c48:	200001e8 	.word	0x200001e8

08001c4c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c4c:	4801      	ldr	r0, [pc, #4]	; (8001c54 <DMA2_Stream0_IRQHandler+0x8>)
 8001c4e:	f000 bca5 	b.w	800259c <HAL_DMA_IRQHandler>
 8001c52:	bf00      	nop
 8001c54:	200000cc 	.word	0x200000cc

08001c58 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001c58:	2001      	movs	r0, #1
 8001c5a:	4770      	bx	lr

08001c5c <_kill>:

int _kill(int pid, int sig)
{
 8001c5c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c5e:	f002 fa19 	bl	8004094 <__errno>
 8001c62:	2316      	movs	r3, #22
 8001c64:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001c66:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6a:	bd08      	pop	{r3, pc}

08001c6c <_exit>:

void _exit (int status)
{
 8001c6c:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001c6e:	f002 fa11 	bl	8004094 <__errno>
 8001c72:	2316      	movs	r3, #22
 8001c74:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001c76:	e7fe      	b.n	8001c76 <_exit+0xa>

08001c78 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c78:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <_sbrk+0x30>)
 8001c7a:	6811      	ldr	r1, [r2, #0]
{
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001c80:	b909      	cbnz	r1, 8001c86 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001c82:	490a      	ldr	r1, [pc, #40]	; (8001cac <_sbrk+0x34>)
 8001c84:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c86:	6810      	ldr	r0, [r2, #0]
 8001c88:	4909      	ldr	r1, [pc, #36]	; (8001cb0 <_sbrk+0x38>)
 8001c8a:	4c0a      	ldr	r4, [pc, #40]	; (8001cb4 <_sbrk+0x3c>)
 8001c8c:	4403      	add	r3, r0
 8001c8e:	1b09      	subs	r1, r1, r4
 8001c90:	428b      	cmp	r3, r1
 8001c92:	d906      	bls.n	8001ca2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001c94:	f002 f9fe 	bl	8004094 <__errno>
 8001c98:	230c      	movs	r3, #12
 8001c9a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001ca0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001ca2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001ca4:	e7fc      	b.n	8001ca0 <_sbrk+0x28>
 8001ca6:	bf00      	nop
 8001ca8:	200002fc 	.word	0x200002fc
 8001cac:	20000850 	.word	0x20000850
 8001cb0:	20020000 	.word	0x20020000
 8001cb4:	00000400 	.word	0x00000400

08001cb8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb8:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <SystemInit+0x10>)
 8001cba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001cbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd0:	480d      	ldr	r0, [pc, #52]	; (8001d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cd2:	490e      	ldr	r1, [pc, #56]	; (8001d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cd4:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ce8:	4c0b      	ldr	r4, [pc, #44]	; (8001d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf6:	f7ff ffdf 	bl	8001cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f002 f9d1 	bl	80040a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfe:	f7ff fb9b 	bl	8001438 <main>
  bx  lr    
 8001d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001d10:	08004c78 	.word	0x08004c78
  ldr r2, =_sbss
 8001d14:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001d18:	20000850 	.word	0x20000850

08001d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC_IRQHandler>
	...

08001d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_InitTick+0x3c>)
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_InitTick+0x40>)
{
 8001d30:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d32:	6810      	ldr	r0, [r2, #0]
 8001d34:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d38:	f000 fb0e 	bl	8002358 <HAL_SYSTICK_Config>
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	b958      	cbnz	r0, 8001d58 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d40:	2d0f      	cmp	r5, #15
 8001d42:	d809      	bhi.n	8001d58 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d44:	4602      	mov	r2, r0
 8001d46:	4629      	mov	r1, r5
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	f000 fac4 	bl	80022d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <HAL_InitTick+0x44>)
 8001d52:	4620      	mov	r0, r4
 8001d54:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001d56:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001d58:	2001      	movs	r0, #1
 8001d5a:	e7fc      	b.n	8001d56 <HAL_InitTick+0x36>
 8001d5c:	20000004 	.word	0x20000004
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000008 	.word	0x20000008

08001d68 <HAL_Init>:
{
 8001d68:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_Init+0x30>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d72:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d7a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d82:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f000 fa95 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8a:	200f      	movs	r0, #15
 8001d8c:	f7ff ffc8 	bl	8001d20 <HAL_InitTick>
  HAL_MspInit();
 8001d90:	f7ff fd8a 	bl	80018a8 <HAL_MspInit>
}
 8001d94:	2000      	movs	r0, #0
 8001d96:	bd08      	pop	{r3, pc}
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d9c:	4a03      	ldr	r2, [pc, #12]	; (8001dac <HAL_IncTick+0x10>)
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_IncTick+0x14>)
 8001da0:	6811      	ldr	r1, [r2, #0]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	440b      	add	r3, r1
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000300 	.word	0x20000300
 8001db0:	20000004 	.word	0x20000004

08001db4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001db4:	4b01      	ldr	r3, [pc, #4]	; (8001dbc <HAL_GetTick+0x8>)
 8001db6:	6818      	ldr	r0, [r3, #0]
}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000300 	.word	0x20000300

08001dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc0:	b538      	push	{r3, r4, r5, lr}
 8001dc2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff fff6 	bl	8001db4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001dca:	bf1c      	itt	ne
 8001dcc:	4b05      	ldrne	r3, [pc, #20]	; (8001de4 <HAL_Delay+0x24>)
 8001dce:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001dd2:	bf18      	it	ne
 8001dd4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd6:	f7ff ffed 	bl	8001db4 <HAL_GetTick>
 8001dda:	1b43      	subs	r3, r0, r5
 8001ddc:	42a3      	cmp	r3, r4
 8001dde:	d3fa      	bcc.n	8001dd6 <HAL_Delay+0x16>
  {
  }
}
 8001de0:	bd38      	pop	{r3, r4, r5, pc}
 8001de2:	bf00      	nop
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dea:	4604      	mov	r4, r0
 8001dec:	2800      	cmp	r0, #0
 8001dee:	f000 809b 	beq.w	8001f28 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001df2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001df4:	b925      	cbnz	r5, 8001e00 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df6:	f7ff fd73 	bl	80018e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dfa:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dfc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e02:	06db      	lsls	r3, r3, #27
 8001e04:	f100 808e 	bmi.w	8001f24 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e0e:	f023 0302 	bic.w	r3, r3, #2
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e18:	4b44      	ldr	r3, [pc, #272]	; (8001f2c <HAL_ADC_Init+0x144>)
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001e20:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	6861      	ldr	r1, [r4, #4]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e2a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e2c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e3e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e40:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e42:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e46:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e4e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e50:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e5e:	4934      	ldr	r1, [pc, #208]	; (8001f30 <HAL_ADC_Init+0x148>)
 8001e60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e62:	428a      	cmp	r2, r1
 8001e64:	d052      	beq.n	8001f0c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e66:	6899      	ldr	r1, [r3, #8]
 8001e68:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001e6c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e6e:	6899      	ldr	r1, [r3, #8]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e74:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e82:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	f022 0202 	bic.w	r2, r2, #2
 8001e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	7e21      	ldrb	r1, [r4, #24]
 8001e90:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001e94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e96:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001e9a:	2a00      	cmp	r2, #0
 8001e9c:	d03e      	beq.n	8001f1c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e9e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ea0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ea6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	3901      	subs	r1, #1
 8001eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001eb8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ebc:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ebe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec6:	3901      	subs	r1, #1
 8001ec8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001edc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001ee0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ee2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ee4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001eec:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001eee:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ef0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001ef4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001ef8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001f04:	2300      	movs	r3, #0
 8001f06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001f0a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f1a:	e7b2      	b.n	8001e82 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f22:	e7c9      	b.n	8001eb8 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001f24:	2001      	movs	r0, #1
 8001f26:	e7ed      	b.n	8001f04 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001f28:	2001      	movs	r0, #1
 8001f2a:	e7ee      	b.n	8001f0a <HAL_ADC_Init+0x122>
 8001f2c:	40012300 	.word	0x40012300
 8001f30:	0f000001 	.word	0x0f000001

08001f34 <HAL_ADC_Start_DMA>:
{
 8001f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f36:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8001f38:	2200      	movs	r2, #0
 8001f3a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001f3c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001f40:	2a01      	cmp	r2, #1
{
 8001f42:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001f44:	f000 8092 	beq.w	800206c <HAL_ADC_Start_DMA+0x138>
 8001f48:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f4a:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 8001f4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f50:	68b2      	ldr	r2, [r6, #8]
 8001f52:	07d4      	lsls	r4, r2, #31
 8001f54:	d554      	bpl.n	8002000 <HAL_ADC_Start_DMA+0xcc>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f56:	68b2      	ldr	r2, [r6, #8]
 8001f58:	05d0      	lsls	r0, r2, #23
 8001f5a:	d464      	bmi.n	8002026 <HAL_ADC_Start_DMA+0xf2>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f5c:	68b4      	ldr	r4, [r6, #8]
 8001f5e:	f014 0401 	ands.w	r4, r4, #1
 8001f62:	d079      	beq.n	8002058 <HAL_ADC_Start_DMA+0x124>
    ADC_STATE_CLR_SET(hadc->State,
 8001f64:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8001f66:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001f6a:	f020 0001 	bic.w	r0, r0, #1
 8001f6e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001f72:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f74:	6872      	ldr	r2, [r6, #4]
 8001f76:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f78:	bf41      	itttt	mi
 8001f7a:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 8001f7c:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001f80:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001f84:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f86:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f88:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f8e:	bf1c      	itt	ne
 8001f90:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 8001f92:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001f96:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8001f98:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f9a:	4a35      	ldr	r2, [pc, #212]	; (8002070 <HAL_ADC_Start_DMA+0x13c>)
    __HAL_UNLOCK(hadc);   
 8001f9c:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fa0:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fa2:	4a34      	ldr	r2, [pc, #208]	; (8002074 <HAL_ADC_Start_DMA+0x140>)
 8001fa4:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fa6:	4a34      	ldr	r2, [pc, #208]	; (8002078 <HAL_ADC_Start_DMA+0x144>)
 8001fa8:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001faa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fae:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fb0:	6872      	ldr	r2, [r6, #4]
 8001fb2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001fb6:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fb8:	68b2      	ldr	r2, [r6, #8]
 8001fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fbe:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8001fc6:	f000 fa6f 	bl	80024a8 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fca:	492c      	ldr	r1, [pc, #176]	; (800207c <HAL_ADC_Start_DMA+0x148>)
 8001fcc:	682b      	ldr	r3, [r5, #0]
 8001fce:	684a      	ldr	r2, [r1, #4]
 8001fd0:	482b      	ldr	r0, [pc, #172]	; (8002080 <HAL_ADC_Start_DMA+0x14c>)
 8001fd2:	f012 021f 	ands.w	r2, r2, #31
 8001fd6:	d132      	bne.n	800203e <HAL_ADC_Start_DMA+0x10a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fd8:	4283      	cmp	r3, r0
 8001fda:	d007      	beq.n	8001fec <HAL_ADC_Start_DMA+0xb8>
 8001fdc:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001fe0:	4283      	cmp	r3, r0
 8001fe2:	d125      	bne.n	8002030 <HAL_ADC_Start_DMA+0xfc>
 8001fe4:	6849      	ldr	r1, [r1, #4]
 8001fe6:	f011 0f1f 	tst.w	r1, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fea:	d132      	bne.n	8002052 <HAL_ADC_Start_DMA+0x11e>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fec:	6898      	ldr	r0, [r3, #8]
 8001fee:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001ff2:	d103      	bne.n	8001ffc <HAL_ADC_Start_DMA+0xc8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ffa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	e028      	b.n	8002052 <HAL_ADC_Start_DMA+0x11e>
    __HAL_ADC_ENABLE(hadc);
 8002000:	68b2      	ldr	r2, [r6, #8]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002008:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <HAL_ADC_Start_DMA+0x150>)
 800200a:	6810      	ldr	r0, [r2, #0]
 800200c:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_ADC_Start_DMA+0x154>)
 800200e:	fbb0 f0f2 	udiv	r0, r0, r2
 8002012:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002016:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8002018:	9a01      	ldr	r2, [sp, #4]
 800201a:	2a00      	cmp	r2, #0
 800201c:	d09b      	beq.n	8001f56 <HAL_ADC_Start_DMA+0x22>
      counter--;
 800201e:	9a01      	ldr	r2, [sp, #4]
 8002020:	3a01      	subs	r2, #1
 8002022:	9201      	str	r2, [sp, #4]
 8002024:	e7f8      	b.n	8002018 <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002026:	68b2      	ldr	r2, [r6, #8]
 8002028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800202c:	60b2      	str	r2, [r6, #8]
 800202e:	e795      	b.n	8001f5c <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002030:	4816      	ldr	r0, [pc, #88]	; (800208c <HAL_ADC_Start_DMA+0x158>)
 8002032:	4283      	cmp	r3, r0
 8002034:	d10d      	bne.n	8002052 <HAL_ADC_Start_DMA+0x11e>
 8002036:	6849      	ldr	r1, [r1, #4]
 8002038:	f011 0f10 	tst.w	r1, #16
 800203c:	e7d5      	b.n	8001fea <HAL_ADC_Start_DMA+0xb6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800203e:	4283      	cmp	r3, r0
 8002040:	d1dc      	bne.n	8001ffc <HAL_ADC_Start_DMA+0xc8>
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	f012 5240 	ands.w	r2, r2, #805306368	; 0x30000000
 8002048:	d10e      	bne.n	8002068 <HAL_ADC_Start_DMA+0x134>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800204a:	6899      	ldr	r1, [r3, #8]
 800204c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002050:	6099      	str	r1, [r3, #8]
}
 8002052:	4610      	mov	r0, r2
 8002054:	b002      	add	sp, #8
 8002056:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002058:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800205a:	f043 0310 	orr.w	r3, r3, #16
 800205e:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002060:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	646b      	str	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8002068:	4622      	mov	r2, r4
 800206a:	e7f2      	b.n	8002052 <HAL_ADC_Start_DMA+0x11e>
  __HAL_LOCK(hadc);
 800206c:	2202      	movs	r2, #2
 800206e:	e7f0      	b.n	8002052 <HAL_ADC_Start_DMA+0x11e>
 8002070:	08002127 	.word	0x08002127
 8002074:	08002105 	.word	0x08002105
 8002078:	08002111 	.word	0x08002111
 800207c:	40012300 	.word	0x40012300
 8002080:	40012000 	.word	0x40012000
 8002084:	20000000 	.word	0x20000000
 8002088:	000f4240 	.word	0x000f4240
 800208c:	40012200 	.word	0x40012200

08002090 <HAL_ADC_Stop_DMA>:
{
 8002090:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002092:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002096:	2b01      	cmp	r3, #1
{
 8002098:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800209a:	d030      	beq.n	80020fe <HAL_ADC_Stop_DMA+0x6e>
  __HAL_ADC_DISABLE(hadc);
 800209c:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 800209e:	2301      	movs	r3, #1
 80020a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 80020a4:	6893      	ldr	r3, [r2, #8]
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80020ac:	6893      	ldr	r3, [r2, #8]
 80020ae:	f013 0301 	ands.w	r3, r3, #1
 80020b2:	d122      	bne.n	80020fa <HAL_ADC_Stop_DMA+0x6a>
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80020b4:	6891      	ldr	r1, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80020b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80020b8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80020bc:	6091      	str	r1, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80020be:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80020c2:	2a02      	cmp	r2, #2
 80020c4:	d117      	bne.n	80020f6 <HAL_ADC_Stop_DMA+0x66>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80020c6:	f000 fa29 	bl	800251c <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 80020ca:	b118      	cbz	r0, 80020d4 <HAL_ADC_Stop_DMA+0x44>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d2:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80020d4:	6822      	ldr	r2, [r4, #0]
 80020d6:	6853      	ldr	r3, [r2, #4]
 80020d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020dc:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80020de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80020ee:	2300      	movs	r3, #0
 80020f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80020f4:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f6:	4618      	mov	r0, r3
 80020f8:	e7ec      	b.n	80020d4 <HAL_ADC_Stop_DMA+0x44>
 80020fa:	2000      	movs	r0, #0
 80020fc:	e7f7      	b.n	80020ee <HAL_ADC_Stop_DMA+0x5e>
  __HAL_LOCK(hadc);
 80020fe:	2002      	movs	r0, #2
 8002100:	e7f8      	b.n	80020f4 <HAL_ADC_Stop_DMA+0x64>

08002102 <HAL_ADC_ConvHalfCpltCallback>:
 8002102:	4770      	bx	lr

08002104 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002104:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002106:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002108:	f7ff fffb 	bl	8002102 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800210c:	bd08      	pop	{r3, pc}

0800210e <HAL_ADC_ErrorCallback>:
 800210e:	4770      	bx	lr

08002110 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002110:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002112:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002114:	2340      	movs	r3, #64	; 0x40
 8002116:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002118:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800211a:	f043 0304 	orr.w	r3, r3, #4
 800211e:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002120:	f7ff fff5 	bl	800210e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002124:	bd08      	pop	{r3, pc}

08002126 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002126:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800212a:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800212e:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002132:	d123      	bne.n	800217c <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	6891      	ldr	r1, [r2, #8]
 800213e:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8002142:	d117      	bne.n	8002174 <ADC_DMAConvCplt+0x4e>
 8002144:	7e19      	ldrb	r1, [r3, #24]
 8002146:	b9a9      	cbnz	r1, 8002174 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002148:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800214a:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800214e:	d002      	beq.n	8002156 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002150:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002152:	0548      	lsls	r0, r1, #21
 8002154:	d40e      	bmi.n	8002174 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002156:	6851      	ldr	r1, [r2, #4]
 8002158:	f021 0120 	bic.w	r1, r1, #32
 800215c:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800215e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002168:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800216a:	bf5e      	ittt	pl
 800216c:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 800216e:	f042 0201 	orrpl.w	r2, r2, #1
 8002172:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f957 	bl	8001428 <HAL_ADC_ConvCpltCallback>
}
 800217a:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800217c:	06d2      	lsls	r2, r2, #27
 800217e:	d503      	bpl.n	8002188 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ffc4 	bl	800210e <HAL_ADC_ErrorCallback>
 8002186:	e7f8      	b.n	800217a <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800218a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800218e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002190:	4718      	bx	r3
	...

08002194 <HAL_ADC_ConfigChannel>:
{
 8002194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800219a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d064      	beq.n	800226c <HAL_ADC_ConfigChannel+0xd8>
 80021a2:	2301      	movs	r3, #1
 80021a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021a8:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021aa:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021ac:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021ae:	2d09      	cmp	r5, #9
 80021b0:	b2ac      	uxth	r4, r5
 80021b2:	d931      	bls.n	8002218 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021b4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80021b8:	68df      	ldr	r7, [r3, #12]
 80021ba:	3a1e      	subs	r2, #30
 80021bc:	f04f 0c07 	mov.w	ip, #7
 80021c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80021c4:	ea27 070c 	bic.w	r7, r7, ip
 80021c8:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021ca:	68df      	ldr	r7, [r3, #12]
 80021cc:	fa06 f202 	lsl.w	r2, r6, r2
 80021d0:	433a      	orrs	r2, r7
 80021d2:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80021d4:	6849      	ldr	r1, [r1, #4]
 80021d6:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021d8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 80021dc:	d82b      	bhi.n	8002236 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021e0:	3a05      	subs	r2, #5
 80021e2:	261f      	movs	r6, #31
 80021e4:	4096      	lsls	r6, r2
 80021e6:	ea21 0106 	bic.w	r1, r1, r6
 80021ea:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021ee:	fa04 f202 	lsl.w	r2, r4, r2
 80021f2:	430a      	orrs	r2, r1
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021f6:	4a2b      	ldr	r2, [pc, #172]	; (80022a4 <HAL_ADC_ConfigChannel+0x110>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d107      	bne.n	800220c <HAL_ADC_ConfigChannel+0x78>
 80021fc:	2d12      	cmp	r5, #18
 80021fe:	d137      	bne.n	8002270 <HAL_ADC_ConfigChannel+0xdc>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002200:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8002204:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002208:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 800220c:	2300      	movs	r3, #0
 800220e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002212:	4618      	mov	r0, r3
}
 8002214:	b003      	add	sp, #12
 8002216:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800221e:	2707      	movs	r7, #7
 8002220:	fa07 f70c 	lsl.w	r7, r7, ip
 8002224:	ea22 0207 	bic.w	r2, r2, r7
 8002228:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	fa06 f60c 	lsl.w	r6, r6, ip
 8002230:	4316      	orrs	r6, r2
 8002232:	611e      	str	r6, [r3, #16]
 8002234:	e7ce      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8002236:	290c      	cmp	r1, #12
 8002238:	f04f 011f 	mov.w	r1, #31
 800223c:	d80b      	bhi.n	8002256 <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800223e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8002240:	3a23      	subs	r2, #35	; 0x23
 8002242:	4091      	lsls	r1, r2
 8002244:	ea26 0101 	bic.w	r1, r6, r1
 8002248:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800224a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800224c:	fa04 f202 	lsl.w	r2, r4, r2
 8002250:	430a      	orrs	r2, r1
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
 8002254:	e7cf      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002256:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8002258:	3a41      	subs	r2, #65	; 0x41
 800225a:	4091      	lsls	r1, r2
 800225c:	ea26 0101 	bic.w	r1, r6, r1
 8002260:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002264:	4094      	lsls	r4, r2
 8002266:	430c      	orrs	r4, r1
 8002268:	62dc      	str	r4, [r3, #44]	; 0x2c
 800226a:	e7c4      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 800226c:	2002      	movs	r0, #2
 800226e:	e7d1      	b.n	8002214 <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002270:	f1a5 0310 	sub.w	r3, r5, #16
 8002274:	2b01      	cmp	r3, #1
 8002276:	d8c9      	bhi.n	800220c <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002278:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <HAL_ADC_ConfigChannel+0x114>)
 800227a:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800227c:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800227e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002282:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002284:	d1c2      	bne.n	800220c <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_ADC_ConfigChannel+0x118>)
 8002288:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <HAL_ADC_ConfigChannel+0x11c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002290:	220a      	movs	r2, #10
 8002292:	4353      	muls	r3, r2
        counter--;
 8002294:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002296:	9b01      	ldr	r3, [sp, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0b7      	beq.n	800220c <HAL_ADC_ConfigChannel+0x78>
        counter--;
 800229c:	9b01      	ldr	r3, [sp, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	e7f8      	b.n	8002294 <HAL_ADC_ConfigChannel+0x100>
 80022a2:	bf00      	nop
 80022a4:	40012000 	.word	0x40012000
 80022a8:	40012300 	.word	0x40012300
 80022ac:	20000000 	.word	0x20000000
 80022b0:	000f4240 	.word	0x000f4240

080022b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b4:	4907      	ldr	r1, [pc, #28]	; (80022d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80022b6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022bc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80022d0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022da:	b530      	push	{r4, r5, lr}
 80022dc:	68dc      	ldr	r4, [r3, #12]
 80022de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	bf28      	it	cs
 80022ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f4:	bf8c      	ite	hi
 80022f6:	3c03      	subhi	r4, #3
 80022f8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fa:	fa05 f303 	lsl.w	r3, r5, r3
 80022fe:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002302:	40a5      	lsls	r5, r4
 8002304:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800230a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	bfac      	ite	ge
 8002312:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	4a08      	ldrlt	r2, [pc, #32]	; (8002338 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	bfb8      	it	lt
 800231e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002322:	b2db      	uxtb	r3, r3
 8002324:	bfaa      	itet	ge
 8002326:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002330:	bd30      	pop	{r4, r5, pc}
 8002332:	bf00      	nop
 8002334:	e000ed00 	.word	0xe000ed00
 8002338:	e000ed14 	.word	0xe000ed14

0800233c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800233c:	2800      	cmp	r0, #0
 800233e:	db07      	blt.n	8002350 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002340:	0941      	lsrs	r1, r0, #5
 8002342:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_NVIC_EnableIRQ+0x18>)
 8002344:	f000 001f 	and.w	r0, r0, #31
 8002348:	2301      	movs	r3, #1
 800234a:	4083      	lsls	r3, r0
 800234c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100

08002358 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002358:	3801      	subs	r0, #1
 800235a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800235e:	d20b      	bcs.n	8002378 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002360:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	4a05      	ldr	r2, [pc, #20]	; (800237c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002366:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002368:	21f0      	movs	r1, #240	; 0xf0
 800236a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800236e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002370:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002372:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002374:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002376:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002378:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002380:	6803      	ldr	r3, [r0, #0]
{
 8002382:	b510      	push	{r4, lr}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002384:	b2da      	uxtb	r2, r3
 8002386:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002388:	4c07      	ldr	r4, [pc, #28]	; (80023a8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800238a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800238e:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8002392:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002394:	bf88      	it	hi
 8002396:	3304      	addhi	r3, #4
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002398:	2118      	movs	r1, #24
 800239a:	fbb2 f1f1 	udiv	r1, r2, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800239e:	5c61      	ldrb	r1, [r4, r1]
 80023a0:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023a2:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd10      	pop	{r4, pc}
 80023a8:	08004c2b 	.word	0x08004c2b

080023ac <HAL_DMA_Init>:
{
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff fd00 	bl	8001db4 <HAL_GetTick>
 80023b4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80023b6:	2c00      	cmp	r4, #0
 80023b8:	d071      	beq.n	800249e <HAL_DMA_Init+0xf2>
  hdma->State = HAL_DMA_STATE_BUSY;
 80023ba:	2302      	movs	r3, #2
 80023bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80023c0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80023c2:	2300      	movs	r3, #0
 80023c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80023c8:	6813      	ldr	r3, [r2, #0]
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d0:	6822      	ldr	r2, [r4, #0]
 80023d2:	6813      	ldr	r3, [r2, #0]
 80023d4:	07d8      	lsls	r0, r3, #31
 80023d6:	d42e      	bmi.n	8002436 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 80023d8:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023da:	4832      	ldr	r0, [pc, #200]	; (80024a4 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023dc:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023de:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80023e4:	432b      	orrs	r3, r5
 80023e6:	68e5      	ldr	r5, [r4, #12]
 80023e8:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ea:	6925      	ldr	r5, [r4, #16]
 80023ec:	432b      	orrs	r3, r5
 80023ee:	6965      	ldr	r5, [r4, #20]
 80023f0:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f2:	69e5      	ldr	r5, [r4, #28]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f8:	6a25      	ldr	r5, [r4, #32]
 80023fa:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fc:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002400:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002402:	bf02      	ittt	eq
 8002404:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002408:	4335      	orreq	r5, r6
 800240a:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800240c:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 800240e:	6953      	ldr	r3, [r2, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002410:	2804      	cmp	r0, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002412:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002416:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800241a:	d132      	bne.n	8002482 <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
 800241c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800241e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002420:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002422:	b375      	cbz	r5, 8002482 <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002424:	b991      	cbnz	r1, 800244c <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8002426:	2801      	cmp	r0, #1
 8002428:	d020      	beq.n	800246c <HAL_DMA_Init+0xc0>
 800242a:	f030 0102 	bics.w	r1, r0, #2
 800242e:	d128      	bne.n	8002482 <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002430:	01e9      	lsls	r1, r5, #7
 8002432:	d526      	bpl.n	8002482 <HAL_DMA_Init+0xd6>
 8002434:	e01d      	b.n	8002472 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002436:	f7ff fcbd 	bl	8001db4 <HAL_GetTick>
 800243a:	1b40      	subs	r0, r0, r5
 800243c:	2805      	cmp	r0, #5
 800243e:	d9c7      	bls.n	80023d0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002440:	2320      	movs	r3, #32
 8002442:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002444:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002446:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800244a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800244c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002450:	d113      	bne.n	800247a <HAL_DMA_Init+0xce>
    switch (tmp)
 8002452:	2803      	cmp	r0, #3
 8002454:	d815      	bhi.n	8002482 <HAL_DMA_Init+0xd6>
 8002456:	a101      	add	r1, pc, #4	; (adr r1, 800245c <HAL_DMA_Init+0xb0>)
 8002458:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 800245c:	08002473 	.word	0x08002473
 8002460:	08002431 	.word	0x08002431
 8002464:	08002473 	.word	0x08002473
 8002468:	0800246d 	.word	0x0800246d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800246c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002470:	d107      	bne.n	8002482 <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002472:	2340      	movs	r3, #64	; 0x40
 8002474:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002476:	2001      	movs	r0, #1
 8002478:	e7e5      	b.n	8002446 <HAL_DMA_Init+0x9a>
    switch (tmp)
 800247a:	2802      	cmp	r0, #2
 800247c:	d9f9      	bls.n	8002472 <HAL_DMA_Init+0xc6>
 800247e:	2803      	cmp	r0, #3
 8002480:	d0d6      	beq.n	8002430 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8002482:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002484:	4620      	mov	r0, r4
 8002486:	f7ff ff7b 	bl	8002380 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800248a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800248c:	233f      	movs	r3, #63	; 0x3f
 800248e:	4093      	lsls	r3, r2
 8002490:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002492:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002494:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002496:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002498:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800249c:	e7d5      	b.n	800244a <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
 800249e:	2001      	movs	r0, #1
 80024a0:	e7d3      	b.n	800244a <HAL_DMA_Init+0x9e>
 80024a2:	bf00      	nop
 80024a4:	f010803f 	.word	0xf010803f

080024a8 <HAL_DMA_Start_IT>:
{
 80024a8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80024aa:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ae:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80024b0:	2c01      	cmp	r4, #1
 80024b2:	d031      	beq.n	8002518 <HAL_DMA_Start_IT+0x70>
 80024b4:	2401      	movs	r4, #1
 80024b6:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ba:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80024be:	2c01      	cmp	r4, #1
 80024c0:	f04f 0500 	mov.w	r5, #0
 80024c4:	f04f 0402 	mov.w	r4, #2
 80024c8:	d124      	bne.n	8002514 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ca:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024ce:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024d0:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024d2:	6825      	ldr	r5, [r4, #0]
 80024d4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80024d8:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80024da:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024dc:	6883      	ldr	r3, [r0, #8]
 80024de:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80024e0:	bf0e      	itee	eq
 80024e2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80024e4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80024e6:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80024ea:	bf08      	it	eq
 80024ec:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ee:	233f      	movs	r3, #63	; 0x3f
 80024f0:	4093      	lsls	r3, r2
 80024f2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	f043 0316 	orr.w	r3, r3, #22
 80024fa:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80024fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024fe:	b11b      	cbz	r3, 8002508 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	f043 0308 	orr.w	r3, r3, #8
 8002506:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002510:	2000      	movs	r0, #0
}
 8002512:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8002514:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002518:	2002      	movs	r0, #2
 800251a:	e7fa      	b.n	8002512 <HAL_DMA_Start_IT+0x6a>

0800251c <HAL_DMA_Abort>:
{
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002520:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002522:	f7ff fc47 	bl	8001db4 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002526:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800252a:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 800252c:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252e:	d006      	beq.n	800253e <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002534:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8002536:	2300      	movs	r3, #0
 8002538:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800253c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	f022 0216 	bic.w	r2, r2, #22
 8002546:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800254e:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002550:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002552:	b90a      	cbnz	r2, 8002558 <HAL_DMA_Abort+0x3c>
 8002554:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002556:	b11a      	cbz	r2, 8002560 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	f022 0208 	bic.w	r2, r2, #8
 800255e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f013 0301 	ands.w	r3, r3, #1
 8002570:	d108      	bne.n	8002584 <HAL_DMA_Abort+0x68>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002572:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002574:	223f      	movs	r2, #63	; 0x3f
 8002576:	408a      	lsls	r2, r1
 8002578:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800257a:	2201      	movs	r2, #1
 800257c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8002580:	4618      	mov	r0, r3
 8002582:	e7d8      	b.n	8002536 <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002584:	f7ff fc16 	bl	8001db4 <HAL_GetTick>
 8002588:	1b40      	subs	r0, r0, r5
 800258a:	2805      	cmp	r0, #5
 800258c:	d9ec      	bls.n	8002568 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800258e:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002590:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002592:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002594:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8002598:	e7cd      	b.n	8002536 <HAL_DMA_Abort+0x1a>
	...

0800259c <HAL_DMA_IRQHandler>:
{
 800259c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025a2:	4b5c      	ldr	r3, [pc, #368]	; (8002714 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80025a6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025a8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80025aa:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ac:	2208      	movs	r2, #8
 80025ae:	409a      	lsls	r2, r3
 80025b0:	4232      	tst	r2, r6
{
 80025b2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025b4:	d00c      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025b6:	6801      	ldr	r1, [r0, #0]
 80025b8:	6808      	ldr	r0, [r1, #0]
 80025ba:	0740      	lsls	r0, r0, #29
 80025bc:	d508      	bpl.n	80025d0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025be:	6808      	ldr	r0, [r1, #0]
 80025c0:	f020 0004 	bic.w	r0, r0, #4
 80025c4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025c6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025d0:	2201      	movs	r2, #1
 80025d2:	409a      	lsls	r2, r3
 80025d4:	4232      	tst	r2, r6
 80025d6:	d008      	beq.n	80025ea <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025d8:	6821      	ldr	r1, [r4, #0]
 80025da:	6949      	ldr	r1, [r1, #20]
 80025dc:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025de:	bf41      	itttt	mi
 80025e0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025e2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80025e4:	f042 0202 	orrmi.w	r2, r2, #2
 80025e8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ea:	2204      	movs	r2, #4
 80025ec:	409a      	lsls	r2, r3
 80025ee:	4232      	tst	r2, r6
 80025f0:	d008      	beq.n	8002604 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025f2:	6821      	ldr	r1, [r4, #0]
 80025f4:	6809      	ldr	r1, [r1, #0]
 80025f6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025f8:	bf41      	itttt	mi
 80025fa:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025fc:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80025fe:	f042 0204 	orrmi.w	r2, r2, #4
 8002602:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002604:	2210      	movs	r2, #16
 8002606:	409a      	lsls	r2, r3
 8002608:	4232      	tst	r2, r6
 800260a:	d010      	beq.n	800262e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	6819      	ldr	r1, [r3, #0]
 8002610:	0709      	lsls	r1, r1, #28
 8002612:	d50c      	bpl.n	800262e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002614:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	0350      	lsls	r0, r2, #13
 800261a:	d537      	bpl.n	800268c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	0319      	lsls	r1, r3, #12
 8002620:	d401      	bmi.n	8002626 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8002622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002624:	e000      	b.n	8002628 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002626:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002628:	b10b      	cbz	r3, 800262e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800262a:	4620      	mov	r0, r4
 800262c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800262e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002630:	2220      	movs	r2, #32
 8002632:	408a      	lsls	r2, r1
 8002634:	4232      	tst	r2, r6
 8002636:	d03a      	beq.n	80026ae <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	06c6      	lsls	r6, r0, #27
 800263e:	d536      	bpl.n	80026ae <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002640:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002642:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002646:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002648:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800264a:	d127      	bne.n	800269c <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800264c:	f022 0216 	bic.w	r2, r2, #22
 8002650:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002658:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800265a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800265c:	b90a      	cbnz	r2, 8002662 <HAL_DMA_IRQHandler+0xc6>
 800265e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002660:	b11a      	cbz	r2, 800266a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f022 0208 	bic.w	r2, r2, #8
 8002668:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266a:	233f      	movs	r3, #63	; 0x3f
 800266c:	408b      	lsls	r3, r1
 800266e:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002670:	2301      	movs	r3, #1
 8002672:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002676:	2300      	movs	r3, #0
 8002678:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800267c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800267e:	2b00      	cmp	r3, #0
 8002680:	d045      	beq.n	800270e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8002682:	4620      	mov	r0, r4
}
 8002684:	b003      	add	sp, #12
 8002686:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800268a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002690:	bf5e      	ittt	pl
 8002692:	681a      	ldrpl	r2, [r3, #0]
 8002694:	f022 0208 	bicpl.w	r2, r2, #8
 8002698:	601a      	strpl	r2, [r3, #0]
 800269a:	e7c2      	b.n	8002622 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800269c:	0350      	lsls	r0, r2, #13
 800269e:	d527      	bpl.n	80026f0 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	0319      	lsls	r1, r3, #12
 80026a4:	d431      	bmi.n	800270a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80026a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80026a8:	b10b      	cbz	r3, 80026ae <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80026aa:	4620      	mov	r0, r4
 80026ac:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026b0:	b36b      	cbz	r3, 800270e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026b4:	07da      	lsls	r2, r3, #31
 80026b6:	d519      	bpl.n	80026ec <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 80026b8:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026ba:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80026be:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 80026c2:	2305      	movs	r3, #5
 80026c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80026c8:	6813      	ldr	r3, [r2, #0]
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80026d0:	9b01      	ldr	r3, [sp, #4]
 80026d2:	3301      	adds	r3, #1
 80026d4:	42bb      	cmp	r3, r7
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	d802      	bhi.n	80026e0 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026da:	6813      	ldr	r3, [r2, #0]
 80026dc:	07db      	lsls	r3, r3, #31
 80026de:	d4f7      	bmi.n	80026d0 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80026e6:	2300      	movs	r3, #0
 80026e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80026ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80026ee:	e7c6      	b.n	800267e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80026f6:	d108      	bne.n	800270a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	f021 0110 	bic.w	r1, r1, #16
 80026fe:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002700:	2301      	movs	r3, #1
 8002702:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002706:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800270a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800270c:	e7cc      	b.n	80026a8 <HAL_DMA_IRQHandler+0x10c>
}
 800270e:	b003      	add	sp, #12
 8002710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002712:	bf00      	nop
 8002714:	20000000 	.word	0x20000000

08002718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80028c8 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002720:	4a67      	ldr	r2, [pc, #412]	; (80028c0 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002724:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002726:	2401      	movs	r4, #1
 8002728:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800272e:	43ac      	bics	r4, r5
 8002730:	f040 80b1 	bne.w	8002896 <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002734:	684d      	ldr	r5, [r1, #4]
 8002736:	f005 0403 	and.w	r4, r5, #3
 800273a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800273e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002740:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002742:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002746:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002748:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274c:	d834      	bhi.n	80027b8 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800274e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002750:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002754:	68cf      	ldr	r7, [r1, #12]
 8002756:	fa07 f708 	lsl.w	r7, r7, r8
 800275a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800275e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002760:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002762:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002766:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800276a:	409f      	lsls	r7, r3
 800276c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002770:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002772:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002774:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002778:	688f      	ldr	r7, [r1, #8]
 800277a:	fa07 f708 	lsl.w	r7, r7, r8
 800277e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002782:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002784:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002786:	d119      	bne.n	80027bc <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002788:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800278c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002790:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002794:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002798:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800279c:	f04f 0e0f 	mov.w	lr, #15
 80027a0:	fa0e fe0b 	lsl.w	lr, lr, fp
 80027a4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027a8:	690f      	ldr	r7, [r1, #16]
 80027aa:	fa07 f70b 	lsl.w	r7, r7, fp
 80027ae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80027b2:	f8ca 7020 	str.w	r7, [sl, #32]
 80027b6:	e001      	b.n	80027bc <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b8:	2c03      	cmp	r4, #3
 80027ba:	d1da      	bne.n	8002772 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80027bc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027be:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027c2:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c4:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c6:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80027ca:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027cc:	d063      	beq.n	8002896 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	f04f 0a00 	mov.w	sl, #0
 80027d2:	f8cd a004 	str.w	sl, [sp, #4]
 80027d6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027da:	4c3a      	ldr	r4, [pc, #232]	; (80028c4 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027dc:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80027e0:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80027e4:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80027e8:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80027ec:	9601      	str	r6, [sp, #4]
 80027ee:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80027f0:	f023 0603 	bic.w	r6, r3, #3
 80027f4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80027f8:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027fc:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002800:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002804:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002808:	270f      	movs	r7, #15
 800280a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800280e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002810:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002814:	d046      	beq.n	80028a4 <HAL_GPIO_Init+0x18c>
 8002816:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800281a:	42a0      	cmp	r0, r4
 800281c:	d044      	beq.n	80028a8 <HAL_GPIO_Init+0x190>
 800281e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002822:	42a0      	cmp	r0, r4
 8002824:	d042      	beq.n	80028ac <HAL_GPIO_Init+0x194>
 8002826:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800282a:	42a0      	cmp	r0, r4
 800282c:	d040      	beq.n	80028b0 <HAL_GPIO_Init+0x198>
 800282e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002832:	42a0      	cmp	r0, r4
 8002834:	d03e      	beq.n	80028b4 <HAL_GPIO_Init+0x19c>
 8002836:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800283a:	42a0      	cmp	r0, r4
 800283c:	d03c      	beq.n	80028b8 <HAL_GPIO_Init+0x1a0>
 800283e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002842:	42a0      	cmp	r0, r4
 8002844:	d03a      	beq.n	80028bc <HAL_GPIO_Init+0x1a4>
 8002846:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800284a:	42a0      	cmp	r0, r4
 800284c:	bf0c      	ite	eq
 800284e:	2407      	moveq	r4, #7
 8002850:	2408      	movne	r4, #8
 8002852:	fa04 f40e 	lsl.w	r4, r4, lr
 8002856:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002858:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 800285a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800285c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002860:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002862:	bf54      	ite	pl
 8002864:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002866:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800286a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800286c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800286e:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002870:	bf54      	ite	pl
 8002872:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002874:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002878:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800287a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800287e:	bf54      	ite	pl
 8002880:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002882:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002886:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002888:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800288a:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800288c:	bf54      	ite	pl
 800288e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002890:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002894:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002896:	3301      	adds	r3, #1
 8002898:	2b10      	cmp	r3, #16
 800289a:	f47f af43 	bne.w	8002724 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800289e:	b003      	add	sp, #12
 80028a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028a4:	4654      	mov	r4, sl
 80028a6:	e7d4      	b.n	8002852 <HAL_GPIO_Init+0x13a>
 80028a8:	2401      	movs	r4, #1
 80028aa:	e7d2      	b.n	8002852 <HAL_GPIO_Init+0x13a>
 80028ac:	2402      	movs	r4, #2
 80028ae:	e7d0      	b.n	8002852 <HAL_GPIO_Init+0x13a>
 80028b0:	2403      	movs	r4, #3
 80028b2:	e7ce      	b.n	8002852 <HAL_GPIO_Init+0x13a>
 80028b4:	2404      	movs	r4, #4
 80028b6:	e7cc      	b.n	8002852 <HAL_GPIO_Init+0x13a>
 80028b8:	2405      	movs	r4, #5
 80028ba:	e7ca      	b.n	8002852 <HAL_GPIO_Init+0x13a>
 80028bc:	2406      	movs	r4, #6
 80028be:	e7c8      	b.n	8002852 <HAL_GPIO_Init+0x13a>
 80028c0:	40013c00 	.word	0x40013c00
 80028c4:	40020000 	.word	0x40020000
 80028c8:	40023800 	.word	0x40023800

080028cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	b10a      	cbz	r2, 80028d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ce:	6181      	str	r1, [r0, #24]
  }
}
 80028d0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028d2:	0409      	lsls	r1, r1, #16
 80028d4:	e7fb      	b.n	80028ce <HAL_GPIO_WritePin+0x2>
	...

080028d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028da:	4604      	mov	r4, r0
 80028dc:	b908      	cbnz	r0, 80028e2 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80028de:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 80028e0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028ea:	b91b      	cbnz	r3, 80028f4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80028ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80028f0:	f7ff f848 	bl	8001984 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f4:	2324      	movs	r3, #36	; 0x24
 80028f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800290a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002912:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002914:	f000 fafc 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002918:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <HAL_I2C_Init+0x140>)
 800291a:	6865      	ldr	r5, [r4, #4]
 800291c:	429d      	cmp	r5, r3
 800291e:	bf94      	ite	ls
 8002920:	4b3e      	ldrls	r3, [pc, #248]	; (8002a1c <HAL_I2C_Init+0x144>)
 8002922:	4b3f      	ldrhi	r3, [pc, #252]	; (8002a20 <HAL_I2C_Init+0x148>)
 8002924:	4298      	cmp	r0, r3
 8002926:	bf8c      	ite	hi
 8002928:	2300      	movhi	r3, #0
 800292a:	2301      	movls	r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1d6      	bne.n	80028de <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002930:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002932:	4e39      	ldr	r6, [pc, #228]	; (8002a18 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002934:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_I2C_Init+0x14c>)
 8002938:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800293c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002940:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002942:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002944:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002946:	bf88      	it	hi
 8002948:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 800294c:	6a11      	ldr	r1, [r2, #32]
 800294e:	bf88      	it	hi
 8002950:	4373      	mulhi	r3, r6
 8002952:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002956:	bf84      	itt	hi
 8002958:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 800295c:	fbb3 f3f6 	udivhi	r3, r3, r6
 8002960:	3301      	adds	r3, #1
 8002962:	430b      	orrs	r3, r1
 8002964:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002966:	69d1      	ldr	r1, [r2, #28]
 8002968:	1e43      	subs	r3, r0, #1
 800296a:	482b      	ldr	r0, [pc, #172]	; (8002a18 <HAL_I2C_Init+0x140>)
 800296c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002970:	4285      	cmp	r5, r0
 8002972:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002976:	d832      	bhi.n	80029de <HAL_I2C_Init+0x106>
 8002978:	006d      	lsls	r5, r5, #1
 800297a:	f640 70fc 	movw	r0, #4092	; 0xffc
 800297e:	fbb3 f3f5 	udiv	r3, r3, r5
 8002982:	3301      	adds	r3, #1
 8002984:	4203      	tst	r3, r0
 8002986:	d042      	beq.n	8002a0e <HAL_I2C_Init+0x136>
 8002988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298c:	4319      	orrs	r1, r3
 800298e:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002990:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002994:	6811      	ldr	r1, [r2, #0]
 8002996:	4303      	orrs	r3, r0
 8002998:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800299c:	430b      	orrs	r3, r1
 800299e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a0:	6891      	ldr	r1, [r2, #8]
 80029a2:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80029a6:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80029aa:	4303      	orrs	r3, r0
 80029ac:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029b4:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80029b8:	68d1      	ldr	r1, [r2, #12]
 80029ba:	4303      	orrs	r3, r0
 80029bc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80029c0:	430b      	orrs	r3, r1
 80029c2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80029c4:	6813      	ldr	r3, [r2, #0]
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029cc:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029d6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80029dc:	e780      	b.n	80028e0 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029de:	68a0      	ldr	r0, [r4, #8]
 80029e0:	b950      	cbnz	r0, 80029f8 <HAL_I2C_Init+0x120>
 80029e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029e6:	fbb3 f3f5 	udiv	r3, r3, r5
 80029ea:	3301      	adds	r3, #1
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	b17b      	cbz	r3, 8002a12 <HAL_I2C_Init+0x13a>
 80029f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f6:	e7c9      	b.n	800298c <HAL_I2C_Init+0xb4>
 80029f8:	2019      	movs	r0, #25
 80029fa:	4368      	muls	r0, r5
 80029fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a00:	3301      	adds	r3, #1
 8002a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a06:	b123      	cbz	r3, 8002a12 <HAL_I2C_Init+0x13a>
 8002a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0c:	e7be      	b.n	800298c <HAL_I2C_Init+0xb4>
 8002a0e:	2304      	movs	r3, #4
 8002a10:	e7bc      	b.n	800298c <HAL_I2C_Init+0xb4>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e7ba      	b.n	800298c <HAL_I2C_Init+0xb4>
 8002a16:	bf00      	nop
 8002a18:	000186a0 	.word	0x000186a0
 8002a1c:	001e847f 	.word	0x001e847f
 8002a20:	003d08ff 	.word	0x003d08ff
 8002a24:	000f4240 	.word	0x000f4240

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	b340      	cbz	r0, 8002a82 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a30:	6803      	ldr	r3, [r0, #0]
 8002a32:	07dd      	lsls	r5, r3, #31
 8002a34:	d410      	bmi.n	8002a58 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	0798      	lsls	r0, r3, #30
 8002a3a:	d45b      	bmi.n	8002af4 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	071a      	lsls	r2, r3, #28
 8002a40:	f100 809d 	bmi.w	8002b7e <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	075b      	lsls	r3, r3, #29
 8002a48:	f100 80bd 	bmi.w	8002bc6 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4c:	69a0      	ldr	r0, [r4, #24]
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	f040 8124 	bne.w	8002c9c <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002a54:	2000      	movs	r0, #0
 8002a56:	e02c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a58:	4b8d      	ldr	r3, [pc, #564]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	f002 020c 	and.w	r2, r2, #12
 8002a60:	2a04      	cmp	r2, #4
 8002a62:	d007      	beq.n	8002a74 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6a:	2a08      	cmp	r2, #8
 8002a6c:	d10b      	bne.n	8002a86 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	0259      	lsls	r1, r3, #9
 8002a72:	d508      	bpl.n	8002a86 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	4b86      	ldr	r3, [pc, #536]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	039a      	lsls	r2, r3, #14
 8002a7a:	d5dc      	bpl.n	8002a36 <HAL_RCC_OscConfig+0xe>
 8002a7c:	6863      	ldr	r3, [r4, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1d9      	bne.n	8002a36 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002a82:	2001      	movs	r0, #1
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a86:	6863      	ldr	r3, [r4, #4]
 8002a88:	4d81      	ldr	r5, [pc, #516]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
 8002a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8e:	d113      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x90>
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a98:	f7ff f98c 	bl	8001db4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9c:	4e7c      	ldr	r6, [pc, #496]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8002a9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa0:	6833      	ldr	r3, [r6, #0]
 8002aa2:	039b      	lsls	r3, r3, #14
 8002aa4:	d4c7      	bmi.n	8002a36 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa6:	f7ff f985 	bl	8001db4 <HAL_GetTick>
 8002aaa:	1b40      	subs	r0, r0, r5
 8002aac:	2864      	cmp	r0, #100	; 0x64
 8002aae:	d9f7      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8002ab0:	2003      	movs	r0, #3
}
 8002ab2:	b002      	add	sp, #8
 8002ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002abc:	d104      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xa0>
 8002abe:	682b      	ldr	r3, [r5, #0]
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	602b      	str	r3, [r5, #0]
 8002ac6:	e7e3      	b.n	8002a90 <HAL_RCC_OscConfig+0x68>
 8002ac8:	682a      	ldr	r2, [r5, #0]
 8002aca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ace:	602a      	str	r2, [r5, #0]
 8002ad0:	682a      	ldr	r2, [r5, #0]
 8002ad2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ad6:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1dd      	bne.n	8002a98 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8002adc:	f7ff f96a 	bl	8001db4 <HAL_GetTick>
 8002ae0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	682b      	ldr	r3, [r5, #0]
 8002ae4:	039f      	lsls	r7, r3, #14
 8002ae6:	d5a6      	bpl.n	8002a36 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7ff f964 	bl	8001db4 <HAL_GetTick>
 8002aec:	1b80      	subs	r0, r0, r6
 8002aee:	2864      	cmp	r0, #100	; 0x64
 8002af0:	d9f7      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xba>
 8002af2:	e7dd      	b.n	8002ab0 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002af4:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	f012 0f0c 	tst.w	r2, #12
 8002afc:	d007      	beq.n	8002b0e <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b04:	2a08      	cmp	r2, #8
 8002b06:	d111      	bne.n	8002b2c <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	025e      	lsls	r6, r3, #9
 8002b0c:	d40e      	bmi.n	8002b2c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	4a60      	ldr	r2, [pc, #384]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
 8002b10:	6813      	ldr	r3, [r2, #0]
 8002b12:	079d      	lsls	r5, r3, #30
 8002b14:	d502      	bpl.n	8002b1c <HAL_RCC_OscConfig+0xf4>
 8002b16:	68e3      	ldr	r3, [r4, #12]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d1b2      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	6813      	ldr	r3, [r2, #0]
 8002b1e:	6921      	ldr	r1, [r4, #16]
 8002b20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b28:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	e787      	b.n	8002a3c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b2c:	68e2      	ldr	r2, [r4, #12]
 8002b2e:	4b59      	ldr	r3, [pc, #356]	; (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	b1b2      	cbz	r2, 8002b60 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b36:	f7ff f93d 	bl	8001db4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3a:	4d55      	ldr	r5, [pc, #340]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8002b3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3e:	682b      	ldr	r3, [r5, #0]
 8002b40:	0798      	lsls	r0, r3, #30
 8002b42:	d507      	bpl.n	8002b54 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	6922      	ldr	r2, [r4, #16]
 8002b48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002b50:	602b      	str	r3, [r5, #0]
 8002b52:	e773      	b.n	8002a3c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b54:	f7ff f92e 	bl	8001db4 <HAL_GetTick>
 8002b58:	1b80      	subs	r0, r0, r6
 8002b5a:	2802      	cmp	r0, #2
 8002b5c:	d9ef      	bls.n	8002b3e <HAL_RCC_OscConfig+0x116>
 8002b5e:	e7a7      	b.n	8002ab0 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8002b60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b62:	f7ff f927 	bl	8001db4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	4e4a      	ldr	r6, [pc, #296]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8002b68:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6a:	6833      	ldr	r3, [r6, #0]
 8002b6c:	0799      	lsls	r1, r3, #30
 8002b6e:	f57f af65 	bpl.w	8002a3c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b72:	f7ff f91f 	bl	8001db4 <HAL_GetTick>
 8002b76:	1b40      	subs	r0, r0, r5
 8002b78:	2802      	cmp	r0, #2
 8002b7a:	d9f6      	bls.n	8002b6a <HAL_RCC_OscConfig+0x142>
 8002b7c:	e798      	b.n	8002ab0 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b7e:	6962      	ldr	r2, [r4, #20]
 8002b80:	4b44      	ldr	r3, [pc, #272]	; (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	b182      	cbz	r2, 8002ba6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002b84:	2201      	movs	r2, #1
 8002b86:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002b8a:	f7ff f913 	bl	8001db4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	4e40      	ldr	r6, [pc, #256]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8002b90:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002b94:	079f      	lsls	r7, r3, #30
 8002b96:	f53f af55 	bmi.w	8002a44 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9a:	f7ff f90b 	bl	8001db4 <HAL_GetTick>
 8002b9e:	1b40      	subs	r0, r0, r5
 8002ba0:	2802      	cmp	r0, #2
 8002ba2:	d9f6      	bls.n	8002b92 <HAL_RCC_OscConfig+0x16a>
 8002ba4:	e784      	b.n	8002ab0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8002ba6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002baa:	f7ff f903 	bl	8001db4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bae:	4e38      	ldr	r6, [pc, #224]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8002bb0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002bb4:	0798      	lsls	r0, r3, #30
 8002bb6:	f57f af45 	bpl.w	8002a44 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bba:	f7ff f8fb 	bl	8001db4 <HAL_GetTick>
 8002bbe:	1b40      	subs	r0, r0, r5
 8002bc0:	2802      	cmp	r0, #2
 8002bc2:	d9f6      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x18a>
 8002bc4:	e774      	b.n	8002ab0 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc6:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
 8002bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bca:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002bce:	d128      	bne.n	8002c22 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	9201      	str	r2, [sp, #4]
 8002bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	9301      	str	r3, [sp, #4]
 8002be2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002be4:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	4d2c      	ldr	r5, [pc, #176]	; (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002be8:	682b      	ldr	r3, [r5, #0]
 8002bea:	05d9      	lsls	r1, r3, #23
 8002bec:	d51b      	bpl.n	8002c26 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bee:	68a3      	ldr	r3, [r4, #8]
 8002bf0:	4d27      	ldr	r5, [pc, #156]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d127      	bne.n	8002c46 <HAL_RCC_OscConfig+0x21e>
 8002bf6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002bfe:	f7ff f8d9 	bl	8001db4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c02:	4e23      	ldr	r6, [pc, #140]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8002c04:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002c0c:	079b      	lsls	r3, r3, #30
 8002c0e:	d539      	bpl.n	8002c84 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8002c10:	2f00      	cmp	r7, #0
 8002c12:	f43f af1b 	beq.w	8002a4c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c16:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <HAL_RCC_OscConfig+0x268>)
 8002c18:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c20:	e714      	b.n	8002a4c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2700      	movs	r7, #0
 8002c24:	e7df      	b.n	8002be6 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c26:	682b      	ldr	r3, [r5, #0]
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002c2e:	f7ff f8c1 	bl	8001db4 <HAL_GetTick>
 8002c32:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	05da      	lsls	r2, r3, #23
 8002c38:	d4d9      	bmi.n	8002bee <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3a:	f7ff f8bb 	bl	8001db4 <HAL_GetTick>
 8002c3e:	1b80      	subs	r0, r0, r6
 8002c40:	2802      	cmp	r0, #2
 8002c42:	d9f7      	bls.n	8002c34 <HAL_RCC_OscConfig+0x20c>
 8002c44:	e734      	b.n	8002ab0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d104      	bne.n	8002c54 <HAL_RCC_OscConfig+0x22c>
 8002c4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c4c:	f043 0304 	orr.w	r3, r3, #4
 8002c50:	672b      	str	r3, [r5, #112]	; 0x70
 8002c52:	e7d0      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1ce>
 8002c54:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002c56:	f022 0201 	bic.w	r2, r2, #1
 8002c5a:	672a      	str	r2, [r5, #112]	; 0x70
 8002c5c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002c5e:	f022 0204 	bic.w	r2, r2, #4
 8002c62:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ca      	bne.n	8002bfe <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8002c68:	f7ff f8a4 	bl	8001db4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002c70:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c72:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c74:	0798      	lsls	r0, r3, #30
 8002c76:	d5cb      	bpl.n	8002c10 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f7ff f89c 	bl	8001db4 <HAL_GetTick>
 8002c7c:	1b80      	subs	r0, r0, r6
 8002c7e:	4540      	cmp	r0, r8
 8002c80:	d9f7      	bls.n	8002c72 <HAL_RCC_OscConfig+0x24a>
 8002c82:	e715      	b.n	8002ab0 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7ff f896 	bl	8001db4 <HAL_GetTick>
 8002c88:	1b40      	subs	r0, r0, r5
 8002c8a:	4540      	cmp	r0, r8
 8002c8c:	d9bd      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1e2>
 8002c8e:	e70f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x88>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c9c:	4d36      	ldr	r5, [pc, #216]	; (8002d78 <HAL_RCC_OscConfig+0x350>)
 8002c9e:	68ab      	ldr	r3, [r5, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d03d      	beq.n	8002d24 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca8:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <HAL_RCC_OscConfig+0x354>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002cae:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb0:	d12b      	bne.n	8002d0a <HAL_RCC_OscConfig+0x2e2>
        tickstart = HAL_GetTick();
 8002cb2:	f7ff f87f 	bl	8001db4 <HAL_GetTick>
 8002cb6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb8:	682b      	ldr	r3, [r5, #0]
 8002cba:	0199      	lsls	r1, r3, #6
 8002cbc:	d41f      	bmi.n	8002cfe <HAL_RCC_OscConfig+0x2d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cbe:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002cc6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002cca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ccc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002cd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002cd2:	0852      	lsrs	r2, r2, #1
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002cda:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_RCC_OscConfig+0x354>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cde:	4d26      	ldr	r5, [pc, #152]	; (8002d78 <HAL_RCC_OscConfig+0x350>)
        __HAL_RCC_PLL_ENABLE();
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002ce4:	f7ff f866 	bl	8001db4 <HAL_GetTick>
 8002ce8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cea:	682b      	ldr	r3, [r5, #0]
 8002cec:	019a      	lsls	r2, r3, #6
 8002cee:	f53f aeb1 	bmi.w	8002a54 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7ff f85f 	bl	8001db4 <HAL_GetTick>
 8002cf6:	1b00      	subs	r0, r0, r4
 8002cf8:	2802      	cmp	r0, #2
 8002cfa:	d9f6      	bls.n	8002cea <HAL_RCC_OscConfig+0x2c2>
 8002cfc:	e6d8      	b.n	8002ab0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7ff f859 	bl	8001db4 <HAL_GetTick>
 8002d02:	1b80      	subs	r0, r0, r6
 8002d04:	2802      	cmp	r0, #2
 8002d06:	d9d7      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x290>
 8002d08:	e6d2      	b.n	8002ab0 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8002d0a:	f7ff f853 	bl	8001db4 <HAL_GetTick>
 8002d0e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d10:	682b      	ldr	r3, [r5, #0]
 8002d12:	019b      	lsls	r3, r3, #6
 8002d14:	f57f ae9e 	bpl.w	8002a54 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7ff f84c 	bl	8001db4 <HAL_GetTick>
 8002d1c:	1b00      	subs	r0, r0, r4
 8002d1e:	2802      	cmp	r0, #2
 8002d20:	d9f6      	bls.n	8002d10 <HAL_RCC_OscConfig+0x2e8>
 8002d22:	e6c5      	b.n	8002ab0 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d24:	2801      	cmp	r0, #1
 8002d26:	f43f aec4 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x8a>
        pll_config = RCC->PLLCFGR;
 8002d2a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d32:	4291      	cmp	r1, r2
 8002d34:	f47f aea5 	bne.w	8002a82 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d38:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	428a      	cmp	r2, r1
 8002d40:	f47f ae9f 	bne.w	8002a82 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d44:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d46:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002d50:	f47f ae97 	bne.w	8002a82 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002d56:	0852      	lsrs	r2, r2, #1
 8002d58:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002d5c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d5e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002d62:	f47f ae8e 	bne.w	8002a82 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d68:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d6c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002d70:	f43f ae70 	beq.w	8002a54 <HAL_RCC_OscConfig+0x2c>
 8002d74:	e685      	b.n	8002a82 <HAL_RCC_OscConfig+0x5a>
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	42470000 	.word	0x42470000

08002d80 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d80:	4913      	ldr	r1, [pc, #76]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002d82:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d84:	688b      	ldr	r3, [r1, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d01c      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x48>
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d11c      	bne.n	8002dcc <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d92:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d94:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d96:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d98:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9c:	bf14      	ite	ne
 8002d9e:	480d      	ldrne	r0, [pc, #52]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da0:	480d      	ldreq	r0, [pc, #52]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002da6:	bf18      	it	ne
 8002da8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002daa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dae:	fba1 0100 	umull	r0, r1, r1, r0
 8002db2:	f7fd fe83 	bl	8000abc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x50>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002dc2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002dc6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x54>)
 8002dca:	e7fc      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002dce:	e7fa      	b.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x46>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	017d7840 	.word	0x017d7840
 8002dd8:	00f42400 	.word	0x00f42400

08002ddc <HAL_RCC_ClockConfig>:
{
 8002ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002de0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002de2:	4604      	mov	r4, r0
 8002de4:	b910      	cbnz	r0, 8002dec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002de6:	2001      	movs	r0, #1
}
 8002de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dec:	4b43      	ldr	r3, [pc, #268]	; (8002efc <HAL_RCC_ClockConfig+0x120>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	f002 0207 	and.w	r2, r2, #7
 8002df4:	428a      	cmp	r2, r1
 8002df6:	d328      	bcc.n	8002e4a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df8:	6821      	ldr	r1, [r4, #0]
 8002dfa:	078f      	lsls	r7, r1, #30
 8002dfc:	d42d      	bmi.n	8002e5a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfe:	07c8      	lsls	r0, r1, #31
 8002e00:	d440      	bmi.n	8002e84 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e02:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <HAL_RCC_ClockConfig+0x120>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	f002 0207 	and.w	r2, r2, #7
 8002e0a:	42aa      	cmp	r2, r5
 8002e0c:	d865      	bhi.n	8002eda <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0e:	6822      	ldr	r2, [r4, #0]
 8002e10:	0751      	lsls	r1, r2, #29
 8002e12:	d46b      	bmi.n	8002eec <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e14:	0713      	lsls	r3, r2, #28
 8002e16:	d507      	bpl.n	8002e28 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e18:	4a39      	ldr	r2, [pc, #228]	; (8002f00 <HAL_RCC_ClockConfig+0x124>)
 8002e1a:	6921      	ldr	r1, [r4, #16]
 8002e1c:	6893      	ldr	r3, [r2, #8]
 8002e1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002e22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e26:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e28:	f7ff ffaa 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002e2c:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <HAL_RCC_ClockConfig+0x124>)
 8002e2e:	4a35      	ldr	r2, [pc, #212]	; (8002f04 <HAL_RCC_ClockConfig+0x128>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	40d8      	lsrs	r0, r3
 8002e3a:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <HAL_RCC_ClockConfig+0x12c>)
 8002e3c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002e3e:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_RCC_ClockConfig+0x130>)
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	f7fe ff6d 	bl	8001d20 <HAL_InitTick>
  return HAL_OK;
 8002e46:	2000      	movs	r0, #0
 8002e48:	e7ce      	b.n	8002de8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	b2ca      	uxtb	r2, r1
 8002e4c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	428b      	cmp	r3, r1
 8002e56:	d1c6      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xa>
 8002e58:	e7ce      	b.n	8002df8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_RCC_ClockConfig+0x124>)
 8002e5c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e60:	bf1e      	ittt	ne
 8002e62:	689a      	ldrne	r2, [r3, #8]
 8002e64:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002e68:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e6c:	bf42      	ittt	mi
 8002e6e:	689a      	ldrmi	r2, [r3, #8]
 8002e70:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002e74:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	68a0      	ldr	r0, [r4, #8]
 8002e7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e7e:	4302      	orrs	r2, r0
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	e7bc      	b.n	8002dfe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e84:	6862      	ldr	r2, [r4, #4]
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCC_ClockConfig+0x124>)
 8002e88:	2a01      	cmp	r2, #1
 8002e8a:	d11c      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e92:	d0a8      	beq.n	8002de6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e94:	4e1a      	ldr	r6, [pc, #104]	; (8002f00 <HAL_RCC_ClockConfig+0x124>)
 8002e96:	68b3      	ldr	r3, [r6, #8]
 8002e98:	f023 0303 	bic.w	r3, r3, #3
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002ea0:	f7fe ff88 	bl	8001db4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002ea8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eaa:	68b3      	ldr	r3, [r6, #8]
 8002eac:	6862      	ldr	r2, [r4, #4]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002eb6:	d0a4      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb8:	f7fe ff7c 	bl	8001db4 <HAL_GetTick>
 8002ebc:	1bc0      	subs	r0, r0, r7
 8002ebe:	4540      	cmp	r0, r8
 8002ec0:	d9f3      	bls.n	8002eaa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002ec2:	2003      	movs	r0, #3
 8002ec4:	e790      	b.n	8002de8 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ec6:	1e91      	subs	r1, r2, #2
 8002ec8:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eca:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ecc:	d802      	bhi.n	8002ed4 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ece:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ed2:	e7de      	b.n	8002e92 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	f013 0f02 	tst.w	r3, #2
 8002ed8:	e7db      	b.n	8002e92 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	b2ea      	uxtb	r2, r5
 8002edc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	42ab      	cmp	r3, r5
 8002ee6:	f47f af7e 	bne.w	8002de6 <HAL_RCC_ClockConfig+0xa>
 8002eea:	e790      	b.n	8002e0e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4904      	ldr	r1, [pc, #16]	; (8002f00 <HAL_RCC_ClockConfig+0x124>)
 8002eee:	68e0      	ldr	r0, [r4, #12]
 8002ef0:	688b      	ldr	r3, [r1, #8]
 8002ef2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002ef6:	4303      	orrs	r3, r0
 8002ef8:	608b      	str	r3, [r1, #8]
 8002efa:	e78b      	b.n	8002e14 <HAL_RCC_ClockConfig+0x38>
 8002efc:	40023c00 	.word	0x40023c00
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08004c13 	.word	0x08004c13
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	20000008 	.word	0x20000008

08002f10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002f12:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	4a03      	ldr	r2, [pc, #12]	; (8002f2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002f1e:	6810      	ldr	r0, [r2, #0]
}
 8002f20:	40d8      	lsrs	r0, r3
 8002f22:	4770      	bx	lr
 8002f24:	40023800 	.word	0x40023800
 8002f28:	08004c23 	.word	0x08004c23
 8002f2c:	20000000 	.word	0x20000000

08002f30 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002f3a:	5cd3      	ldrb	r3, [r2, r3]
 8002f3c:	4a03      	ldr	r2, [pc, #12]	; (8002f4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002f3e:	6810      	ldr	r0, [r2, #0]
}
 8002f40:	40d8      	lsrs	r0, r3
 8002f42:	4770      	bx	lr
 8002f44:	40023800 	.word	0x40023800
 8002f48:	08004c23 	.word	0x08004c23
 8002f4c:	20000000 	.word	0x20000000

08002f50 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f50:	6803      	ldr	r3, [r0, #0]
 8002f52:	f013 0f05 	tst.w	r3, #5
{
 8002f56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f58:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	f013 0302 	ands.w	r3, r3, #2
 8002f62:	d12a      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x6a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f64:	2000      	movs	r0, #0
 8002f66:	e026      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x66>
    __HAL_RCC_PLLI2S_DISABLE();
 8002f68:	4b42      	ldr	r3, [pc, #264]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f6a:	4e43      	ldr	r6, [pc, #268]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002f70:	f7fe ff20 	bl	8001db4 <HAL_GetTick>
 8002f74:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f76:	6833      	ldr	r3, [r6, #0]
 8002f78:	011f      	lsls	r7, r3, #4
 8002f7a:	d416      	bmi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f7c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002f80:	071b      	lsls	r3, r3, #28
 8002f82:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f86:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f8c:	4e3a      	ldr	r6, [pc, #232]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_ENABLE();
 8002f8e:	2201      	movs	r2, #1
 8002f90:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002f92:	f7fe ff0f 	bl	8001db4 <HAL_GetTick>
 8002f96:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f98:	6833      	ldr	r3, [r6, #0]
 8002f9a:	0118      	lsls	r0, r3, #4
 8002f9c:	d4de      	bmi.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f9e:	f7fe ff09 	bl	8001db4 <HAL_GetTick>
 8002fa2:	1b40      	subs	r0, r0, r5
 8002fa4:	2802      	cmp	r0, #2
 8002fa6:	d9f7      	bls.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002fa8:	e004      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002faa:	f7fe ff03 	bl	8001db4 <HAL_GetTick>
 8002fae:	1b40      	subs	r0, r0, r5
 8002fb0:	2802      	cmp	r0, #2
 8002fb2:	d9e0      	bls.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8002fb4:	2003      	movs	r0, #3
}
 8002fb6:	b003      	add	sp, #12
 8002fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	4b2e      	ldr	r3, [pc, #184]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    PWR->CR |= PWR_CR_DBP;
 8002fc0:	4d2e      	ldr	r5, [pc, #184]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fda:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002fdc:	f7fe feea 	bl	8001db4 <HAL_GetTick>
 8002fe0:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002fe2:	682b      	ldr	r3, [r5, #0]
 8002fe4:	05d9      	lsls	r1, r3, #23
 8002fe6:	d51b      	bpl.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fe8:	4d23      	ldr	r5, [pc, #140]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fea:	68e2      	ldr	r2, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fee:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002ff2:	d11b      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff4:	68e3      	ldr	r3, [r4, #12]
 8002ff6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002ffa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002ffe:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003000:	d134      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003002:	6891      	ldr	r1, [r2, #8]
 8003004:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003008:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800300c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003010:	4301      	orrs	r1, r0
 8003012:	6091      	str	r1, [r2, #8]
 8003014:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301a:	430b      	orrs	r3, r1
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
 800301e:	e7a1      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003020:	f7fe fec8 	bl	8001db4 <HAL_GetTick>
 8003024:	1b80      	subs	r0, r0, r6
 8003026:	2802      	cmp	r0, #2
 8003028:	d9db      	bls.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800302a:	e7c3      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800302c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003030:	4293      	cmp	r3, r2
 8003032:	d0df      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003034:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003036:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003038:	2101      	movs	r1, #1
 800303a:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800303e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003042:	2100      	movs	r1, #0
 8003044:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8003048:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800304a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800304c:	07da      	lsls	r2, r3, #31
 800304e:	d5d1      	bpl.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tickstart = HAL_GetTick();
 8003050:	f7fe feb0 	bl	8001db4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003058:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800305c:	079b      	lsls	r3, r3, #30
 800305e:	d4c9      	bmi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7fe fea8 	bl	8001db4 <HAL_GetTick>
 8003064:	1b80      	subs	r0, r0, r6
 8003066:	42b8      	cmp	r0, r7
 8003068:	d9f7      	bls.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800306a:	e7a3      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800306c:	6891      	ldr	r1, [r2, #8]
 800306e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003072:	e7ce      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003074:	42470000 	.word	0x42470000
 8003078:	40023800 	.word	0x40023800
 800307c:	40007000 	.word	0x40007000

08003080 <HAL_RTC_AlarmAEventCallback>:
 8003080:	4770      	bx	lr
	...

08003084 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003084:	6803      	ldr	r3, [r0, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	04d2      	lsls	r2, r2, #19
{
 800308a:	b510      	push	{r4, lr}
 800308c:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800308e:	d50a      	bpl.n	80030a6 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	05d9      	lsls	r1, r3, #23
 8003094:	d507      	bpl.n	80030a6 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003096:	f7ff fff3 	bl	8003080 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800309a:	6822      	ldr	r2, [r4, #0]
 800309c:	68d3      	ldr	r3, [r2, #12]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f463 73c0 	orn	r3, r3, #384	; 0x180
 80030a4:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	0492      	lsls	r2, r2, #18
 80030ac:	d50b      	bpl.n	80030c6 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	059b      	lsls	r3, r3, #22
 80030b2:	d508      	bpl.n	80030c6 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80030b4:	4620      	mov	r0, r4
 80030b6:	f000 f9fd 	bl	80034b4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80030ba:	6822      	ldr	r2, [r4, #0]
 80030bc:	68d3      	ldr	r3, [r2, #12]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f463 7320 	orn	r3, r3, #640	; 0x280
 80030c4:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80030c6:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_RTC_AlarmIRQHandler+0x50>)
 80030c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030cc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80030ce:	2301      	movs	r3, #1
 80030d0:	7763      	strb	r3, [r4, #29]
}
 80030d2:	bd10      	pop	{r4, pc}
 80030d4:	40013c00 	.word	0x40013c00

080030d8 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80030d8:	6802      	ldr	r2, [r0, #0]
{
 80030da:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80030dc:	68d3      	ldr	r3, [r2, #12]
 80030de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030e2:	60d3      	str	r3, [r2, #12]
{
 80030e4:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 80030e6:	f7fe fe65 	bl	8001db4 <HAL_GetTick>
 80030ea:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	069b      	lsls	r3, r3, #26
 80030f2:	d501      	bpl.n	80030f8 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80030f4:	2000      	movs	r0, #0
}
 80030f6:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030f8:	f7fe fe5c 	bl	8001db4 <HAL_GetTick>
 80030fc:	1b40      	subs	r0, r0, r5
 80030fe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003102:	d9f3      	bls.n	80030ec <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8003104:	2003      	movs	r0, #3
 8003106:	e7f6      	b.n	80030f6 <HAL_RTC_WaitForSynchro+0x1e>

08003108 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800310a:	6803      	ldr	r3, [r0, #0]
 800310c:	68dc      	ldr	r4, [r3, #12]
 800310e:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 8003112:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003114:	d117      	bne.n	8003146 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800311c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800311e:	f7fe fe49 	bl	8001db4 <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003122:	2704      	movs	r7, #4
    tickstart = HAL_GetTick();
 8003124:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003126:	682b      	ldr	r3, [r5, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	065b      	lsls	r3, r3, #25
 800312c:	d400      	bmi.n	8003130 <RTC_EnterInitMode+0x28>
 800312e:	b10c      	cbz	r4, 8003134 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
}
 8003130:	4620      	mov	r0, r4
 8003132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003134:	f7fe fe3e 	bl	8001db4 <HAL_GetTick>
 8003138:	1b80      	subs	r0, r0, r6
 800313a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 800313e:	bf84      	itt	hi
 8003140:	776f      	strbhi	r7, [r5, #29]
        status = HAL_ERROR;
 8003142:	2401      	movhi	r4, #1
 8003144:	e7ef      	b.n	8003126 <RTC_EnterInitMode+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8003146:	2400      	movs	r4, #0
 8003148:	e7f2      	b.n	8003130 <RTC_EnterInitMode+0x28>

0800314a <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800314a:	6803      	ldr	r3, [r0, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 8003152:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003154:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	069b      	lsls	r3, r3, #26
{
 800315a:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800315c:	d501      	bpl.n	8003162 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800315e:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8003160:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003162:	f7ff ffb9 	bl	80030d8 <HAL_RTC_WaitForSynchro>
 8003166:	2800      	cmp	r0, #0
 8003168:	d0f9      	beq.n	800315e <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800316a:	2304      	movs	r3, #4
 800316c:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 800316e:	2001      	movs	r0, #1
 8003170:	e7f6      	b.n	8003160 <RTC_ExitInitMode+0x16>

08003172 <HAL_RTC_Init>:
{
 8003172:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8003174:	4604      	mov	r4, r0
 8003176:	2800      	cmp	r0, #0
 8003178:	d03a      	beq.n	80031f0 <HAL_RTC_Init+0x7e>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800317a:	7f43      	ldrb	r3, [r0, #29]
 800317c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003180:	b913      	cbnz	r3, 8003188 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8003182:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003184:	f7fe fc34 	bl	80019f0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003188:	2302      	movs	r3, #2
 800318a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	22ca      	movs	r2, #202	; 0xca
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
 8003192:	2253      	movs	r2, #83	; 0x53
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8003196:	4620      	mov	r0, r4
 8003198:	f7ff ffb6 	bl	8003108 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800319c:	bb20      	cbnz	r0, 80031e8 <HAL_RTC_Init+0x76>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800319e:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031a0:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80031a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ac:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031ae:	6862      	ldr	r2, [r4, #4]
 80031b0:	6899      	ldr	r1, [r3, #8]
 80031b2:	4302      	orrs	r2, r0
 80031b4:	6960      	ldr	r0, [r4, #20]
 80031b6:	4302      	orrs	r2, r0
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80031bc:	68e2      	ldr	r2, [r4, #12]
 80031be:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68a1      	ldr	r1, [r4, #8]
 80031c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80031c8:	611a      	str	r2, [r3, #16]
    status = RTC_ExitInitMode(hrtc);
 80031ca:	4620      	mov	r0, r4
 80031cc:	f7ff ffbd 	bl	800314a <RTC_ExitInitMode>
  if (status == HAL_OK)
 80031d0:	b950      	cbnz	r0, 80031e8 <HAL_RTC_Init+0x76>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80031d2:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031d4:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80031d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e0:	430a      	orrs	r2, r1
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 80031e4:	2301      	movs	r3, #1
 80031e6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	22ff      	movs	r2, #255	; 0xff
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80031ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80031f0:	2001      	movs	r0, #1
 80031f2:	e7fc      	b.n	80031ee <HAL_RTC_Init+0x7c>

080031f4 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint8_t bcdhigh = 0U;

  while (number >= 10U)
 80031f4:	2300      	movs	r3, #0
 80031f6:	2809      	cmp	r0, #9
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	f103 0301 	add.w	r3, r3, #1
 80031fe:	d803      	bhi.n	8003208 <RTC_ByteToBcd2+0x14>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003200:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
 8003204:	b2c0      	uxtb	r0, r0
 8003206:	4770      	bx	lr
    number -= 10U;
 8003208:	380a      	subs	r0, #10
 800320a:	b2c0      	uxtb	r0, r0
 800320c:	e7f3      	b.n	80031f6 <RTC_ByteToBcd2+0x2>

0800320e <HAL_RTC_SetTime>:
{
 800320e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8003212:	7f03      	ldrb	r3, [r0, #28]
 8003214:	2b01      	cmp	r3, #1
{
 8003216:	4606      	mov	r6, r0
 8003218:	460f      	mov	r7, r1
 800321a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800321e:	d041      	beq.n	80032a4 <HAL_RTC_SetTime+0x96>
 8003220:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003222:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8003224:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003226:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8003228:	7838      	ldrb	r0, [r7, #0]
 800322a:	787d      	ldrb	r5, [r7, #1]
 800322c:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800322e:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8003230:	2a00      	cmp	r2, #0
 8003232:	d139      	bne.n	80032a8 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003234:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8003238:	bf08      	it	eq
 800323a:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800323c:	f7ff ffda 	bl	80031f4 <RTC_ByteToBcd2>
 8003240:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003242:	4628      	mov	r0, r5
 8003244:	f7ff ffd6 	bl	80031f4 <RTC_ByteToBcd2>
 8003248:	4605      	mov	r5, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800324a:	4620      	mov	r0, r4
 800324c:	f7ff ffd2 	bl	80031f4 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003250:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003252:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8003256:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800325a:	ea43 2405 	orr.w	r4, r3, r5, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800325e:	23ca      	movs	r3, #202	; 0xca
 8003260:	624b      	str	r3, [r1, #36]	; 0x24
 8003262:	2353      	movs	r3, #83	; 0x53
 8003264:	624b      	str	r3, [r1, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8003266:	4630      	mov	r0, r6
 8003268:	f7ff ff4e 	bl	8003108 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800326c:	b9a8      	cbnz	r0, 800329a <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800326e:	6832      	ldr	r2, [r6, #0]
 8003270:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8003274:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8003278:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800327a:	6893      	ldr	r3, [r2, #8]
 800327c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003280:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003282:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8003286:	6891      	ldr	r1, [r2, #8]
 8003288:	4303      	orrs	r3, r0
 800328a:	430b      	orrs	r3, r1
 800328c:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 800328e:	4630      	mov	r0, r6
 8003290:	f7ff ff5b 	bl	800314a <RTC_ExitInitMode>
  if (status == HAL_OK)
 8003294:	b908      	cbnz	r0, 800329a <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8003296:	2301      	movs	r3, #1
 8003298:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800329a:	6833      	ldr	r3, [r6, #0]
 800329c:	22ff      	movs	r2, #255	; 0xff
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 80032a0:	2300      	movs	r3, #0
 80032a2:	7733      	strb	r3, [r6, #28]
}
 80032a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032a8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 80032ac:	bf08      	it	eq
 80032ae:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80032b0:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80032b2:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032b4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80032b8:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032bc:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 80032c0:	e7cd      	b.n	800325e <HAL_RTC_SetTime+0x50>

080032c2 <HAL_RTC_SetDate>:
{
 80032c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80032c4:	7f03      	ldrb	r3, [r0, #28]
 80032c6:	2b01      	cmp	r3, #1
{
 80032c8:	4605      	mov	r5, r0
 80032ca:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 80032ce:	d039      	beq.n	8003344 <HAL_RTC_SetDate+0x82>
 80032d0:	2001      	movs	r0, #1
 80032d2:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032d4:	776b      	strb	r3, [r5, #29]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80032d6:	780c      	ldrb	r4, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80032d8:	78c8      	ldrb	r0, [r1, #3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032da:	784e      	ldrb	r6, [r1, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80032dc:	788f      	ldrb	r7, [r1, #2]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80032de:	0364      	lsls	r4, r4, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032e0:	bb92      	cbnz	r2, 8003348 <HAL_RTC_SetDate+0x86>
 80032e2:	06f3      	lsls	r3, r6, #27
 80032e4:	d503      	bpl.n	80032ee <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80032e6:	f026 0610 	bic.w	r6, r6, #16
 80032ea:	360a      	adds	r6, #10
 80032ec:	704e      	strb	r6, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80032ee:	f7ff ff81 	bl	80031f4 <RTC_ByteToBcd2>
 80032f2:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80032f4:	7848      	ldrb	r0, [r1, #1]
 80032f6:	f7ff ff7d 	bl	80031f4 <RTC_ByteToBcd2>
 80032fa:	4601      	mov	r1, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80032fc:	4638      	mov	r0, r7
 80032fe:	f7ff ff79 	bl	80031f4 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003302:	ea40 0304 	orr.w	r3, r0, r4
 8003306:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800330a:	ea43 2401 	orr.w	r4, r3, r1, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800330e:	682b      	ldr	r3, [r5, #0]
 8003310:	22ca      	movs	r2, #202	; 0xca
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
 8003314:	2253      	movs	r2, #83	; 0x53
 8003316:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8003318:	4628      	mov	r0, r5
 800331a:	f7ff fef5 	bl	8003108 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800331e:	b958      	cbnz	r0, 8003338 <HAL_RTC_SetDate+0x76>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003320:	682a      	ldr	r2, [r5, #0]
 8003322:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8003326:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 800332a:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 800332c:	4628      	mov	r0, r5
 800332e:	f7ff ff0c 	bl	800314a <RTC_ExitInitMode>
  if (status == HAL_OK)
 8003332:	b908      	cbnz	r0, 8003338 <HAL_RTC_SetDate+0x76>
    hrtc->State = HAL_RTC_STATE_READY;
 8003334:	2301      	movs	r3, #1
 8003336:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	22ff      	movs	r2, #255	; 0xff
 800333c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 800333e:	2300      	movs	r3, #0
 8003340:	772b      	strb	r3, [r5, #28]
}
 8003342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8003344:	4618      	mov	r0, r3
 8003346:	e7fc      	b.n	8003342 <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003348:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800334c:	433c      	orrs	r4, r7
 800334e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8003352:	e7dc      	b.n	800330e <HAL_RTC_SetDate+0x4c>

08003354 <HAL_RTC_SetAlarm_IT>:
{
 8003354:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003358:	4b54      	ldr	r3, [pc, #336]	; (80034ac <HAL_RTC_SetAlarm_IT+0x158>)
 800335a:	681e      	ldr	r6, [r3, #0]
 800335c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003360:	fbb6 f6f3 	udiv	r6, r6, r3
 8003364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003368:	435e      	muls	r6, r3
  __HAL_LOCK(hrtc);
 800336a:	7f03      	ldrb	r3, [r0, #28]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800336c:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hrtc);
 800336e:	2b01      	cmp	r3, #1
{
 8003370:	4605      	mov	r5, r0
 8003372:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8003376:	d04a      	beq.n	800340e <HAL_RTC_SetAlarm_IT+0xba>
 8003378:	2001      	movs	r0, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800337a:	682c      	ldr	r4, [r5, #0]
  __HAL_LOCK(hrtc);
 800337c:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800337e:	776b      	strb	r3, [r5, #29]
  if (Format == RTC_FORMAT_BIN)
 8003380:	7808      	ldrb	r0, [r1, #0]
 8003382:	f891 8001 	ldrb.w	r8, [r1, #1]
 8003386:	f891 9002 	ldrb.w	r9, [r1, #2]
 800338a:	f891 7020 	ldrb.w	r7, [r1, #32]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800338e:	68a3      	ldr	r3, [r4, #8]
  if (Format == RTC_FORMAT_BIN)
 8003390:	2a00      	cmp	r2, #0
 8003392:	d140      	bne.n	8003416 <HAL_RTC_SetAlarm_IT+0xc2>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003394:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003398:	bf08      	it	eq
 800339a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800339c:	f7ff ff2a 	bl	80031f4 <RTC_ByteToBcd2>
 80033a0:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80033a2:	4640      	mov	r0, r8
 80033a4:	f7ff ff26 	bl	80031f4 <RTC_ByteToBcd2>
 80033a8:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80033aa:	4648      	mov	r0, r9
 80033ac:	f7ff ff22 	bl	80031f4 <RTC_ByteToBcd2>
 80033b0:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80033b2:	4638      	mov	r0, r7
 80033b4:	f7ff ff1e 	bl	80031f4 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80033b8:	69ca      	ldr	r2, [r1, #28]
 80033ba:	694b      	ldr	r3, [r1, #20]
 80033bc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80033be:	78ca      	ldrb	r2, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80033c0:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 80033c4:	ea43 0309 	orr.w	r3, r3, r9
 80033c8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80033cc:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 80033d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80033d4:	698a      	ldr	r2, [r1, #24]
 80033d6:	6848      	ldr	r0, [r1, #4]
 80033d8:	4310      	orrs	r0, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033da:	22ca      	movs	r2, #202	; 0xca
 80033dc:	6262      	str	r2, [r4, #36]	; 0x24
 80033de:	2253      	movs	r2, #83	; 0x53
 80033e0:	6262      	str	r2, [r4, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80033e2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80033e4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80033e8:	68a2      	ldr	r2, [r4, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 80033ea:	d144      	bne.n	8003476 <HAL_RTC_SetAlarm_IT+0x122>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80033ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033f0:	60a2      	str	r2, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80033f2:	68e2      	ldr	r2, [r4, #12]
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80033fa:	60e2      	str	r2, [r4, #12]
      if (count-- == 0U)
 80033fc:	9a01      	ldr	r2, [sp, #4]
 80033fe:	1e51      	subs	r1, r2, #1
 8003400:	9101      	str	r1, [sp, #4]
 8003402:	b9da      	cbnz	r2, 800343c <HAL_RTC_SetAlarm_IT+0xe8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003404:	23ff      	movs	r3, #255	; 0xff
 8003406:	6263      	str	r3, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 800340c:	772a      	strb	r2, [r5, #28]
}
 800340e:	4618      	mov	r0, r3
 8003410:	b002      	add	sp, #8
 8003412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003416:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800341a:	694a      	ldr	r2, [r1, #20]
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800341c:	bf08      	it	eq
 800341e:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003420:	69cb      	ldr	r3, [r1, #28]
 8003422:	4313      	orrs	r3, r2
 8003424:	ea43 0309 	orr.w	r3, r3, r9
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003428:	78ca      	ldrb	r2, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800342a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800342e:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8003432:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8003436:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 800343a:	e7cb      	b.n	80033d4 <HAL_RTC_SetAlarm_IT+0x80>
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800343c:	68e2      	ldr	r2, [r4, #12]
 800343e:	07d1      	lsls	r1, r2, #31
 8003440:	d5dc      	bpl.n	80033fc <HAL_RTC_SetAlarm_IT+0xa8>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003442:	61e3      	str	r3, [r4, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003444:	6460      	str	r0, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003446:	68a3      	ldr	r3, [r4, #8]
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800344e:	68a3      	ldr	r3, [r4, #8]
 8003450:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003454:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003456:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <HAL_RTC_SetAlarm_IT+0x15c>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800345e:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003466:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003468:	23ff      	movs	r3, #255	; 0xff
 800346a:	6263      	str	r3, [r4, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800346c:	2301      	movs	r3, #1
 800346e:	776b      	strb	r3, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8003470:	2300      	movs	r3, #0
 8003472:	772b      	strb	r3, [r5, #28]
  return HAL_OK;
 8003474:	e7cb      	b.n	800340e <HAL_RTC_SetAlarm_IT+0xba>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003476:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800347a:	60a2      	str	r2, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800347c:	68e2      	ldr	r2, [r4, #12]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003484:	60e2      	str	r2, [r4, #12]
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003486:	9601      	str	r6, [sp, #4]
      if (count-- == 0U)
 8003488:	9a01      	ldr	r2, [sp, #4]
 800348a:	1e51      	subs	r1, r2, #1
 800348c:	9101      	str	r1, [sp, #4]
 800348e:	2a00      	cmp	r2, #0
 8003490:	d0b8      	beq.n	8003404 <HAL_RTC_SetAlarm_IT+0xb0>
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003492:	68e2      	ldr	r2, [r4, #12]
 8003494:	0792      	lsls	r2, r2, #30
 8003496:	d5f7      	bpl.n	8003488 <HAL_RTC_SetAlarm_IT+0x134>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003498:	6223      	str	r3, [r4, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800349a:	64a0      	str	r0, [r4, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800349c:	68a3      	ldr	r3, [r4, #8]
 800349e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a2:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80034a4:	68a3      	ldr	r3, [r4, #8]
 80034a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034aa:	e7d3      	b.n	8003454 <HAL_RTC_SetAlarm_IT+0x100>
 80034ac:	20000000 	.word	0x20000000
 80034b0:	40013c00 	.word	0x40013c00

080034b4 <HAL_RTCEx_AlarmBEventCallback>:
 80034b4:	4770      	bx	lr
	...

080034b8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b8:	6a03      	ldr	r3, [r0, #32]
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c0:	6a03      	ldr	r3, [r0, #32]
{
 80034c2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034ca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80034ce:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034d0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80034d2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80034d6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034d8:	4d0e      	ldr	r5, [pc, #56]	; (8003514 <TIM_OC1_SetConfig+0x5c>)
 80034da:	42a8      	cmp	r0, r5
 80034dc:	d002      	beq.n	80034e4 <TIM_OC1_SetConfig+0x2c>
 80034de:	4e0e      	ldr	r6, [pc, #56]	; (8003518 <TIM_OC1_SetConfig+0x60>)
 80034e0:	42b0      	cmp	r0, r6
 80034e2:	d110      	bne.n	8003506 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034e4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80034e6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80034ea:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ec:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80034ee:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f2:	d002      	beq.n	80034fa <TIM_OC1_SetConfig+0x42>
 80034f4:	4d08      	ldr	r5, [pc, #32]	; (8003518 <TIM_OC1_SetConfig+0x60>)
 80034f6:	42a8      	cmp	r0, r5
 80034f8:	d105      	bne.n	8003506 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034fa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034fe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003502:	4335      	orrs	r5, r6
 8003504:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003506:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003508:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800350a:	684a      	ldr	r2, [r1, #4]
 800350c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350e:	6203      	str	r3, [r0, #32]
}
 8003510:	bd70      	pop	{r4, r5, r6, pc}
 8003512:	bf00      	nop
 8003514:	40010000 	.word	0x40010000
 8003518:	40010400 	.word	0x40010400

0800351c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800351c:	6a03      	ldr	r3, [r0, #32]
 800351e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003522:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003524:	6a03      	ldr	r3, [r0, #32]
{
 8003526:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800352a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800352c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800352e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003532:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003534:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003536:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800353a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800353e:	4d11      	ldr	r5, [pc, #68]	; (8003584 <TIM_OC3_SetConfig+0x68>)
 8003540:	42a8      	cmp	r0, r5
 8003542:	d003      	beq.n	800354c <TIM_OC3_SetConfig+0x30>
 8003544:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003548:	42a8      	cmp	r0, r5
 800354a:	d114      	bne.n	8003576 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800354c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800354e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003552:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003556:	4d0b      	ldr	r5, [pc, #44]	; (8003584 <TIM_OC3_SetConfig+0x68>)
 8003558:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800355a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355e:	d003      	beq.n	8003568 <TIM_OC3_SetConfig+0x4c>
 8003560:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003564:	42a8      	cmp	r0, r5
 8003566:	d106      	bne.n	8003576 <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003568:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800356c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003570:	4335      	orrs	r5, r6
 8003572:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003576:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003578:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800357a:	684a      	ldr	r2, [r1, #4]
 800357c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800357e:	6203      	str	r3, [r0, #32]
}
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000

08003588 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003588:	6a03      	ldr	r3, [r0, #32]
 800358a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800358e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003590:	6a03      	ldr	r3, [r0, #32]
{
 8003592:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003594:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003596:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003598:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800359a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800359e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80035a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ac:	4d08      	ldr	r5, [pc, #32]	; (80035d0 <TIM_OC4_SetConfig+0x48>)
 80035ae:	42a8      	cmp	r0, r5
 80035b0:	d003      	beq.n	80035ba <TIM_OC4_SetConfig+0x32>
 80035b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80035b6:	42a8      	cmp	r0, r5
 80035b8:	d104      	bne.n	80035c4 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035ba:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035bc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035c0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c8:	684a      	ldr	r2, [r1, #4]
 80035ca:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035cc:	6203      	str	r3, [r0, #32]
}
 80035ce:	bd30      	pop	{r4, r5, pc}
 80035d0:	40010000 	.word	0x40010000

080035d4 <HAL_TIM_PWM_MspInit>:
 80035d4:	4770      	bx	lr

080035d6 <HAL_TIM_PeriodElapsedCallback>:
 80035d6:	4770      	bx	lr

080035d8 <HAL_TIM_OC_DelayElapsedCallback>:
 80035d8:	4770      	bx	lr

080035da <HAL_TIM_IC_CaptureCallback>:
 80035da:	4770      	bx	lr

080035dc <HAL_TIM_PWM_PulseFinishedCallback>:
 80035dc:	4770      	bx	lr

080035de <HAL_TIM_TriggerCallback>:
 80035de:	4770      	bx	lr

080035e0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035e0:	6803      	ldr	r3, [r0, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	0791      	lsls	r1, r2, #30
{
 80035e6:	b510      	push	{r4, lr}
 80035e8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ea:	d50e      	bpl.n	800360a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	0792      	lsls	r2, r2, #30
 80035f0:	d50b      	bpl.n	800360a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035f2:	f06f 0202 	mvn.w	r2, #2
 80035f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f8:	2201      	movs	r2, #1
 80035fa:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	079b      	lsls	r3, r3, #30
 8003600:	d077      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003602:	f7ff ffea 	bl	80035da <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	2300      	movs	r3, #0
 8003608:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	0750      	lsls	r0, r2, #29
 8003610:	d510      	bpl.n	8003634 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	0751      	lsls	r1, r2, #29
 8003616:	d50d      	bpl.n	8003634 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003618:	f06f 0204 	mvn.w	r2, #4
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800361e:	2202      	movs	r2, #2
 8003620:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003628:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800362a:	d068      	beq.n	80036fe <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800362c:	f7ff ffd5 	bl	80035da <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003630:	2300      	movs	r3, #0
 8003632:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	0712      	lsls	r2, r2, #28
 800363a:	d50f      	bpl.n	800365c <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	0710      	lsls	r0, r2, #28
 8003640:	d50c      	bpl.n	800365c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003642:	f06f 0208 	mvn.w	r2, #8
 8003646:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003648:	2204      	movs	r2, #4
 800364a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003650:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003652:	d05a      	beq.n	800370a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003654:	f7ff ffc1 	bl	80035da <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003658:	2300      	movs	r3, #0
 800365a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	06d2      	lsls	r2, r2, #27
 8003662:	d510      	bpl.n	8003686 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	06d0      	lsls	r0, r2, #27
 8003668:	d50d      	bpl.n	8003686 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800366a:	f06f 0210 	mvn.w	r2, #16
 800366e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003670:	2208      	movs	r2, #8
 8003672:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800367c:	d04b      	beq.n	8003716 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	f7ff ffac 	bl	80035da <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	2300      	movs	r3, #0
 8003684:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	07d1      	lsls	r1, r2, #31
 800368c:	d508      	bpl.n	80036a0 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	07d2      	lsls	r2, r2, #31
 8003692:	d505      	bpl.n	80036a0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003694:	f06f 0201 	mvn.w	r2, #1
 8003698:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800369a:	4620      	mov	r0, r4
 800369c:	f7ff ff9b 	bl	80035d6 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	0610      	lsls	r0, r2, #24
 80036a6:	d508      	bpl.n	80036ba <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	0611      	lsls	r1, r2, #24
 80036ac:	d505      	bpl.n	80036ba <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80036b4:	4620      	mov	r0, r4
 80036b6:	f000 fa64 	bl	8003b82 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	0652      	lsls	r2, r2, #25
 80036c0:	d508      	bpl.n	80036d4 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	0650      	lsls	r0, r2, #25
 80036c6:	d505      	bpl.n	80036d4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036cc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7ff ff85 	bl	80035de <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	0691      	lsls	r1, r2, #26
 80036da:	d522      	bpl.n	8003722 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	0692      	lsls	r2, r2, #26
 80036e0:	d51f      	bpl.n	8003722 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80036e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036e8:	611a      	str	r2, [r3, #16]
}
 80036ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80036ee:	f000 ba47 	b.w	8003b80 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	f7ff ff71 	bl	80035d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f6:	4620      	mov	r0, r4
 80036f8:	f7ff ff70 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
 80036fc:	e783      	b.n	8003606 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	f7ff ff6b 	bl	80035d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003702:	4620      	mov	r0, r4
 8003704:	f7ff ff6a 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003708:	e792      	b.n	8003630 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	f7ff ff65 	bl	80035d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370e:	4620      	mov	r0, r4
 8003710:	f7ff ff64 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003714:	e7a0      	b.n	8003658 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003716:	f7ff ff5f 	bl	80035d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371a:	4620      	mov	r0, r4
 800371c:	f7ff ff5e 	bl	80035dc <HAL_TIM_PWM_PulseFinishedCallback>
 8003720:	e7af      	b.n	8003682 <HAL_TIM_IRQHandler+0xa2>
}
 8003722:	bd10      	pop	{r4, pc}

08003724 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003724:	4a30      	ldr	r2, [pc, #192]	; (80037e8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003726:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003728:	4290      	cmp	r0, r2
 800372a:	d012      	beq.n	8003752 <TIM_Base_SetConfig+0x2e>
 800372c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003730:	d00f      	beq.n	8003752 <TIM_Base_SetConfig+0x2e>
 8003732:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003736:	4290      	cmp	r0, r2
 8003738:	d00b      	beq.n	8003752 <TIM_Base_SetConfig+0x2e>
 800373a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800373e:	4290      	cmp	r0, r2
 8003740:	d007      	beq.n	8003752 <TIM_Base_SetConfig+0x2e>
 8003742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003746:	4290      	cmp	r0, r2
 8003748:	d003      	beq.n	8003752 <TIM_Base_SetConfig+0x2e>
 800374a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800374e:	4290      	cmp	r0, r2
 8003750:	d119      	bne.n	8003786 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8003752:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003758:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375a:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <TIM_Base_SetConfig+0xc4>)
 800375c:	4290      	cmp	r0, r2
 800375e:	d029      	beq.n	80037b4 <TIM_Base_SetConfig+0x90>
 8003760:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003764:	d026      	beq.n	80037b4 <TIM_Base_SetConfig+0x90>
 8003766:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800376a:	4290      	cmp	r0, r2
 800376c:	d022      	beq.n	80037b4 <TIM_Base_SetConfig+0x90>
 800376e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003772:	4290      	cmp	r0, r2
 8003774:	d01e      	beq.n	80037b4 <TIM_Base_SetConfig+0x90>
 8003776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800377a:	4290      	cmp	r0, r2
 800377c:	d01a      	beq.n	80037b4 <TIM_Base_SetConfig+0x90>
 800377e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003782:	4290      	cmp	r0, r2
 8003784:	d016      	beq.n	80037b4 <TIM_Base_SetConfig+0x90>
 8003786:	4a19      	ldr	r2, [pc, #100]	; (80037ec <TIM_Base_SetConfig+0xc8>)
 8003788:	4290      	cmp	r0, r2
 800378a:	d013      	beq.n	80037b4 <TIM_Base_SetConfig+0x90>
 800378c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003790:	4290      	cmp	r0, r2
 8003792:	d00f      	beq.n	80037b4 <TIM_Base_SetConfig+0x90>
 8003794:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003798:	4290      	cmp	r0, r2
 800379a:	d00b      	beq.n	80037b4 <TIM_Base_SetConfig+0x90>
 800379c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80037a0:	4290      	cmp	r0, r2
 80037a2:	d007      	beq.n	80037b4 <TIM_Base_SetConfig+0x90>
 80037a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037a8:	4290      	cmp	r0, r2
 80037aa:	d003      	beq.n	80037b4 <TIM_Base_SetConfig+0x90>
 80037ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037b0:	4290      	cmp	r0, r2
 80037b2:	d103      	bne.n	80037bc <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ba:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037bc:	694a      	ldr	r2, [r1, #20]
 80037be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80037c4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c6:	688b      	ldr	r3, [r1, #8]
 80037c8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80037ca:	680b      	ldr	r3, [r1, #0]
 80037cc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <TIM_Base_SetConfig+0xc4>)
 80037d0:	4298      	cmp	r0, r3
 80037d2:	d003      	beq.n	80037dc <TIM_Base_SetConfig+0xb8>
 80037d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037d8:	4298      	cmp	r0, r3
 80037da:	d101      	bne.n	80037e0 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80037dc:	690b      	ldr	r3, [r1, #16]
 80037de:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80037e0:	2301      	movs	r3, #1
 80037e2:	6143      	str	r3, [r0, #20]
}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40014000 	.word	0x40014000

080037f0 <HAL_TIM_Base_Init>:
{
 80037f0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80037f2:	4604      	mov	r4, r0
 80037f4:	b330      	cbz	r0, 8003844 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80037f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037fe:	b91b      	cbnz	r3, 8003808 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003800:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003804:	f7fe f91c 	bl	8001a40 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003810:	1d21      	adds	r1, r4, #4
 8003812:	f7ff ff87 	bl	8003724 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003816:	2301      	movs	r3, #1
 8003818:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 800381c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003822:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003826:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800382a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003836:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800383a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800383e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003842:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003844:	2001      	movs	r0, #1
 8003846:	e7fc      	b.n	8003842 <HAL_TIM_Base_Init+0x52>

08003848 <HAL_TIM_PWM_Init>:
{
 8003848:	b510      	push	{r4, lr}
  if (htim == NULL)
 800384a:	4604      	mov	r4, r0
 800384c:	b330      	cbz	r0, 800389c <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800384e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003852:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003856:	b91b      	cbnz	r3, 8003860 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003858:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800385c:	f7ff feba 	bl	80035d4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003862:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003868:	1d21      	adds	r1, r4, #4
 800386a:	f7ff ff5b 	bl	8003724 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386e:	2301      	movs	r3, #1
 8003870:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8003874:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003876:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800387a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800387e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003882:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003886:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800388a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800388e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003896:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800389a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800389c:	2001      	movs	r0, #1
 800389e:	e7fc      	b.n	800389a <HAL_TIM_PWM_Init+0x52>

080038a0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a0:	6a03      	ldr	r3, [r0, #32]
 80038a2:	f023 0310 	bic.w	r3, r3, #16
 80038a6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80038a8:	6a03      	ldr	r3, [r0, #32]
{
 80038aa:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 80038ac:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80038ae:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038b2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038ba:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80038bc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038c4:	4d10      	ldr	r5, [pc, #64]	; (8003908 <TIM_OC2_SetConfig+0x68>)
 80038c6:	42a8      	cmp	r0, r5
 80038c8:	d003      	beq.n	80038d2 <TIM_OC2_SetConfig+0x32>
 80038ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80038ce:	42a8      	cmp	r0, r5
 80038d0:	d114      	bne.n	80038fc <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80038d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038dc:	4d0a      	ldr	r5, [pc, #40]	; (8003908 <TIM_OC2_SetConfig+0x68>)
 80038de:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80038e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e4:	d003      	beq.n	80038ee <TIM_OC2_SetConfig+0x4e>
 80038e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80038ea:	42a8      	cmp	r0, r5
 80038ec:	d106      	bne.n	80038fc <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038ee:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038f2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038f6:	4335      	orrs	r5, r6
 80038f8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80038fc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80038fe:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003900:	684a      	ldr	r2, [r1, #4]
 8003902:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003904:	6203      	str	r3, [r0, #32]
}
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	40010000 	.word	0x40010000

0800390c <HAL_TIM_PWM_ConfigChannel>:
{
 800390c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800390e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003912:	2b01      	cmp	r3, #1
{
 8003914:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8003916:	d050      	beq.n	80039ba <HAL_TIM_PWM_ConfigChannel+0xae>
 8003918:	2301      	movs	r3, #1
  switch (Channel)
 800391a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800391c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003920:	d03b      	beq.n	800399a <HAL_TIM_PWM_ConfigChannel+0x8e>
 8003922:	d807      	bhi.n	8003934 <HAL_TIM_PWM_ConfigChannel+0x28>
 8003924:	b1c2      	cbz	r2, 8003958 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8003926:	2a04      	cmp	r2, #4
 8003928:	d027      	beq.n	800397a <HAL_TIM_PWM_ConfigChannel+0x6e>
 800392a:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 800392c:	2300      	movs	r3, #0
 800392e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8003932:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8003934:	2a0c      	cmp	r2, #12
 8003936:	d1f8      	bne.n	800392a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003938:	6800      	ldr	r0, [r0, #0]
 800393a:	f7ff fe25 	bl	8003588 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800393e:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003940:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003942:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003946:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003948:	69c3      	ldr	r3, [r0, #28]
 800394a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800394e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003950:	69c3      	ldr	r3, [r0, #28]
 8003952:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003956:	e02e      	b.n	80039b6 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003958:	6800      	ldr	r0, [r0, #0]
 800395a:	f7ff fdad 	bl	80034b8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800395e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003960:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003962:	f043 0308 	orr.w	r3, r3, #8
 8003966:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003968:	6983      	ldr	r3, [r0, #24]
 800396a:	f023 0304 	bic.w	r3, r3, #4
 800396e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003970:	6983      	ldr	r3, [r0, #24]
 8003972:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003974:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003976:	2000      	movs	r0, #0
      break;
 8003978:	e7d8      	b.n	800392c <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	f7ff ff90 	bl	80038a0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003980:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003982:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003988:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800398a:	6983      	ldr	r3, [r0, #24]
 800398c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003990:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003992:	6983      	ldr	r3, [r0, #24]
 8003994:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003998:	e7ec      	b.n	8003974 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800399a:	6800      	ldr	r0, [r0, #0]
 800399c:	f7ff fdbe 	bl	800351c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a0:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039a2:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a4:	f043 0308 	orr.w	r3, r3, #8
 80039a8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039aa:	69c3      	ldr	r3, [r0, #28]
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039b2:	69c3      	ldr	r3, [r0, #28]
 80039b4:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039b6:	61c3      	str	r3, [r0, #28]
 80039b8:	e7dd      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 80039ba:	2002      	movs	r0, #2
 80039bc:	e7b9      	b.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x26>

080039be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039be:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c0:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c2:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c8:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80039cc:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ce:	6083      	str	r3, [r0, #8]
}
 80039d0:	bd10      	pop	{r4, pc}

080039d2 <HAL_TIM_ConfigClockSource>:
{
 80039d2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80039d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039d8:	2b01      	cmp	r3, #1
{
 80039da:	4604      	mov	r4, r0
 80039dc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80039e0:	f000 808e 	beq.w	8003b00 <HAL_TIM_ConfigClockSource+0x12e>
 80039e4:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80039e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80039ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80039ee:	6800      	ldr	r0, [r0, #0]
 80039f0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80039fa:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80039fc:	680b      	ldr	r3, [r1, #0]
 80039fe:	2b60      	cmp	r3, #96	; 0x60
 8003a00:	d04f      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0xd0>
 8003a02:	d832      	bhi.n	8003a6a <HAL_TIM_ConfigClockSource+0x98>
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d064      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x100>
 8003a08:	d816      	bhi.n	8003a38 <HAL_TIM_ConfigClockSource+0x66>
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d00d      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0x58>
 8003a0e:	d80a      	bhi.n	8003a26 <HAL_TIM_ConfigClockSource+0x54>
 8003a10:	f033 0110 	bics.w	r1, r3, #16
 8003a14:	d009      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003a22:	4610      	mov	r0, r2
 8003a24:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8003a26:	2b30      	cmp	r3, #48	; 0x30
 8003a28:	d1f5      	bne.n	8003a16 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8003a2a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f043 0307 	orr.w	r3, r3, #7
 8003a36:	e028      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8003a38:	2b50      	cmp	r3, #80	; 0x50
 8003a3a:	d1ec      	bne.n	8003a16 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3c:	684a      	ldr	r2, [r1, #4]
 8003a3e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003a40:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a42:	6a03      	ldr	r3, [r0, #32]
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a4c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003a58:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003a5a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a5c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a5e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a64:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003a68:	e00f      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6e:	d00d      	beq.n	8003a8c <HAL_TIM_ConfigClockSource+0xba>
 8003a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a74:	d00c      	beq.n	8003a90 <HAL_TIM_ConfigClockSource+0xbe>
 8003a76:	2b70      	cmp	r3, #112	; 0x70
 8003a78:	d1cd      	bne.n	8003a16 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003a7a:	68cb      	ldr	r3, [r1, #12]
 8003a7c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a80:	f7ff ff9d 	bl	80039be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a84:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8003a8a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	e7c2      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003a90:	68cb      	ldr	r3, [r1, #12]
 8003a92:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a96:	f7ff ff92 	bl	80039be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a9a:	6883      	ldr	r3, [r0, #8]
 8003a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa0:	e7f3      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0xb8>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa2:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa4:	684d      	ldr	r5, [r1, #4]
 8003aa6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa8:	f023 0310 	bic.w	r3, r3, #16
 8003aac:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aae:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003ab0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ab2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ab6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003abe:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003ac2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ac4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003ac6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003acc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003ad0:	e7db      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad2:	684a      	ldr	r2, [r1, #4]
 8003ad4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003ad6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad8:	6a03      	ldr	r3, [r0, #32]
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ae2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aea:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003aee:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003af0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003af2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003af4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003afa:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003afe:	e7c4      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8003b00:	461a      	mov	r2, r3
 8003b02:	e78e      	b.n	8003a22 <HAL_TIM_ConfigClockSource+0x50>

08003b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b04:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b06:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	f04f 0302 	mov.w	r3, #2
 8003b10:	d032      	beq.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b16:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b18:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8003b1a:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003b1c:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b1e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b22:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b24:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b26:	4c15      	ldr	r4, [pc, #84]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003b28:	42a3      	cmp	r3, r4
 8003b2a:	d01a      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d017      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b32:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8003b36:	42a3      	cmp	r3, r4
 8003b38:	d013      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b3a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003b3e:	42a3      	cmp	r3, r4
 8003b40:	d00f      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b42:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003b46:	42a3      	cmp	r3, r4
 8003b48:	d00b      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b4a:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003b4e:	42a3      	cmp	r3, r4
 8003b50:	d007      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b52:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8003b56:	42a3      	cmp	r3, r4
 8003b58:	d003      	beq.n	8003b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003b5a:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003b5e:	42a3      	cmp	r3, r4
 8003b60:	d104      	bne.n	8003b6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b62:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b68:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b72:	2300      	movs	r3, #0
 8003b74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003b78:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003b7a:	bd30      	pop	{r4, r5, pc}
 8003b7c:	40010000 	.word	0x40010000

08003b80 <HAL_TIMEx_CommutCallback>:
 8003b80:	4770      	bx	lr

08003b82 <HAL_TIMEx_BreakCallback>:
 8003b82:	4770      	bx	lr

08003b84 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b84:	6802      	ldr	r2, [r0, #0]
 8003b86:	68c1      	ldr	r1, [r0, #12]
 8003b88:	6913      	ldr	r3, [r2, #16]
 8003b8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b8e:	430b      	orrs	r3, r1
{
 8003b90:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b92:	6113      	str	r3, [r2, #16]
{
 8003b94:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b96:	6883      	ldr	r3, [r0, #8]
 8003b98:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003b9a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b9c:	4303      	orrs	r3, r0
 8003b9e:	6968      	ldr	r0, [r5, #20]
 8003ba0:	4303      	orrs	r3, r0
 8003ba2:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003ba4:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003ba8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bac:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bb2:	6953      	ldr	r3, [r2, #20]
 8003bb4:	69a9      	ldr	r1, [r5, #24]
 8003bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bbe:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <UART_SetConfig+0xb8>)
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d003      	beq.n	8003bcc <UART_SetConfig+0x48>
 8003bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d123      	bne.n	8003c14 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bcc:	f7ff f9b0 	bl	8002f30 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd0:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bd2:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bd8:	e9d5 4600 	ldrd	r4, r6, [r5]
 8003bdc:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003be0:	d11b      	bne.n	8003c1a <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003be2:	19b2      	adds	r2, r6, r6
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	415b      	adcs	r3, r3
 8003bea:	f7fc ff67 	bl	8000abc <__aeabi_uldivmod>
 8003bee:	2264      	movs	r2, #100	; 0x64
 8003bf0:	fbb0 f1f2 	udiv	r1, r0, r2
 8003bf4:	fb02 0311 	mls	r3, r2, r1, r0
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	3332      	adds	r3, #50	; 0x32
 8003bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c00:	f003 0207 	and.w	r2, r3, #7
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003c0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c0e:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c10:	60a3      	str	r3, [r4, #8]
  }
}
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7ff f97c 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 8003c18:	e7da      	b.n	8003bd0 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c1a:	00b2      	lsls	r2, r6, #2
 8003c1c:	0fb3      	lsrs	r3, r6, #30
 8003c1e:	f7fc ff4d 	bl	8000abc <__aeabi_uldivmod>
 8003c22:	2264      	movs	r2, #100	; 0x64
 8003c24:	fbb0 f1f2 	udiv	r1, r0, r2
 8003c28:	fb02 0311 	mls	r3, r2, r1, r0
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	3332      	adds	r3, #50	; 0x32
 8003c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c34:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003c38:	e7ea      	b.n	8003c10 <UART_SetConfig+0x8c>
 8003c3a:	bf00      	nop
 8003c3c:	40011000 	.word	0x40011000

08003c40 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	4604      	mov	r4, r0
 8003c44:	460e      	mov	r6, r1
 8003c46:	4617      	mov	r7, r2
 8003c48:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4a:	6822      	ldr	r2, [r4, #0]
 8003c4c:	6813      	ldr	r3, [r2, #0]
 8003c4e:	ea36 0303 	bics.w	r3, r6, r3
 8003c52:	d101      	bne.n	8003c58 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003c54:	2000      	movs	r0, #0
 8003c56:	e028      	b.n	8003caa <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8003c58:	1c6b      	adds	r3, r5, #1
 8003c5a:	d0f7      	beq.n	8003c4c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c5c:	b125      	cbz	r5, 8003c68 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8003c5e:	f7fe f8a9 	bl	8001db4 <HAL_GetTick>
 8003c62:	1bc0      	subs	r0, r0, r7
 8003c64:	4285      	cmp	r5, r0
 8003c66:	d2f0      	bcs.n	8003c4a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c68:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	f102 030c 	add.w	r3, r2, #12
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	320c      	adds	r2, #12
 8003c78:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8003c7c:	6821      	ldr	r1, [r4, #0]
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d1f2      	bne.n	8003c68 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	f101 0314 	add.w	r3, r1, #20
 8003c86:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	f101 0014 	add.w	r0, r1, #20
 8003c92:	e840 3200 	strex	r2, r3, [r0]
 8003c96:	2a00      	cmp	r2, #0
 8003c98:	d1f3      	bne.n	8003c82 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8003ca0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8003ca8:	2003      	movs	r0, #3
}
 8003caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003cac <HAL_UART_Init>:
{
 8003cac:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003cae:	4604      	mov	r4, r0
 8003cb0:	b340      	cbz	r0, 8003d04 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cba:	b91b      	cbnz	r3, 8003cc4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003cbc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003cc0:	f7fd ff1e 	bl	8001b00 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003cc4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003cc6:	2324      	movs	r3, #36	; 0x24
 8003cc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003ccc:	68d3      	ldr	r3, [r2, #12]
 8003cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cd2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f7ff ff55 	bl	8003b84 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ce2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cea:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cf2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003cf6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf8:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cfe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003d02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d04:	2001      	movs	r0, #1
 8003d06:	e7fc      	b.n	8003d02 <HAL_UART_Init+0x56>

08003d08 <HAL_UART_Transmit>:
{
 8003d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d0a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003d0c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8003d10:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8003d12:	2a20      	cmp	r2, #32
{
 8003d14:	4604      	mov	r4, r0
 8003d16:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8003d18:	d149      	bne.n	8003dae <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8003d1a:	2900      	cmp	r1, #0
 8003d1c:	d045      	beq.n	8003daa <HAL_UART_Transmit+0xa2>
 8003d1e:	2f00      	cmp	r7, #0
 8003d20:	d043      	beq.n	8003daa <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8003d22:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003d26:	2a01      	cmp	r2, #1
 8003d28:	d041      	beq.n	8003dae <HAL_UART_Transmit+0xa6>
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d32:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d36:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8003d3a:	f7fe f83b 	bl	8001db4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d3e:	68a1      	ldr	r1, [r4, #8]
 8003d40:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8003d42:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003d48:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8003d4a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d4c:	d103      	bne.n	8003d56 <HAL_UART_Transmit+0x4e>
 8003d4e:	6921      	ldr	r1, [r4, #16]
 8003d50:	b909      	cbnz	r1, 8003d56 <HAL_UART_Transmit+0x4e>
 8003d52:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003d54:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8003d56:	2100      	movs	r1, #0
 8003d58:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003d5c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003d5e:	b289      	uxth	r1, r1
 8003d60:	b941      	cbnz	r1, 8003d74 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d62:	2140      	movs	r1, #64	; 0x40
 8003d64:	4620      	mov	r0, r4
 8003d66:	f7ff ff6b 	bl	8003c40 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003d6a:	b960      	cbnz	r0, 8003d86 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8003d72:	e009      	b.n	8003d88 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	4620      	mov	r0, r4
 8003d78:	e9cd 2300 	strd	r2, r3, [sp]
 8003d7c:	f7ff ff60 	bl	8003c40 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d84:	b110      	cbz	r0, 8003d8c <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8003d86:	2003      	movs	r0, #3
}
 8003d88:	b003      	add	sp, #12
 8003d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d8c:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8003d8e:	b94e      	cbnz	r6, 8003da4 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d90:	f835 1b02 	ldrh.w	r1, [r5], #2
 8003d94:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d98:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8003d9a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003d9c:	3901      	subs	r1, #1
 8003d9e:	b289      	uxth	r1, r1
 8003da0:	84e1      	strh	r1, [r4, #38]	; 0x26
 8003da2:	e7db      	b.n	8003d5c <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003da4:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003da8:	e7f6      	b.n	8003d98 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8003daa:	2001      	movs	r0, #1
 8003dac:	e7ec      	b.n	8003d88 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8003dae:	2002      	movs	r0, #2
 8003db0:	e7ea      	b.n	8003d88 <HAL_UART_Transmit+0x80>

08003db2 <_ZdlPvj>:
 8003db2:	f000 b811 	b.w	8003dd8 <_ZdlPv>

08003db6 <_Znwj>:
 8003db6:	2801      	cmp	r0, #1
 8003db8:	bf38      	it	cc
 8003dba:	2001      	movcc	r0, #1
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f000 f81b 	bl	8003dfc <malloc>
 8003dc6:	b100      	cbz	r0, 8003dca <_Znwj+0x14>
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	f000 f807 	bl	8003ddc <_ZSt15get_new_handlerv>
 8003dce:	b908      	cbnz	r0, 8003dd4 <_Znwj+0x1e>
 8003dd0:	f000 f80c 	bl	8003dec <abort>
 8003dd4:	4780      	blx	r0
 8003dd6:	e7f3      	b.n	8003dc0 <_Znwj+0xa>

08003dd8 <_ZdlPv>:
 8003dd8:	f000 b818 	b.w	8003e0c <free>

08003ddc <_ZSt15get_new_handlerv>:
 8003ddc:	4b02      	ldr	r3, [pc, #8]	; (8003de8 <_ZSt15get_new_handlerv+0xc>)
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	f3bf 8f5b 	dmb	ish
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20000704 	.word	0x20000704

08003dec <abort>:
 8003dec:	b508      	push	{r3, lr}
 8003dee:	2006      	movs	r0, #6
 8003df0:	f000 f924 	bl	800403c <raise>
 8003df4:	2001      	movs	r0, #1
 8003df6:	f7fd ff39 	bl	8001c6c <_exit>
	...

08003dfc <malloc>:
 8003dfc:	4b02      	ldr	r3, [pc, #8]	; (8003e08 <malloc+0xc>)
 8003dfe:	4601      	mov	r1, r0
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	f000 b82b 	b.w	8003e5c <_malloc_r>
 8003e06:	bf00      	nop
 8003e08:	2000005c 	.word	0x2000005c

08003e0c <free>:
 8003e0c:	4b02      	ldr	r3, [pc, #8]	; (8003e18 <free+0xc>)
 8003e0e:	4601      	mov	r1, r0
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	f000 b96b 	b.w	80040ec <_free_r>
 8003e16:	bf00      	nop
 8003e18:	2000005c 	.word	0x2000005c

08003e1c <sbrk_aligned>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	4e0e      	ldr	r6, [pc, #56]	; (8003e58 <sbrk_aligned+0x3c>)
 8003e20:	460c      	mov	r4, r1
 8003e22:	6831      	ldr	r1, [r6, #0]
 8003e24:	4605      	mov	r5, r0
 8003e26:	b911      	cbnz	r1, 8003e2e <sbrk_aligned+0x12>
 8003e28:	f000 f924 	bl	8004074 <_sbrk_r>
 8003e2c:	6030      	str	r0, [r6, #0]
 8003e2e:	4621      	mov	r1, r4
 8003e30:	4628      	mov	r0, r5
 8003e32:	f000 f91f 	bl	8004074 <_sbrk_r>
 8003e36:	1c43      	adds	r3, r0, #1
 8003e38:	d00a      	beq.n	8003e50 <sbrk_aligned+0x34>
 8003e3a:	1cc4      	adds	r4, r0, #3
 8003e3c:	f024 0403 	bic.w	r4, r4, #3
 8003e40:	42a0      	cmp	r0, r4
 8003e42:	d007      	beq.n	8003e54 <sbrk_aligned+0x38>
 8003e44:	1a21      	subs	r1, r4, r0
 8003e46:	4628      	mov	r0, r5
 8003e48:	f000 f914 	bl	8004074 <_sbrk_r>
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d101      	bne.n	8003e54 <sbrk_aligned+0x38>
 8003e50:	f04f 34ff 	mov.w	r4, #4294967295
 8003e54:	4620      	mov	r0, r4
 8003e56:	bd70      	pop	{r4, r5, r6, pc}
 8003e58:	2000070c 	.word	0x2000070c

08003e5c <_malloc_r>:
 8003e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e60:	1ccd      	adds	r5, r1, #3
 8003e62:	f025 0503 	bic.w	r5, r5, #3
 8003e66:	3508      	adds	r5, #8
 8003e68:	2d0c      	cmp	r5, #12
 8003e6a:	bf38      	it	cc
 8003e6c:	250c      	movcc	r5, #12
 8003e6e:	2d00      	cmp	r5, #0
 8003e70:	4607      	mov	r7, r0
 8003e72:	db01      	blt.n	8003e78 <_malloc_r+0x1c>
 8003e74:	42a9      	cmp	r1, r5
 8003e76:	d905      	bls.n	8003e84 <_malloc_r+0x28>
 8003e78:	230c      	movs	r3, #12
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	4630      	mov	r0, r6
 8003e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f58 <_malloc_r+0xfc>
 8003e88:	f000 f868 	bl	8003f5c <__malloc_lock>
 8003e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e90:	461c      	mov	r4, r3
 8003e92:	bb5c      	cbnz	r4, 8003eec <_malloc_r+0x90>
 8003e94:	4629      	mov	r1, r5
 8003e96:	4638      	mov	r0, r7
 8003e98:	f7ff ffc0 	bl	8003e1c <sbrk_aligned>
 8003e9c:	1c43      	adds	r3, r0, #1
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	d155      	bne.n	8003f4e <_malloc_r+0xf2>
 8003ea2:	f8d8 4000 	ldr.w	r4, [r8]
 8003ea6:	4626      	mov	r6, r4
 8003ea8:	2e00      	cmp	r6, #0
 8003eaa:	d145      	bne.n	8003f38 <_malloc_r+0xdc>
 8003eac:	2c00      	cmp	r4, #0
 8003eae:	d048      	beq.n	8003f42 <_malloc_r+0xe6>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	4631      	mov	r1, r6
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	eb04 0903 	add.w	r9, r4, r3
 8003eba:	f000 f8db 	bl	8004074 <_sbrk_r>
 8003ebe:	4581      	cmp	r9, r0
 8003ec0:	d13f      	bne.n	8003f42 <_malloc_r+0xe6>
 8003ec2:	6821      	ldr	r1, [r4, #0]
 8003ec4:	1a6d      	subs	r5, r5, r1
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	4638      	mov	r0, r7
 8003eca:	f7ff ffa7 	bl	8003e1c <sbrk_aligned>
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d037      	beq.n	8003f42 <_malloc_r+0xe6>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	442b      	add	r3, r5
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d038      	beq.n	8003f52 <_malloc_r+0xf6>
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	42a2      	cmp	r2, r4
 8003ee4:	d12b      	bne.n	8003f3e <_malloc_r+0xe2>
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	e00f      	b.n	8003f0c <_malloc_r+0xb0>
 8003eec:	6822      	ldr	r2, [r4, #0]
 8003eee:	1b52      	subs	r2, r2, r5
 8003ef0:	d41f      	bmi.n	8003f32 <_malloc_r+0xd6>
 8003ef2:	2a0b      	cmp	r2, #11
 8003ef4:	d917      	bls.n	8003f26 <_malloc_r+0xca>
 8003ef6:	1961      	adds	r1, r4, r5
 8003ef8:	42a3      	cmp	r3, r4
 8003efa:	6025      	str	r5, [r4, #0]
 8003efc:	bf18      	it	ne
 8003efe:	6059      	strne	r1, [r3, #4]
 8003f00:	6863      	ldr	r3, [r4, #4]
 8003f02:	bf08      	it	eq
 8003f04:	f8c8 1000 	streq.w	r1, [r8]
 8003f08:	5162      	str	r2, [r4, r5]
 8003f0a:	604b      	str	r3, [r1, #4]
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	f104 060b 	add.w	r6, r4, #11
 8003f12:	f000 f829 	bl	8003f68 <__malloc_unlock>
 8003f16:	f026 0607 	bic.w	r6, r6, #7
 8003f1a:	1d23      	adds	r3, r4, #4
 8003f1c:	1af2      	subs	r2, r6, r3
 8003f1e:	d0ae      	beq.n	8003e7e <_malloc_r+0x22>
 8003f20:	1b9b      	subs	r3, r3, r6
 8003f22:	50a3      	str	r3, [r4, r2]
 8003f24:	e7ab      	b.n	8003e7e <_malloc_r+0x22>
 8003f26:	42a3      	cmp	r3, r4
 8003f28:	6862      	ldr	r2, [r4, #4]
 8003f2a:	d1dd      	bne.n	8003ee8 <_malloc_r+0x8c>
 8003f2c:	f8c8 2000 	str.w	r2, [r8]
 8003f30:	e7ec      	b.n	8003f0c <_malloc_r+0xb0>
 8003f32:	4623      	mov	r3, r4
 8003f34:	6864      	ldr	r4, [r4, #4]
 8003f36:	e7ac      	b.n	8003e92 <_malloc_r+0x36>
 8003f38:	4634      	mov	r4, r6
 8003f3a:	6876      	ldr	r6, [r6, #4]
 8003f3c:	e7b4      	b.n	8003ea8 <_malloc_r+0x4c>
 8003f3e:	4613      	mov	r3, r2
 8003f40:	e7cc      	b.n	8003edc <_malloc_r+0x80>
 8003f42:	230c      	movs	r3, #12
 8003f44:	603b      	str	r3, [r7, #0]
 8003f46:	4638      	mov	r0, r7
 8003f48:	f000 f80e 	bl	8003f68 <__malloc_unlock>
 8003f4c:	e797      	b.n	8003e7e <_malloc_r+0x22>
 8003f4e:	6025      	str	r5, [r4, #0]
 8003f50:	e7dc      	b.n	8003f0c <_malloc_r+0xb0>
 8003f52:	605b      	str	r3, [r3, #4]
 8003f54:	deff      	udf	#255	; 0xff
 8003f56:	bf00      	nop
 8003f58:	20000708 	.word	0x20000708

08003f5c <__malloc_lock>:
 8003f5c:	4801      	ldr	r0, [pc, #4]	; (8003f64 <__malloc_lock+0x8>)
 8003f5e:	f000 b8c3 	b.w	80040e8 <__retarget_lock_acquire_recursive>
 8003f62:	bf00      	nop
 8003f64:	2000084c 	.word	0x2000084c

08003f68 <__malloc_unlock>:
 8003f68:	4801      	ldr	r0, [pc, #4]	; (8003f70 <__malloc_unlock+0x8>)
 8003f6a:	f000 b8be 	b.w	80040ea <__retarget_lock_release_recursive>
 8003f6e:	bf00      	nop
 8003f70:	2000084c 	.word	0x2000084c

08003f74 <sniprintf>:
 8003f74:	b40c      	push	{r2, r3}
 8003f76:	b530      	push	{r4, r5, lr}
 8003f78:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <sniprintf+0x64>)
 8003f7a:	1e0c      	subs	r4, r1, #0
 8003f7c:	681d      	ldr	r5, [r3, #0]
 8003f7e:	b09d      	sub	sp, #116	; 0x74
 8003f80:	da08      	bge.n	8003f94 <sniprintf+0x20>
 8003f82:	238b      	movs	r3, #139	; 0x8b
 8003f84:	602b      	str	r3, [r5, #0]
 8003f86:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8a:	b01d      	add	sp, #116	; 0x74
 8003f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f90:	b002      	add	sp, #8
 8003f92:	4770      	bx	lr
 8003f94:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003f98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f9c:	bf14      	ite	ne
 8003f9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003fa2:	4623      	moveq	r3, r4
 8003fa4:	9304      	str	r3, [sp, #16]
 8003fa6:	9307      	str	r3, [sp, #28]
 8003fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fac:	9002      	str	r0, [sp, #8]
 8003fae:	9006      	str	r0, [sp, #24]
 8003fb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003fb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003fb6:	ab21      	add	r3, sp, #132	; 0x84
 8003fb8:	a902      	add	r1, sp, #8
 8003fba:	4628      	mov	r0, r5
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	f000 f93b 	bl	8004238 <_svfiprintf_r>
 8003fc2:	1c43      	adds	r3, r0, #1
 8003fc4:	bfbc      	itt	lt
 8003fc6:	238b      	movlt	r3, #139	; 0x8b
 8003fc8:	602b      	strlt	r3, [r5, #0]
 8003fca:	2c00      	cmp	r4, #0
 8003fcc:	d0dd      	beq.n	8003f8a <sniprintf+0x16>
 8003fce:	9b02      	ldr	r3, [sp, #8]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	e7d9      	b.n	8003f8a <sniprintf+0x16>
 8003fd6:	bf00      	nop
 8003fd8:	2000005c 	.word	0x2000005c

08003fdc <memset>:
 8003fdc:	4402      	add	r2, r0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d100      	bne.n	8003fe6 <memset+0xa>
 8003fe4:	4770      	bx	lr
 8003fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fea:	e7f9      	b.n	8003fe0 <memset+0x4>

08003fec <_raise_r>:
 8003fec:	291f      	cmp	r1, #31
 8003fee:	b538      	push	{r3, r4, r5, lr}
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	460d      	mov	r5, r1
 8003ff4:	d904      	bls.n	8004000 <_raise_r+0x14>
 8003ff6:	2316      	movs	r3, #22
 8003ff8:	6003      	str	r3, [r0, #0]
 8003ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004002:	b112      	cbz	r2, 800400a <_raise_r+0x1e>
 8004004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004008:	b94b      	cbnz	r3, 800401e <_raise_r+0x32>
 800400a:	4620      	mov	r0, r4
 800400c:	f000 f830 	bl	8004070 <_getpid_r>
 8004010:	462a      	mov	r2, r5
 8004012:	4601      	mov	r1, r0
 8004014:	4620      	mov	r0, r4
 8004016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800401a:	f000 b817 	b.w	800404c <_kill_r>
 800401e:	2b01      	cmp	r3, #1
 8004020:	d00a      	beq.n	8004038 <_raise_r+0x4c>
 8004022:	1c59      	adds	r1, r3, #1
 8004024:	d103      	bne.n	800402e <_raise_r+0x42>
 8004026:	2316      	movs	r3, #22
 8004028:	6003      	str	r3, [r0, #0]
 800402a:	2001      	movs	r0, #1
 800402c:	e7e7      	b.n	8003ffe <_raise_r+0x12>
 800402e:	2400      	movs	r4, #0
 8004030:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004034:	4628      	mov	r0, r5
 8004036:	4798      	blx	r3
 8004038:	2000      	movs	r0, #0
 800403a:	e7e0      	b.n	8003ffe <_raise_r+0x12>

0800403c <raise>:
 800403c:	4b02      	ldr	r3, [pc, #8]	; (8004048 <raise+0xc>)
 800403e:	4601      	mov	r1, r0
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	f7ff bfd3 	b.w	8003fec <_raise_r>
 8004046:	bf00      	nop
 8004048:	2000005c 	.word	0x2000005c

0800404c <_kill_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	4d07      	ldr	r5, [pc, #28]	; (800406c <_kill_r+0x20>)
 8004050:	2300      	movs	r3, #0
 8004052:	4604      	mov	r4, r0
 8004054:	4608      	mov	r0, r1
 8004056:	4611      	mov	r1, r2
 8004058:	602b      	str	r3, [r5, #0]
 800405a:	f7fd fdff 	bl	8001c5c <_kill>
 800405e:	1c43      	adds	r3, r0, #1
 8004060:	d102      	bne.n	8004068 <_kill_r+0x1c>
 8004062:	682b      	ldr	r3, [r5, #0]
 8004064:	b103      	cbz	r3, 8004068 <_kill_r+0x1c>
 8004066:	6023      	str	r3, [r4, #0]
 8004068:	bd38      	pop	{r3, r4, r5, pc}
 800406a:	bf00      	nop
 800406c:	20000848 	.word	0x20000848

08004070 <_getpid_r>:
 8004070:	f7fd bdf2 	b.w	8001c58 <_getpid>

08004074 <_sbrk_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4d06      	ldr	r5, [pc, #24]	; (8004090 <_sbrk_r+0x1c>)
 8004078:	2300      	movs	r3, #0
 800407a:	4604      	mov	r4, r0
 800407c:	4608      	mov	r0, r1
 800407e:	602b      	str	r3, [r5, #0]
 8004080:	f7fd fdfa 	bl	8001c78 <_sbrk>
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d102      	bne.n	800408e <_sbrk_r+0x1a>
 8004088:	682b      	ldr	r3, [r5, #0]
 800408a:	b103      	cbz	r3, 800408e <_sbrk_r+0x1a>
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	20000848 	.word	0x20000848

08004094 <__errno>:
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <__errno+0x8>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	2000005c 	.word	0x2000005c

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4d0d      	ldr	r5, [pc, #52]	; (80040d8 <__libc_init_array+0x38>)
 80040a4:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a6:	1b64      	subs	r4, r4, r5
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	2600      	movs	r6, #0
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	4d0b      	ldr	r5, [pc, #44]	; (80040e0 <__libc_init_array+0x40>)
 80040b2:	4c0c      	ldr	r4, [pc, #48]	; (80040e4 <__libc_init_array+0x44>)
 80040b4:	f000 fbae 	bl	8004814 <_init>
 80040b8:	1b64      	subs	r4, r4, r5
 80040ba:	10a4      	asrs	r4, r4, #2
 80040bc:	2600      	movs	r6, #0
 80040be:	42a6      	cmp	r6, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c8:	4798      	blx	r3
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d2:	4798      	blx	r3
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	08004c70 	.word	0x08004c70
 80040dc:	08004c70 	.word	0x08004c70
 80040e0:	08004c70 	.word	0x08004c70
 80040e4:	08004c74 	.word	0x08004c74

080040e8 <__retarget_lock_acquire_recursive>:
 80040e8:	4770      	bx	lr

080040ea <__retarget_lock_release_recursive>:
 80040ea:	4770      	bx	lr

080040ec <_free_r>:
 80040ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ee:	2900      	cmp	r1, #0
 80040f0:	d044      	beq.n	800417c <_free_r+0x90>
 80040f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040f6:	9001      	str	r0, [sp, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f1a1 0404 	sub.w	r4, r1, #4
 80040fe:	bfb8      	it	lt
 8004100:	18e4      	addlt	r4, r4, r3
 8004102:	f7ff ff2b 	bl	8003f5c <__malloc_lock>
 8004106:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <_free_r+0x94>)
 8004108:	9801      	ldr	r0, [sp, #4]
 800410a:	6813      	ldr	r3, [r2, #0]
 800410c:	b933      	cbnz	r3, 800411c <_free_r+0x30>
 800410e:	6063      	str	r3, [r4, #4]
 8004110:	6014      	str	r4, [r2, #0]
 8004112:	b003      	add	sp, #12
 8004114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004118:	f7ff bf26 	b.w	8003f68 <__malloc_unlock>
 800411c:	42a3      	cmp	r3, r4
 800411e:	d908      	bls.n	8004132 <_free_r+0x46>
 8004120:	6825      	ldr	r5, [r4, #0]
 8004122:	1961      	adds	r1, r4, r5
 8004124:	428b      	cmp	r3, r1
 8004126:	bf01      	itttt	eq
 8004128:	6819      	ldreq	r1, [r3, #0]
 800412a:	685b      	ldreq	r3, [r3, #4]
 800412c:	1949      	addeq	r1, r1, r5
 800412e:	6021      	streq	r1, [r4, #0]
 8004130:	e7ed      	b.n	800410e <_free_r+0x22>
 8004132:	461a      	mov	r2, r3
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	b10b      	cbz	r3, 800413c <_free_r+0x50>
 8004138:	42a3      	cmp	r3, r4
 800413a:	d9fa      	bls.n	8004132 <_free_r+0x46>
 800413c:	6811      	ldr	r1, [r2, #0]
 800413e:	1855      	adds	r5, r2, r1
 8004140:	42a5      	cmp	r5, r4
 8004142:	d10b      	bne.n	800415c <_free_r+0x70>
 8004144:	6824      	ldr	r4, [r4, #0]
 8004146:	4421      	add	r1, r4
 8004148:	1854      	adds	r4, r2, r1
 800414a:	42a3      	cmp	r3, r4
 800414c:	6011      	str	r1, [r2, #0]
 800414e:	d1e0      	bne.n	8004112 <_free_r+0x26>
 8004150:	681c      	ldr	r4, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	6053      	str	r3, [r2, #4]
 8004156:	440c      	add	r4, r1
 8004158:	6014      	str	r4, [r2, #0]
 800415a:	e7da      	b.n	8004112 <_free_r+0x26>
 800415c:	d902      	bls.n	8004164 <_free_r+0x78>
 800415e:	230c      	movs	r3, #12
 8004160:	6003      	str	r3, [r0, #0]
 8004162:	e7d6      	b.n	8004112 <_free_r+0x26>
 8004164:	6825      	ldr	r5, [r4, #0]
 8004166:	1961      	adds	r1, r4, r5
 8004168:	428b      	cmp	r3, r1
 800416a:	bf04      	itt	eq
 800416c:	6819      	ldreq	r1, [r3, #0]
 800416e:	685b      	ldreq	r3, [r3, #4]
 8004170:	6063      	str	r3, [r4, #4]
 8004172:	bf04      	itt	eq
 8004174:	1949      	addeq	r1, r1, r5
 8004176:	6021      	streq	r1, [r4, #0]
 8004178:	6054      	str	r4, [r2, #4]
 800417a:	e7ca      	b.n	8004112 <_free_r+0x26>
 800417c:	b003      	add	sp, #12
 800417e:	bd30      	pop	{r4, r5, pc}
 8004180:	20000708 	.word	0x20000708

08004184 <__ssputs_r>:
 8004184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004188:	688e      	ldr	r6, [r1, #8]
 800418a:	461f      	mov	r7, r3
 800418c:	42be      	cmp	r6, r7
 800418e:	680b      	ldr	r3, [r1, #0]
 8004190:	4682      	mov	sl, r0
 8004192:	460c      	mov	r4, r1
 8004194:	4690      	mov	r8, r2
 8004196:	d82c      	bhi.n	80041f2 <__ssputs_r+0x6e>
 8004198:	898a      	ldrh	r2, [r1, #12]
 800419a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800419e:	d026      	beq.n	80041ee <__ssputs_r+0x6a>
 80041a0:	6965      	ldr	r5, [r4, #20]
 80041a2:	6909      	ldr	r1, [r1, #16]
 80041a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041a8:	eba3 0901 	sub.w	r9, r3, r1
 80041ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041b0:	1c7b      	adds	r3, r7, #1
 80041b2:	444b      	add	r3, r9
 80041b4:	106d      	asrs	r5, r5, #1
 80041b6:	429d      	cmp	r5, r3
 80041b8:	bf38      	it	cc
 80041ba:	461d      	movcc	r5, r3
 80041bc:	0553      	lsls	r3, r2, #21
 80041be:	d527      	bpl.n	8004210 <__ssputs_r+0x8c>
 80041c0:	4629      	mov	r1, r5
 80041c2:	f7ff fe4b 	bl	8003e5c <_malloc_r>
 80041c6:	4606      	mov	r6, r0
 80041c8:	b360      	cbz	r0, 8004224 <__ssputs_r+0xa0>
 80041ca:	6921      	ldr	r1, [r4, #16]
 80041cc:	464a      	mov	r2, r9
 80041ce:	f000 fadb 	bl	8004788 <memcpy>
 80041d2:	89a3      	ldrh	r3, [r4, #12]
 80041d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041dc:	81a3      	strh	r3, [r4, #12]
 80041de:	6126      	str	r6, [r4, #16]
 80041e0:	6165      	str	r5, [r4, #20]
 80041e2:	444e      	add	r6, r9
 80041e4:	eba5 0509 	sub.w	r5, r5, r9
 80041e8:	6026      	str	r6, [r4, #0]
 80041ea:	60a5      	str	r5, [r4, #8]
 80041ec:	463e      	mov	r6, r7
 80041ee:	42be      	cmp	r6, r7
 80041f0:	d900      	bls.n	80041f4 <__ssputs_r+0x70>
 80041f2:	463e      	mov	r6, r7
 80041f4:	6820      	ldr	r0, [r4, #0]
 80041f6:	4632      	mov	r2, r6
 80041f8:	4641      	mov	r1, r8
 80041fa:	f000 faab 	bl	8004754 <memmove>
 80041fe:	68a3      	ldr	r3, [r4, #8]
 8004200:	1b9b      	subs	r3, r3, r6
 8004202:	60a3      	str	r3, [r4, #8]
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	4433      	add	r3, r6
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	2000      	movs	r0, #0
 800420c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004210:	462a      	mov	r2, r5
 8004212:	f000 fac7 	bl	80047a4 <_realloc_r>
 8004216:	4606      	mov	r6, r0
 8004218:	2800      	cmp	r0, #0
 800421a:	d1e0      	bne.n	80041de <__ssputs_r+0x5a>
 800421c:	6921      	ldr	r1, [r4, #16]
 800421e:	4650      	mov	r0, sl
 8004220:	f7ff ff64 	bl	80040ec <_free_r>
 8004224:	230c      	movs	r3, #12
 8004226:	f8ca 3000 	str.w	r3, [sl]
 800422a:	89a3      	ldrh	r3, [r4, #12]
 800422c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004230:	81a3      	strh	r3, [r4, #12]
 8004232:	f04f 30ff 	mov.w	r0, #4294967295
 8004236:	e7e9      	b.n	800420c <__ssputs_r+0x88>

08004238 <_svfiprintf_r>:
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	4698      	mov	r8, r3
 800423e:	898b      	ldrh	r3, [r1, #12]
 8004240:	061b      	lsls	r3, r3, #24
 8004242:	b09d      	sub	sp, #116	; 0x74
 8004244:	4607      	mov	r7, r0
 8004246:	460d      	mov	r5, r1
 8004248:	4614      	mov	r4, r2
 800424a:	d50e      	bpl.n	800426a <_svfiprintf_r+0x32>
 800424c:	690b      	ldr	r3, [r1, #16]
 800424e:	b963      	cbnz	r3, 800426a <_svfiprintf_r+0x32>
 8004250:	2140      	movs	r1, #64	; 0x40
 8004252:	f7ff fe03 	bl	8003e5c <_malloc_r>
 8004256:	6028      	str	r0, [r5, #0]
 8004258:	6128      	str	r0, [r5, #16]
 800425a:	b920      	cbnz	r0, 8004266 <_svfiprintf_r+0x2e>
 800425c:	230c      	movs	r3, #12
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	e0d0      	b.n	8004408 <_svfiprintf_r+0x1d0>
 8004266:	2340      	movs	r3, #64	; 0x40
 8004268:	616b      	str	r3, [r5, #20]
 800426a:	2300      	movs	r3, #0
 800426c:	9309      	str	r3, [sp, #36]	; 0x24
 800426e:	2320      	movs	r3, #32
 8004270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004274:	f8cd 800c 	str.w	r8, [sp, #12]
 8004278:	2330      	movs	r3, #48	; 0x30
 800427a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004420 <_svfiprintf_r+0x1e8>
 800427e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004282:	f04f 0901 	mov.w	r9, #1
 8004286:	4623      	mov	r3, r4
 8004288:	469a      	mov	sl, r3
 800428a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800428e:	b10a      	cbz	r2, 8004294 <_svfiprintf_r+0x5c>
 8004290:	2a25      	cmp	r2, #37	; 0x25
 8004292:	d1f9      	bne.n	8004288 <_svfiprintf_r+0x50>
 8004294:	ebba 0b04 	subs.w	fp, sl, r4
 8004298:	d00b      	beq.n	80042b2 <_svfiprintf_r+0x7a>
 800429a:	465b      	mov	r3, fp
 800429c:	4622      	mov	r2, r4
 800429e:	4629      	mov	r1, r5
 80042a0:	4638      	mov	r0, r7
 80042a2:	f7ff ff6f 	bl	8004184 <__ssputs_r>
 80042a6:	3001      	adds	r0, #1
 80042a8:	f000 80a9 	beq.w	80043fe <_svfiprintf_r+0x1c6>
 80042ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042ae:	445a      	add	r2, fp
 80042b0:	9209      	str	r2, [sp, #36]	; 0x24
 80042b2:	f89a 3000 	ldrb.w	r3, [sl]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80a1 	beq.w	80043fe <_svfiprintf_r+0x1c6>
 80042bc:	2300      	movs	r3, #0
 80042be:	f04f 32ff 	mov.w	r2, #4294967295
 80042c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042c6:	f10a 0a01 	add.w	sl, sl, #1
 80042ca:	9304      	str	r3, [sp, #16]
 80042cc:	9307      	str	r3, [sp, #28]
 80042ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042d2:	931a      	str	r3, [sp, #104]	; 0x68
 80042d4:	4654      	mov	r4, sl
 80042d6:	2205      	movs	r2, #5
 80042d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042dc:	4850      	ldr	r0, [pc, #320]	; (8004420 <_svfiprintf_r+0x1e8>)
 80042de:	f7fb ff7f 	bl	80001e0 <memchr>
 80042e2:	9a04      	ldr	r2, [sp, #16]
 80042e4:	b9d8      	cbnz	r0, 800431e <_svfiprintf_r+0xe6>
 80042e6:	06d0      	lsls	r0, r2, #27
 80042e8:	bf44      	itt	mi
 80042ea:	2320      	movmi	r3, #32
 80042ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042f0:	0711      	lsls	r1, r2, #28
 80042f2:	bf44      	itt	mi
 80042f4:	232b      	movmi	r3, #43	; 0x2b
 80042f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042fa:	f89a 3000 	ldrb.w	r3, [sl]
 80042fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004300:	d015      	beq.n	800432e <_svfiprintf_r+0xf6>
 8004302:	9a07      	ldr	r2, [sp, #28]
 8004304:	4654      	mov	r4, sl
 8004306:	2000      	movs	r0, #0
 8004308:	f04f 0c0a 	mov.w	ip, #10
 800430c:	4621      	mov	r1, r4
 800430e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004312:	3b30      	subs	r3, #48	; 0x30
 8004314:	2b09      	cmp	r3, #9
 8004316:	d94d      	bls.n	80043b4 <_svfiprintf_r+0x17c>
 8004318:	b1b0      	cbz	r0, 8004348 <_svfiprintf_r+0x110>
 800431a:	9207      	str	r2, [sp, #28]
 800431c:	e014      	b.n	8004348 <_svfiprintf_r+0x110>
 800431e:	eba0 0308 	sub.w	r3, r0, r8
 8004322:	fa09 f303 	lsl.w	r3, r9, r3
 8004326:	4313      	orrs	r3, r2
 8004328:	9304      	str	r3, [sp, #16]
 800432a:	46a2      	mov	sl, r4
 800432c:	e7d2      	b.n	80042d4 <_svfiprintf_r+0x9c>
 800432e:	9b03      	ldr	r3, [sp, #12]
 8004330:	1d19      	adds	r1, r3, #4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	9103      	str	r1, [sp, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	bfbb      	ittet	lt
 800433a:	425b      	neglt	r3, r3
 800433c:	f042 0202 	orrlt.w	r2, r2, #2
 8004340:	9307      	strge	r3, [sp, #28]
 8004342:	9307      	strlt	r3, [sp, #28]
 8004344:	bfb8      	it	lt
 8004346:	9204      	strlt	r2, [sp, #16]
 8004348:	7823      	ldrb	r3, [r4, #0]
 800434a:	2b2e      	cmp	r3, #46	; 0x2e
 800434c:	d10c      	bne.n	8004368 <_svfiprintf_r+0x130>
 800434e:	7863      	ldrb	r3, [r4, #1]
 8004350:	2b2a      	cmp	r3, #42	; 0x2a
 8004352:	d134      	bne.n	80043be <_svfiprintf_r+0x186>
 8004354:	9b03      	ldr	r3, [sp, #12]
 8004356:	1d1a      	adds	r2, r3, #4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	9203      	str	r2, [sp, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	bfb8      	it	lt
 8004360:	f04f 33ff 	movlt.w	r3, #4294967295
 8004364:	3402      	adds	r4, #2
 8004366:	9305      	str	r3, [sp, #20]
 8004368:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004430 <_svfiprintf_r+0x1f8>
 800436c:	7821      	ldrb	r1, [r4, #0]
 800436e:	2203      	movs	r2, #3
 8004370:	4650      	mov	r0, sl
 8004372:	f7fb ff35 	bl	80001e0 <memchr>
 8004376:	b138      	cbz	r0, 8004388 <_svfiprintf_r+0x150>
 8004378:	9b04      	ldr	r3, [sp, #16]
 800437a:	eba0 000a 	sub.w	r0, r0, sl
 800437e:	2240      	movs	r2, #64	; 0x40
 8004380:	4082      	lsls	r2, r0
 8004382:	4313      	orrs	r3, r2
 8004384:	3401      	adds	r4, #1
 8004386:	9304      	str	r3, [sp, #16]
 8004388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800438c:	4825      	ldr	r0, [pc, #148]	; (8004424 <_svfiprintf_r+0x1ec>)
 800438e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004392:	2206      	movs	r2, #6
 8004394:	f7fb ff24 	bl	80001e0 <memchr>
 8004398:	2800      	cmp	r0, #0
 800439a:	d038      	beq.n	800440e <_svfiprintf_r+0x1d6>
 800439c:	4b22      	ldr	r3, [pc, #136]	; (8004428 <_svfiprintf_r+0x1f0>)
 800439e:	bb1b      	cbnz	r3, 80043e8 <_svfiprintf_r+0x1b0>
 80043a0:	9b03      	ldr	r3, [sp, #12]
 80043a2:	3307      	adds	r3, #7
 80043a4:	f023 0307 	bic.w	r3, r3, #7
 80043a8:	3308      	adds	r3, #8
 80043aa:	9303      	str	r3, [sp, #12]
 80043ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ae:	4433      	add	r3, r6
 80043b0:	9309      	str	r3, [sp, #36]	; 0x24
 80043b2:	e768      	b.n	8004286 <_svfiprintf_r+0x4e>
 80043b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80043b8:	460c      	mov	r4, r1
 80043ba:	2001      	movs	r0, #1
 80043bc:	e7a6      	b.n	800430c <_svfiprintf_r+0xd4>
 80043be:	2300      	movs	r3, #0
 80043c0:	3401      	adds	r4, #1
 80043c2:	9305      	str	r3, [sp, #20]
 80043c4:	4619      	mov	r1, r3
 80043c6:	f04f 0c0a 	mov.w	ip, #10
 80043ca:	4620      	mov	r0, r4
 80043cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043d0:	3a30      	subs	r2, #48	; 0x30
 80043d2:	2a09      	cmp	r2, #9
 80043d4:	d903      	bls.n	80043de <_svfiprintf_r+0x1a6>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0c6      	beq.n	8004368 <_svfiprintf_r+0x130>
 80043da:	9105      	str	r1, [sp, #20]
 80043dc:	e7c4      	b.n	8004368 <_svfiprintf_r+0x130>
 80043de:	fb0c 2101 	mla	r1, ip, r1, r2
 80043e2:	4604      	mov	r4, r0
 80043e4:	2301      	movs	r3, #1
 80043e6:	e7f0      	b.n	80043ca <_svfiprintf_r+0x192>
 80043e8:	ab03      	add	r3, sp, #12
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	462a      	mov	r2, r5
 80043ee:	4b0f      	ldr	r3, [pc, #60]	; (800442c <_svfiprintf_r+0x1f4>)
 80043f0:	a904      	add	r1, sp, #16
 80043f2:	4638      	mov	r0, r7
 80043f4:	f3af 8000 	nop.w
 80043f8:	1c42      	adds	r2, r0, #1
 80043fa:	4606      	mov	r6, r0
 80043fc:	d1d6      	bne.n	80043ac <_svfiprintf_r+0x174>
 80043fe:	89ab      	ldrh	r3, [r5, #12]
 8004400:	065b      	lsls	r3, r3, #25
 8004402:	f53f af2d 	bmi.w	8004260 <_svfiprintf_r+0x28>
 8004406:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004408:	b01d      	add	sp, #116	; 0x74
 800440a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440e:	ab03      	add	r3, sp, #12
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	462a      	mov	r2, r5
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <_svfiprintf_r+0x1f4>)
 8004416:	a904      	add	r1, sp, #16
 8004418:	4638      	mov	r0, r7
 800441a:	f000 f879 	bl	8004510 <_printf_i>
 800441e:	e7eb      	b.n	80043f8 <_svfiprintf_r+0x1c0>
 8004420:	08004c33 	.word	0x08004c33
 8004424:	08004c3d 	.word	0x08004c3d
 8004428:	00000000 	.word	0x00000000
 800442c:	08004185 	.word	0x08004185
 8004430:	08004c39 	.word	0x08004c39

08004434 <_printf_common>:
 8004434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004438:	4616      	mov	r6, r2
 800443a:	4699      	mov	r9, r3
 800443c:	688a      	ldr	r2, [r1, #8]
 800443e:	690b      	ldr	r3, [r1, #16]
 8004440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004444:	4293      	cmp	r3, r2
 8004446:	bfb8      	it	lt
 8004448:	4613      	movlt	r3, r2
 800444a:	6033      	str	r3, [r6, #0]
 800444c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004450:	4607      	mov	r7, r0
 8004452:	460c      	mov	r4, r1
 8004454:	b10a      	cbz	r2, 800445a <_printf_common+0x26>
 8004456:	3301      	adds	r3, #1
 8004458:	6033      	str	r3, [r6, #0]
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	0699      	lsls	r1, r3, #26
 800445e:	bf42      	ittt	mi
 8004460:	6833      	ldrmi	r3, [r6, #0]
 8004462:	3302      	addmi	r3, #2
 8004464:	6033      	strmi	r3, [r6, #0]
 8004466:	6825      	ldr	r5, [r4, #0]
 8004468:	f015 0506 	ands.w	r5, r5, #6
 800446c:	d106      	bne.n	800447c <_printf_common+0x48>
 800446e:	f104 0a19 	add.w	sl, r4, #25
 8004472:	68e3      	ldr	r3, [r4, #12]
 8004474:	6832      	ldr	r2, [r6, #0]
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	42ab      	cmp	r3, r5
 800447a:	dc26      	bgt.n	80044ca <_printf_common+0x96>
 800447c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004480:	1e13      	subs	r3, r2, #0
 8004482:	6822      	ldr	r2, [r4, #0]
 8004484:	bf18      	it	ne
 8004486:	2301      	movne	r3, #1
 8004488:	0692      	lsls	r2, r2, #26
 800448a:	d42b      	bmi.n	80044e4 <_printf_common+0xb0>
 800448c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004490:	4649      	mov	r1, r9
 8004492:	4638      	mov	r0, r7
 8004494:	47c0      	blx	r8
 8004496:	3001      	adds	r0, #1
 8004498:	d01e      	beq.n	80044d8 <_printf_common+0xa4>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	6922      	ldr	r2, [r4, #16]
 800449e:	f003 0306 	and.w	r3, r3, #6
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	bf02      	ittt	eq
 80044a6:	68e5      	ldreq	r5, [r4, #12]
 80044a8:	6833      	ldreq	r3, [r6, #0]
 80044aa:	1aed      	subeq	r5, r5, r3
 80044ac:	68a3      	ldr	r3, [r4, #8]
 80044ae:	bf0c      	ite	eq
 80044b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044b4:	2500      	movne	r5, #0
 80044b6:	4293      	cmp	r3, r2
 80044b8:	bfc4      	itt	gt
 80044ba:	1a9b      	subgt	r3, r3, r2
 80044bc:	18ed      	addgt	r5, r5, r3
 80044be:	2600      	movs	r6, #0
 80044c0:	341a      	adds	r4, #26
 80044c2:	42b5      	cmp	r5, r6
 80044c4:	d11a      	bne.n	80044fc <_printf_common+0xc8>
 80044c6:	2000      	movs	r0, #0
 80044c8:	e008      	b.n	80044dc <_printf_common+0xa8>
 80044ca:	2301      	movs	r3, #1
 80044cc:	4652      	mov	r2, sl
 80044ce:	4649      	mov	r1, r9
 80044d0:	4638      	mov	r0, r7
 80044d2:	47c0      	blx	r8
 80044d4:	3001      	adds	r0, #1
 80044d6:	d103      	bne.n	80044e0 <_printf_common+0xac>
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e0:	3501      	adds	r5, #1
 80044e2:	e7c6      	b.n	8004472 <_printf_common+0x3e>
 80044e4:	18e1      	adds	r1, r4, r3
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	2030      	movs	r0, #48	; 0x30
 80044ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044ee:	4422      	add	r2, r4
 80044f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044f8:	3302      	adds	r3, #2
 80044fa:	e7c7      	b.n	800448c <_printf_common+0x58>
 80044fc:	2301      	movs	r3, #1
 80044fe:	4622      	mov	r2, r4
 8004500:	4649      	mov	r1, r9
 8004502:	4638      	mov	r0, r7
 8004504:	47c0      	blx	r8
 8004506:	3001      	adds	r0, #1
 8004508:	d0e6      	beq.n	80044d8 <_printf_common+0xa4>
 800450a:	3601      	adds	r6, #1
 800450c:	e7d9      	b.n	80044c2 <_printf_common+0x8e>
	...

08004510 <_printf_i>:
 8004510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004514:	7e0f      	ldrb	r7, [r1, #24]
 8004516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004518:	2f78      	cmp	r7, #120	; 0x78
 800451a:	4691      	mov	r9, r2
 800451c:	4680      	mov	r8, r0
 800451e:	460c      	mov	r4, r1
 8004520:	469a      	mov	sl, r3
 8004522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004526:	d807      	bhi.n	8004538 <_printf_i+0x28>
 8004528:	2f62      	cmp	r7, #98	; 0x62
 800452a:	d80a      	bhi.n	8004542 <_printf_i+0x32>
 800452c:	2f00      	cmp	r7, #0
 800452e:	f000 80d4 	beq.w	80046da <_printf_i+0x1ca>
 8004532:	2f58      	cmp	r7, #88	; 0x58
 8004534:	f000 80c0 	beq.w	80046b8 <_printf_i+0x1a8>
 8004538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800453c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004540:	e03a      	b.n	80045b8 <_printf_i+0xa8>
 8004542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004546:	2b15      	cmp	r3, #21
 8004548:	d8f6      	bhi.n	8004538 <_printf_i+0x28>
 800454a:	a101      	add	r1, pc, #4	; (adr r1, 8004550 <_printf_i+0x40>)
 800454c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004550:	080045a9 	.word	0x080045a9
 8004554:	080045bd 	.word	0x080045bd
 8004558:	08004539 	.word	0x08004539
 800455c:	08004539 	.word	0x08004539
 8004560:	08004539 	.word	0x08004539
 8004564:	08004539 	.word	0x08004539
 8004568:	080045bd 	.word	0x080045bd
 800456c:	08004539 	.word	0x08004539
 8004570:	08004539 	.word	0x08004539
 8004574:	08004539 	.word	0x08004539
 8004578:	08004539 	.word	0x08004539
 800457c:	080046c1 	.word	0x080046c1
 8004580:	080045e9 	.word	0x080045e9
 8004584:	0800467b 	.word	0x0800467b
 8004588:	08004539 	.word	0x08004539
 800458c:	08004539 	.word	0x08004539
 8004590:	080046e3 	.word	0x080046e3
 8004594:	08004539 	.word	0x08004539
 8004598:	080045e9 	.word	0x080045e9
 800459c:	08004539 	.word	0x08004539
 80045a0:	08004539 	.word	0x08004539
 80045a4:	08004683 	.word	0x08004683
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	1d1a      	adds	r2, r3, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	602a      	str	r2, [r5, #0]
 80045b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045b8:	2301      	movs	r3, #1
 80045ba:	e09f      	b.n	80046fc <_printf_i+0x1ec>
 80045bc:	6820      	ldr	r0, [r4, #0]
 80045be:	682b      	ldr	r3, [r5, #0]
 80045c0:	0607      	lsls	r7, r0, #24
 80045c2:	f103 0104 	add.w	r1, r3, #4
 80045c6:	6029      	str	r1, [r5, #0]
 80045c8:	d501      	bpl.n	80045ce <_printf_i+0xbe>
 80045ca:	681e      	ldr	r6, [r3, #0]
 80045cc:	e003      	b.n	80045d6 <_printf_i+0xc6>
 80045ce:	0646      	lsls	r6, r0, #25
 80045d0:	d5fb      	bpl.n	80045ca <_printf_i+0xba>
 80045d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045d6:	2e00      	cmp	r6, #0
 80045d8:	da03      	bge.n	80045e2 <_printf_i+0xd2>
 80045da:	232d      	movs	r3, #45	; 0x2d
 80045dc:	4276      	negs	r6, r6
 80045de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e2:	485a      	ldr	r0, [pc, #360]	; (800474c <_printf_i+0x23c>)
 80045e4:	230a      	movs	r3, #10
 80045e6:	e012      	b.n	800460e <_printf_i+0xfe>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	6820      	ldr	r0, [r4, #0]
 80045ec:	1d19      	adds	r1, r3, #4
 80045ee:	6029      	str	r1, [r5, #0]
 80045f0:	0605      	lsls	r5, r0, #24
 80045f2:	d501      	bpl.n	80045f8 <_printf_i+0xe8>
 80045f4:	681e      	ldr	r6, [r3, #0]
 80045f6:	e002      	b.n	80045fe <_printf_i+0xee>
 80045f8:	0641      	lsls	r1, r0, #25
 80045fa:	d5fb      	bpl.n	80045f4 <_printf_i+0xe4>
 80045fc:	881e      	ldrh	r6, [r3, #0]
 80045fe:	4853      	ldr	r0, [pc, #332]	; (800474c <_printf_i+0x23c>)
 8004600:	2f6f      	cmp	r7, #111	; 0x6f
 8004602:	bf0c      	ite	eq
 8004604:	2308      	moveq	r3, #8
 8004606:	230a      	movne	r3, #10
 8004608:	2100      	movs	r1, #0
 800460a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800460e:	6865      	ldr	r5, [r4, #4]
 8004610:	60a5      	str	r5, [r4, #8]
 8004612:	2d00      	cmp	r5, #0
 8004614:	bfa2      	ittt	ge
 8004616:	6821      	ldrge	r1, [r4, #0]
 8004618:	f021 0104 	bicge.w	r1, r1, #4
 800461c:	6021      	strge	r1, [r4, #0]
 800461e:	b90e      	cbnz	r6, 8004624 <_printf_i+0x114>
 8004620:	2d00      	cmp	r5, #0
 8004622:	d04b      	beq.n	80046bc <_printf_i+0x1ac>
 8004624:	4615      	mov	r5, r2
 8004626:	fbb6 f1f3 	udiv	r1, r6, r3
 800462a:	fb03 6711 	mls	r7, r3, r1, r6
 800462e:	5dc7      	ldrb	r7, [r0, r7]
 8004630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004634:	4637      	mov	r7, r6
 8004636:	42bb      	cmp	r3, r7
 8004638:	460e      	mov	r6, r1
 800463a:	d9f4      	bls.n	8004626 <_printf_i+0x116>
 800463c:	2b08      	cmp	r3, #8
 800463e:	d10b      	bne.n	8004658 <_printf_i+0x148>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	07de      	lsls	r6, r3, #31
 8004644:	d508      	bpl.n	8004658 <_printf_i+0x148>
 8004646:	6923      	ldr	r3, [r4, #16]
 8004648:	6861      	ldr	r1, [r4, #4]
 800464a:	4299      	cmp	r1, r3
 800464c:	bfde      	ittt	le
 800464e:	2330      	movle	r3, #48	; 0x30
 8004650:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004654:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004658:	1b52      	subs	r2, r2, r5
 800465a:	6122      	str	r2, [r4, #16]
 800465c:	f8cd a000 	str.w	sl, [sp]
 8004660:	464b      	mov	r3, r9
 8004662:	aa03      	add	r2, sp, #12
 8004664:	4621      	mov	r1, r4
 8004666:	4640      	mov	r0, r8
 8004668:	f7ff fee4 	bl	8004434 <_printf_common>
 800466c:	3001      	adds	r0, #1
 800466e:	d14a      	bne.n	8004706 <_printf_i+0x1f6>
 8004670:	f04f 30ff 	mov.w	r0, #4294967295
 8004674:	b004      	add	sp, #16
 8004676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	f043 0320 	orr.w	r3, r3, #32
 8004680:	6023      	str	r3, [r4, #0]
 8004682:	4833      	ldr	r0, [pc, #204]	; (8004750 <_printf_i+0x240>)
 8004684:	2778      	movs	r7, #120	; 0x78
 8004686:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	6829      	ldr	r1, [r5, #0]
 800468e:	061f      	lsls	r7, r3, #24
 8004690:	f851 6b04 	ldr.w	r6, [r1], #4
 8004694:	d402      	bmi.n	800469c <_printf_i+0x18c>
 8004696:	065f      	lsls	r7, r3, #25
 8004698:	bf48      	it	mi
 800469a:	b2b6      	uxthmi	r6, r6
 800469c:	07df      	lsls	r7, r3, #31
 800469e:	bf48      	it	mi
 80046a0:	f043 0320 	orrmi.w	r3, r3, #32
 80046a4:	6029      	str	r1, [r5, #0]
 80046a6:	bf48      	it	mi
 80046a8:	6023      	strmi	r3, [r4, #0]
 80046aa:	b91e      	cbnz	r6, 80046b4 <_printf_i+0x1a4>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	f023 0320 	bic.w	r3, r3, #32
 80046b2:	6023      	str	r3, [r4, #0]
 80046b4:	2310      	movs	r3, #16
 80046b6:	e7a7      	b.n	8004608 <_printf_i+0xf8>
 80046b8:	4824      	ldr	r0, [pc, #144]	; (800474c <_printf_i+0x23c>)
 80046ba:	e7e4      	b.n	8004686 <_printf_i+0x176>
 80046bc:	4615      	mov	r5, r2
 80046be:	e7bd      	b.n	800463c <_printf_i+0x12c>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	6826      	ldr	r6, [r4, #0]
 80046c4:	6961      	ldr	r1, [r4, #20]
 80046c6:	1d18      	adds	r0, r3, #4
 80046c8:	6028      	str	r0, [r5, #0]
 80046ca:	0635      	lsls	r5, r6, #24
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	d501      	bpl.n	80046d4 <_printf_i+0x1c4>
 80046d0:	6019      	str	r1, [r3, #0]
 80046d2:	e002      	b.n	80046da <_printf_i+0x1ca>
 80046d4:	0670      	lsls	r0, r6, #25
 80046d6:	d5fb      	bpl.n	80046d0 <_printf_i+0x1c0>
 80046d8:	8019      	strh	r1, [r3, #0]
 80046da:	2300      	movs	r3, #0
 80046dc:	6123      	str	r3, [r4, #16]
 80046de:	4615      	mov	r5, r2
 80046e0:	e7bc      	b.n	800465c <_printf_i+0x14c>
 80046e2:	682b      	ldr	r3, [r5, #0]
 80046e4:	1d1a      	adds	r2, r3, #4
 80046e6:	602a      	str	r2, [r5, #0]
 80046e8:	681d      	ldr	r5, [r3, #0]
 80046ea:	6862      	ldr	r2, [r4, #4]
 80046ec:	2100      	movs	r1, #0
 80046ee:	4628      	mov	r0, r5
 80046f0:	f7fb fd76 	bl	80001e0 <memchr>
 80046f4:	b108      	cbz	r0, 80046fa <_printf_i+0x1ea>
 80046f6:	1b40      	subs	r0, r0, r5
 80046f8:	6060      	str	r0, [r4, #4]
 80046fa:	6863      	ldr	r3, [r4, #4]
 80046fc:	6123      	str	r3, [r4, #16]
 80046fe:	2300      	movs	r3, #0
 8004700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004704:	e7aa      	b.n	800465c <_printf_i+0x14c>
 8004706:	6923      	ldr	r3, [r4, #16]
 8004708:	462a      	mov	r2, r5
 800470a:	4649      	mov	r1, r9
 800470c:	4640      	mov	r0, r8
 800470e:	47d0      	blx	sl
 8004710:	3001      	adds	r0, #1
 8004712:	d0ad      	beq.n	8004670 <_printf_i+0x160>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	079b      	lsls	r3, r3, #30
 8004718:	d413      	bmi.n	8004742 <_printf_i+0x232>
 800471a:	68e0      	ldr	r0, [r4, #12]
 800471c:	9b03      	ldr	r3, [sp, #12]
 800471e:	4298      	cmp	r0, r3
 8004720:	bfb8      	it	lt
 8004722:	4618      	movlt	r0, r3
 8004724:	e7a6      	b.n	8004674 <_printf_i+0x164>
 8004726:	2301      	movs	r3, #1
 8004728:	4632      	mov	r2, r6
 800472a:	4649      	mov	r1, r9
 800472c:	4640      	mov	r0, r8
 800472e:	47d0      	blx	sl
 8004730:	3001      	adds	r0, #1
 8004732:	d09d      	beq.n	8004670 <_printf_i+0x160>
 8004734:	3501      	adds	r5, #1
 8004736:	68e3      	ldr	r3, [r4, #12]
 8004738:	9903      	ldr	r1, [sp, #12]
 800473a:	1a5b      	subs	r3, r3, r1
 800473c:	42ab      	cmp	r3, r5
 800473e:	dcf2      	bgt.n	8004726 <_printf_i+0x216>
 8004740:	e7eb      	b.n	800471a <_printf_i+0x20a>
 8004742:	2500      	movs	r5, #0
 8004744:	f104 0619 	add.w	r6, r4, #25
 8004748:	e7f5      	b.n	8004736 <_printf_i+0x226>
 800474a:	bf00      	nop
 800474c:	08004c44 	.word	0x08004c44
 8004750:	08004c55 	.word	0x08004c55

08004754 <memmove>:
 8004754:	4288      	cmp	r0, r1
 8004756:	b510      	push	{r4, lr}
 8004758:	eb01 0402 	add.w	r4, r1, r2
 800475c:	d902      	bls.n	8004764 <memmove+0x10>
 800475e:	4284      	cmp	r4, r0
 8004760:	4623      	mov	r3, r4
 8004762:	d807      	bhi.n	8004774 <memmove+0x20>
 8004764:	1e43      	subs	r3, r0, #1
 8004766:	42a1      	cmp	r1, r4
 8004768:	d008      	beq.n	800477c <memmove+0x28>
 800476a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800476e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004772:	e7f8      	b.n	8004766 <memmove+0x12>
 8004774:	4402      	add	r2, r0
 8004776:	4601      	mov	r1, r0
 8004778:	428a      	cmp	r2, r1
 800477a:	d100      	bne.n	800477e <memmove+0x2a>
 800477c:	bd10      	pop	{r4, pc}
 800477e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004786:	e7f7      	b.n	8004778 <memmove+0x24>

08004788 <memcpy>:
 8004788:	440a      	add	r2, r1
 800478a:	4291      	cmp	r1, r2
 800478c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004790:	d100      	bne.n	8004794 <memcpy+0xc>
 8004792:	4770      	bx	lr
 8004794:	b510      	push	{r4, lr}
 8004796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800479e:	4291      	cmp	r1, r2
 80047a0:	d1f9      	bne.n	8004796 <memcpy+0xe>
 80047a2:	bd10      	pop	{r4, pc}

080047a4 <_realloc_r>:
 80047a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a8:	4680      	mov	r8, r0
 80047aa:	4614      	mov	r4, r2
 80047ac:	460e      	mov	r6, r1
 80047ae:	b921      	cbnz	r1, 80047ba <_realloc_r+0x16>
 80047b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047b4:	4611      	mov	r1, r2
 80047b6:	f7ff bb51 	b.w	8003e5c <_malloc_r>
 80047ba:	b92a      	cbnz	r2, 80047c8 <_realloc_r+0x24>
 80047bc:	f7ff fc96 	bl	80040ec <_free_r>
 80047c0:	4625      	mov	r5, r4
 80047c2:	4628      	mov	r0, r5
 80047c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c8:	f000 f81b 	bl	8004802 <_malloc_usable_size_r>
 80047cc:	4284      	cmp	r4, r0
 80047ce:	4607      	mov	r7, r0
 80047d0:	d802      	bhi.n	80047d8 <_realloc_r+0x34>
 80047d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047d6:	d812      	bhi.n	80047fe <_realloc_r+0x5a>
 80047d8:	4621      	mov	r1, r4
 80047da:	4640      	mov	r0, r8
 80047dc:	f7ff fb3e 	bl	8003e5c <_malloc_r>
 80047e0:	4605      	mov	r5, r0
 80047e2:	2800      	cmp	r0, #0
 80047e4:	d0ed      	beq.n	80047c2 <_realloc_r+0x1e>
 80047e6:	42bc      	cmp	r4, r7
 80047e8:	4622      	mov	r2, r4
 80047ea:	4631      	mov	r1, r6
 80047ec:	bf28      	it	cs
 80047ee:	463a      	movcs	r2, r7
 80047f0:	f7ff ffca 	bl	8004788 <memcpy>
 80047f4:	4631      	mov	r1, r6
 80047f6:	4640      	mov	r0, r8
 80047f8:	f7ff fc78 	bl	80040ec <_free_r>
 80047fc:	e7e1      	b.n	80047c2 <_realloc_r+0x1e>
 80047fe:	4635      	mov	r5, r6
 8004800:	e7df      	b.n	80047c2 <_realloc_r+0x1e>

08004802 <_malloc_usable_size_r>:
 8004802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004806:	1f18      	subs	r0, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	bfbc      	itt	lt
 800480c:	580b      	ldrlt	r3, [r1, r0]
 800480e:	18c0      	addlt	r0, r0, r3
 8004810:	4770      	bx	lr
	...

08004814 <_init>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	bf00      	nop
 8004818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481a:	bc08      	pop	{r3}
 800481c:	469e      	mov	lr, r3
 800481e:	4770      	bx	lr

08004820 <_fini>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	bf00      	nop
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr
